// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package idrt52.idrt_stdterm_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tLibraryLoad_1
//import java.util.List;
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: IDRT_STDTERM Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.0.r101800
 * @status 
 */
public class IDRT_STDTERM implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (icd10year != null) {

				this.setProperty("icd10year", icd10year.toString());

			}

			if (csvDir != null) {

				this.setProperty("csvDir", csvDir.toString());

			}

			if (basedir != null) {

				this.setProperty("basedir", basedir.toString());

			}

			if (DBHost != null) {

				this.setProperty("DBHost", DBHost.toString());

			}

			if (DBInstance != null) {

				this.setProperty("DBInstance", DBInstance.toString());

			}

			if (DBPassword != null) {

				this.setProperty("DBPassword", DBPassword.toString());

			}

			if (DBPort != null) {

				this.setProperty("DBPort", DBPort.toString());

			}

			if (DBSchema != null) {

				this.setProperty("DBSchema", DBSchema.toString());

			}

			if (DBUsername != null) {

				this.setProperty("DBUsername", DBUsername.toString());

			}

			if (drgDir != null) {

				this.setProperty("drgDir", drgDir.toString());

			}

			if (icd10Dir != null) {

				this.setProperty("icd10Dir", icd10Dir.toString());

			}

			if (icd10Year != null) {

				this.setProperty("icd10Year", icd10Year.toString());

			}

			if (icdoDir != null) {

				this.setProperty("icdoDir", icdoDir.toString());

			}

			if (loincDir != null) {

				this.setProperty("loincDir", loincDir.toString());

			}

			if (meddraDir != null) {

				this.setProperty("meddraDir", meddraDir.toString());

			}

			if (opsDir != null) {

				this.setProperty("opsDir", opsDir.toString());

			}

			if (p21Dir != null) {

				this.setProperty("p21Dir", p21Dir.toString());

			}

			if (rootDir != null) {

				this.setProperty("rootDir", rootDir.toString());

			}

			if (tnmDir != null) {

				this.setProperty("tnmDir", tnmDir.toString());

			}

		}

		public String icd10year;

		public String getIcd10year() {
			return this.icd10year;
		}

		public String csvDir;

		public String getCsvDir() {
			return this.csvDir;
		}

		public String basedir;

		public String getBasedir() {
			return this.basedir;
		}

		public String DBHost;

		public String getDBHost() {
			return this.DBHost;
		}

		public String DBInstance;

		public String getDBInstance() {
			return this.DBInstance;
		}

		public java.lang.String DBPassword;

		public java.lang.String getDBPassword() {
			return this.DBPassword;
		}

		public String DBPort;

		public String getDBPort() {
			return this.DBPort;
		}

		public String DBSchema;

		public String getDBSchema() {
			return this.DBSchema;
		}

		public String DBUsername;

		public String getDBUsername() {
			return this.DBUsername;
		}

		public String drgDir;

		public String getDrgDir() {
			return this.drgDir;
		}

		public String icd10Dir;

		public String getIcd10Dir() {
			return this.icd10Dir;
		}

		public String icd10Year;

		public String getIcd10Year() {
			return this.icd10Year;
		}

		public String icdoDir;

		public String getIcdoDir() {
			return this.icdoDir;
		}

		public String loincDir;

		public String getLoincDir() {
			return this.loincDir;
		}

		public String meddraDir;

		public String getMeddraDir() {
			return this.meddraDir;
		}

		public String opsDir;

		public String getOpsDir() {
			return this.opsDir;
		}

		public String p21Dir;

		public String getP21Dir() {
			return this.p21Dir;
		}

		public String rootDir;

		public String getRootDir() {
			return this.rootDir;
		}

		public String tnmDir;

		public String getTnmDir() {
			return this.tnmDir;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IDRT_STDTERM";
	private final String projectName = "IDRT52";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IDRT_STDTERM.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IDRT_STDTERM.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tOracleConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_5", System.currentTimeMillis());

		status = "failure";

		tOracleRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_3", System.currentTimeMillis());

		status = "failure";

		tOracleRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_3", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tConvertType_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tConvertType_1", System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_11", System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_4", System.currentTimeMillis());

		status = "failure";

		tOracleRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXSLT_5", System.currentTimeMillis());

		status = "failure";

		tXSLT_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXSLT_4", System.currentTimeMillis());

		status = "failure";

		tXSLT_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_29", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_26", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_32", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_31", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_33", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_32", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_31", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_30", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_18", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_19", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_20", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_17", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_21", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_24", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_20", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_22", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_22_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_25", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_18", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_19", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_26", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_21", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_22", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_34", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_30", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_39_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_39", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_43_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_43", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_43_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_44_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_44", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_40_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_40", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_45_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_45", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_45_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_36_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_36", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_34", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_42_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_42", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_42_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_35", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_35_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_41_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_41", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_35", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_46_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_46", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_46_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_47_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_47", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_47_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_40_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_40", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_40_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_38_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_38", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_36_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_36", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_48_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_48", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_48_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_49_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_49", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_49_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_50_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_50", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_50_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_22_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_43_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_45_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_42_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_35_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_46_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_47_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row36_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_40_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row38_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_48_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row39_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_49_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row40_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_50_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_tUnite_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_34_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_20_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_21_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_22_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_25_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_26_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_34_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_43_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_45_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_42_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_35_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_46_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_47_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_40_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_48_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_49_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_50_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_tUnite_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());
				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ context.DBHost + ":" + context.DBPort + ":"
						+ context.DBInstance;
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String userName_tOracleConnection_1 = context.DBUsername;
				String password_tOracleConnection_1 = context.DBPassword;

				java.sql.Connection conn_tOracleConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					conn_tOracleConnection_1 = java.sql.DriverManager
							.getConnection(url_tOracleConnection_1,
									userName_tOracleConnection_1,
									password_tOracleConnection_1);
					globalMap.put("conn_tOracleConnection_1",
							conn_tOracleConnection_1);
				}
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tOracleConnection_1", context.DBHost);
				globalMap.put("port_" + "tOracleConnection_1", context.DBPort);
				globalMap.put("dbname_" + "tOracleConnection_1",
						context.DBInstance);

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1",
						context.DBSchema);
				globalMap.put("username_" + "tOracleConnection_1",
						context.DBUsername);
				globalMap.put("password_" + "tOracleConnection_1",
						context.DBPassword);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */
				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */
				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tOracleRow_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_5 begin ] start
				 */

				ok_Hash.put("tOracleRow_5", false);
				start_Hash.put("tOracleRow_5", System.currentTimeMillis());
				currentComponent = "tOracleRow_5";

				int tos_count_tOracleRow_5 = 0;

				java.sql.Connection conn_tOracleRow_5 = null;
				conn_tOracleRow_5 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_5) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_5 = dataSources_tOracleRow_5.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_5 = conn_tOracleRow_5
						.createStatement();
				String query_tOracleRow_5 = "";
				boolean whetherReject_tOracleRow_5 = false;

				/**
				 * [tOracleRow_5 begin ] stop
				 */
				/**
				 * [tOracleRow_5 main ] start
				 */

				currentComponent = "tOracleRow_5";

				query_tOracleRow_5 = "DELETE FROM " + context.DBSchema
						+ ".I2B2 WHERE c_fullname LIKE '\\i2b2\\ST\\%'";
				;
				whetherReject_tOracleRow_5 = false;

				globalMap.put("tOracleRow_5_QUERY", query_tOracleRow_5);
				try {
					stmt_tOracleRow_5.execute(query_tOracleRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_5 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_5) {
				}

				tos_count_tOracleRow_5++;

				/**
				 * [tOracleRow_5 main ] stop
				 */
				/**
				 * [tOracleRow_5 end ] start
				 */

				currentComponent = "tOracleRow_5";

				stmt_tOracleRow_5.close();

				ok_Hash.put("tOracleRow_5", true);
				end_Hash.put("tOracleRow_5", System.currentTimeMillis());

				tOracleRow_3Process(globalMap);

				/**
				 * [tOracleRow_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_3 begin ] start
				 */

				ok_Hash.put("tOracleRow_3", false);
				start_Hash.put("tOracleRow_3", System.currentTimeMillis());
				currentComponent = "tOracleRow_3";

				int tos_count_tOracleRow_3 = 0;

				java.sql.Connection conn_tOracleRow_3 = null;
				conn_tOracleRow_3 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_3 = dataSources_tOracleRow_3.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_3 = conn_tOracleRow_3
						.createStatement();
				String query_tOracleRow_3 = "";
				boolean whetherReject_tOracleRow_3 = false;

				/**
				 * [tOracleRow_3 begin ] stop
				 */
				/**
				 * [tOracleRow_3 main ] start
				 */

				currentComponent = "tOracleRow_3";

				query_tOracleRow_3 = "DELETE FROM " + context.DBSchema
						+ ".CONCEPT_DIMENSION WHERE concept_cd LIKE 'ST|%'";
				whetherReject_tOracleRow_3 = false;

				globalMap.put("tOracleRow_3_QUERY", query_tOracleRow_3);
				try {
					stmt_tOracleRow_3.execute(query_tOracleRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_3 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_3) {
				}

				tos_count_tOracleRow_3++;

				/**
				 * [tOracleRow_3 main ] stop
				 */
				/**
				 * [tOracleRow_3 end ] start
				 */

				currentComponent = "tOracleRow_3";

				stmt_tOracleRow_3.close();

				ok_Hash.put("tOracleRow_3", true);
				end_Hash.put("tOracleRow_3", System.currentTimeMillis());

				tOracleCommit_3Process(globalMap);

				/**
				 * [tOracleRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_3 begin ] start
				 */

				ok_Hash.put("tOracleCommit_3", false);
				start_Hash.put("tOracleCommit_3", System.currentTimeMillis());
				currentComponent = "tOracleCommit_3";

				int tos_count_tOracleCommit_3 = 0;

				/**
				 * [tOracleCommit_3 begin ] stop
				 */
				/**
				 * [tOracleCommit_3 main ] start
				 */

				currentComponent = "tOracleCommit_3";

				java.sql.Connection conn_tOracleCommit_3 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_3 != null) {
						if (dataSources_tOracleCommit_3.get("") != null) {
							conn_tOracleCommit_3 = dataSources_tOracleCommit_3
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_3 != null
						&& !conn_tOracleCommit_3.isClosed()) {
					conn_tOracleCommit_3.commit();
				}

				tos_count_tOracleCommit_3++;

				/**
				 * [tOracleCommit_3 main ] stop
				 */
				/**
				 * [tOracleCommit_3 end ] start
				 */

				currentComponent = "tOracleCommit_3";

				ok_Hash.put("tOracleCommit_3", true);
				end_Hash.put("tOracleCommit_3", System.currentTimeMillis());

				/**
				 * [tOracleCommit_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tHashInput_tUnite_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleCommit_3_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_1_row3Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_1_row3Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RootSubUniteStruct implements
			routines.system.IPersistableRow<RootSubUniteStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RootSubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RootStruct implements
			routines.system.IPersistableRow<RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_4_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_4_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_4_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_10_RunAfterStruct
			implements
			routines.system.IPersistableRow<tHashInput_tUnite_10_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_10_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_11_RunAfterStruct
			implements
			routines.system.IPersistableRow<tHashInput_tUnite_11_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_11_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_12_RunAfterStruct
			implements
			routines.system.IPersistableRow<tHashInput_tUnite_12_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_12_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_13_RunAfterStruct
			implements
			routines.system.IPersistableRow<tHashInput_tUnite_13_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_13_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_14_RunAfterStruct
			implements
			routines.system.IPersistableRow<tHashInput_tUnite_14_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_14_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_5_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_5_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_5_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21SubUniteStruct implements
			routines.system.IPersistableRow<P21SubUniteStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21SubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DRGSubUniteStruct implements
			routines.system.IPersistableRow<DRGSubUniteStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DRGSubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICDSubUniteStruct implements
			routines.system.IPersistableRow<ICDSubUniteStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICDSubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OPSSubUniteStruct implements
			routines.system.IPersistableRow<OPSSubUniteStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OPSSubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row46Struct implements
			routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row49Struct implements
			routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row48Struct implements
			routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TNMSubUniteStruct implements
			routines.system.IPersistableRow<TNMSubUniteStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TNMSubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row47Struct implements
			routines.system.IPersistableRow<row47Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MedDRASubUniteStruct implements
			routines.system.IPersistableRow<MedDRASubUniteStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MedDRASubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements
			routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_14Process(globalMap);
				tFileInputDelimited_20Process(globalMap);
				tFileInputDelimited_4Process(globalMap);
				tFileInputDelimited_21Process(globalMap);
				tFileInputDelimited_25Process(globalMap);
				tFileInputDelimited_26Process(globalMap);
				tFileInputDelimited_34Process(globalMap);

				RootStruct Root = new RootStruct();
				RootStruct RootSubUnite = Root;

				row41Struct row41 = new row41Struct();
				row41Struct P21SubUnite = row41;

				row42Struct row42 = new row42Struct();
				row42Struct DRGSubUnite = row42;

				row44Struct row44 = new row44Struct();
				row44Struct ICDSubUnite = row44;

				row45Struct row45 = new row45Struct();
				row45Struct OPSSubUnite = row45;

				row46Struct row46 = new row46Struct();
				row46Struct row1 = row46;

				row48Struct row48 = new row48Struct();
				row48Struct row49 = row48;

				row47Struct row47 = new row47Struct();
				row47Struct TNMSubUnite = row47;

				row43Struct row43 = new row43Struct();
				row43Struct MedDRASubUnite = row43;

				tHashInput_tUnite_1_row3Struct tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

				/**
				 * [tHashOutput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_1", false);
				start_Hash.put("tHashOutput_tUnite_1",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_1";

				int tos_count_tHashOutput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row3Struct> tHashFile_tHashOutput_tUnite_1 = null;
				if ((tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_1")) == null) {
					tHashFile_tHashOutput_tUnite_1 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row3Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_1.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_1",
						tHashFile_tHashOutput_tUnite_1);
				int nb_line_tHashOutput_tUnite_1 = 0;

				/**
				 * [tHashOutput_tUnite_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());
				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				System.out.println("Database connection established.");
				StatusListener.setSubStatus(5.0f,
						"Database connection established.");

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.rootDir + "i2b2_st_root.csv"/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						Root = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						Root = new RootStruct();
						try {

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								Root.C_HLEVEL = null;

								Root.C_FULLNAME = null;

								Root.C_NAME = null;

								Root.C_SYNONYM_CD = null;

								Root.C_VISUALATTRIBUTES = null;

								Root.C_TOTALNUM = null;

								Root.C_BASECODE = null;

								Root.C_METADATAXML = null;

								Root.C_FACTTABLECOLUMN = null;

								Root.C_TABLENAME = null;

								Root.C_COLUMNNAME = null;

								Root.C_COLUMNDATATYPE = null;

								Root.C_OPERATOR = null;

								Root.C_DIMCODE = null;

								Root.C_COMMENT = null;

								Root.C_TOOLTIP = null;

								Root.M_APPLIED_PATH = null;

								Root.UPDATE_DATE = null;

								Root.DOWNLOAD_DATE = null;

								Root.IMPORT_DATE = null;

								Root.SOURCESYSTEM_CD = null;

								Root.VALUETYPE_CD = null;

								Root.M_EXCLUSION_CD = null;

								Root.C_PATH = null;

								Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.C_HLEVEL = null;
									}

								} else {
									Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_FULLNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_NAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.C_SYNONYM_CD = null;
									}

								} else {
									Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_TOTALNUM = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_BASECODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_METADATAXML = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_TABLENAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_COLUMNNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.C_COLUMNDATATYPE = null;
									}

								} else {
									Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_OPERATOR = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_DIMCODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_COMMENT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_TOOLTIP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.M_APPLIED_PATH = null;
									}

								} else {
									Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										Root.UPDATE_DATE = null;
									}

								} else {
									Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										Root.DOWNLOAD_DATE = null;
									}

								} else {
									Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										Root.IMPORT_DATE = null;
									}

								} else {
									Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.SOURCESYSTEM_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.VALUETYPE_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.M_EXCLUSION_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_PATH = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_SYMBOL = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							Root = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "Root"
						if (Root != null) {

							/**
							 * [tJava_4 main ] start
							 */

							currentComponent = "tJava_4";

							RootSubUnite = Root;

							tos_count_tJava_4++;

							/**
							 * [tJava_4 main ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

							tHashInput_tUnite_1_row3.C_HLEVEL = RootSubUnite.C_HLEVEL;
							tHashInput_tUnite_1_row3.C_FULLNAME = RootSubUnite.C_FULLNAME;
							tHashInput_tUnite_1_row3.C_NAME = RootSubUnite.C_NAME;
							tHashInput_tUnite_1_row3.C_SYNONYM_CD = RootSubUnite.C_SYNONYM_CD;
							tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = RootSubUnite.C_VISUALATTRIBUTES;
							tHashInput_tUnite_1_row3.C_TOTALNUM = RootSubUnite.C_TOTALNUM;
							tHashInput_tUnite_1_row3.C_BASECODE = RootSubUnite.C_BASECODE;
							tHashInput_tUnite_1_row3.C_METADATAXML = RootSubUnite.C_METADATAXML;
							tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = RootSubUnite.C_FACTTABLECOLUMN;
							tHashInput_tUnite_1_row3.C_TABLENAME = RootSubUnite.C_TABLENAME;
							tHashInput_tUnite_1_row3.C_COLUMNNAME = RootSubUnite.C_COLUMNNAME;
							tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = RootSubUnite.C_COLUMNDATATYPE;
							tHashInput_tUnite_1_row3.C_OPERATOR = RootSubUnite.C_OPERATOR;
							tHashInput_tUnite_1_row3.C_DIMCODE = RootSubUnite.C_DIMCODE;
							tHashInput_tUnite_1_row3.C_COMMENT = RootSubUnite.C_COMMENT;
							tHashInput_tUnite_1_row3.C_TOOLTIP = RootSubUnite.C_TOOLTIP;
							tHashInput_tUnite_1_row3.M_APPLIED_PATH = RootSubUnite.M_APPLIED_PATH;
							tHashInput_tUnite_1_row3.UPDATE_DATE = RootSubUnite.UPDATE_DATE;
							tHashInput_tUnite_1_row3.DOWNLOAD_DATE = RootSubUnite.DOWNLOAD_DATE;
							tHashInput_tUnite_1_row3.IMPORT_DATE = RootSubUnite.IMPORT_DATE;
							tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = RootSubUnite.SOURCESYSTEM_CD;
							tHashInput_tUnite_1_row3.VALUETYPE_CD = RootSubUnite.VALUETYPE_CD;
							tHashInput_tUnite_1_row3.M_EXCLUSION_CD = RootSubUnite.M_EXCLUSION_CD;
							tHashInput_tUnite_1_row3.C_PATH = RootSubUnite.C_PATH;
							tHashInput_tUnite_1_row3.C_SYMBOL = RootSubUnite.C_SYMBOL;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_1 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_1";

							tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

							oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
							oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
							oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
							oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
							oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
							oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
							oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
							oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
							oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
							oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
							oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_1
									.put(oneRow_tHashOutput_tUnite_1);
							nb_line_tHashOutput_tUnite_1++;

							tos_count_tHashOutput_tUnite_1++;

							/**
							 * [tHashOutput_tUnite_1 main ] stop
							 */

						} // End of branch "Root"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("P21 import ended.");
				StatusListener.setSubStatus(10.0f, "P21 import ended.");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_9 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_9", false);
				start_Hash.put("tHashInput_tUnite_9",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_9";

				int tos_count_tHashInput_tUnite_9 = 0;

				int nb_line_tHashInput_tUnite_9 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_9 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_9_row41Struct> tHashFile_tHashInput_tUnite_9 = mf_tHashInput_tUnite_9
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_9");
				if (tHashFile_tHashInput_tUnite_9 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_9_row41Struct> iterator_tHashInput_tUnite_9 = tHashFile_tHashInput_tUnite_9
						.iterator();
				while (iterator_tHashInput_tUnite_9.hasNext()) {
					tHashInput_tUnite_9_row41Struct next_tHashInput_tUnite_9 = iterator_tHashInput_tUnite_9
							.next();

					row41.C_HLEVEL = next_tHashInput_tUnite_9.C_HLEVEL;
					row41.C_FULLNAME = next_tHashInput_tUnite_9.C_FULLNAME;
					row41.C_NAME = next_tHashInput_tUnite_9.C_NAME;
					row41.C_SYNONYM_CD = next_tHashInput_tUnite_9.C_SYNONYM_CD;
					row41.C_VISUALATTRIBUTES = next_tHashInput_tUnite_9.C_VISUALATTRIBUTES;
					row41.C_TOTALNUM = next_tHashInput_tUnite_9.C_TOTALNUM;
					row41.C_BASECODE = next_tHashInput_tUnite_9.C_BASECODE;
					row41.C_METADATAXML = next_tHashInput_tUnite_9.C_METADATAXML;
					row41.C_FACTTABLECOLUMN = next_tHashInput_tUnite_9.C_FACTTABLECOLUMN;
					row41.C_TABLENAME = next_tHashInput_tUnite_9.C_TABLENAME;
					row41.C_COLUMNNAME = next_tHashInput_tUnite_9.C_COLUMNNAME;
					row41.C_COLUMNDATATYPE = next_tHashInput_tUnite_9.C_COLUMNDATATYPE;
					row41.C_OPERATOR = next_tHashInput_tUnite_9.C_OPERATOR;
					row41.C_DIMCODE = next_tHashInput_tUnite_9.C_DIMCODE;
					row41.C_COMMENT = next_tHashInput_tUnite_9.C_COMMENT;
					row41.C_TOOLTIP = next_tHashInput_tUnite_9.C_TOOLTIP;
					row41.M_APPLIED_PATH = next_tHashInput_tUnite_9.M_APPLIED_PATH;
					row41.UPDATE_DATE = next_tHashInput_tUnite_9.UPDATE_DATE;
					row41.DOWNLOAD_DATE = next_tHashInput_tUnite_9.DOWNLOAD_DATE;
					row41.IMPORT_DATE = next_tHashInput_tUnite_9.IMPORT_DATE;
					row41.SOURCESYSTEM_CD = next_tHashInput_tUnite_9.SOURCESYSTEM_CD;
					row41.VALUETYPE_CD = next_tHashInput_tUnite_9.VALUETYPE_CD;
					row41.M_EXCLUSION_CD = next_tHashInput_tUnite_9.M_EXCLUSION_CD;
					row41.C_PATH = next_tHashInput_tUnite_9.C_PATH;
					row41.C_SYMBOL = next_tHashInput_tUnite_9.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_9 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_9 main ] start
					 */

					currentComponent = "tHashInput_tUnite_9";

					tos_count_tHashInput_tUnite_9++;

					/**
					 * [tHashInput_tUnite_9 main ] stop
					 */

					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					P21SubUnite = row41;

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = P21SubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = P21SubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = P21SubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = P21SubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = P21SubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = P21SubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = P21SubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = P21SubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = P21SubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = P21SubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = P21SubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = P21SubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = P21SubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = P21SubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = P21SubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = P21SubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = P21SubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = P21SubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = P21SubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = P21SubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = P21SubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = P21SubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = P21SubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = P21SubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = P21SubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_9 end ] start
					 */

					currentComponent = "tHashInput_tUnite_9";

					nb_line_tHashInput_tUnite_9++;
				}

				globalMap.put("tHashInput_tUnite_9_NB_LINE",
						nb_line_tHashInput_tUnite_9);

				ok_Hash.put("tHashInput_tUnite_9", true);
				end_Hash.put("tHashInput_tUnite_9", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_9 end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println("DRG import ended.");
				StatusListener.setSubStatus(15.0f, "DRG import ended.");

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_4 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_4", false);
				start_Hash.put("tHashInput_tUnite_4",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_4";

				int tos_count_tHashInput_tUnite_4 = 0;

				int nb_line_tHashInput_tUnite_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_4_row42Struct> tHashFile_tHashInput_tUnite_4 = mf_tHashInput_tUnite_4
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_4");
				if (tHashFile_tHashInput_tUnite_4 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_4_row42Struct> iterator_tHashInput_tUnite_4 = tHashFile_tHashInput_tUnite_4
						.iterator();
				while (iterator_tHashInput_tUnite_4.hasNext()) {
					tHashInput_tUnite_4_row42Struct next_tHashInput_tUnite_4 = iterator_tHashInput_tUnite_4
							.next();

					row42.C_HLEVEL = next_tHashInput_tUnite_4.C_HLEVEL;
					row42.C_FULLNAME = next_tHashInput_tUnite_4.C_FULLNAME;
					row42.C_NAME = next_tHashInput_tUnite_4.C_NAME;
					row42.C_SYNONYM_CD = next_tHashInput_tUnite_4.C_SYNONYM_CD;
					row42.C_VISUALATTRIBUTES = next_tHashInput_tUnite_4.C_VISUALATTRIBUTES;
					row42.C_TOTALNUM = next_tHashInput_tUnite_4.C_TOTALNUM;
					row42.C_BASECODE = next_tHashInput_tUnite_4.C_BASECODE;
					row42.C_METADATAXML = next_tHashInput_tUnite_4.C_METADATAXML;
					row42.C_FACTTABLECOLUMN = next_tHashInput_tUnite_4.C_FACTTABLECOLUMN;
					row42.C_TABLENAME = next_tHashInput_tUnite_4.C_TABLENAME;
					row42.C_COLUMNNAME = next_tHashInput_tUnite_4.C_COLUMNNAME;
					row42.C_COLUMNDATATYPE = next_tHashInput_tUnite_4.C_COLUMNDATATYPE;
					row42.C_OPERATOR = next_tHashInput_tUnite_4.C_OPERATOR;
					row42.C_DIMCODE = next_tHashInput_tUnite_4.C_DIMCODE;
					row42.C_COMMENT = next_tHashInput_tUnite_4.C_COMMENT;
					row42.C_TOOLTIP = next_tHashInput_tUnite_4.C_TOOLTIP;
					row42.M_APPLIED_PATH = next_tHashInput_tUnite_4.M_APPLIED_PATH;
					row42.UPDATE_DATE = next_tHashInput_tUnite_4.UPDATE_DATE;
					row42.DOWNLOAD_DATE = next_tHashInput_tUnite_4.DOWNLOAD_DATE;
					row42.IMPORT_DATE = next_tHashInput_tUnite_4.IMPORT_DATE;
					row42.SOURCESYSTEM_CD = next_tHashInput_tUnite_4.SOURCESYSTEM_CD;
					row42.VALUETYPE_CD = next_tHashInput_tUnite_4.VALUETYPE_CD;
					row42.M_EXCLUSION_CD = next_tHashInput_tUnite_4.M_EXCLUSION_CD;
					row42.C_PATH = next_tHashInput_tUnite_4.C_PATH;
					row42.C_SYMBOL = next_tHashInput_tUnite_4.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_4 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_4 main ] start
					 */

					currentComponent = "tHashInput_tUnite_4";

					tos_count_tHashInput_tUnite_4++;

					/**
					 * [tHashInput_tUnite_4 main ] stop
					 */

					/**
					 * [tJava_3 main ] start
					 */

					currentComponent = "tJava_3";

					DRGSubUnite = row42;

					tos_count_tJava_3++;

					/**
					 * [tJava_3 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = DRGSubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = DRGSubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = DRGSubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = DRGSubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = DRGSubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = DRGSubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = DRGSubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = DRGSubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = DRGSubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = DRGSubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = DRGSubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = DRGSubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = DRGSubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = DRGSubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = DRGSubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = DRGSubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = DRGSubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = DRGSubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = DRGSubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = DRGSubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = DRGSubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = DRGSubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = DRGSubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = DRGSubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = DRGSubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_4 end ] start
					 */

					currentComponent = "tHashInput_tUnite_4";

					nb_line_tHashInput_tUnite_4++;
				}

				globalMap.put("tHashInput_tUnite_4_NB_LINE",
						nb_line_tHashInput_tUnite_4);

				ok_Hash.put("tHashInput_tUnite_4", true);
				end_Hash.put("tHashInput_tUnite_4", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_4 end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.out.println("ICD import ended.");
				StatusListener.setSubStatus(25.0f, "ICD import ended.");

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_10 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_10", false);
				start_Hash.put("tHashInput_tUnite_10",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_10";

				int tos_count_tHashInput_tUnite_10 = 0;

				int nb_line_tHashInput_tUnite_10 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_10 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_10_row44Struct> tHashFile_tHashInput_tUnite_10 = mf_tHashInput_tUnite_10
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_10");
				if (tHashFile_tHashInput_tUnite_10 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_10_row44Struct> iterator_tHashInput_tUnite_10 = tHashFile_tHashInput_tUnite_10
						.iterator();
				while (iterator_tHashInput_tUnite_10.hasNext()) {
					tHashInput_tUnite_10_row44Struct next_tHashInput_tUnite_10 = iterator_tHashInput_tUnite_10
							.next();

					row44.C_HLEVEL = next_tHashInput_tUnite_10.C_HLEVEL;
					row44.C_FULLNAME = next_tHashInput_tUnite_10.C_FULLNAME;
					row44.C_NAME = next_tHashInput_tUnite_10.C_NAME;
					row44.C_SYNONYM_CD = next_tHashInput_tUnite_10.C_SYNONYM_CD;
					row44.C_VISUALATTRIBUTES = next_tHashInput_tUnite_10.C_VISUALATTRIBUTES;
					row44.C_TOTALNUM = next_tHashInput_tUnite_10.C_TOTALNUM;
					row44.C_BASECODE = next_tHashInput_tUnite_10.C_BASECODE;
					row44.C_METADATAXML = next_tHashInput_tUnite_10.C_METADATAXML;
					row44.C_FACTTABLECOLUMN = next_tHashInput_tUnite_10.C_FACTTABLECOLUMN;
					row44.C_TABLENAME = next_tHashInput_tUnite_10.C_TABLENAME;
					row44.C_COLUMNNAME = next_tHashInput_tUnite_10.C_COLUMNNAME;
					row44.C_COLUMNDATATYPE = next_tHashInput_tUnite_10.C_COLUMNDATATYPE;
					row44.C_OPERATOR = next_tHashInput_tUnite_10.C_OPERATOR;
					row44.C_DIMCODE = next_tHashInput_tUnite_10.C_DIMCODE;
					row44.C_COMMENT = next_tHashInput_tUnite_10.C_COMMENT;
					row44.C_TOOLTIP = next_tHashInput_tUnite_10.C_TOOLTIP;
					row44.M_APPLIED_PATH = next_tHashInput_tUnite_10.M_APPLIED_PATH;
					row44.UPDATE_DATE = next_tHashInput_tUnite_10.UPDATE_DATE;
					row44.DOWNLOAD_DATE = next_tHashInput_tUnite_10.DOWNLOAD_DATE;
					row44.IMPORT_DATE = next_tHashInput_tUnite_10.IMPORT_DATE;
					row44.SOURCESYSTEM_CD = next_tHashInput_tUnite_10.SOURCESYSTEM_CD;
					row44.VALUETYPE_CD = next_tHashInput_tUnite_10.VALUETYPE_CD;
					row44.M_EXCLUSION_CD = next_tHashInput_tUnite_10.M_EXCLUSION_CD;
					row44.C_PATH = next_tHashInput_tUnite_10.C_PATH;
					row44.C_SYMBOL = next_tHashInput_tUnite_10.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_10 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_10 main ] start
					 */

					currentComponent = "tHashInput_tUnite_10";

					tos_count_tHashInput_tUnite_10++;

					/**
					 * [tHashInput_tUnite_10 main ] stop
					 */

					/**
					 * [tJava_5 main ] start
					 */

					currentComponent = "tJava_5";

					ICDSubUnite = row44;

					tos_count_tJava_5++;

					/**
					 * [tJava_5 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = ICDSubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = ICDSubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = ICDSubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = ICDSubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = ICDSubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = ICDSubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = ICDSubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = ICDSubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = ICDSubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = ICDSubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = ICDSubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = ICDSubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = ICDSubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = ICDSubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = ICDSubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = ICDSubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = ICDSubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = ICDSubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = ICDSubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = ICDSubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = ICDSubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = ICDSubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = ICDSubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = ICDSubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = ICDSubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_10 end ] start
					 */

					currentComponent = "tHashInput_tUnite_10";

					nb_line_tHashInput_tUnite_10++;
				}

				globalMap.put("tHashInput_tUnite_10_NB_LINE",
						nb_line_tHashInput_tUnite_10);

				ok_Hash.put("tHashInput_tUnite_10", true);
				end_Hash.put("tHashInput_tUnite_10", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_10 end ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				System.out.println("OPS import ended.");
				StatusListener.setSubStatus(35.0f, "OPS import ended.");

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_11 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_11", false);
				start_Hash.put("tHashInput_tUnite_11",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_11";

				int tos_count_tHashInput_tUnite_11 = 0;

				int nb_line_tHashInput_tUnite_11 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_11 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_11_row45Struct> tHashFile_tHashInput_tUnite_11 = mf_tHashInput_tUnite_11
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_11");
				if (tHashFile_tHashInput_tUnite_11 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_11_row45Struct> iterator_tHashInput_tUnite_11 = tHashFile_tHashInput_tUnite_11
						.iterator();
				while (iterator_tHashInput_tUnite_11.hasNext()) {
					tHashInput_tUnite_11_row45Struct next_tHashInput_tUnite_11 = iterator_tHashInput_tUnite_11
							.next();

					row45.C_HLEVEL = next_tHashInput_tUnite_11.C_HLEVEL;
					row45.C_FULLNAME = next_tHashInput_tUnite_11.C_FULLNAME;
					row45.C_NAME = next_tHashInput_tUnite_11.C_NAME;
					row45.C_SYNONYM_CD = next_tHashInput_tUnite_11.C_SYNONYM_CD;
					row45.C_VISUALATTRIBUTES = next_tHashInput_tUnite_11.C_VISUALATTRIBUTES;
					row45.C_TOTALNUM = next_tHashInput_tUnite_11.C_TOTALNUM;
					row45.C_BASECODE = next_tHashInput_tUnite_11.C_BASECODE;
					row45.C_METADATAXML = next_tHashInput_tUnite_11.C_METADATAXML;
					row45.C_FACTTABLECOLUMN = next_tHashInput_tUnite_11.C_FACTTABLECOLUMN;
					row45.C_TABLENAME = next_tHashInput_tUnite_11.C_TABLENAME;
					row45.C_COLUMNNAME = next_tHashInput_tUnite_11.C_COLUMNNAME;
					row45.C_COLUMNDATATYPE = next_tHashInput_tUnite_11.C_COLUMNDATATYPE;
					row45.C_OPERATOR = next_tHashInput_tUnite_11.C_OPERATOR;
					row45.C_DIMCODE = next_tHashInput_tUnite_11.C_DIMCODE;
					row45.C_COMMENT = next_tHashInput_tUnite_11.C_COMMENT;
					row45.C_TOOLTIP = next_tHashInput_tUnite_11.C_TOOLTIP;
					row45.M_APPLIED_PATH = next_tHashInput_tUnite_11.M_APPLIED_PATH;
					row45.UPDATE_DATE = next_tHashInput_tUnite_11.UPDATE_DATE;
					row45.DOWNLOAD_DATE = next_tHashInput_tUnite_11.DOWNLOAD_DATE;
					row45.IMPORT_DATE = next_tHashInput_tUnite_11.IMPORT_DATE;
					row45.SOURCESYSTEM_CD = next_tHashInput_tUnite_11.SOURCESYSTEM_CD;
					row45.VALUETYPE_CD = next_tHashInput_tUnite_11.VALUETYPE_CD;
					row45.M_EXCLUSION_CD = next_tHashInput_tUnite_11.M_EXCLUSION_CD;
					row45.C_PATH = next_tHashInput_tUnite_11.C_PATH;
					row45.C_SYMBOL = next_tHashInput_tUnite_11.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_11 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_11 main ] start
					 */

					currentComponent = "tHashInput_tUnite_11";

					tos_count_tHashInput_tUnite_11++;

					/**
					 * [tHashInput_tUnite_11 main ] stop
					 */

					/**
					 * [tJava_6 main ] start
					 */

					currentComponent = "tJava_6";

					OPSSubUnite = row45;

					tos_count_tJava_6++;

					/**
					 * [tJava_6 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = OPSSubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = OPSSubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = OPSSubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = OPSSubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = OPSSubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = OPSSubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = OPSSubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = OPSSubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = OPSSubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = OPSSubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = OPSSubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = OPSSubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = OPSSubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = OPSSubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = OPSSubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = OPSSubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = OPSSubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = OPSSubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = OPSSubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = OPSSubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = OPSSubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = OPSSubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = OPSSubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = OPSSubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = OPSSubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_11 end ] start
					 */

					currentComponent = "tHashInput_tUnite_11";

					nb_line_tHashInput_tUnite_11++;
				}

				globalMap.put("tHashInput_tUnite_11_NB_LINE",
						nb_line_tHashInput_tUnite_11);

				ok_Hash.put("tHashInput_tUnite_11", true);
				end_Hash.put("tHashInput_tUnite_11", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_11 end ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				System.out.println("LOINC import ended.");
				StatusListener.setSubStatus(50.0f, "LOINC import ended.");

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_12 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_12", false);
				start_Hash.put("tHashInput_tUnite_12",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_12";

				int tos_count_tHashInput_tUnite_12 = 0;

				int nb_line_tHashInput_tUnite_12 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_12 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_12_row46Struct> tHashFile_tHashInput_tUnite_12 = mf_tHashInput_tUnite_12
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_12");
				if (tHashFile_tHashInput_tUnite_12 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_12_row46Struct> iterator_tHashInput_tUnite_12 = tHashFile_tHashInput_tUnite_12
						.iterator();
				while (iterator_tHashInput_tUnite_12.hasNext()) {
					tHashInput_tUnite_12_row46Struct next_tHashInput_tUnite_12 = iterator_tHashInput_tUnite_12
							.next();

					row46.C_HLEVEL = next_tHashInput_tUnite_12.C_HLEVEL;
					row46.C_FULLNAME = next_tHashInput_tUnite_12.C_FULLNAME;
					row46.C_NAME = next_tHashInput_tUnite_12.C_NAME;
					row46.C_SYNONYM_CD = next_tHashInput_tUnite_12.C_SYNONYM_CD;
					row46.C_VISUALATTRIBUTES = next_tHashInput_tUnite_12.C_VISUALATTRIBUTES;
					row46.C_TOTALNUM = next_tHashInput_tUnite_12.C_TOTALNUM;
					row46.C_BASECODE = next_tHashInput_tUnite_12.C_BASECODE;
					row46.C_METADATAXML = next_tHashInput_tUnite_12.C_METADATAXML;
					row46.C_FACTTABLECOLUMN = next_tHashInput_tUnite_12.C_FACTTABLECOLUMN;
					row46.C_TABLENAME = next_tHashInput_tUnite_12.C_TABLENAME;
					row46.C_COLUMNNAME = next_tHashInput_tUnite_12.C_COLUMNNAME;
					row46.C_COLUMNDATATYPE = next_tHashInput_tUnite_12.C_COLUMNDATATYPE;
					row46.C_OPERATOR = next_tHashInput_tUnite_12.C_OPERATOR;
					row46.C_DIMCODE = next_tHashInput_tUnite_12.C_DIMCODE;
					row46.C_COMMENT = next_tHashInput_tUnite_12.C_COMMENT;
					row46.C_TOOLTIP = next_tHashInput_tUnite_12.C_TOOLTIP;
					row46.M_APPLIED_PATH = next_tHashInput_tUnite_12.M_APPLIED_PATH;
					row46.UPDATE_DATE = next_tHashInput_tUnite_12.UPDATE_DATE;
					row46.DOWNLOAD_DATE = next_tHashInput_tUnite_12.DOWNLOAD_DATE;
					row46.IMPORT_DATE = next_tHashInput_tUnite_12.IMPORT_DATE;
					row46.SOURCESYSTEM_CD = next_tHashInput_tUnite_12.SOURCESYSTEM_CD;
					row46.VALUETYPE_CD = next_tHashInput_tUnite_12.VALUETYPE_CD;
					row46.M_EXCLUSION_CD = next_tHashInput_tUnite_12.M_EXCLUSION_CD;
					row46.C_PATH = next_tHashInput_tUnite_12.C_PATH;
					row46.C_SYMBOL = next_tHashInput_tUnite_12.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_12 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_12 main ] start
					 */

					currentComponent = "tHashInput_tUnite_12";

					tos_count_tHashInput_tUnite_12++;

					/**
					 * [tHashInput_tUnite_12 main ] stop
					 */

					/**
					 * [tJava_7 main ] start
					 */

					currentComponent = "tJava_7";

					row1 = row46;

					tos_count_tJava_7++;

					/**
					 * [tJava_7 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = row1.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = row1.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = row1.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = row1.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = row1.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = row1.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = row1.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = row1.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = row1.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = row1.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = row1.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = row1.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = row1.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = row1.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = row1.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = row1.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = row1.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = row1.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = row1.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = row1.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = row1.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = row1.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = row1.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = row1.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = row1.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_12 end ] start
					 */

					currentComponent = "tHashInput_tUnite_12";

					nb_line_tHashInput_tUnite_12++;
				}

				globalMap.put("tHashInput_tUnite_12_NB_LINE",
						nb_line_tHashInput_tUnite_12);

				ok_Hash.put("tHashInput_tUnite_12", true);
				end_Hash.put("tHashInput_tUnite_12", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_12 end ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				System.out.println("ICD-O import ended.");
				StatusListener.setSubStatus(55.0f, "ICD-O import ended.");

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_13 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_13", false);
				start_Hash.put("tHashInput_tUnite_13",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_13";

				int tos_count_tHashInput_tUnite_13 = 0;

				int nb_line_tHashInput_tUnite_13 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_13 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_13_row48Struct> tHashFile_tHashInput_tUnite_13 = mf_tHashInput_tUnite_13
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_13");
				if (tHashFile_tHashInput_tUnite_13 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_13_row48Struct> iterator_tHashInput_tUnite_13 = tHashFile_tHashInput_tUnite_13
						.iterator();
				while (iterator_tHashInput_tUnite_13.hasNext()) {
					tHashInput_tUnite_13_row48Struct next_tHashInput_tUnite_13 = iterator_tHashInput_tUnite_13
							.next();

					row48.C_HLEVEL = next_tHashInput_tUnite_13.C_HLEVEL;
					row48.C_FULLNAME = next_tHashInput_tUnite_13.C_FULLNAME;
					row48.C_NAME = next_tHashInput_tUnite_13.C_NAME;
					row48.C_SYNONYM_CD = next_tHashInput_tUnite_13.C_SYNONYM_CD;
					row48.C_VISUALATTRIBUTES = next_tHashInput_tUnite_13.C_VISUALATTRIBUTES;
					row48.C_TOTALNUM = next_tHashInput_tUnite_13.C_TOTALNUM;
					row48.C_BASECODE = next_tHashInput_tUnite_13.C_BASECODE;
					row48.C_METADATAXML = next_tHashInput_tUnite_13.C_METADATAXML;
					row48.C_FACTTABLECOLUMN = next_tHashInput_tUnite_13.C_FACTTABLECOLUMN;
					row48.C_TABLENAME = next_tHashInput_tUnite_13.C_TABLENAME;
					row48.C_COLUMNNAME = next_tHashInput_tUnite_13.C_COLUMNNAME;
					row48.C_COLUMNDATATYPE = next_tHashInput_tUnite_13.C_COLUMNDATATYPE;
					row48.C_OPERATOR = next_tHashInput_tUnite_13.C_OPERATOR;
					row48.C_DIMCODE = next_tHashInput_tUnite_13.C_DIMCODE;
					row48.C_COMMENT = next_tHashInput_tUnite_13.C_COMMENT;
					row48.C_TOOLTIP = next_tHashInput_tUnite_13.C_TOOLTIP;
					row48.M_APPLIED_PATH = next_tHashInput_tUnite_13.M_APPLIED_PATH;
					row48.UPDATE_DATE = next_tHashInput_tUnite_13.UPDATE_DATE;
					row48.DOWNLOAD_DATE = next_tHashInput_tUnite_13.DOWNLOAD_DATE;
					row48.IMPORT_DATE = next_tHashInput_tUnite_13.IMPORT_DATE;
					row48.SOURCESYSTEM_CD = next_tHashInput_tUnite_13.SOURCESYSTEM_CD;
					row48.VALUETYPE_CD = next_tHashInput_tUnite_13.VALUETYPE_CD;
					row48.M_EXCLUSION_CD = next_tHashInput_tUnite_13.M_EXCLUSION_CD;
					row48.C_PATH = next_tHashInput_tUnite_13.C_PATH;
					row48.C_SYMBOL = next_tHashInput_tUnite_13.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_13 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_13 main ] start
					 */

					currentComponent = "tHashInput_tUnite_13";

					tos_count_tHashInput_tUnite_13++;

					/**
					 * [tHashInput_tUnite_13 main ] stop
					 */

					/**
					 * [tJava_8 main ] start
					 */

					currentComponent = "tJava_8";

					row49 = row48;

					tos_count_tJava_8++;

					/**
					 * [tJava_8 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = row49.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = row49.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = row49.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = row49.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = row49.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = row49.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = row49.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = row49.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = row49.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = row49.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = row49.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = row49.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = row49.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = row49.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = row49.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = row49.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = row49.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = row49.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = row49.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = row49.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = row49.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = row49.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = row49.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = row49.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = row49.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_13 end ] start
					 */

					currentComponent = "tHashInput_tUnite_13";

					nb_line_tHashInput_tUnite_13++;
				}

				globalMap.put("tHashInput_tUnite_13_NB_LINE",
						nb_line_tHashInput_tUnite_13);

				ok_Hash.put("tHashInput_tUnite_13", true);
				end_Hash.put("tHashInput_tUnite_13", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_13 end ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				System.out.println("TNM import ended.");
				StatusListener.setSubStatus(60.0f, "TNM import ended.");

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_14 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_14", false);
				start_Hash.put("tHashInput_tUnite_14",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_14";

				int tos_count_tHashInput_tUnite_14 = 0;

				int nb_line_tHashInput_tUnite_14 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_14 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_14_row47Struct> tHashFile_tHashInput_tUnite_14 = mf_tHashInput_tUnite_14
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_14");
				if (tHashFile_tHashInput_tUnite_14 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_14_row47Struct> iterator_tHashInput_tUnite_14 = tHashFile_tHashInput_tUnite_14
						.iterator();
				while (iterator_tHashInput_tUnite_14.hasNext()) {
					tHashInput_tUnite_14_row47Struct next_tHashInput_tUnite_14 = iterator_tHashInput_tUnite_14
							.next();

					row47.C_HLEVEL = next_tHashInput_tUnite_14.C_HLEVEL;
					row47.C_FULLNAME = next_tHashInput_tUnite_14.C_FULLNAME;
					row47.C_NAME = next_tHashInput_tUnite_14.C_NAME;
					row47.C_SYNONYM_CD = next_tHashInput_tUnite_14.C_SYNONYM_CD;
					row47.C_VISUALATTRIBUTES = next_tHashInput_tUnite_14.C_VISUALATTRIBUTES;
					row47.C_TOTALNUM = next_tHashInput_tUnite_14.C_TOTALNUM;
					row47.C_BASECODE = next_tHashInput_tUnite_14.C_BASECODE;
					row47.C_METADATAXML = next_tHashInput_tUnite_14.C_METADATAXML;
					row47.C_FACTTABLECOLUMN = next_tHashInput_tUnite_14.C_FACTTABLECOLUMN;
					row47.C_TABLENAME = next_tHashInput_tUnite_14.C_TABLENAME;
					row47.C_COLUMNNAME = next_tHashInput_tUnite_14.C_COLUMNNAME;
					row47.C_COLUMNDATATYPE = next_tHashInput_tUnite_14.C_COLUMNDATATYPE;
					row47.C_OPERATOR = next_tHashInput_tUnite_14.C_OPERATOR;
					row47.C_DIMCODE = next_tHashInput_tUnite_14.C_DIMCODE;
					row47.C_COMMENT = next_tHashInput_tUnite_14.C_COMMENT;
					row47.C_TOOLTIP = next_tHashInput_tUnite_14.C_TOOLTIP;
					row47.M_APPLIED_PATH = next_tHashInput_tUnite_14.M_APPLIED_PATH;
					row47.UPDATE_DATE = next_tHashInput_tUnite_14.UPDATE_DATE;
					row47.DOWNLOAD_DATE = next_tHashInput_tUnite_14.DOWNLOAD_DATE;
					row47.IMPORT_DATE = next_tHashInput_tUnite_14.IMPORT_DATE;
					row47.SOURCESYSTEM_CD = next_tHashInput_tUnite_14.SOURCESYSTEM_CD;
					row47.VALUETYPE_CD = next_tHashInput_tUnite_14.VALUETYPE_CD;
					row47.M_EXCLUSION_CD = next_tHashInput_tUnite_14.M_EXCLUSION_CD;
					row47.C_PATH = next_tHashInput_tUnite_14.C_PATH;
					row47.C_SYMBOL = next_tHashInput_tUnite_14.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_14 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_14 main ] start
					 */

					currentComponent = "tHashInput_tUnite_14";

					tos_count_tHashInput_tUnite_14++;

					/**
					 * [tHashInput_tUnite_14 main ] stop
					 */

					/**
					 * [tJava_9 main ] start
					 */

					currentComponent = "tJava_9";

					TNMSubUnite = row47;

					tos_count_tJava_9++;

					/**
					 * [tJava_9 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = TNMSubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = TNMSubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = TNMSubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = TNMSubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = TNMSubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = TNMSubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = TNMSubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = TNMSubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = TNMSubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = TNMSubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = TNMSubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = TNMSubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = TNMSubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = TNMSubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = TNMSubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = TNMSubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = TNMSubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = TNMSubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = TNMSubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = TNMSubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = TNMSubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = TNMSubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = TNMSubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = TNMSubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = TNMSubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_14 end ] start
					 */

					currentComponent = "tHashInput_tUnite_14";

					nb_line_tHashInput_tUnite_14++;
				}

				globalMap.put("tHashInput_tUnite_14_NB_LINE",
						nb_line_tHashInput_tUnite_14);

				ok_Hash.put("tHashInput_tUnite_14", true);
				end_Hash.put("tHashInput_tUnite_14", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_14 end ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				System.out.println("MedDRA import ended.");
				StatusListener.setSubStatus(70.0f, "MedDRA import ended.");

				/**
				 * [tJava_10 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_5 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_5", false);
				start_Hash.put("tHashInput_tUnite_5",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_5";

				int tos_count_tHashInput_tUnite_5 = 0;

				int nb_line_tHashInput_tUnite_5 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_5 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_5_row43Struct> tHashFile_tHashInput_tUnite_5 = mf_tHashInput_tUnite_5
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_5");
				if (tHashFile_tHashInput_tUnite_5 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_5_row43Struct> iterator_tHashInput_tUnite_5 = tHashFile_tHashInput_tUnite_5
						.iterator();
				while (iterator_tHashInput_tUnite_5.hasNext()) {
					tHashInput_tUnite_5_row43Struct next_tHashInput_tUnite_5 = iterator_tHashInput_tUnite_5
							.next();

					row43.C_HLEVEL = next_tHashInput_tUnite_5.C_HLEVEL;
					row43.C_FULLNAME = next_tHashInput_tUnite_5.C_FULLNAME;
					row43.C_NAME = next_tHashInput_tUnite_5.C_NAME;
					row43.C_SYNONYM_CD = next_tHashInput_tUnite_5.C_SYNONYM_CD;
					row43.C_VISUALATTRIBUTES = next_tHashInput_tUnite_5.C_VISUALATTRIBUTES;
					row43.C_TOTALNUM = next_tHashInput_tUnite_5.C_TOTALNUM;
					row43.C_BASECODE = next_tHashInput_tUnite_5.C_BASECODE;
					row43.C_METADATAXML = next_tHashInput_tUnite_5.C_METADATAXML;
					row43.C_FACTTABLECOLUMN = next_tHashInput_tUnite_5.C_FACTTABLECOLUMN;
					row43.C_TABLENAME = next_tHashInput_tUnite_5.C_TABLENAME;
					row43.C_COLUMNNAME = next_tHashInput_tUnite_5.C_COLUMNNAME;
					row43.C_COLUMNDATATYPE = next_tHashInput_tUnite_5.C_COLUMNDATATYPE;
					row43.C_OPERATOR = next_tHashInput_tUnite_5.C_OPERATOR;
					row43.C_DIMCODE = next_tHashInput_tUnite_5.C_DIMCODE;
					row43.C_COMMENT = next_tHashInput_tUnite_5.C_COMMENT;
					row43.C_TOOLTIP = next_tHashInput_tUnite_5.C_TOOLTIP;
					row43.M_APPLIED_PATH = next_tHashInput_tUnite_5.M_APPLIED_PATH;
					row43.UPDATE_DATE = next_tHashInput_tUnite_5.UPDATE_DATE;
					row43.DOWNLOAD_DATE = next_tHashInput_tUnite_5.DOWNLOAD_DATE;
					row43.IMPORT_DATE = next_tHashInput_tUnite_5.IMPORT_DATE;
					row43.SOURCESYSTEM_CD = next_tHashInput_tUnite_5.SOURCESYSTEM_CD;
					row43.VALUETYPE_CD = next_tHashInput_tUnite_5.VALUETYPE_CD;
					row43.M_EXCLUSION_CD = next_tHashInput_tUnite_5.M_EXCLUSION_CD;
					row43.C_PATH = next_tHashInput_tUnite_5.C_PATH;
					row43.C_SYMBOL = next_tHashInput_tUnite_5.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_5 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_5 main ] start
					 */

					currentComponent = "tHashInput_tUnite_5";

					tos_count_tHashInput_tUnite_5++;

					/**
					 * [tHashInput_tUnite_5 main ] stop
					 */

					/**
					 * [tJava_10 main ] start
					 */

					currentComponent = "tJava_10";

					MedDRASubUnite = row43;

					tos_count_tJava_10++;

					/**
					 * [tJava_10 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = MedDRASubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = MedDRASubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = MedDRASubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = MedDRASubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = MedDRASubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = MedDRASubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = MedDRASubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = MedDRASubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = MedDRASubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = MedDRASubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = MedDRASubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = MedDRASubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = MedDRASubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = MedDRASubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = MedDRASubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = MedDRASubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = MedDRASubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = MedDRASubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = MedDRASubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = MedDRASubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = MedDRASubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = MedDRASubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = MedDRASubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = MedDRASubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = MedDRASubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_5 end ] start
					 */

					currentComponent = "tHashInput_tUnite_5";

					nb_line_tHashInput_tUnite_5++;
				}

				globalMap.put("tHashInput_tUnite_5_NB_LINE",
						nb_line_tHashInput_tUnite_5);

				ok_Hash.put("tHashInput_tUnite_5", true);
				end_Hash.put("tHashInput_tUnite_5", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_5 end ] stop
				 */

				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_1 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_1";

				globalMap.put("tHashOutput_tUnite_1_NB_LINE",
						nb_line_tHashOutput_tUnite_1);

				ok_Hash.put("tHashOutput_tUnite_1", true);
				end_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());
				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				System.out.println("All terminologies imported.");
				StatusListener.setSubStatus(95.0f,
						"All terminologies imported.");

				/**
				 * [tJava_11 begin ] stop
				 */
				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */
				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tOracleCommit_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_2 begin ] start
				 */

				ok_Hash.put("tOracleCommit_2", false);
				start_Hash.put("tOracleCommit_2", System.currentTimeMillis());
				currentComponent = "tOracleCommit_2";

				int tos_count_tOracleCommit_2 = 0;

				/**
				 * [tOracleCommit_2 begin ] stop
				 */
				/**
				 * [tOracleCommit_2 main ] start
				 */

				currentComponent = "tOracleCommit_2";

				java.sql.Connection conn_tOracleCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_2 != null) {
						if (dataSources_tOracleCommit_2.get("") != null) {
							conn_tOracleCommit_2 = dataSources_tOracleCommit_2
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_2 != null
						&& !conn_tOracleCommit_2.isClosed()) {
					conn_tOracleCommit_2.commit();
				}

				tos_count_tOracleCommit_2++;

				/**
				 * [tOracleCommit_2 main ] stop
				 */
				/**
				 * [tOracleCommit_2 end ] start
				 */

				currentComponent = "tOracleCommit_2";

				ok_Hash.put("tOracleCommit_2", true);
				end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

				tOracleRow_4Process(globalMap);

				/**
				 * [tOracleCommit_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_4 begin ] start
				 */

				ok_Hash.put("tOracleRow_4", false);
				start_Hash.put("tOracleRow_4", System.currentTimeMillis());
				currentComponent = "tOracleRow_4";

				int tos_count_tOracleRow_4 = 0;

				java.sql.Connection conn_tOracleRow_4 = null;
				conn_tOracleRow_4 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_4 = dataSources_tOracleRow_4.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_4 = conn_tOracleRow_4
						.createStatement();
				String query_tOracleRow_4 = "";
				boolean whetherReject_tOracleRow_4 = false;

				/**
				 * [tOracleRow_4 begin ] stop
				 */
				/**
				 * [tOracleRow_4 main ] start
				 */

				currentComponent = "tOracleRow_4";

				query_tOracleRow_4 = "INSERT INTO "
						+ context.DBSchema
						+ ".concept_dimension         (concept_path, concept_cd, name_char, concept_blob, update_date, download_date, import_date, sourcesystem_cd, upload_id)    SELECT DISTINCT         i2b2.c_fullname       AS concept_path,         i2b2.c_basecode       AS concept_cd,         i2b2.c_name           AS name_char,         NULL                  AS concept_blob,         i2b2.update_date,         i2b2.download_date,         i2b2.import_date,         i2b2.sourcesystem_cd,         NULL                  AS upload_id    FROM "
						+ context.DBSchema
						+ ".i2b2   WHERE i2b2.c_visualattributes LIKE 'LA%'     AND i2b2.c_basecode LIKE 'ST|%'";
				whetherReject_tOracleRow_4 = false;

				globalMap.put("tOracleRow_4_QUERY", query_tOracleRow_4);
				try {
					stmt_tOracleRow_4.execute(query_tOracleRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_4 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_4) {
				}

				tos_count_tOracleRow_4++;

				/**
				 * [tOracleRow_4 main ] stop
				 */
				/**
				 * [tOracleRow_4 end ] start
				 */

				currentComponent = "tOracleRow_4";

				stmt_tOracleRow_4.close();

				ok_Hash.put("tOracleRow_4", true);
				end_Hash.put("tOracleRow_4", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleRow_4_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_1 begin ] start
				 */

				ok_Hash.put("tOracleCommit_1", false);
				start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
				currentComponent = "tOracleCommit_1";

				int tos_count_tOracleCommit_1 = 0;

				/**
				 * [tOracleCommit_1 begin ] stop
				 */
				/**
				 * [tOracleCommit_1 main ] start
				 */

				currentComponent = "tOracleCommit_1";

				java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_1 != null) {
						if (dataSources_tOracleCommit_1.get("") != null) {
							conn_tOracleCommit_1 = dataSources_tOracleCommit_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_1 != null
						&& !conn_tOracleCommit_1.isClosed()) {
					conn_tOracleCommit_1.commit();
					conn_tOracleCommit_1.close();
				}

				tos_count_tOracleCommit_1++;

				/**
				 * [tOracleCommit_1 main ] stop
				 */
				/**
				 * [tOracleCommit_1 end ] start
				 */

				currentComponent = "tOracleCommit_1";

				ok_Hash.put("tOracleCommit_1", true);
				end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				/**
				 * [tOracleCommit_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				System.out.println("STDTERM import finished.");
				StatusListener.setSubStatus(100.0f, "STDTERM import finished.");

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_5 begin ] start
				 */

				ok_Hash.put("tXSLT_5", false);
				start_Hash.put("tXSLT_5", System.currentTimeMillis());
				currentComponent = "tXSLT_5";

				int tos_count_tXSLT_5 = 0;

				/**
				 * [tXSLT_5 begin ] stop
				 */
				/**
				 * [tXSLT_5 main ] start
				 */

				currentComponent = "tXSLT_5";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_5 = new java.io.File(context.icdoDir
						+ "/icdo-leafs.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_5 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_5);
				javax.xml.transform.Transformer ttXSLT_5 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_5);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_5 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.icdoDir + "/icd-o-3-2013.xml"));
				ttXSLT_5.transform(xmlSourcetXSLT_5,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.icdoDir
										+ "/icdo-leafs.xml")));

				if ((context.icdoDir + "/icdo-leafs.xml").indexOf("/") != -1) {
					globalMap.put("tXSLT_5_OUTPUT_FILEPATH",
							(context.icdoDir + "/icdo-leafs.xml").substring(0,
									(context.icdoDir + "/icdo-leafs.xml")
											.lastIndexOf("/")));
					globalMap
							.put("tXSLT_5_OUTPUT_FILENAME",
									(context.icdoDir + "/icdo-leafs.xml")
											.substring((context.icdoDir + "/icdo-leafs.xml")
													.lastIndexOf("/") + 1));
				} else {
					globalMap.put("tXSLT_5_OUTPUT_FILEPATH", context.icdoDir
							+ "/icdo-leafs.xml");
					globalMap.put("tXSLT_5_OUTPUT_FILENAME", context.icdoDir
							+ "/icdo-leafs.xml");
				}

				tos_count_tXSLT_5++;

				/**
				 * [tXSLT_5 main ] stop
				 */
				/**
				 * [tXSLT_5 end ] start
				 */

				currentComponent = "tXSLT_5";

				ok_Hash.put("tXSLT_5", true);
				end_Hash.put("tXSLT_5", System.currentTimeMillis());

				/**
				 * [tXSLT_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tXSLT_5_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				java.net.URLClassLoader sysloader_tLibraryLoad_1 = (java.net.URLClassLoader) ClassLoader
						.getSystemClassLoader();
				java.lang.reflect.Method method_tLibraryLoad_1 = java.net.URLClassLoader.class
						.getDeclaredMethod("addURL",
								new Class[] { java.net.URL.class });
				method_tLibraryLoad_1.setAccessible(true);

				String[] libPaths_tLibraryLoad_1 = new String[] {,};
				for (String lib_tLibraryLoad_1 : libPaths_tLibraryLoad_1) {
					String separator_tLibraryLoad_1 = System
							.getProperty("path.separator");
					String[] jarFiles_tLibraryLoad_1 = lib_tLibraryLoad_1
							.split(separator_tLibraryLoad_1);
					for (String jarFile_tLibraryLoad_1 : jarFiles_tLibraryLoad_1) {
						method_tLibraryLoad_1.invoke(sysloader_tLibraryLoad_1,
								new Object[] { new java.io.File(
										jarFile_tLibraryLoad_1).toURL() });
					}
				}

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("STDTERM import started.");
				StatusListener.setSubStatus(1.0f, "STDTERM import started.");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tOracleConnection_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_4 begin ] start
				 */

				ok_Hash.put("tXSLT_4", false);
				start_Hash.put("tXSLT_4", System.currentTimeMillis());
				currentComponent = "tXSLT_4";

				int tos_count_tXSLT_4 = 0;

				/**
				 * [tXSLT_4 begin ] stop
				 */
				/**
				 * [tXSLT_4 main ] start
				 */

				currentComponent = "tXSLT_4";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_4 = new java.io.File(context.icdoDir
						+ "/icdo-folders.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_4 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_4);
				javax.xml.transform.Transformer ttXSLT_4 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_4);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_4 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.icdoDir + "/icd-o-3-2013.xml"));
				ttXSLT_4.transform(xmlSourcetXSLT_4,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.icdoDir
										+ "/icdo-folders.xml")));

				if ((context.icdoDir + "/icdo-folders.xml").indexOf("/") != -1) {
					globalMap.put("tXSLT_4_OUTPUT_FILEPATH",
							(context.icdoDir + "/icdo-folders.xml").substring(
									0, (context.icdoDir + "/icdo-folders.xml")
											.lastIndexOf("/")));
					globalMap
							.put("tXSLT_4_OUTPUT_FILENAME",
									(context.icdoDir + "/icdo-folders.xml")
											.substring((context.icdoDir + "/icdo-folders.xml")
													.lastIndexOf("/") + 1));
				} else {
					globalMap.put("tXSLT_4_OUTPUT_FILEPATH", context.icdoDir
							+ "/icdo-folders.xml");
					globalMap.put("tXSLT_4_OUTPUT_FILENAME", context.icdoDir
							+ "/icdo-folders.xml");
				}

				tos_count_tXSLT_4++;

				/**
				 * [tXSLT_4 main ] stop
				 */
				/**
				 * [tXSLT_4 end ] start
				 */

				currentComponent = "tXSLT_4";

				ok_Hash.put("tXSLT_4", true);
				end_Hash.put("tXSLT_4", System.currentTimeMillis());

				/**
				 * [tXSLT_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tXSLT_4_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_9_row41Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_9_row41Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_9_row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_RootStruct implements
			routines.system.IPersistableRow<P21_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_GeschlechtStruct implements
			routines.system.IPersistableRow<P21_GeschlechtStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_GeschlechtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String geschlecht_id;

		public String getGeschlecht_id() {
			return this.geschlecht_id;
		}

		public String geschlecht_name;

		public String getGeschlecht_name() {
			return this.geschlecht_name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.geschlecht_id = readString(dis);

					this.geschlecht_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.geschlecht_id, dos);

				// String

				writeString(this.geschlecht_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("geschlecht_id=" + geschlecht_id);
			sb.append(",geschlecht_name=" + geschlecht_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_AufnahmeanlassStruct implements
			routines.system.IPersistableRow<P21_AufnahmeanlassStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_AufnahmeanlassStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String AUFNAHMEANLASS_ID;

		public String getAUFNAHMEANLASS_ID() {
			return this.AUFNAHMEANLASS_ID;
		}

		public String AUFNAHMEANLASS_NAME;

		public String getAUFNAHMEANLASS_NAME() {
			return this.AUFNAHMEANLASS_NAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.AUFNAHMEANLASS_ID = readString(dis);

					this.AUFNAHMEANLASS_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AUFNAHMEANLASS_ID, dos);

				// String

				writeString(this.AUFNAHMEANLASS_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AUFNAHMEANLASS_ID=" + AUFNAHMEANLASS_ID);
			sb.append(",AUFNAHMEANLASS_NAME=" + AUFNAHMEANLASS_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_EG_FolderStruct implements
			routines.system.IPersistableRow<P21_EG_FolderStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_EG_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String ENTLASSUNGSGRUND_ID;

		public String getENTLASSUNGSGRUND_ID() {
			return this.ENTLASSUNGSGRUND_ID;
		}

		public String ENTLASSUNGSGRUND_NAME;

		public String getENTLASSUNGSGRUND_NAME() {
			return this.ENTLASSUNGSGRUND_NAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.ENTLASSUNGSGRUND_ID = readString(dis);

					this.ENTLASSUNGSGRUND_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENTLASSUNGSGRUND_ID, dos);

				// String

				writeString(this.ENTLASSUNGSGRUND_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENTLASSUNGSGRUND_ID=" + ENTLASSUNGSGRUND_ID);
			sb.append(",ENTLASSUNGSGRUND_NAME=" + ENTLASSUNGSGRUND_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_EG_LeafStruct implements
			routines.system.IPersistableRow<P21_EG_LeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_EG_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String ENTLASSUNGSGRUND_ID;

		public String getENTLASSUNGSGRUND_ID() {
			return this.ENTLASSUNGSGRUND_ID;
		}

		public String ENTLASSUNGSGRUND_NAME;

		public String getENTLASSUNGSGRUND_NAME() {
			return this.ENTLASSUNGSGRUND_NAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.ENTLASSUNGSGRUND_ID = readString(dis);

					this.ENTLASSUNGSGRUND_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENTLASSUNGSGRUND_ID, dos);

				// String

				writeString(this.ENTLASSUNGSGRUND_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENTLASSUNGSGRUND_ID=" + ENTLASSUNGSGRUND_ID);
			sb.append(",ENTLASSUNGSGRUND_NAME=" + ENTLASSUNGSGRUND_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_FachabteilungStruct implements
			routines.system.IPersistableRow<P21_FachabteilungStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_FachabteilungStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String FACHABT_ID;

		public String getFACHABT_ID() {
			return this.FACHABT_ID;
		}

		public String FACHABT_NAME;

		public String getFACHABT_NAME() {
			return this.FACHABT_NAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.FACHABT_ID = readString(dis);

					this.FACHABT_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FACHABT_ID, dos);

				// String

				writeString(this.FACHABT_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FACHABT_ID=" + FACHABT_ID);
			sb.append(",FACHABT_NAME=" + FACHABT_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_Fachabteilung_SP_FolderStruct implements
			routines.system.IPersistableRow<P21_Fachabteilung_SP_FolderStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_Fachabteilung_SP_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String FACHABT_ID;

		public String getFACHABT_ID() {
			return this.FACHABT_ID;
		}

		public String FACHABT_NAME;

		public String getFACHABT_NAME() {
			return this.FACHABT_NAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.FACHABT_ID = readString(dis);

					this.FACHABT_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FACHABT_ID, dos);

				// String

				writeString(this.FACHABT_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FACHABT_ID=" + FACHABT_ID);
			sb.append(",FACHABT_NAME=" + FACHABT_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_Fachabteilung_SP_LeafStruct implements
			routines.system.IPersistableRow<P21_Fachabteilung_SP_LeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_Fachabteilung_SP_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String FACHABT_ID;

		public String getFACHABT_ID() {
			return this.FACHABT_ID;
		}

		public String FACHABT_NAME;

		public String getFACHABT_NAME() {
			return this.FACHABT_NAME;
		}

		public String FACHABT_SCHWERPUNKT;

		public String getFACHABT_SCHWERPUNKT() {
			return this.FACHABT_SCHWERPUNKT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.FACHABT_ID = readString(dis);

					this.FACHABT_NAME = readString(dis);

					this.FACHABT_SCHWERPUNKT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FACHABT_ID, dos);

				// String

				writeString(this.FACHABT_NAME, dos);

				// String

				writeString(this.FACHABT_SCHWERPUNKT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FACHABT_ID=" + FACHABT_ID);
			sb.append(",FACHABT_NAME=" + FACHABT_NAME);
			sb.append(",FACHABT_SCHWERPUNKT=" + FACHABT_SCHWERPUNKT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_Aufnahmegrund_FolderStruct implements
			routines.system.IPersistableRow<P21_Aufnahmegrund_FolderStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_Aufnahmegrund_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String aufnahmegrund_id;

		public String getAufnahmegrund_id() {
			return this.aufnahmegrund_id;
		}

		public String aufnahmegrund_name;

		public String getAufnahmegrund_name() {
			return this.aufnahmegrund_name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.aufnahmegrund_id = readString(dis);

					this.aufnahmegrund_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aufnahmegrund_id, dos);

				// String

				writeString(this.aufnahmegrund_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aufnahmegrund_id=" + aufnahmegrund_id);
			sb.append(",aufnahmegrund_name=" + aufnahmegrund_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_Aufnahmegrund_LeafStruct implements
			routines.system.IPersistableRow<P21_Aufnahmegrund_LeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_Aufnahmegrund_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String aufnahmegrund_id;

		public String getAufnahmegrund_id() {
			return this.aufnahmegrund_id;
		}

		public String aufnahmegrund_name;

		public String getAufnahmegrund_name() {
			return this.aufnahmegrund_name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.aufnahmegrund_id = readString(dis);

					this.aufnahmegrund_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aufnahmegrund_id, dos);

				// String

				writeString(this.aufnahmegrund_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aufnahmegrund_id=" + aufnahmegrund_id);
			sb.append(",aufnahmegrund_name=" + aufnahmegrund_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				P21_RootStruct P21_Root = new P21_RootStruct();

				row9Struct row9 = new row9Struct();
				P21_GeschlechtStruct P21_Geschlecht = new P21_GeschlechtStruct();

				row11Struct row11 = new row11Struct();
				P21_AufnahmeanlassStruct P21_Aufnahmeanlass = new P21_AufnahmeanlassStruct();

				row12Struct row12 = new row12Struct();
				P21_EG_FolderStruct P21_EG_Folder = new P21_EG_FolderStruct();

				row29Struct row29 = new row29Struct();
				P21_EG_LeafStruct P21_EG_Leaf = new P21_EG_LeafStruct();

				row13Struct row13 = new row13Struct();
				P21_FachabteilungStruct P21_Fachabteilung = new P21_FachabteilungStruct();

				row31Struct row31 = new row31Struct();
				P21_Fachabteilung_SP_FolderStruct P21_Fachabteilung_SP_Folder = new P21_Fachabteilung_SP_FolderStruct();

				row32Struct row32 = new row32Struct();
				P21_Fachabteilung_SP_LeafStruct P21_Fachabteilung_SP_Leaf = new P21_Fachabteilung_SP_LeafStruct();

				row14Struct row14 = new row14Struct();
				P21_Aufnahmegrund_FolderStruct P21_Aufnahmegrund_Folder = new P21_Aufnahmegrund_FolderStruct();

				row30Struct row30 = new row30Struct();
				P21_Aufnahmegrund_LeafStruct P21_Aufnahmegrund_Leaf = new P21_Aufnahmegrund_LeafStruct();

				tHashInput_tUnite_9_row41Struct tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

				/**
				 * [tHashOutput_tUnite_9 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_9", false);
				start_Hash.put("tHashOutput_tUnite_9",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_9";

				int tos_count_tHashOutput_tUnite_9 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_9 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_9_row41Struct> tHashFile_tHashOutput_tUnite_9 = null;
				if ((tHashFile_tHashOutput_tUnite_9 = mf_tHashOutput_tUnite_9
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_9")) == null) {
					tHashFile_tHashOutput_tUnite_9 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_9_row41Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_9.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_9",
						tHashFile_tHashOutput_tUnite_9);
				int nb_line_tHashOutput_tUnite_9 = 0;

				/**
				 * [tHashOutput_tUnite_9 begin ] stop
				 */

				/**
				 * [tUnite_9 begin ] start
				 */

				ok_Hash.put("tUnite_9", false);
				start_Hash.put("tUnite_9", System.currentTimeMillis());
				currentComponent = "tUnite_9";

				int tos_count_tUnite_9 = 0;

				int nb_line_tUnite_9 = 0;

				/**
				 * [tUnite_9 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\r\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\r\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				context.p21Dir + "root_P21.csv"/**
				 * End field
				 * tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						P21_Root = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						P21_Root = new P21_RootStruct();
						try {

							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								P21_Root.C_HLEVEL = null;

								P21_Root.C_FULLNAME = null;

								P21_Root.C_NAME = null;

								P21_Root.C_SYNONYM_CD = null;

								P21_Root.C_VISUALATTRIBUTES = null;

								P21_Root.C_TOTALNUM = null;

								P21_Root.C_BASECODE = null;

								P21_Root.C_METADATAXML = null;

								P21_Root.C_FACTTABLECOLUMN = null;

								P21_Root.C_TABLENAME = null;

								P21_Root.C_COLUMNNAME = null;

								P21_Root.C_COLUMNDATATYPE = null;

								P21_Root.C_OPERATOR = null;

								P21_Root.C_DIMCODE = null;

								P21_Root.C_COMMENT = null;

								P21_Root.C_TOOLTIP = null;

								P21_Root.M_APPLIED_PATH = null;

								P21_Root.UPDATE_DATE = null;

								P21_Root.DOWNLOAD_DATE = null;

								P21_Root.IMPORT_DATE = null;

								P21_Root.SOURCESYSTEM_CD = null;

								P21_Root.VALUETYPE_CD = null;

								P21_Root.M_EXCLUSION_CD = null;

								P21_Root.C_PATH = null;

								P21_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.C_HLEVEL = null;
									}

								} else {
									P21_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_FULLNAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_NAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.C_SYNONYM_CD = null;
									}

								} else {
									P21_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_TOTALNUM = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_BASECODE = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_METADATAXML = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 9;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_TABLENAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 10;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_COLUMNNAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 11;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									P21_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 12;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_OPERATOR = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 13;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_DIMCODE = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 14;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_COMMENT = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 15;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_TOOLTIP = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 16;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.M_APPLIED_PATH = null;
									}

								} else {
									P21_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 17;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										P21_Root.UPDATE_DATE = null;
									}

								} else {
									P21_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 18;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										P21_Root.DOWNLOAD_DATE = null;
									}

								} else {
									P21_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 19;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										P21_Root.IMPORT_DATE = null;
									}

								} else {
									P21_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 20;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 21;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.VALUETYPE_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 22;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.M_EXCLUSION_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 23;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_PATH = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 24;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_SYMBOL = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							P21_Root = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "P21_Root"
						if (P21_Root != null) {

							/**
							 * [tUnite_9 main ] start
							 */

							currentComponent = "tUnite_9";

							// ////////

							// for output
							tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

							tHashInput_tUnite_9_row41.C_HLEVEL = P21_Root.C_HLEVEL;
							tHashInput_tUnite_9_row41.C_FULLNAME = P21_Root.C_FULLNAME;
							tHashInput_tUnite_9_row41.C_NAME = P21_Root.C_NAME;
							tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Root.C_SYNONYM_CD;
							tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Root.C_TOTALNUM;
							tHashInput_tUnite_9_row41.C_BASECODE = P21_Root.C_BASECODE;
							tHashInput_tUnite_9_row41.C_METADATAXML = P21_Root.C_METADATAXML;
							tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_9_row41.C_TABLENAME = P21_Root.C_TABLENAME;
							tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Root.C_COLUMNNAME;
							tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_9_row41.C_OPERATOR = P21_Root.C_OPERATOR;
							tHashInput_tUnite_9_row41.C_DIMCODE = P21_Root.C_DIMCODE;
							tHashInput_tUnite_9_row41.C_COMMENT = P21_Root.C_COMMENT;
							tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Root.C_TOOLTIP;
							tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Root.M_APPLIED_PATH;
							tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Root.UPDATE_DATE;
							tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Root.IMPORT_DATE;
							tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Root.VALUETYPE_CD;
							tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_9_row41.C_PATH = P21_Root.C_PATH;
							tHashInput_tUnite_9_row41.C_SYMBOL = P21_Root.C_SYMBOL;

							nb_line_tUnite_9++;

							// ////////

							tos_count_tUnite_9++;

							/**
							 * [tUnite_9 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_9 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_9";

							tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

							oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
							oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
							oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
							oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
							oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
							oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
							oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
							oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
							oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
							oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
							oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_9
									.put(oneRow_tHashOutput_tUnite_9);
							nb_line_tHashOutput_tUnite_9++;

							tos_count_tHashOutput_tUnite_9++;

							/**
							 * [tHashOutput_tUnite_9 main ] stop
							 */

						} // End of branch "P21_Root"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_GeschlechtStruct P21_Geschlecht_tmp = new P21_GeschlechtStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.p21Dir + "geschlecht.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row9 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row9 = new row9Struct();
						try {

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row9.geschlecht_id = null;

								row9.geschlecht_name = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row9.geschlecht_id = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row9.geschlecht_id = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row9.geschlecht_name = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row9.geschlecht_name = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								P21_Geschlecht = null;

								// # Output table : 'P21_Geschlecht'
								P21_Geschlecht_tmp.C_HLEVEL = 4;
								P21_Geschlecht_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\GSCHL\\"
										+ StringHandling
												.UPCASE(row9.geschlecht_id)
										+ "\\";
								P21_Geschlecht_tmp.C_NAME = row9.geschlecht_name;
								P21_Geschlecht_tmp.C_SYNONYM_CD = 'N';
								P21_Geschlecht_tmp.C_VISUALATTRIBUTES = "LA";
								P21_Geschlecht_tmp.C_TOTALNUM = null;
								P21_Geschlecht_tmp.C_BASECODE = "ST|P21|GSCHL:"
										+ row9.geschlecht_id;
								P21_Geschlecht_tmp.C_METADATAXML = null;
								P21_Geschlecht_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_Geschlecht_tmp.C_TABLENAME = "concept_dimension";
								P21_Geschlecht_tmp.C_COLUMNNAME = "concept_path";
								P21_Geschlecht_tmp.C_COLUMNDATATYPE = 'T';
								P21_Geschlecht_tmp.C_OPERATOR = "LIKE";
								P21_Geschlecht_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\GSCHL\\"
										+ StringHandling
												.UPCASE(row9.geschlecht_id)
										+ "\\";
								P21_Geschlecht_tmp.C_COMMENT = null;
								P21_Geschlecht_tmp.C_TOOLTIP = row9.geschlecht_name;
								P21_Geschlecht_tmp.M_APPLIED_PATH = '@';
								P21_Geschlecht_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_Geschlecht_tmp.DOWNLOAD_DATE = null;
								P21_Geschlecht_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_Geschlecht_tmp.SOURCESYSTEM_CD = "P21";
								P21_Geschlecht_tmp.VALUETYPE_CD = null;
								P21_Geschlecht_tmp.M_EXCLUSION_CD = null;
								P21_Geschlecht_tmp.C_PATH = null;
								P21_Geschlecht_tmp.C_SYMBOL = null;
								P21_Geschlecht = P21_Geschlecht_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "P21_Geschlecht"
							if (P21_Geschlecht != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_Geschlecht.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_Geschlecht.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_Geschlecht.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Geschlecht.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Geschlecht.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Geschlecht.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_Geschlecht.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_Geschlecht.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Geschlecht.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_Geschlecht.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Geschlecht.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Geschlecht.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_Geschlecht.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_Geschlecht.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_Geschlecht.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Geschlecht.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Geschlecht.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Geschlecht.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Geschlecht.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Geschlecht.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Geschlecht.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Geschlecht.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Geschlecht.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_Geschlecht.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_Geschlecht.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_Geschlecht"

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_AufnahmeanlassStruct P21_Aufnahmeanlass_tmp = new P21_AufnahmeanlassStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				int footer_tFileInputDelimited_10 = 0;
				int totalLinetFileInputDelimited_10 = 0;
				int limittFileInputDelimited_10 = -1;
				int lastLinetFileInputDelimited_10 = -1;

				char fieldSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_10 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_10 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_10 = /**
				 * Start field
				 * tFileInputDelimited_10:FILENAME
				 */
				context.p21Dir + "aufnahmeanlass.csv"/**
				 * End field
				 * tFileInputDelimited_10:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

				try {

					String[] rowtFileInputDelimited_10 = null;
					int currentLinetFileInputDelimited_10 = 0;
					int outputLinetFileInputDelimited_10 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_10 = 0;
							if (footer_value_tFileInputDelimited_10 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_10,
									fieldSeparator_tFileInputDelimited_10[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_10)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_10[0]);
						}

						csvReadertFileInputDelimited_10
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
							csvReadertFileInputDelimited_10.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_10[0]);

						csvReadertFileInputDelimited_10.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_10
								.setEscapeChar(csvReadertFileInputDelimited_10
										.getQuoteChar());

						if (footer_tFileInputDelimited_10 > 0) {
							for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 1; totalLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_10.readNext()) {

								rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
										.getValues();
								if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_10[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_10++;

								}

							}
							int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
									- footer_tFileInputDelimited_10 < 0 ? 0
									: totalLinetFileInputDelimited_10
											- footer_tFileInputDelimited_10;
							if (lastLinetFileInputDelimited_10 > 0) {
								lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
										: lastLineTemptFileInputDelimited_10;
							} else {
								lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
							}

							csvReadertFileInputDelimited_10.close();
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_10[0]);
							}
							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

						}

						if (limittFileInputDelimited_10 != 0) {
							for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 1; currentLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
						}
						csvReadertFileInputDelimited_10
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_10 != 0
							&& csvReadertFileInputDelimited_10 != null
							&& csvReadertFileInputDelimited_10.readNext()) {

						rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
								.getValues();

						if (rowtFileInputDelimited_10.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_10[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_10++;

						if (lastLinetFileInputDelimited_10 > -1
								&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
							break;
						}
						outputLinetFileInputDelimited_10++;
						if (limittFileInputDelimited_10 > 0
								&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
							break;
						}

						row11 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row11 = new row11Struct();
						try {

							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row11.AUFNAHMEANLASS_ID = null;

								row11.AUFNAHMEANLASS_NAME = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_10 = 0;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row11.AUFNAHMEANLASS_ID = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row11.AUFNAHMEANLASS_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 1;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row11.AUFNAHMEANLASS_NAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row11.AUFNAHMEANLASS_NAME = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row11 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								P21_Aufnahmeanlass = null;

								// # Output table : 'P21_Aufnahmeanlass'
								P21_Aufnahmeanlass_tmp.C_HLEVEL = 4;
								P21_Aufnahmeanlass_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\AUFNAN\\"
										+ StringHandling
												.UPCASE(row11.AUFNAHMEANLASS_ID)
										+ "\\";
								P21_Aufnahmeanlass_tmp.C_NAME = row11.AUFNAHMEANLASS_NAME;
								P21_Aufnahmeanlass_tmp.C_SYNONYM_CD = 'N';
								P21_Aufnahmeanlass_tmp.C_VISUALATTRIBUTES = "LA";
								P21_Aufnahmeanlass_tmp.C_TOTALNUM = null;
								P21_Aufnahmeanlass_tmp.C_BASECODE = "ST|P21|AUFNAN:"
										+ StringHandling
												.UPCASE(row11.AUFNAHMEANLASS_ID);
								P21_Aufnahmeanlass_tmp.C_METADATAXML = null;
								P21_Aufnahmeanlass_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_Aufnahmeanlass_tmp.C_TABLENAME = "concept_dimension";
								P21_Aufnahmeanlass_tmp.C_COLUMNNAME = "concept_path";
								P21_Aufnahmeanlass_tmp.C_COLUMNDATATYPE = 'T';
								P21_Aufnahmeanlass_tmp.C_OPERATOR = "LIKE";
								P21_Aufnahmeanlass_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\AUFNAN\\"
										+ StringHandling
												.UPCASE(row11.AUFNAHMEANLASS_ID)
										+ "\\";
								P21_Aufnahmeanlass_tmp.C_COMMENT = null;
								P21_Aufnahmeanlass_tmp.C_TOOLTIP = row11.AUFNAHMEANLASS_NAME;
								P21_Aufnahmeanlass_tmp.M_APPLIED_PATH = '@';
								P21_Aufnahmeanlass_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_Aufnahmeanlass_tmp.DOWNLOAD_DATE = null;
								P21_Aufnahmeanlass_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_Aufnahmeanlass_tmp.SOURCESYSTEM_CD = "P21";
								P21_Aufnahmeanlass_tmp.VALUETYPE_CD = null;
								P21_Aufnahmeanlass_tmp.M_EXCLUSION_CD = null;
								P21_Aufnahmeanlass_tmp.C_PATH = null;
								P21_Aufnahmeanlass_tmp.C_SYMBOL = null;
								P21_Aufnahmeanlass = P21_Aufnahmeanlass_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "P21_Aufnahmeanlass"
							if (P21_Aufnahmeanlass != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_Aufnahmeanlass.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_Aufnahmeanlass.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_Aufnahmeanlass.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Aufnahmeanlass.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Aufnahmeanlass.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Aufnahmeanlass.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_Aufnahmeanlass.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_Aufnahmeanlass.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Aufnahmeanlass.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_Aufnahmeanlass.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Aufnahmeanlass.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Aufnahmeanlass.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_Aufnahmeanlass.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_Aufnahmeanlass.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_Aufnahmeanlass.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Aufnahmeanlass.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Aufnahmeanlass.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Aufnahmeanlass.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Aufnahmeanlass.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Aufnahmeanlass.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Aufnahmeanlass.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Aufnahmeanlass.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Aufnahmeanlass.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_Aufnahmeanlass.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_Aufnahmeanlass.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_Aufnahmeanlass"

						} // End of branch "row11"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						nb_line_tFileInputDelimited_10++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_10 != null) {
							csvReadertFileInputDelimited_10.close();
						}
					}
					if (csvReadertFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								nb_line_tFileInputDelimited_10);
					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());
				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_EG_FolderStruct P21_EG_Folder_tmp = new P21_EG_FolderStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				int nb_line_tFileInputDelimited_11 = 0;
				int footer_tFileInputDelimited_11 = 0;
				int totalLinetFileInputDelimited_11 = 0;
				int limittFileInputDelimited_11 = -1;
				int lastLinetFileInputDelimited_11 = -1;

				char fieldSeparator_tFileInputDelimited_11[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_11 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_11[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_11 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_11 = /**
				 * Start field
				 * tFileInputDelimited_11:FILENAME
				 */
				context.p21Dir + "entlassungsgrund-folders.csv"/**
				 * End field
				 * tFileInputDelimited_11:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_11 = null;

				try {

					String[] rowtFileInputDelimited_11 = null;
					int currentLinetFileInputDelimited_11 = 0;
					int outputLinetFileInputDelimited_11 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_11 = 0;
							if (footer_value_tFileInputDelimited_11 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_11,
									fieldSeparator_tFileInputDelimited_11[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_11)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_11[0]);
						}

						csvReadertFileInputDelimited_11
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
							csvReadertFileInputDelimited_11.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_11[0]);

						csvReadertFileInputDelimited_11.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_11
								.setEscapeChar(csvReadertFileInputDelimited_11
										.getQuoteChar());

						if (footer_tFileInputDelimited_11 > 0) {
							for (totalLinetFileInputDelimited_11 = 0; totalLinetFileInputDelimited_11 < 1; totalLinetFileInputDelimited_11++) {
								csvReadertFileInputDelimited_11.readNext();
							}
							csvReadertFileInputDelimited_11
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_11.readNext()) {

								rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
										.getValues();
								if (!(rowtFileInputDelimited_11.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_11[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_11++;

								}

							}
							int lastLineTemptFileInputDelimited_11 = totalLinetFileInputDelimited_11
									- footer_tFileInputDelimited_11 < 0 ? 0
									: totalLinetFileInputDelimited_11
											- footer_tFileInputDelimited_11;
							if (lastLinetFileInputDelimited_11 > 0) {
								lastLinetFileInputDelimited_11 = lastLinetFileInputDelimited_11 < lastLineTemptFileInputDelimited_11 ? lastLinetFileInputDelimited_11
										: lastLineTemptFileInputDelimited_11;
							} else {
								lastLinetFileInputDelimited_11 = lastLineTemptFileInputDelimited_11;
							}

							csvReadertFileInputDelimited_11.close();
							if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_11,
										fieldSeparator_tFileInputDelimited_11[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_11)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_11[0]);
							}
							csvReadertFileInputDelimited_11
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
								csvReadertFileInputDelimited_11
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_11[0]);

							csvReadertFileInputDelimited_11.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_11
									.setEscapeChar(csvReadertFileInputDelimited_11
											.getQuoteChar());

						}

						if (limittFileInputDelimited_11 != 0) {
							for (currentLinetFileInputDelimited_11 = 0; currentLinetFileInputDelimited_11 < 1; currentLinetFileInputDelimited_11++) {
								csvReadertFileInputDelimited_11.readNext();
							}
						}
						csvReadertFileInputDelimited_11
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_11 != 0
							&& csvReadertFileInputDelimited_11 != null
							&& csvReadertFileInputDelimited_11.readNext()) {

						rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
								.getValues();

						if (rowtFileInputDelimited_11.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_11[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_11++;

						if (lastLinetFileInputDelimited_11 > -1
								&& currentLinetFileInputDelimited_11 > lastLinetFileInputDelimited_11) {
							break;
						}
						outputLinetFileInputDelimited_11++;
						if (limittFileInputDelimited_11 > 0
								&& outputLinetFileInputDelimited_11 > limittFileInputDelimited_11) {
							break;
						}

						row12 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row12 = new row12Struct();
						try {

							if (rowtFileInputDelimited_11.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_11[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row12.ENTLASSUNGSGRUND_ID = null;

								row12.ENTLASSUNGSGRUND_NAME = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_11 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_11 = 0;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row12.ENTLASSUNGSGRUND_ID = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row12.ENTLASSUNGSGRUND_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 1;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row12.ENTLASSUNGSGRUND_NAME = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row12.ENTLASSUNGSGRUND_NAME = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								P21_EG_Folder = null;

								// # Output table : 'P21_EG_Folder'
								P21_EG_Folder_tmp.C_HLEVEL = 4;
								P21_EG_Folder_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\ENTLGR\\"
										+ StringHandling
												.UPCASE(row12.ENTLASSUNGSGRUND_ID)
										+ "\\";
								P21_EG_Folder_tmp.C_NAME = row12.ENTLASSUNGSGRUND_ID
										+ " - " + row12.ENTLASSUNGSGRUND_NAME;
								P21_EG_Folder_tmp.C_SYNONYM_CD = 'N';
								P21_EG_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								P21_EG_Folder_tmp.C_TOTALNUM = null;
								P21_EG_Folder_tmp.C_BASECODE = null;
								P21_EG_Folder_tmp.C_METADATAXML = null;
								P21_EG_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_EG_Folder_tmp.C_TABLENAME = "concept_dimension";
								P21_EG_Folder_tmp.C_COLUMNNAME = "concept_path";
								P21_EG_Folder_tmp.C_COLUMNDATATYPE = 'T';
								P21_EG_Folder_tmp.C_OPERATOR = "LIKE";
								P21_EG_Folder_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\ENTLGR\\"
										+ StringHandling
												.UPCASE(row12.ENTLASSUNGSGRUND_ID)
										+ "\\";
								P21_EG_Folder_tmp.C_COMMENT = null;
								P21_EG_Folder_tmp.C_TOOLTIP = row12.ENTLASSUNGSGRUND_NAME;
								P21_EG_Folder_tmp.M_APPLIED_PATH = '@';
								P21_EG_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_EG_Folder_tmp.DOWNLOAD_DATE = null;
								P21_EG_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_EG_Folder_tmp.SOURCESYSTEM_CD = "P21";
								P21_EG_Folder_tmp.VALUETYPE_CD = null;
								P21_EG_Folder_tmp.M_EXCLUSION_CD = null;
								P21_EG_Folder_tmp.C_PATH = null;
								P21_EG_Folder_tmp.C_SYMBOL = null;
								P21_EG_Folder = P21_EG_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "P21_EG_Folder"
							if (P21_EG_Folder != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_EG_Folder.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_EG_Folder.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_EG_Folder.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_EG_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_EG_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_EG_Folder.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_EG_Folder.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_EG_Folder.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_EG_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_EG_Folder.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_EG_Folder.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_EG_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_EG_Folder.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_EG_Folder.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_EG_Folder.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_EG_Folder.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_EG_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_EG_Folder.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_EG_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_EG_Folder.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_EG_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_EG_Folder.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_EG_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_EG_Folder.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_EG_Folder.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_EG_Folder"

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						nb_line_tFileInputDelimited_11++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_11 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_11 != null) {
							csvReadertFileInputDelimited_11.close();
						}
					}
					if (csvReadertFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE",
								nb_line_tFileInputDelimited_11);
					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMap_26 begin ] start
				 */

				ok_Hash.put("tMap_26", false);
				start_Hash.put("tMap_26", System.currentTimeMillis());
				currentComponent = "tMap_26";

				int tos_count_tMap_26 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_26__Struct {
					String ENTLGRID;
					int LEVEL;
				}
				Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_EG_LeafStruct P21_EG_Leaf_tmp = new P21_EG_LeafStruct();
				// ###############################

				/**
				 * [tMap_26 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_29 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_29", false);
				start_Hash.put("tFileInputDelimited_29",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_29";

				int tos_count_tFileInputDelimited_29 = 0;

				int nb_line_tFileInputDelimited_29 = 0;
				int footer_tFileInputDelimited_29 = 0;
				int totalLinetFileInputDelimited_29 = 0;
				int limittFileInputDelimited_29 = -1;
				int lastLinetFileInputDelimited_29 = -1;

				char fieldSeparator_tFileInputDelimited_29[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_29 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_29[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_29 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_29 = /**
				 * Start field
				 * tFileInputDelimited_29:FILENAME
				 */
				context.p21Dir + "entlassungsgrund-leafs.csv"/**
				 * End field
				 * tFileInputDelimited_29:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_29 = null;

				try {

					String[] rowtFileInputDelimited_29 = null;
					int currentLinetFileInputDelimited_29 = 0;
					int outputLinetFileInputDelimited_29 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_29 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_29 = 0;
							if (footer_value_tFileInputDelimited_29 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_29,
									fieldSeparator_tFileInputDelimited_29[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_29)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_29[0]);
						}

						csvReadertFileInputDelimited_29
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_29[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_29[0] != '\r'))
							csvReadertFileInputDelimited_29.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_29[0]);

						csvReadertFileInputDelimited_29.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_29
								.setEscapeChar(csvReadertFileInputDelimited_29
										.getQuoteChar());

						if (footer_tFileInputDelimited_29 > 0) {
							for (totalLinetFileInputDelimited_29 = 0; totalLinetFileInputDelimited_29 < 1; totalLinetFileInputDelimited_29++) {
								csvReadertFileInputDelimited_29.readNext();
							}
							csvReadertFileInputDelimited_29
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_29.readNext()) {

								rowtFileInputDelimited_29 = csvReadertFileInputDelimited_29
										.getValues();
								if (!(rowtFileInputDelimited_29.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_29[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_29++;

								}

							}
							int lastLineTemptFileInputDelimited_29 = totalLinetFileInputDelimited_29
									- footer_tFileInputDelimited_29 < 0 ? 0
									: totalLinetFileInputDelimited_29
											- footer_tFileInputDelimited_29;
							if (lastLinetFileInputDelimited_29 > 0) {
								lastLinetFileInputDelimited_29 = lastLinetFileInputDelimited_29 < lastLineTemptFileInputDelimited_29 ? lastLinetFileInputDelimited_29
										: lastLineTemptFileInputDelimited_29;
							} else {
								lastLinetFileInputDelimited_29 = lastLineTemptFileInputDelimited_29;
							}

							csvReadertFileInputDelimited_29.close();
							if (filename_tFileInputDelimited_29 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_29,
										fieldSeparator_tFileInputDelimited_29[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_29)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_29[0]);
							}
							csvReadertFileInputDelimited_29
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_29[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_29[0] != '\r'))
								csvReadertFileInputDelimited_29
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_29[0]);

							csvReadertFileInputDelimited_29.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_29
									.setEscapeChar(csvReadertFileInputDelimited_29
											.getQuoteChar());

						}

						if (limittFileInputDelimited_29 != 0) {
							for (currentLinetFileInputDelimited_29 = 0; currentLinetFileInputDelimited_29 < 1; currentLinetFileInputDelimited_29++) {
								csvReadertFileInputDelimited_29.readNext();
							}
						}
						csvReadertFileInputDelimited_29
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_29 != 0
							&& csvReadertFileInputDelimited_29 != null
							&& csvReadertFileInputDelimited_29.readNext()) {

						rowtFileInputDelimited_29 = csvReadertFileInputDelimited_29
								.getValues();

						if (rowtFileInputDelimited_29.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_29[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_29++;

						if (lastLinetFileInputDelimited_29 > -1
								&& currentLinetFileInputDelimited_29 > lastLinetFileInputDelimited_29) {
							break;
						}
						outputLinetFileInputDelimited_29++;
						if (limittFileInputDelimited_29 > 0
								&& outputLinetFileInputDelimited_29 > limittFileInputDelimited_29) {
							break;
						}

						row29 = null;

						boolean whetherReject_tFileInputDelimited_29 = false;
						row29 = new row29Struct();
						try {

							if (rowtFileInputDelimited_29.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_29[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row29.ENTLASSUNGSGRUND_ID = null;

								row29.ENTLASSUNGSGRUND_NAME = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_29 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_29 = 0;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row29.ENTLASSUNGSGRUND_ID = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row29.ENTLASSUNGSGRUND_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 1;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row29.ENTLASSUNGSGRUND_NAME = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row29.ENTLASSUNGSGRUND_NAME = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_29 = true;

							System.err.println(e.getMessage());
							row29 = null;

						}

						/**
						 * [tFileInputDelimited_29 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_29 main ] start
						 */

						currentComponent = "tFileInputDelimited_29";

						tos_count_tFileInputDelimited_29++;

						/**
						 * [tFileInputDelimited_29 main ] stop
						 */
						// Start of branch "row29"
						if (row29 != null) {

							/**
							 * [tMap_26 main ] start
							 */

							currentComponent = "tMap_26";

							boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_26 = false;
							boolean mainRowRejected_tMap_26 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_26__Struct Var = Var__tMap_26;
								Var.ENTLGRID = row29.ENTLASSUNGSGRUND_ID
										.length() == 3 ? row29.ENTLASSUNGSGRUND_ID
										.substring(0, 2)
										+ "\\"
										+ row29.ENTLASSUNGSGRUND_ID.substring(
												2, 3)
										: row29.ENTLASSUNGSGRUND_ID;
								Var.LEVEL = row29.ENTLASSUNGSGRUND_ID.length() == 3 ? 5
										: 4;// ###############################
								// ###############################
								// # Output tables

								P21_EG_Leaf = null;

								// # Output table : 'P21_EG_Leaf'
								P21_EG_Leaf_tmp.C_HLEVEL = Var.LEVEL;
								P21_EG_Leaf_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\ENTLGR\\"
										+ StringHandling.UPCASE(Var.ENTLGRID)
										+ "\\" + "Wert\\";
								P21_EG_Leaf_tmp.C_NAME = row29.ENTLASSUNGSGRUND_ID
										+ " - "
										+ row29.ENTLASSUNGSGRUND_NAME
										+ " (Wert)";
								P21_EG_Leaf_tmp.C_SYNONYM_CD = 'N';
								P21_EG_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								P21_EG_Leaf_tmp.C_TOTALNUM = null;
								P21_EG_Leaf_tmp.C_BASECODE = "ST|P21|ENTLGR:"
										+ StringHandling
												.UPCASE(row29.ENTLASSUNGSGRUND_ID);
								P21_EG_Leaf_tmp.C_METADATAXML = null;
								P21_EG_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_EG_Leaf_tmp.C_TABLENAME = "concept_dimension";
								P21_EG_Leaf_tmp.C_COLUMNNAME = "concept_path";
								P21_EG_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								P21_EG_Leaf_tmp.C_OPERATOR = "LIKE";
								P21_EG_Leaf_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\ENTLGR\\"
										+ StringHandling
												.UPCASE(row29.ENTLASSUNGSGRUND_ID)
										+ "\\";
								P21_EG_Leaf_tmp.C_COMMENT = null;
								P21_EG_Leaf_tmp.C_TOOLTIP = row29.ENTLASSUNGSGRUND_NAME;
								P21_EG_Leaf_tmp.M_APPLIED_PATH = '@';
								P21_EG_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_EG_Leaf_tmp.DOWNLOAD_DATE = null;
								P21_EG_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_EG_Leaf_tmp.SOURCESYSTEM_CD = "P21";
								P21_EG_Leaf_tmp.VALUETYPE_CD = null;
								P21_EG_Leaf_tmp.M_EXCLUSION_CD = null;
								P21_EG_Leaf_tmp.C_PATH = null;
								P21_EG_Leaf_tmp.C_SYMBOL = null;
								P21_EG_Leaf = P21_EG_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_26 = false;

							tos_count_tMap_26++;

							/**
							 * [tMap_26 main ] stop
							 */
							// Start of branch "P21_EG_Leaf"
							if (P21_EG_Leaf != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_EG_Leaf.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_EG_Leaf.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_EG_Leaf.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_EG_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_EG_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_EG_Leaf.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_EG_Leaf.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_EG_Leaf.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_EG_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_EG_Leaf.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_EG_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_EG_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_EG_Leaf.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_EG_Leaf.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_EG_Leaf.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_EG_Leaf.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_EG_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_EG_Leaf.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_EG_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_EG_Leaf.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_EG_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_EG_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_EG_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_EG_Leaf.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_EG_Leaf.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_EG_Leaf"

						} // End of branch "row29"

						/**
						 * [tFileInputDelimited_29 end ] start
						 */

						currentComponent = "tFileInputDelimited_29";

						nb_line_tFileInputDelimited_29++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_29 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_29 != null) {
							csvReadertFileInputDelimited_29.close();
						}
					}
					if (csvReadertFileInputDelimited_29 != null) {
						globalMap.put("tFileInputDelimited_29_NB_LINE",
								nb_line_tFileInputDelimited_29);
					}
				}

				ok_Hash.put("tFileInputDelimited_29", true);
				end_Hash.put("tFileInputDelimited_29",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_29 end ] stop
				 */

				/**
				 * [tMap_26 end ] start
				 */

				currentComponent = "tMap_26";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_26", true);
				end_Hash.put("tMap_26", System.currentTimeMillis());

				/**
				 * [tMap_26 end ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());
				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_FachabteilungStruct P21_Fachabteilung_tmp = new P21_FachabteilungStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				context.p21Dir + "fachabt-leafs.csv"/**
				 * End field
				 * tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 1; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 1; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row13 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row13 = new row13Struct();
						try {

							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row13.FACHABT_ID = null;

								row13.FACHABT_NAME = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.FACHABT_ID = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.FACHABT_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.FACHABT_NAME = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.FACHABT_NAME = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								P21_Fachabteilung = null;

								// # Output table : 'P21_Fachabteilung'
								P21_Fachabteilung_tmp.C_HLEVEL = 4;
								P21_Fachabteilung_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\FACHABT\\"
										+ StringHandling
												.UPCASE(row13.FACHABT_ID)
										+ "\\";
								P21_Fachabteilung_tmp.C_NAME = StringHandling
										.UPCASE(row13.FACHABT_ID)
										+ " - "
										+ row13.FACHABT_NAME;
								P21_Fachabteilung_tmp.C_SYNONYM_CD = 'N';
								P21_Fachabteilung_tmp.C_VISUALATTRIBUTES = "LA";
								P21_Fachabteilung_tmp.C_TOTALNUM = null;
								P21_Fachabteilung_tmp.C_BASECODE = "ST|P21|FACHABT:"
										+ StringHandling
												.UPCASE(row13.FACHABT_ID);
								P21_Fachabteilung_tmp.C_METADATAXML = null;
								P21_Fachabteilung_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_Fachabteilung_tmp.C_TABLENAME = "concept_dimension";
								P21_Fachabteilung_tmp.C_COLUMNNAME = "concept_path";
								P21_Fachabteilung_tmp.C_COLUMNDATATYPE = 'T';
								P21_Fachabteilung_tmp.C_OPERATOR = "LIKE";
								P21_Fachabteilung_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\FACHABT\\"
										+ StringHandling
												.UPCASE(row13.FACHABT_ID)
										+ "\\";
								P21_Fachabteilung_tmp.C_COMMENT = null;
								P21_Fachabteilung_tmp.C_TOOLTIP = row13.FACHABT_NAME;
								P21_Fachabteilung_tmp.M_APPLIED_PATH = '@';
								P21_Fachabteilung_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_Fachabteilung_tmp.DOWNLOAD_DATE = null;
								P21_Fachabteilung_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_Fachabteilung_tmp.SOURCESYSTEM_CD = "P21";
								P21_Fachabteilung_tmp.VALUETYPE_CD = null;
								P21_Fachabteilung_tmp.M_EXCLUSION_CD = null;
								P21_Fachabteilung_tmp.C_PATH = null;
								P21_Fachabteilung_tmp.C_SYMBOL = null;
								P21_Fachabteilung = P21_Fachabteilung_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */
							// Start of branch "P21_Fachabteilung"
							if (P21_Fachabteilung != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_Fachabteilung.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_Fachabteilung.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_Fachabteilung.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Fachabteilung.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Fachabteilung.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Fachabteilung.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_Fachabteilung.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_Fachabteilung.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Fachabteilung.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_Fachabteilung.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Fachabteilung.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Fachabteilung.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_Fachabteilung.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_Fachabteilung.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_Fachabteilung.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Fachabteilung.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Fachabteilung.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Fachabteilung.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Fachabteilung.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Fachabteilung.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Fachabteilung.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Fachabteilung.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Fachabteilung.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_Fachabteilung.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_Fachabteilung.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_Fachabteilung"

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMap_31 begin ] start
				 */

				ok_Hash.put("tMap_31", false);
				start_Hash.put("tMap_31", System.currentTimeMillis());
				currentComponent = "tMap_31";

				int tos_count_tMap_31 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_31__Struct {
				}
				Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_Fachabteilung_SP_FolderStruct P21_Fachabteilung_SP_Folder_tmp = new P21_Fachabteilung_SP_FolderStruct();
				// ###############################

				/**
				 * [tMap_31 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_32 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_32", false);
				start_Hash.put("tFileInputDelimited_32",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_32";

				int tos_count_tFileInputDelimited_32 = 0;

				int nb_line_tFileInputDelimited_32 = 0;
				int footer_tFileInputDelimited_32 = 0;
				int totalLinetFileInputDelimited_32 = 0;
				int limittFileInputDelimited_32 = -1;
				int lastLinetFileInputDelimited_32 = -1;

				char fieldSeparator_tFileInputDelimited_32[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_32 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_32[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_32 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_32 = /**
				 * Start field
				 * tFileInputDelimited_32:FILENAME
				 */
				context.p21Dir + "fachabt-schwerpunkt-folders.csv"/**
				 * End field
				 * tFileInputDelimited_32:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_32 = null;

				try {

					String[] rowtFileInputDelimited_32 = null;
					int currentLinetFileInputDelimited_32 = 0;
					int outputLinetFileInputDelimited_32 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_32 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_32 = 0;
							if (footer_value_tFileInputDelimited_32 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_32,
									fieldSeparator_tFileInputDelimited_32[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_32)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_32[0]);
						}

						csvReadertFileInputDelimited_32
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_32[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_32[0] != '\r'))
							csvReadertFileInputDelimited_32.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_32[0]);

						csvReadertFileInputDelimited_32.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_32
								.setEscapeChar(csvReadertFileInputDelimited_32
										.getQuoteChar());

						if (footer_tFileInputDelimited_32 > 0) {
							for (totalLinetFileInputDelimited_32 = 0; totalLinetFileInputDelimited_32 < 1; totalLinetFileInputDelimited_32++) {
								csvReadertFileInputDelimited_32.readNext();
							}
							csvReadertFileInputDelimited_32
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_32.readNext()) {

								rowtFileInputDelimited_32 = csvReadertFileInputDelimited_32
										.getValues();
								if (!(rowtFileInputDelimited_32.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_32[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_32++;

								}

							}
							int lastLineTemptFileInputDelimited_32 = totalLinetFileInputDelimited_32
									- footer_tFileInputDelimited_32 < 0 ? 0
									: totalLinetFileInputDelimited_32
											- footer_tFileInputDelimited_32;
							if (lastLinetFileInputDelimited_32 > 0) {
								lastLinetFileInputDelimited_32 = lastLinetFileInputDelimited_32 < lastLineTemptFileInputDelimited_32 ? lastLinetFileInputDelimited_32
										: lastLineTemptFileInputDelimited_32;
							} else {
								lastLinetFileInputDelimited_32 = lastLineTemptFileInputDelimited_32;
							}

							csvReadertFileInputDelimited_32.close();
							if (filename_tFileInputDelimited_32 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_32,
										fieldSeparator_tFileInputDelimited_32[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_32)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_32[0]);
							}
							csvReadertFileInputDelimited_32
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_32[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_32[0] != '\r'))
								csvReadertFileInputDelimited_32
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_32[0]);

							csvReadertFileInputDelimited_32.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_32
									.setEscapeChar(csvReadertFileInputDelimited_32
											.getQuoteChar());

						}

						if (limittFileInputDelimited_32 != 0) {
							for (currentLinetFileInputDelimited_32 = 0; currentLinetFileInputDelimited_32 < 1; currentLinetFileInputDelimited_32++) {
								csvReadertFileInputDelimited_32.readNext();
							}
						}
						csvReadertFileInputDelimited_32
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_32 != 0
							&& csvReadertFileInputDelimited_32 != null
							&& csvReadertFileInputDelimited_32.readNext()) {

						rowtFileInputDelimited_32 = csvReadertFileInputDelimited_32
								.getValues();

						if (rowtFileInputDelimited_32.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_32[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_32++;

						if (lastLinetFileInputDelimited_32 > -1
								&& currentLinetFileInputDelimited_32 > lastLinetFileInputDelimited_32) {
							break;
						}
						outputLinetFileInputDelimited_32++;
						if (limittFileInputDelimited_32 > 0
								&& outputLinetFileInputDelimited_32 > limittFileInputDelimited_32) {
							break;
						}

						row31 = null;

						boolean whetherReject_tFileInputDelimited_32 = false;
						row31 = new row31Struct();
						try {

							if (rowtFileInputDelimited_32.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_32[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row31.FACHABT_ID = null;

								row31.FACHABT_NAME = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_32 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_32 = 0;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row31.FACHABT_ID = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row31.FACHABT_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 1;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row31.FACHABT_NAME = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row31.FACHABT_NAME = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_32 = true;

							System.err.println(e.getMessage());
							row31 = null;

						}

						/**
						 * [tFileInputDelimited_32 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_32 main ] start
						 */

						currentComponent = "tFileInputDelimited_32";

						tos_count_tFileInputDelimited_32++;

						/**
						 * [tFileInputDelimited_32 main ] stop
						 */
						// Start of branch "row31"
						if (row31 != null) {

							/**
							 * [tMap_31 main ] start
							 */

							currentComponent = "tMap_31";

							boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_31 = false;
							boolean mainRowRejected_tMap_31 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
								// ###############################
								// # Output tables

								P21_Fachabteilung_SP_Folder = null;

								// # Output table :
								// 'P21_Fachabteilung_SP_Folder'
								P21_Fachabteilung_SP_Folder_tmp.C_HLEVEL = 4;
								P21_Fachabteilung_SP_Folder_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\FACHABT\\"
										+ StringHandling
												.UPCASE(row31.FACHABT_ID)
										+ "\\";
								P21_Fachabteilung_SP_Folder_tmp.C_NAME = StringHandling
										.UPCASE(row31.FACHABT_ID)
										+ "XX - "
										+ row31.FACHABT_NAME + " (Schwerpunkt)";
								P21_Fachabteilung_SP_Folder_tmp.C_SYNONYM_CD = 'N';
								P21_Fachabteilung_SP_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								P21_Fachabteilung_SP_Folder_tmp.C_TOTALNUM = null;
								P21_Fachabteilung_SP_Folder_tmp.C_BASECODE = "ST|P21|FACHABT:"
										+ StringHandling
												.UPCASE(row31.FACHABT_ID);
								P21_Fachabteilung_SP_Folder_tmp.C_METADATAXML = null;
								P21_Fachabteilung_SP_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_Fachabteilung_SP_Folder_tmp.C_TABLENAME = "concept_dimension";
								P21_Fachabteilung_SP_Folder_tmp.C_COLUMNNAME = "concept_path";
								P21_Fachabteilung_SP_Folder_tmp.C_COLUMNDATATYPE = 'T';
								P21_Fachabteilung_SP_Folder_tmp.C_OPERATOR = "LIKE";
								P21_Fachabteilung_SP_Folder_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\FACHABT\\"
										+ StringHandling
												.UPCASE(row31.FACHABT_ID)
										+ "\\";
								P21_Fachabteilung_SP_Folder_tmp.C_COMMENT = null;
								P21_Fachabteilung_SP_Folder_tmp.C_TOOLTIP = row31.FACHABT_NAME;
								P21_Fachabteilung_SP_Folder_tmp.M_APPLIED_PATH = '@';
								P21_Fachabteilung_SP_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_Fachabteilung_SP_Folder_tmp.DOWNLOAD_DATE = null;
								P21_Fachabteilung_SP_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_Fachabteilung_SP_Folder_tmp.SOURCESYSTEM_CD = "P21";
								P21_Fachabteilung_SP_Folder_tmp.VALUETYPE_CD = null;
								P21_Fachabteilung_SP_Folder_tmp.M_EXCLUSION_CD = null;
								P21_Fachabteilung_SP_Folder_tmp.C_PATH = null;
								P21_Fachabteilung_SP_Folder_tmp.C_SYMBOL = null;
								P21_Fachabteilung_SP_Folder = P21_Fachabteilung_SP_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_31 = false;

							tos_count_tMap_31++;

							/**
							 * [tMap_31 main ] stop
							 */
							// Start of branch "P21_Fachabteilung_SP_Folder"
							if (P21_Fachabteilung_SP_Folder != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_Fachabteilung_SP_Folder.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_Fachabteilung_SP_Folder.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_Fachabteilung_SP_Folder.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Fachabteilung_SP_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Fachabteilung_SP_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Fachabteilung_SP_Folder.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_Fachabteilung_SP_Folder.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_Fachabteilung_SP_Folder.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Fachabteilung_SP_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_Fachabteilung_SP_Folder.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Fachabteilung_SP_Folder.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Fachabteilung_SP_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_Fachabteilung_SP_Folder.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_Fachabteilung_SP_Folder.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_Fachabteilung_SP_Folder.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Fachabteilung_SP_Folder.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Fachabteilung_SP_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Fachabteilung_SP_Folder.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Fachabteilung_SP_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Fachabteilung_SP_Folder.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Fachabteilung_SP_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Fachabteilung_SP_Folder.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Fachabteilung_SP_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_Fachabteilung_SP_Folder.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_Fachabteilung_SP_Folder.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_Fachabteilung_SP_Folder"

						} // End of branch "row31"

						/**
						 * [tFileInputDelimited_32 end ] start
						 */

						currentComponent = "tFileInputDelimited_32";

						nb_line_tFileInputDelimited_32++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_32 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_32 != null) {
							csvReadertFileInputDelimited_32.close();
						}
					}
					if (csvReadertFileInputDelimited_32 != null) {
						globalMap.put("tFileInputDelimited_32_NB_LINE",
								nb_line_tFileInputDelimited_32);
					}
				}

				ok_Hash.put("tFileInputDelimited_32", true);
				end_Hash.put("tFileInputDelimited_32",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_32 end ] stop
				 */

				/**
				 * [tMap_31 end ] start
				 */

				currentComponent = "tMap_31";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_31", true);
				end_Hash.put("tMap_31", System.currentTimeMillis());

				/**
				 * [tMap_31 end ] stop
				 */

				/**
				 * [tMap_32 begin ] start
				 */

				ok_Hash.put("tMap_32", false);
				start_Hash.put("tMap_32", System.currentTimeMillis());
				currentComponent = "tMap_32";

				int tos_count_tMap_32 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_32__Struct {
				}
				Var__tMap_32__Struct Var__tMap_32 = new Var__tMap_32__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_Fachabteilung_SP_LeafStruct P21_Fachabteilung_SP_Leaf_tmp = new P21_Fachabteilung_SP_LeafStruct();
				// ###############################

				/**
				 * [tMap_32 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_33 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_33", false);
				start_Hash.put("tFileInputDelimited_33",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_33";

				int tos_count_tFileInputDelimited_33 = 0;

				int nb_line_tFileInputDelimited_33 = 0;
				int footer_tFileInputDelimited_33 = 0;
				int totalLinetFileInputDelimited_33 = 0;
				int limittFileInputDelimited_33 = -1;
				int lastLinetFileInputDelimited_33 = -1;

				char fieldSeparator_tFileInputDelimited_33[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_33 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_33[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_33 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_33 = /**
				 * Start field
				 * tFileInputDelimited_33:FILENAME
				 */
				context.p21Dir + "fachabt-schwerpunkt-leafs.csv"/**
				 * End field
				 * tFileInputDelimited_33:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_33 = null;

				try {

					String[] rowtFileInputDelimited_33 = null;
					int currentLinetFileInputDelimited_33 = 0;
					int outputLinetFileInputDelimited_33 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_33 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_33 = 0;
							if (footer_value_tFileInputDelimited_33 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_33,
									fieldSeparator_tFileInputDelimited_33[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_33)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_33[0]);
						}

						csvReadertFileInputDelimited_33
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_33[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_33[0] != '\r'))
							csvReadertFileInputDelimited_33.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_33[0]);

						csvReadertFileInputDelimited_33.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_33
								.setEscapeChar(csvReadertFileInputDelimited_33
										.getQuoteChar());

						if (footer_tFileInputDelimited_33 > 0) {
							for (totalLinetFileInputDelimited_33 = 0; totalLinetFileInputDelimited_33 < 1; totalLinetFileInputDelimited_33++) {
								csvReadertFileInputDelimited_33.readNext();
							}
							csvReadertFileInputDelimited_33
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_33.readNext()) {

								rowtFileInputDelimited_33 = csvReadertFileInputDelimited_33
										.getValues();
								if (!(rowtFileInputDelimited_33.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_33[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_33++;

								}

							}
							int lastLineTemptFileInputDelimited_33 = totalLinetFileInputDelimited_33
									- footer_tFileInputDelimited_33 < 0 ? 0
									: totalLinetFileInputDelimited_33
											- footer_tFileInputDelimited_33;
							if (lastLinetFileInputDelimited_33 > 0) {
								lastLinetFileInputDelimited_33 = lastLinetFileInputDelimited_33 < lastLineTemptFileInputDelimited_33 ? lastLinetFileInputDelimited_33
										: lastLineTemptFileInputDelimited_33;
							} else {
								lastLinetFileInputDelimited_33 = lastLineTemptFileInputDelimited_33;
							}

							csvReadertFileInputDelimited_33.close();
							if (filename_tFileInputDelimited_33 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_33,
										fieldSeparator_tFileInputDelimited_33[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_33)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_33[0]);
							}
							csvReadertFileInputDelimited_33
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_33[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_33[0] != '\r'))
								csvReadertFileInputDelimited_33
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_33[0]);

							csvReadertFileInputDelimited_33.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_33
									.setEscapeChar(csvReadertFileInputDelimited_33
											.getQuoteChar());

						}

						if (limittFileInputDelimited_33 != 0) {
							for (currentLinetFileInputDelimited_33 = 0; currentLinetFileInputDelimited_33 < 1; currentLinetFileInputDelimited_33++) {
								csvReadertFileInputDelimited_33.readNext();
							}
						}
						csvReadertFileInputDelimited_33
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_33 != 0
							&& csvReadertFileInputDelimited_33 != null
							&& csvReadertFileInputDelimited_33.readNext()) {

						rowtFileInputDelimited_33 = csvReadertFileInputDelimited_33
								.getValues();

						if (rowtFileInputDelimited_33.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_33[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_33++;

						if (lastLinetFileInputDelimited_33 > -1
								&& currentLinetFileInputDelimited_33 > lastLinetFileInputDelimited_33) {
							break;
						}
						outputLinetFileInputDelimited_33++;
						if (limittFileInputDelimited_33 > 0
								&& outputLinetFileInputDelimited_33 > limittFileInputDelimited_33) {
							break;
						}

						row32 = null;

						boolean whetherReject_tFileInputDelimited_33 = false;
						row32 = new row32Struct();
						try {

							if (rowtFileInputDelimited_33.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_33[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row32.FACHABT_ID = null;

								row32.FACHABT_NAME = null;

								row32.FACHABT_SCHWERPUNKT = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_33 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_33 = 0;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row32.FACHABT_ID = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row32.FACHABT_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 1;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row32.FACHABT_NAME = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row32.FACHABT_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 2;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row32.FACHABT_SCHWERPUNKT = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row32.FACHABT_SCHWERPUNKT = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_33 = true;

							System.err.println(e.getMessage());
							row32 = null;

						}

						/**
						 * [tFileInputDelimited_33 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_33 main ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						tos_count_tFileInputDelimited_33++;

						/**
						 * [tFileInputDelimited_33 main ] stop
						 */
						// Start of branch "row32"
						if (row32 != null) {

							/**
							 * [tMap_32 main ] start
							 */

							currentComponent = "tMap_32";

							boolean hasCasePrimitiveKeyWithNull_tMap_32 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_32 = false;
							boolean mainRowRejected_tMap_32 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_32__Struct Var = Var__tMap_32;// ###############################
								// ###############################
								// # Output tables

								P21_Fachabteilung_SP_Leaf = null;

								// # Output table : 'P21_Fachabteilung_SP_Leaf'
								P21_Fachabteilung_SP_Leaf_tmp.C_HLEVEL = 5;
								P21_Fachabteilung_SP_Leaf_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\FACHABT\\"
										+ row32.FACHABT_ID.substring(0, 2)
										+ "\\"
										+ row32.FACHABT_ID.substring(2, 4)
										+ "\\";
								P21_Fachabteilung_SP_Leaf_tmp.C_NAME = StringHandling
										.UPCASE(row32.FACHABT_ID)
										+ " - "
										+ row32.FACHABT_SCHWERPUNKT;
								P21_Fachabteilung_SP_Leaf_tmp.C_SYNONYM_CD = 'N';
								P21_Fachabteilung_SP_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								P21_Fachabteilung_SP_Leaf_tmp.C_TOTALNUM = null;
								P21_Fachabteilung_SP_Leaf_tmp.C_BASECODE = "ST|P21|FACHABT:"
										+ StringHandling
												.UPCASE(row32.FACHABT_ID);
								P21_Fachabteilung_SP_Leaf_tmp.C_METADATAXML = null;
								P21_Fachabteilung_SP_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_Fachabteilung_SP_Leaf_tmp.C_TABLENAME = "concept_dimension";
								P21_Fachabteilung_SP_Leaf_tmp.C_COLUMNNAME = "concept_path";
								P21_Fachabteilung_SP_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								P21_Fachabteilung_SP_Leaf_tmp.C_OPERATOR = "LIKE";
								P21_Fachabteilung_SP_Leaf_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\FACHABT\\"
										+ StringHandling
												.UPCASE(row32.FACHABT_ID)
										+ "\\";
								P21_Fachabteilung_SP_Leaf_tmp.C_COMMENT = null;
								P21_Fachabteilung_SP_Leaf_tmp.C_TOOLTIP = row32.FACHABT_SCHWERPUNKT;
								P21_Fachabteilung_SP_Leaf_tmp.M_APPLIED_PATH = '@';
								P21_Fachabteilung_SP_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_Fachabteilung_SP_Leaf_tmp.DOWNLOAD_DATE = null;
								P21_Fachabteilung_SP_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_Fachabteilung_SP_Leaf_tmp.SOURCESYSTEM_CD = "P21";
								P21_Fachabteilung_SP_Leaf_tmp.VALUETYPE_CD = null;
								P21_Fachabteilung_SP_Leaf_tmp.M_EXCLUSION_CD = null;
								P21_Fachabteilung_SP_Leaf_tmp.C_PATH = null;
								P21_Fachabteilung_SP_Leaf_tmp.C_SYMBOL = null;
								P21_Fachabteilung_SP_Leaf = P21_Fachabteilung_SP_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_32 = false;

							tos_count_tMap_32++;

							/**
							 * [tMap_32 main ] stop
							 */
							// Start of branch "P21_Fachabteilung_SP_Leaf"
							if (P21_Fachabteilung_SP_Leaf != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_Fachabteilung_SP_Leaf.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_Fachabteilung_SP_Leaf.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_Fachabteilung_SP_Leaf.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Fachabteilung_SP_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Fachabteilung_SP_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Fachabteilung_SP_Leaf.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_Fachabteilung_SP_Leaf.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_Fachabteilung_SP_Leaf.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Fachabteilung_SP_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_Fachabteilung_SP_Leaf.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Fachabteilung_SP_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Fachabteilung_SP_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_Fachabteilung_SP_Leaf.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_Fachabteilung_SP_Leaf.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_Fachabteilung_SP_Leaf.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Fachabteilung_SP_Leaf.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Fachabteilung_SP_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Fachabteilung_SP_Leaf.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Fachabteilung_SP_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Fachabteilung_SP_Leaf.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Fachabteilung_SP_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Fachabteilung_SP_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Fachabteilung_SP_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_Fachabteilung_SP_Leaf.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_Fachabteilung_SP_Leaf.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_Fachabteilung_SP_Leaf"

						} // End of branch "row32"

						/**
						 * [tFileInputDelimited_33 end ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						nb_line_tFileInputDelimited_33++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_33 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_33 != null) {
							csvReadertFileInputDelimited_33.close();
						}
					}
					if (csvReadertFileInputDelimited_33 != null) {
						globalMap.put("tFileInputDelimited_33_NB_LINE",
								nb_line_tFileInputDelimited_33);
					}
				}

				ok_Hash.put("tFileInputDelimited_33", true);
				end_Hash.put("tFileInputDelimited_33",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_33 end ] stop
				 */

				/**
				 * [tMap_32 end ] start
				 */

				currentComponent = "tMap_32";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_32", true);
				end_Hash.put("tMap_32", System.currentTimeMillis());

				/**
				 * [tMap_32 end ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());
				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_Aufnahmegrund_FolderStruct P21_Aufnahmegrund_Folder_tmp = new P21_Aufnahmegrund_FolderStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				int nb_line_tFileInputDelimited_13 = 0;
				int footer_tFileInputDelimited_13 = 0;
				int totalLinetFileInputDelimited_13 = 0;
				int limittFileInputDelimited_13 = -1;
				int lastLinetFileInputDelimited_13 = -1;

				char fieldSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_13 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_13 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_13 = /**
				 * Start field
				 * tFileInputDelimited_13:FILENAME
				 */
				context.p21Dir + "aufnahmegrund-folders.csv"/**
				 * End field
				 * tFileInputDelimited_13:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_13 = null;

				try {

					String[] rowtFileInputDelimited_13 = null;
					int currentLinetFileInputDelimited_13 = 0;
					int outputLinetFileInputDelimited_13 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_13 = 0;
							if (footer_value_tFileInputDelimited_13 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_13,
									fieldSeparator_tFileInputDelimited_13[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_13)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_13[0]);
						}

						csvReadertFileInputDelimited_13
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
							csvReadertFileInputDelimited_13.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_13[0]);

						csvReadertFileInputDelimited_13.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_13
								.setEscapeChar(csvReadertFileInputDelimited_13
										.getQuoteChar());

						if (footer_tFileInputDelimited_13 > 0) {
							for (totalLinetFileInputDelimited_13 = 0; totalLinetFileInputDelimited_13 < 1; totalLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
							csvReadertFileInputDelimited_13
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_13.readNext()) {

								rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
										.getValues();
								if (!(rowtFileInputDelimited_13.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_13[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_13++;

								}

							}
							int lastLineTemptFileInputDelimited_13 = totalLinetFileInputDelimited_13
									- footer_tFileInputDelimited_13 < 0 ? 0
									: totalLinetFileInputDelimited_13
											- footer_tFileInputDelimited_13;
							if (lastLinetFileInputDelimited_13 > 0) {
								lastLinetFileInputDelimited_13 = lastLinetFileInputDelimited_13 < lastLineTemptFileInputDelimited_13 ? lastLinetFileInputDelimited_13
										: lastLineTemptFileInputDelimited_13;
							} else {
								lastLinetFileInputDelimited_13 = lastLineTemptFileInputDelimited_13;
							}

							csvReadertFileInputDelimited_13.close();
							if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_13,
										fieldSeparator_tFileInputDelimited_13[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_13)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_13[0]);
							}
							csvReadertFileInputDelimited_13
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
								csvReadertFileInputDelimited_13
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_13[0]);

							csvReadertFileInputDelimited_13.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_13
									.setEscapeChar(csvReadertFileInputDelimited_13
											.getQuoteChar());

						}

						if (limittFileInputDelimited_13 != 0) {
							for (currentLinetFileInputDelimited_13 = 0; currentLinetFileInputDelimited_13 < 1; currentLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
						}
						csvReadertFileInputDelimited_13
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_13 != 0
							&& csvReadertFileInputDelimited_13 != null
							&& csvReadertFileInputDelimited_13.readNext()) {

						rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
								.getValues();

						if (rowtFileInputDelimited_13.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_13[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_13++;

						if (lastLinetFileInputDelimited_13 > -1
								&& currentLinetFileInputDelimited_13 > lastLinetFileInputDelimited_13) {
							break;
						}
						outputLinetFileInputDelimited_13++;
						if (limittFileInputDelimited_13 > 0
								&& outputLinetFileInputDelimited_13 > limittFileInputDelimited_13) {
							break;
						}

						row14 = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						row14 = new row14Struct();
						try {

							if (rowtFileInputDelimited_13.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_13[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row14.aufnahmegrund_id = null;

								row14.aufnahmegrund_name = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_13 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_13 = 0;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row14.aufnahmegrund_id = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row14.aufnahmegrund_id = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 1;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row14.aufnahmegrund_name = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row14.aufnahmegrund_name = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								P21_Aufnahmegrund_Folder = null;

								// # Output table : 'P21_Aufnahmegrund_Folder'
								P21_Aufnahmegrund_Folder_tmp.C_HLEVEL = 4;
								P21_Aufnahmegrund_Folder_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\AUFNGR\\"
										+ StringHandling
												.UPCASE(row14.aufnahmegrund_id)
										+ "\\";
								P21_Aufnahmegrund_Folder_tmp.C_NAME = StringHandling
										.UPCASE(row14.aufnahmegrund_id)
										+ " - "
										+ row14.aufnahmegrund_name;
								P21_Aufnahmegrund_Folder_tmp.C_SYNONYM_CD = 'N';
								P21_Aufnahmegrund_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								P21_Aufnahmegrund_Folder_tmp.C_TOTALNUM = null;
								P21_Aufnahmegrund_Folder_tmp.C_BASECODE = null;
								P21_Aufnahmegrund_Folder_tmp.C_METADATAXML = null;
								P21_Aufnahmegrund_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_Aufnahmegrund_Folder_tmp.C_TABLENAME = "concept_dimension";
								P21_Aufnahmegrund_Folder_tmp.C_COLUMNNAME = "concept_path";
								P21_Aufnahmegrund_Folder_tmp.C_COLUMNDATATYPE = 'T';
								P21_Aufnahmegrund_Folder_tmp.C_OPERATOR = "LIKE";
								P21_Aufnahmegrund_Folder_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\AUFNGR\\"
										+ StringHandling
												.UPCASE(row14.aufnahmegrund_id)
										+ "\\";
								P21_Aufnahmegrund_Folder_tmp.C_COMMENT = null;
								P21_Aufnahmegrund_Folder_tmp.C_TOOLTIP = row14.aufnahmegrund_name;
								P21_Aufnahmegrund_Folder_tmp.M_APPLIED_PATH = '@';
								P21_Aufnahmegrund_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_Aufnahmegrund_Folder_tmp.DOWNLOAD_DATE = null;
								P21_Aufnahmegrund_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_Aufnahmegrund_Folder_tmp.SOURCESYSTEM_CD = "P21";
								P21_Aufnahmegrund_Folder_tmp.VALUETYPE_CD = null;
								P21_Aufnahmegrund_Folder_tmp.M_EXCLUSION_CD = null;
								P21_Aufnahmegrund_Folder_tmp.C_PATH = null;
								P21_Aufnahmegrund_Folder_tmp.C_SYMBOL = null;
								P21_Aufnahmegrund_Folder = P21_Aufnahmegrund_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "P21_Aufnahmegrund_Folder"
							if (P21_Aufnahmegrund_Folder != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_Aufnahmegrund_Folder.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_Aufnahmegrund_Folder.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_Aufnahmegrund_Folder.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Aufnahmegrund_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Aufnahmegrund_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Aufnahmegrund_Folder.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_Aufnahmegrund_Folder.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_Aufnahmegrund_Folder.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Aufnahmegrund_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_Aufnahmegrund_Folder.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Aufnahmegrund_Folder.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Aufnahmegrund_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_Aufnahmegrund_Folder.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_Aufnahmegrund_Folder.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_Aufnahmegrund_Folder.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Aufnahmegrund_Folder.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Aufnahmegrund_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Aufnahmegrund_Folder.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Aufnahmegrund_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Aufnahmegrund_Folder.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Aufnahmegrund_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Aufnahmegrund_Folder.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Aufnahmegrund_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_Aufnahmegrund_Folder.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_Aufnahmegrund_Folder.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_Aufnahmegrund_Folder"

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						nb_line_tFileInputDelimited_13++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_13 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_13 != null) {
							csvReadertFileInputDelimited_13.close();
						}
					}
					if (csvReadertFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE",
								nb_line_tFileInputDelimited_13);
					}
				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_30 begin ] start
				 */

				ok_Hash.put("tMap_30", false);
				start_Hash.put("tMap_30", System.currentTimeMillis());
				currentComponent = "tMap_30";

				int tos_count_tMap_30 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_30__Struct {
					String AUFNGRID;
				}
				Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				P21_Aufnahmegrund_LeafStruct P21_Aufnahmegrund_Leaf_tmp = new P21_Aufnahmegrund_LeafStruct();
				// ###############################

				/**
				 * [tMap_30 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_31 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_31", false);
				start_Hash.put("tFileInputDelimited_31",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_31";

				int tos_count_tFileInputDelimited_31 = 0;

				int nb_line_tFileInputDelimited_31 = 0;
				int footer_tFileInputDelimited_31 = 0;
				int totalLinetFileInputDelimited_31 = 0;
				int limittFileInputDelimited_31 = -1;
				int lastLinetFileInputDelimited_31 = -1;

				char fieldSeparator_tFileInputDelimited_31[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_31 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_31[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_31 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_31 = /**
				 * Start field
				 * tFileInputDelimited_31:FILENAME
				 */
				context.p21Dir + "aufnahmegrund-leafs.csv"/**
				 * End field
				 * tFileInputDelimited_31:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_31 = null;

				try {

					String[] rowtFileInputDelimited_31 = null;
					int currentLinetFileInputDelimited_31 = 0;
					int outputLinetFileInputDelimited_31 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_31 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_31 = 0;
							if (footer_value_tFileInputDelimited_31 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_31,
									fieldSeparator_tFileInputDelimited_31[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_31)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_31[0]);
						}

						csvReadertFileInputDelimited_31
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_31[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_31[0] != '\r'))
							csvReadertFileInputDelimited_31.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_31[0]);

						csvReadertFileInputDelimited_31.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_31
								.setEscapeChar(csvReadertFileInputDelimited_31
										.getQuoteChar());

						if (footer_tFileInputDelimited_31 > 0) {
							for (totalLinetFileInputDelimited_31 = 0; totalLinetFileInputDelimited_31 < 1; totalLinetFileInputDelimited_31++) {
								csvReadertFileInputDelimited_31.readNext();
							}
							csvReadertFileInputDelimited_31
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_31.readNext()) {

								rowtFileInputDelimited_31 = csvReadertFileInputDelimited_31
										.getValues();
								if (!(rowtFileInputDelimited_31.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_31[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_31++;

								}

							}
							int lastLineTemptFileInputDelimited_31 = totalLinetFileInputDelimited_31
									- footer_tFileInputDelimited_31 < 0 ? 0
									: totalLinetFileInputDelimited_31
											- footer_tFileInputDelimited_31;
							if (lastLinetFileInputDelimited_31 > 0) {
								lastLinetFileInputDelimited_31 = lastLinetFileInputDelimited_31 < lastLineTemptFileInputDelimited_31 ? lastLinetFileInputDelimited_31
										: lastLineTemptFileInputDelimited_31;
							} else {
								lastLinetFileInputDelimited_31 = lastLineTemptFileInputDelimited_31;
							}

							csvReadertFileInputDelimited_31.close();
							if (filename_tFileInputDelimited_31 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_31,
										fieldSeparator_tFileInputDelimited_31[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_31)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_31[0]);
							}
							csvReadertFileInputDelimited_31
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_31[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_31[0] != '\r'))
								csvReadertFileInputDelimited_31
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_31[0]);

							csvReadertFileInputDelimited_31.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_31
									.setEscapeChar(csvReadertFileInputDelimited_31
											.getQuoteChar());

						}

						if (limittFileInputDelimited_31 != 0) {
							for (currentLinetFileInputDelimited_31 = 0; currentLinetFileInputDelimited_31 < 1; currentLinetFileInputDelimited_31++) {
								csvReadertFileInputDelimited_31.readNext();
							}
						}
						csvReadertFileInputDelimited_31
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_31 != 0
							&& csvReadertFileInputDelimited_31 != null
							&& csvReadertFileInputDelimited_31.readNext()) {

						rowtFileInputDelimited_31 = csvReadertFileInputDelimited_31
								.getValues();

						if (rowtFileInputDelimited_31.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_31[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_31++;

						if (lastLinetFileInputDelimited_31 > -1
								&& currentLinetFileInputDelimited_31 > lastLinetFileInputDelimited_31) {
							break;
						}
						outputLinetFileInputDelimited_31++;
						if (limittFileInputDelimited_31 > 0
								&& outputLinetFileInputDelimited_31 > limittFileInputDelimited_31) {
							break;
						}

						row30 = null;

						boolean whetherReject_tFileInputDelimited_31 = false;
						row30 = new row30Struct();
						try {

							if (rowtFileInputDelimited_31.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_31[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row30.aufnahmegrund_id = null;

								row30.aufnahmegrund_name = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_31 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_31 = 0;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row30.aufnahmegrund_id = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row30.aufnahmegrund_id = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 1;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row30.aufnahmegrund_name = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row30.aufnahmegrund_name = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_31 = true;

							System.err.println(e.getMessage());
							row30 = null;

						}

						/**
						 * [tFileInputDelimited_31 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_31 main ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						tos_count_tFileInputDelimited_31++;

						/**
						 * [tFileInputDelimited_31 main ] stop
						 */
						// Start of branch "row30"
						if (row30 != null) {

							/**
							 * [tMap_30 main ] start
							 */

							currentComponent = "tMap_30";

							boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_30 = false;
							boolean mainRowRejected_tMap_30 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_30__Struct Var = Var__tMap_30;
								Var.AUFNGRID = row30.aufnahmegrund_id
										.substring(0, 2)
										+ "\\"
										+ row30.aufnahmegrund_id
												.substring(2, 4);// ###############################
								// ###############################
								// # Output tables

								P21_Aufnahmegrund_Leaf = null;

								// # Output table : 'P21_Aufnahmegrund_Leaf'
								P21_Aufnahmegrund_Leaf_tmp.C_HLEVEL = 5;
								P21_Aufnahmegrund_Leaf_tmp.C_FULLNAME = "\\i2b2\\ST\\P21\\AUFNGR\\"
										+ StringHandling.UPCASE(Var.AUFNGRID)
										+ "\\";
								P21_Aufnahmegrund_Leaf_tmp.C_NAME = StringHandling
										.UPCASE(row30.aufnahmegrund_id)
										+ " - "
										+ row30.aufnahmegrund_name;
								P21_Aufnahmegrund_Leaf_tmp.C_SYNONYM_CD = 'N';
								P21_Aufnahmegrund_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								P21_Aufnahmegrund_Leaf_tmp.C_TOTALNUM = null;
								P21_Aufnahmegrund_Leaf_tmp.C_BASECODE = "ST|P21|AUFNGR:"
										+ StringHandling
												.UPCASE(row30.aufnahmegrund_id);
								P21_Aufnahmegrund_Leaf_tmp.C_METADATAXML = null;
								P21_Aufnahmegrund_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								P21_Aufnahmegrund_Leaf_tmp.C_TABLENAME = "concept_dimension";
								P21_Aufnahmegrund_Leaf_tmp.C_COLUMNNAME = "concept_path";
								P21_Aufnahmegrund_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								P21_Aufnahmegrund_Leaf_tmp.C_OPERATOR = "LIKE";
								P21_Aufnahmegrund_Leaf_tmp.C_DIMCODE = "\\i2b2\\ST\\P21\\AUFNGR\\"
										+ StringHandling
												.UPCASE(row30.aufnahmegrund_id)
										+ "\\";
								P21_Aufnahmegrund_Leaf_tmp.C_COMMENT = null;
								P21_Aufnahmegrund_Leaf_tmp.C_TOOLTIP = row30.aufnahmegrund_name;
								P21_Aufnahmegrund_Leaf_tmp.M_APPLIED_PATH = '@';
								P21_Aufnahmegrund_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								P21_Aufnahmegrund_Leaf_tmp.DOWNLOAD_DATE = null;
								P21_Aufnahmegrund_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								P21_Aufnahmegrund_Leaf_tmp.SOURCESYSTEM_CD = "P21";
								P21_Aufnahmegrund_Leaf_tmp.VALUETYPE_CD = null;
								P21_Aufnahmegrund_Leaf_tmp.M_EXCLUSION_CD = null;
								P21_Aufnahmegrund_Leaf_tmp.C_PATH = null;
								P21_Aufnahmegrund_Leaf_tmp.C_SYMBOL = null;
								P21_Aufnahmegrund_Leaf = P21_Aufnahmegrund_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_30 = false;

							tos_count_tMap_30++;

							/**
							 * [tMap_30 main ] stop
							 */
							// Start of branch "P21_Aufnahmegrund_Leaf"
							if (P21_Aufnahmegrund_Leaf != null) {

								/**
								 * [tUnite_9 main ] start
								 */

								currentComponent = "tUnite_9";

								// ////////

								// for output
								tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

								tHashInput_tUnite_9_row41.C_HLEVEL = P21_Aufnahmegrund_Leaf.C_HLEVEL;
								tHashInput_tUnite_9_row41.C_FULLNAME = P21_Aufnahmegrund_Leaf.C_FULLNAME;
								tHashInput_tUnite_9_row41.C_NAME = P21_Aufnahmegrund_Leaf.C_NAME;
								tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Aufnahmegrund_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Aufnahmegrund_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Aufnahmegrund_Leaf.C_TOTALNUM;
								tHashInput_tUnite_9_row41.C_BASECODE = P21_Aufnahmegrund_Leaf.C_BASECODE;
								tHashInput_tUnite_9_row41.C_METADATAXML = P21_Aufnahmegrund_Leaf.C_METADATAXML;
								tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Aufnahmegrund_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_9_row41.C_TABLENAME = P21_Aufnahmegrund_Leaf.C_TABLENAME;
								tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Aufnahmegrund_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Aufnahmegrund_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_9_row41.C_OPERATOR = P21_Aufnahmegrund_Leaf.C_OPERATOR;
								tHashInput_tUnite_9_row41.C_DIMCODE = P21_Aufnahmegrund_Leaf.C_DIMCODE;
								tHashInput_tUnite_9_row41.C_COMMENT = P21_Aufnahmegrund_Leaf.C_COMMENT;
								tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Aufnahmegrund_Leaf.C_TOOLTIP;
								tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Aufnahmegrund_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Aufnahmegrund_Leaf.UPDATE_DATE;
								tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Aufnahmegrund_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Aufnahmegrund_Leaf.IMPORT_DATE;
								tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Aufnahmegrund_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Aufnahmegrund_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Aufnahmegrund_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_9_row41.C_PATH = P21_Aufnahmegrund_Leaf.C_PATH;
								tHashInput_tUnite_9_row41.C_SYMBOL = P21_Aufnahmegrund_Leaf.C_SYMBOL;

								nb_line_tUnite_9++;

								// ////////

								tos_count_tUnite_9++;

								/**
								 * [tUnite_9 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_9 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_9";

								tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

								oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
								oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
								oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
								oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
								oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
								oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
								oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
								oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
								oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
								oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_9
										.put(oneRow_tHashOutput_tUnite_9);
								nb_line_tHashOutput_tUnite_9++;

								tos_count_tHashOutput_tUnite_9++;

								/**
								 * [tHashOutput_tUnite_9 main ] stop
								 */

							} // End of branch "P21_Aufnahmegrund_Leaf"

						} // End of branch "row30"

						/**
						 * [tFileInputDelimited_31 end ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						nb_line_tFileInputDelimited_31++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_31 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_31 != null) {
							csvReadertFileInputDelimited_31.close();
						}
					}
					if (csvReadertFileInputDelimited_31 != null) {
						globalMap.put("tFileInputDelimited_31_NB_LINE",
								nb_line_tFileInputDelimited_31);
					}
				}

				ok_Hash.put("tFileInputDelimited_31", true);
				end_Hash.put("tFileInputDelimited_31",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_31 end ] stop
				 */

				/**
				 * [tMap_30 end ] start
				 */

				currentComponent = "tMap_30";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_30", true);
				end_Hash.put("tMap_30", System.currentTimeMillis());

				/**
				 * [tMap_30 end ] stop
				 */

				/**
				 * [tUnite_9 end ] start
				 */

				currentComponent = "tUnite_9";

				globalMap.put("tUnite_9_NB_LINE", nb_line_tUnite_9);

				ok_Hash.put("tUnite_9", true);
				end_Hash.put("tUnite_9", System.currentTimeMillis());

				/**
				 * [tUnite_9 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_9 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_9";

				globalMap.put("tHashOutput_tUnite_9_NB_LINE",
						nb_line_tHashOutput_tUnite_9);

				ok_Hash.put("tHashOutput_tUnite_9", true);
				end_Hash.put("tHashOutput_tUnite_9", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_4_row42Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_4_row42Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_4_row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DRG_RootStruct implements
			routines.system.IPersistableRow<DRG_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DRG_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DRG_MDCStruct implements
			routines.system.IPersistableRow<DRG_MDCStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DRG_MDCStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String KATALOGVERSION_ID;

		public String getKATALOGVERSION_ID() {
			return this.KATALOGVERSION_ID;
		}

		public String MDC_NAME;

		public String getMDC_NAME() {
			return this.MDC_NAME;
		}

		public String MDC_CODE;

		public String getMDC_CODE() {
			return this.MDC_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.KATALOGVERSION_ID = readString(dis);

					this.MDC_NAME = readString(dis);

					this.MDC_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KATALOGVERSION_ID, dos);

				// String

				writeString(this.MDC_NAME, dos);

				// String

				writeString(this.MDC_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KATALOGVERSION_ID=" + KATALOGVERSION_ID);
			sb.append(",MDC_NAME=" + MDC_NAME);
			sb.append(",MDC_CODE=" + MDC_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DRG_BDRGStruct implements
			routines.system.IPersistableRow<DRG_BDRGStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DRG_BDRGStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String KATALOGVERSION_ID;

		public String getKATALOGVERSION_ID() {
			return this.KATALOGVERSION_ID;
		}

		public String MDC_CODE;

		public String getMDC_CODE() {
			return this.MDC_CODE;
		}

		public String BASISDRG_NAME;

		public String getBASISDRG_NAME() {
			return this.BASISDRG_NAME;
		}

		public String BASISDRG_CODE;

		public String getBASISDRG_CODE() {
			return this.BASISDRG_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.KATALOGVERSION_ID = readString(dis);

					this.MDC_CODE = readString(dis);

					this.BASISDRG_NAME = readString(dis);

					this.BASISDRG_CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KATALOGVERSION_ID, dos);

				// String

				writeString(this.MDC_CODE, dos);

				// String

				writeString(this.BASISDRG_NAME, dos);

				// String

				writeString(this.BASISDRG_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KATALOGVERSION_ID=" + KATALOGVERSION_ID);
			sb.append(",MDC_CODE=" + MDC_CODE);
			sb.append(",BASISDRG_NAME=" + BASISDRG_NAME);
			sb.append(",BASISDRG_CODE=" + BASISDRG_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DRG_DRGStruct implements
			routines.system.IPersistableRow<DRG_DRGStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DRG_DRGStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String KATALOGVERSION_ID;

		public String getKATALOGVERSION_ID() {
			return this.KATALOGVERSION_ID;
		}

		public String MDC_CODE;

		public String getMDC_CODE() {
			return this.MDC_CODE;
		}

		public String BASISDRG_CODE;

		public String getBASISDRG_CODE() {
			return this.BASISDRG_CODE;
		}

		public String DRG_ID;

		public String getDRG_ID() {
			return this.DRG_ID;
		}

		public String DRG_NAME;

		public String getDRG_NAME() {
			return this.DRG_NAME;
		}

		public String DRG_CODE;

		public String getDRG_CODE() {
			return this.DRG_CODE;
		}

		public String DRG_PARTITION;

		public String getDRG_PARTITION() {
			return this.DRG_PARTITION;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.KATALOGVERSION_ID = readString(dis);

					this.MDC_CODE = readString(dis);

					this.BASISDRG_CODE = readString(dis);

					this.DRG_ID = readString(dis);

					this.DRG_NAME = readString(dis);

					this.DRG_CODE = readString(dis);

					this.DRG_PARTITION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KATALOGVERSION_ID, dos);

				// String

				writeString(this.MDC_CODE, dos);

				// String

				writeString(this.BASISDRG_CODE, dos);

				// String

				writeString(this.DRG_ID, dos);

				// String

				writeString(this.DRG_NAME, dos);

				// String

				writeString(this.DRG_CODE, dos);

				// String

				writeString(this.DRG_PARTITION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("KATALOGVERSION_ID=" + KATALOGVERSION_ID);
			sb.append(",MDC_CODE=" + MDC_CODE);
			sb.append(",BASISDRG_CODE=" + BASISDRG_CODE);
			sb.append(",DRG_ID=" + DRG_ID);
			sb.append(",DRG_NAME=" + DRG_NAME);
			sb.append(",DRG_CODE=" + DRG_CODE);
			sb.append(",DRG_PARTITION=" + DRG_PARTITION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				DRG_RootStruct DRG_Root = new DRG_RootStruct();

				row2Struct row2 = new row2Struct();
				DRG_MDCStruct DRG_MDC = new DRG_MDCStruct();

				row15Struct row15 = new row15Struct();
				DRG_BDRGStruct DRG_BDRG = new DRG_BDRGStruct();

				row10Struct row10 = new row10Struct();
				DRG_DRGStruct DRG_DRG = new DRG_DRGStruct();

				tHashInput_tUnite_4_row42Struct tHashInput_tUnite_4_row42 = new tHashInput_tUnite_4_row42Struct();

				/**
				 * [tHashOutput_tUnite_4 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_4", false);
				start_Hash.put("tHashOutput_tUnite_4",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_4";

				int tos_count_tHashOutput_tUnite_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_4_row42Struct> tHashFile_tHashOutput_tUnite_4 = null;
				if ((tHashFile_tHashOutput_tUnite_4 = mf_tHashOutput_tUnite_4
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_4")) == null) {
					tHashFile_tHashOutput_tUnite_4 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_4_row42Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_4.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_4",
						tHashFile_tHashOutput_tUnite_4);
				int nb_line_tHashOutput_tUnite_4 = 0;

				/**
				 * [tHashOutput_tUnite_4 begin ] stop
				 */

				/**
				 * [tUnite_4 begin ] start
				 */

				ok_Hash.put("tUnite_4", false);
				start_Hash.put("tUnite_4", System.currentTimeMillis());
				currentComponent = "tUnite_4";

				int tos_count_tUnite_4 = 0;

				int nb_line_tUnite_4 = 0;

				/**
				 * [tUnite_4 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				int footer_tFileInputDelimited_14 = 0;
				int totalLinetFileInputDelimited_14 = 0;
				int limittFileInputDelimited_14 = -1;
				int lastLinetFileInputDelimited_14 = -1;

				char fieldSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_14 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_14 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_14 = /**
				 * Start field
				 * tFileInputDelimited_14:FILENAME
				 */
				context.drgDir + "root_DRG.csv"/**
				 * End field
				 * tFileInputDelimited_14:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_14 = null;

				try {

					String[] rowtFileInputDelimited_14 = null;
					int currentLinetFileInputDelimited_14 = 0;
					int outputLinetFileInputDelimited_14 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_14 = 0;
							if (footer_value_tFileInputDelimited_14 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_14,
									fieldSeparator_tFileInputDelimited_14[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_14)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_14[0]);
						}

						csvReadertFileInputDelimited_14
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
							csvReadertFileInputDelimited_14.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_14[0]);

						csvReadertFileInputDelimited_14.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_14
								.setEscapeChar(csvReadertFileInputDelimited_14
										.getQuoteChar());

						if (footer_tFileInputDelimited_14 > 0) {
							for (totalLinetFileInputDelimited_14 = 0; totalLinetFileInputDelimited_14 < 1; totalLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
							csvReadertFileInputDelimited_14
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_14.readNext()) {

								rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
										.getValues();
								if (!(rowtFileInputDelimited_14.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_14[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_14++;

								}

							}
							int lastLineTemptFileInputDelimited_14 = totalLinetFileInputDelimited_14
									- footer_tFileInputDelimited_14 < 0 ? 0
									: totalLinetFileInputDelimited_14
											- footer_tFileInputDelimited_14;
							if (lastLinetFileInputDelimited_14 > 0) {
								lastLinetFileInputDelimited_14 = lastLinetFileInputDelimited_14 < lastLineTemptFileInputDelimited_14 ? lastLinetFileInputDelimited_14
										: lastLineTemptFileInputDelimited_14;
							} else {
								lastLinetFileInputDelimited_14 = lastLineTemptFileInputDelimited_14;
							}

							csvReadertFileInputDelimited_14.close();
							if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_14,
										fieldSeparator_tFileInputDelimited_14[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_14)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_14[0]);
							}
							csvReadertFileInputDelimited_14
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
								csvReadertFileInputDelimited_14
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_14[0]);

							csvReadertFileInputDelimited_14.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_14
									.setEscapeChar(csvReadertFileInputDelimited_14
											.getQuoteChar());

						}

						if (limittFileInputDelimited_14 != 0) {
							for (currentLinetFileInputDelimited_14 = 0; currentLinetFileInputDelimited_14 < 1; currentLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
						}
						csvReadertFileInputDelimited_14
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_14 != 0
							&& csvReadertFileInputDelimited_14 != null
							&& csvReadertFileInputDelimited_14.readNext()) {

						rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
								.getValues();

						if (rowtFileInputDelimited_14.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_14[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_14++;

						if (lastLinetFileInputDelimited_14 > -1
								&& currentLinetFileInputDelimited_14 > lastLinetFileInputDelimited_14) {
							break;
						}
						outputLinetFileInputDelimited_14++;
						if (limittFileInputDelimited_14 > 0
								&& outputLinetFileInputDelimited_14 > limittFileInputDelimited_14) {
							break;
						}

						DRG_Root = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						DRG_Root = new DRG_RootStruct();
						try {

							if (rowtFileInputDelimited_14.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_14[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								DRG_Root.C_HLEVEL = null;

								DRG_Root.C_FULLNAME = null;

								DRG_Root.C_NAME = null;

								DRG_Root.C_SYNONYM_CD = null;

								DRG_Root.C_VISUALATTRIBUTES = null;

								DRG_Root.C_TOTALNUM = null;

								DRG_Root.C_BASECODE = null;

								DRG_Root.C_METADATAXML = null;

								DRG_Root.C_FACTTABLECOLUMN = null;

								DRG_Root.C_TABLENAME = null;

								DRG_Root.C_COLUMNNAME = null;

								DRG_Root.C_COLUMNDATATYPE = null;

								DRG_Root.C_OPERATOR = null;

								DRG_Root.C_DIMCODE = null;

								DRG_Root.C_COMMENT = null;

								DRG_Root.C_TOOLTIP = null;

								DRG_Root.M_APPLIED_PATH = null;

								DRG_Root.UPDATE_DATE = null;

								DRG_Root.DOWNLOAD_DATE = null;

								DRG_Root.IMPORT_DATE = null;

								DRG_Root.SOURCESYSTEM_CD = null;

								DRG_Root.VALUETYPE_CD = null;

								DRG_Root.M_EXCLUSION_CD = null;

								DRG_Root.C_PATH = null;

								DRG_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_14 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_14 = 0;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										DRG_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										DRG_Root.C_HLEVEL = null;
									}

								} else {
									DRG_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 1;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_FULLNAME = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 2;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_NAME = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 3;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										DRG_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										DRG_Root.C_SYNONYM_CD = null;
									}

								} else {
									DRG_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 4;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 5;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_TOTALNUM = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 6;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_BASECODE = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 7;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_METADATAXML = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 8;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 9;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_TABLENAME = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 10;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_COLUMNNAME = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 11;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										DRG_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										DRG_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									DRG_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 12;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_OPERATOR = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 13;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_DIMCODE = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 14;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_COMMENT = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 15;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_TOOLTIP = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 16;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										DRG_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										DRG_Root.M_APPLIED_PATH = null;
									}

								} else {
									DRG_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 17;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										DRG_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										DRG_Root.UPDATE_DATE = null;
									}

								} else {
									DRG_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 18;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										DRG_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										DRG_Root.DOWNLOAD_DATE = null;
									}

								} else {
									DRG_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 19;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										DRG_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										DRG_Root.IMPORT_DATE = null;
									}

								} else {
									DRG_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 20;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 21;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.VALUETYPE_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 22;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.M_EXCLUSION_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 23;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_PATH = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 24;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									DRG_Root.C_SYMBOL = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									DRG_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							DRG_Root = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "DRG_Root"
						if (DRG_Root != null) {

							/**
							 * [tUnite_4 main ] start
							 */

							currentComponent = "tUnite_4";

							// ////////

							// for output
							tHashInput_tUnite_4_row42 = new tHashInput_tUnite_4_row42Struct();

							tHashInput_tUnite_4_row42.C_HLEVEL = DRG_Root.C_HLEVEL;
							tHashInput_tUnite_4_row42.C_FULLNAME = DRG_Root.C_FULLNAME;
							tHashInput_tUnite_4_row42.C_NAME = DRG_Root.C_NAME;
							tHashInput_tUnite_4_row42.C_SYNONYM_CD = DRG_Root.C_SYNONYM_CD;
							tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES = DRG_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_4_row42.C_TOTALNUM = DRG_Root.C_TOTALNUM;
							tHashInput_tUnite_4_row42.C_BASECODE = DRG_Root.C_BASECODE;
							tHashInput_tUnite_4_row42.C_METADATAXML = DRG_Root.C_METADATAXML;
							tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN = DRG_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_4_row42.C_TABLENAME = DRG_Root.C_TABLENAME;
							tHashInput_tUnite_4_row42.C_COLUMNNAME = DRG_Root.C_COLUMNNAME;
							tHashInput_tUnite_4_row42.C_COLUMNDATATYPE = DRG_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_4_row42.C_OPERATOR = DRG_Root.C_OPERATOR;
							tHashInput_tUnite_4_row42.C_DIMCODE = DRG_Root.C_DIMCODE;
							tHashInput_tUnite_4_row42.C_COMMENT = DRG_Root.C_COMMENT;
							tHashInput_tUnite_4_row42.C_TOOLTIP = DRG_Root.C_TOOLTIP;
							tHashInput_tUnite_4_row42.M_APPLIED_PATH = DRG_Root.M_APPLIED_PATH;
							tHashInput_tUnite_4_row42.UPDATE_DATE = DRG_Root.UPDATE_DATE;
							tHashInput_tUnite_4_row42.DOWNLOAD_DATE = DRG_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_4_row42.IMPORT_DATE = DRG_Root.IMPORT_DATE;
							tHashInput_tUnite_4_row42.SOURCESYSTEM_CD = DRG_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_4_row42.VALUETYPE_CD = DRG_Root.VALUETYPE_CD;
							tHashInput_tUnite_4_row42.M_EXCLUSION_CD = DRG_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_4_row42.C_PATH = DRG_Root.C_PATH;
							tHashInput_tUnite_4_row42.C_SYMBOL = DRG_Root.C_SYMBOL;

							nb_line_tUnite_4++;

							// ////////

							tos_count_tUnite_4++;

							/**
							 * [tUnite_4 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_4 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_4";

							tHashInput_tUnite_4_row42Struct oneRow_tHashOutput_tUnite_4 = new tHashInput_tUnite_4_row42Struct();

							oneRow_tHashOutput_tUnite_4.C_HLEVEL = tHashInput_tUnite_4_row42.C_HLEVEL;
							oneRow_tHashOutput_tUnite_4.C_FULLNAME = tHashInput_tUnite_4_row42.C_FULLNAME;
							oneRow_tHashOutput_tUnite_4.C_NAME = tHashInput_tUnite_4_row42.C_NAME;
							oneRow_tHashOutput_tUnite_4.C_SYNONYM_CD = tHashInput_tUnite_4_row42.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_4.C_VISUALATTRIBUTES = tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_4.C_TOTALNUM = tHashInput_tUnite_4_row42.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_4.C_BASECODE = tHashInput_tUnite_4_row42.C_BASECODE;
							oneRow_tHashOutput_tUnite_4.C_METADATAXML = tHashInput_tUnite_4_row42.C_METADATAXML;
							oneRow_tHashOutput_tUnite_4.C_FACTTABLECOLUMN = tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_4.C_TABLENAME = tHashInput_tUnite_4_row42.C_TABLENAME;
							oneRow_tHashOutput_tUnite_4.C_COLUMNNAME = tHashInput_tUnite_4_row42.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_4.C_COLUMNDATATYPE = tHashInput_tUnite_4_row42.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_4.C_OPERATOR = tHashInput_tUnite_4_row42.C_OPERATOR;
							oneRow_tHashOutput_tUnite_4.C_DIMCODE = tHashInput_tUnite_4_row42.C_DIMCODE;
							oneRow_tHashOutput_tUnite_4.C_COMMENT = tHashInput_tUnite_4_row42.C_COMMENT;
							oneRow_tHashOutput_tUnite_4.C_TOOLTIP = tHashInput_tUnite_4_row42.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_4.M_APPLIED_PATH = tHashInput_tUnite_4_row42.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_4.UPDATE_DATE = tHashInput_tUnite_4_row42.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_4.DOWNLOAD_DATE = tHashInput_tUnite_4_row42.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_4.IMPORT_DATE = tHashInput_tUnite_4_row42.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_4.SOURCESYSTEM_CD = tHashInput_tUnite_4_row42.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_4.VALUETYPE_CD = tHashInput_tUnite_4_row42.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_4.M_EXCLUSION_CD = tHashInput_tUnite_4_row42.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_4.C_PATH = tHashInput_tUnite_4_row42.C_PATH;
							oneRow_tHashOutput_tUnite_4.C_SYMBOL = tHashInput_tUnite_4_row42.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_4
									.put(oneRow_tHashOutput_tUnite_4);
							nb_line_tHashOutput_tUnite_4++;

							tos_count_tHashOutput_tUnite_4++;

							/**
							 * [tHashOutput_tUnite_4 main ] stop
							 */

						} // End of branch "DRG_Root"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						nb_line_tFileInputDelimited_14++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_14 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_14 != null) {
							csvReadertFileInputDelimited_14.close();
						}
					}
					if (csvReadertFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								nb_line_tFileInputDelimited_14);
					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());
				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				DRG_MDCStruct DRG_MDC_tmp = new DRG_MDCStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.drgDir + "ST-MDC.csv"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row2 = new row2Struct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.KATALOGVERSION_ID = null;

								row2.MDC_NAME = null;

								row2.MDC_CODE = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row2.KATALOGVERSION_ID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row2.KATALOGVERSION_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row2.MDC_NAME = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row2.MDC_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row2.MDC_CODE = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row2.MDC_CODE = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								DRG_MDC = null;

								// # Output table : 'DRG_MDC'
								DRG_MDC_tmp.C_HLEVEL = 4;
								DRG_MDC_tmp.C_FULLNAME = "\\i2b2\\ST\\DRG\\"
										+ StringHandling
												.UPCASE(row2.KATALOGVERSION_ID)
										+ "\\"
										+ StringHandling.UPCASE(row2.MDC_CODE)
										+ "\\";
								DRG_MDC_tmp.C_NAME = row2.MDC_CODE.length() == 1 ? "0"
										+ row2.MDC_CODE + " " + row2.MDC_NAME
										: row2.MDC_CODE + " " + row2.MDC_NAME;
								DRG_MDC_tmp.C_SYNONYM_CD = 'N';
								DRG_MDC_tmp.C_VISUALATTRIBUTES = "FA";
								DRG_MDC_tmp.C_TOTALNUM = null;
								DRG_MDC_tmp.C_BASECODE = "ST|DRG-"
										+ StringHandling
												.UPCASE(row15.KATALOGVERSION_ID)
										+ ":"
										+ StringHandling.UPCASE(row15.MDC_CODE);
								DRG_MDC_tmp.C_METADATAXML = null;
								DRG_MDC_tmp.C_FACTTABLECOLUMN = "concept_cd";
								DRG_MDC_tmp.C_TABLENAME = "concept_dimension";
								DRG_MDC_tmp.C_COLUMNNAME = "concept_path";
								DRG_MDC_tmp.C_COLUMNDATATYPE = 'T';
								DRG_MDC_tmp.C_OPERATOR = "LIKE";
								DRG_MDC_tmp.C_DIMCODE = "\\i2b2\\ST\\DRG\\"
										+ StringHandling
												.UPCASE(row2.KATALOGVERSION_ID)
										+ "\\"
										+ StringHandling.UPCASE(row2.MDC_CODE)
										+ "\\";
								DRG_MDC_tmp.C_COMMENT = null;
								DRG_MDC_tmp.C_TOOLTIP = row2.MDC_NAME;
								DRG_MDC_tmp.M_APPLIED_PATH = '@';
								DRG_MDC_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								DRG_MDC_tmp.DOWNLOAD_DATE = null;
								DRG_MDC_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								DRG_MDC_tmp.SOURCESYSTEM_CD = "DRG";
								DRG_MDC_tmp.VALUETYPE_CD = null;
								DRG_MDC_tmp.M_EXCLUSION_CD = null;
								DRG_MDC_tmp.C_PATH = null;
								DRG_MDC_tmp.C_SYMBOL = null;
								DRG_MDC = DRG_MDC_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */
							// Start of branch "DRG_MDC"
							if (DRG_MDC != null) {

								/**
								 * [tUnite_4 main ] start
								 */

								currentComponent = "tUnite_4";

								// ////////

								// for output
								tHashInput_tUnite_4_row42 = new tHashInput_tUnite_4_row42Struct();

								tHashInput_tUnite_4_row42.C_HLEVEL = DRG_MDC.C_HLEVEL;
								tHashInput_tUnite_4_row42.C_FULLNAME = DRG_MDC.C_FULLNAME;
								tHashInput_tUnite_4_row42.C_NAME = DRG_MDC.C_NAME;
								tHashInput_tUnite_4_row42.C_SYNONYM_CD = DRG_MDC.C_SYNONYM_CD;
								tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES = DRG_MDC.C_VISUALATTRIBUTES;
								tHashInput_tUnite_4_row42.C_TOTALNUM = DRG_MDC.C_TOTALNUM;
								tHashInput_tUnite_4_row42.C_BASECODE = DRG_MDC.C_BASECODE;
								tHashInput_tUnite_4_row42.C_METADATAXML = DRG_MDC.C_METADATAXML;
								tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN = DRG_MDC.C_FACTTABLECOLUMN;
								tHashInput_tUnite_4_row42.C_TABLENAME = DRG_MDC.C_TABLENAME;
								tHashInput_tUnite_4_row42.C_COLUMNNAME = DRG_MDC.C_COLUMNNAME;
								tHashInput_tUnite_4_row42.C_COLUMNDATATYPE = DRG_MDC.C_COLUMNDATATYPE;
								tHashInput_tUnite_4_row42.C_OPERATOR = DRG_MDC.C_OPERATOR;
								tHashInput_tUnite_4_row42.C_DIMCODE = DRG_MDC.C_DIMCODE;
								tHashInput_tUnite_4_row42.C_COMMENT = DRG_MDC.C_COMMENT;
								tHashInput_tUnite_4_row42.C_TOOLTIP = DRG_MDC.C_TOOLTIP;
								tHashInput_tUnite_4_row42.M_APPLIED_PATH = DRG_MDC.M_APPLIED_PATH;
								tHashInput_tUnite_4_row42.UPDATE_DATE = DRG_MDC.UPDATE_DATE;
								tHashInput_tUnite_4_row42.DOWNLOAD_DATE = DRG_MDC.DOWNLOAD_DATE;
								tHashInput_tUnite_4_row42.IMPORT_DATE = DRG_MDC.IMPORT_DATE;
								tHashInput_tUnite_4_row42.SOURCESYSTEM_CD = DRG_MDC.SOURCESYSTEM_CD;
								tHashInput_tUnite_4_row42.VALUETYPE_CD = DRG_MDC.VALUETYPE_CD;
								tHashInput_tUnite_4_row42.M_EXCLUSION_CD = DRG_MDC.M_EXCLUSION_CD;
								tHashInput_tUnite_4_row42.C_PATH = DRG_MDC.C_PATH;
								tHashInput_tUnite_4_row42.C_SYMBOL = DRG_MDC.C_SYMBOL;

								nb_line_tUnite_4++;

								// ////////

								tos_count_tUnite_4++;

								/**
								 * [tUnite_4 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_4 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_4";

								tHashInput_tUnite_4_row42Struct oneRow_tHashOutput_tUnite_4 = new tHashInput_tUnite_4_row42Struct();

								oneRow_tHashOutput_tUnite_4.C_HLEVEL = tHashInput_tUnite_4_row42.C_HLEVEL;
								oneRow_tHashOutput_tUnite_4.C_FULLNAME = tHashInput_tUnite_4_row42.C_FULLNAME;
								oneRow_tHashOutput_tUnite_4.C_NAME = tHashInput_tUnite_4_row42.C_NAME;
								oneRow_tHashOutput_tUnite_4.C_SYNONYM_CD = tHashInput_tUnite_4_row42.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_4.C_VISUALATTRIBUTES = tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_4.C_TOTALNUM = tHashInput_tUnite_4_row42.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_4.C_BASECODE = tHashInput_tUnite_4_row42.C_BASECODE;
								oneRow_tHashOutput_tUnite_4.C_METADATAXML = tHashInput_tUnite_4_row42.C_METADATAXML;
								oneRow_tHashOutput_tUnite_4.C_FACTTABLECOLUMN = tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_4.C_TABLENAME = tHashInput_tUnite_4_row42.C_TABLENAME;
								oneRow_tHashOutput_tUnite_4.C_COLUMNNAME = tHashInput_tUnite_4_row42.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_4.C_COLUMNDATATYPE = tHashInput_tUnite_4_row42.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_4.C_OPERATOR = tHashInput_tUnite_4_row42.C_OPERATOR;
								oneRow_tHashOutput_tUnite_4.C_DIMCODE = tHashInput_tUnite_4_row42.C_DIMCODE;
								oneRow_tHashOutput_tUnite_4.C_COMMENT = tHashInput_tUnite_4_row42.C_COMMENT;
								oneRow_tHashOutput_tUnite_4.C_TOOLTIP = tHashInput_tUnite_4_row42.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_4.M_APPLIED_PATH = tHashInput_tUnite_4_row42.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_4.UPDATE_DATE = tHashInput_tUnite_4_row42.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_4.DOWNLOAD_DATE = tHashInput_tUnite_4_row42.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_4.IMPORT_DATE = tHashInput_tUnite_4_row42.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_4.SOURCESYSTEM_CD = tHashInput_tUnite_4_row42.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_4.VALUETYPE_CD = tHashInput_tUnite_4_row42.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_4.M_EXCLUSION_CD = tHashInput_tUnite_4_row42.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_4.C_PATH = tHashInput_tUnite_4_row42.C_PATH;
								oneRow_tHashOutput_tUnite_4.C_SYMBOL = tHashInput_tUnite_4_row42.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_4
										.put(oneRow_tHashOutput_tUnite_4);
								nb_line_tHashOutput_tUnite_4++;

								tos_count_tHashOutput_tUnite_4++;

								/**
								 * [tHashOutput_tUnite_4 main ] stop
								 */

							} // End of branch "DRG_MDC"

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());
				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				DRG_BDRGStruct DRG_BDRG_tmp = new DRG_BDRGStruct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_18 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_18", false);
				start_Hash.put("tFileInputDelimited_18",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_18";

				int tos_count_tFileInputDelimited_18 = 0;

				int nb_line_tFileInputDelimited_18 = 0;
				int footer_tFileInputDelimited_18 = 0;
				int totalLinetFileInputDelimited_18 = 0;
				int limittFileInputDelimited_18 = -1;
				int lastLinetFileInputDelimited_18 = -1;

				char fieldSeparator_tFileInputDelimited_18[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_18 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_18[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_18 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_18 = /**
				 * Start field
				 * tFileInputDelimited_18:FILENAME
				 */
				context.drgDir + "ST-BDRG.csv"/**
				 * End field
				 * tFileInputDelimited_18:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_18 = null;

				try {

					String[] rowtFileInputDelimited_18 = null;
					int currentLinetFileInputDelimited_18 = 0;
					int outputLinetFileInputDelimited_18 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_18 = 0;
							if (footer_value_tFileInputDelimited_18 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_18,
									fieldSeparator_tFileInputDelimited_18[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_18)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_18[0]);
						}

						csvReadertFileInputDelimited_18
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_18[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_18[0] != '\r'))
							csvReadertFileInputDelimited_18.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_18[0]);

						csvReadertFileInputDelimited_18.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_18
								.setEscapeChar(csvReadertFileInputDelimited_18
										.getQuoteChar());

						if (footer_tFileInputDelimited_18 > 0) {
							for (totalLinetFileInputDelimited_18 = 0; totalLinetFileInputDelimited_18 < 1; totalLinetFileInputDelimited_18++) {
								csvReadertFileInputDelimited_18.readNext();
							}
							csvReadertFileInputDelimited_18
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_18.readNext()) {

								rowtFileInputDelimited_18 = csvReadertFileInputDelimited_18
										.getValues();
								if (!(rowtFileInputDelimited_18.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_18[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_18++;

								}

							}
							int lastLineTemptFileInputDelimited_18 = totalLinetFileInputDelimited_18
									- footer_tFileInputDelimited_18 < 0 ? 0
									: totalLinetFileInputDelimited_18
											- footer_tFileInputDelimited_18;
							if (lastLinetFileInputDelimited_18 > 0) {
								lastLinetFileInputDelimited_18 = lastLinetFileInputDelimited_18 < lastLineTemptFileInputDelimited_18 ? lastLinetFileInputDelimited_18
										: lastLineTemptFileInputDelimited_18;
							} else {
								lastLinetFileInputDelimited_18 = lastLineTemptFileInputDelimited_18;
							}

							csvReadertFileInputDelimited_18.close();
							if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_18,
										fieldSeparator_tFileInputDelimited_18[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_18)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_18[0]);
							}
							csvReadertFileInputDelimited_18
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_18[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_18[0] != '\r'))
								csvReadertFileInputDelimited_18
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_18[0]);

							csvReadertFileInputDelimited_18.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_18
									.setEscapeChar(csvReadertFileInputDelimited_18
											.getQuoteChar());

						}

						if (limittFileInputDelimited_18 != 0) {
							for (currentLinetFileInputDelimited_18 = 0; currentLinetFileInputDelimited_18 < 1; currentLinetFileInputDelimited_18++) {
								csvReadertFileInputDelimited_18.readNext();
							}
						}
						csvReadertFileInputDelimited_18
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_18 != 0
							&& csvReadertFileInputDelimited_18 != null
							&& csvReadertFileInputDelimited_18.readNext()) {

						rowtFileInputDelimited_18 = csvReadertFileInputDelimited_18
								.getValues();

						if (rowtFileInputDelimited_18.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_18[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_18++;

						if (lastLinetFileInputDelimited_18 > -1
								&& currentLinetFileInputDelimited_18 > lastLinetFileInputDelimited_18) {
							break;
						}
						outputLinetFileInputDelimited_18++;
						if (limittFileInputDelimited_18 > 0
								&& outputLinetFileInputDelimited_18 > limittFileInputDelimited_18) {
							break;
						}

						row15 = null;

						boolean whetherReject_tFileInputDelimited_18 = false;
						row15 = new row15Struct();
						try {

							if (rowtFileInputDelimited_18.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_18[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row15.KATALOGVERSION_ID = null;

								row15.MDC_CODE = null;

								row15.BASISDRG_NAME = null;

								row15.BASISDRG_CODE = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_18 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_18 = 0;

								if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

									row15.KATALOGVERSION_ID = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

								} else {
									row15.KATALOGVERSION_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_18 = 1;

								if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

									row15.MDC_CODE = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

								} else {
									row15.MDC_CODE = null;
								}

								columnIndexWithD_tFileInputDelimited_18 = 2;

								if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

									row15.BASISDRG_NAME = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

								} else {
									row15.BASISDRG_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_18 = 3;

								if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

									row15.BASISDRG_CODE = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

								} else {
									row15.BASISDRG_CODE = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_18 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_18 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_18 main ] start
						 */

						currentComponent = "tFileInputDelimited_18";

						tos_count_tFileInputDelimited_18++;

						/**
						 * [tFileInputDelimited_18 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tMap_9 main ] start
							 */

							currentComponent = "tMap_9";

							boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9 = false;
							boolean mainRowRejected_tMap_9 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
								// ###############################
								// # Output tables

								DRG_BDRG = null;

								// # Output table : 'DRG_BDRG'
								DRG_BDRG_tmp.C_HLEVEL = 5;
								DRG_BDRG_tmp.C_FULLNAME = "\\i2b2\\ST\\DRG\\"
										+ StringHandling
												.UPCASE(row15.KATALOGVERSION_ID)
										+ "\\"
										+ StringHandling.UPCASE(row15.MDC_CODE)
										+ "\\"
										+ StringHandling
												.UPCASE(row15.BASISDRG_CODE)
										+ "\\";
								DRG_BDRG_tmp.C_NAME = row15.BASISDRG_CODE + " "
										+ row15.BASISDRG_NAME;
								DRG_BDRG_tmp.C_SYNONYM_CD = 'N';
								DRG_BDRG_tmp.C_VISUALATTRIBUTES = "FA";
								DRG_BDRG_tmp.C_TOTALNUM = null;
								DRG_BDRG_tmp.C_BASECODE = "ST|DRG-"
										+ StringHandling
												.UPCASE(row15.KATALOGVERSION_ID)
										+ ":"
										+ StringHandling
												.UPCASE(row15.BASISDRG_CODE);
								DRG_BDRG_tmp.C_METADATAXML = null;
								DRG_BDRG_tmp.C_FACTTABLECOLUMN = "concept_cd";
								DRG_BDRG_tmp.C_TABLENAME = "concept_dimension";
								DRG_BDRG_tmp.C_COLUMNNAME = "concept_path";
								DRG_BDRG_tmp.C_COLUMNDATATYPE = 'T';
								DRG_BDRG_tmp.C_OPERATOR = "LIKE";
								DRG_BDRG_tmp.C_DIMCODE = "\\i2b2\\ST\\DRG\\"
										+ StringHandling
												.UPCASE(row15.KATALOGVERSION_ID)
										+ "\\"
										+ StringHandling.UPCASE(row15.MDC_CODE)
										+ "\\"
										+ StringHandling
												.UPCASE(row15.BASISDRG_CODE)
										+ "\\";
								DRG_BDRG_tmp.C_COMMENT = null;
								DRG_BDRG_tmp.C_TOOLTIP = row15.BASISDRG_NAME;
								DRG_BDRG_tmp.M_APPLIED_PATH = '@';
								DRG_BDRG_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								DRG_BDRG_tmp.DOWNLOAD_DATE = null;
								DRG_BDRG_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								DRG_BDRG_tmp.SOURCESYSTEM_CD = "DRG";
								DRG_BDRG_tmp.VALUETYPE_CD = null;
								DRG_BDRG_tmp.M_EXCLUSION_CD = null;
								DRG_BDRG_tmp.C_PATH = null;
								DRG_BDRG_tmp.C_SYMBOL = null;
								DRG_BDRG = DRG_BDRG_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_9 = false;

							tos_count_tMap_9++;

							/**
							 * [tMap_9 main ] stop
							 */
							// Start of branch "DRG_BDRG"
							if (DRG_BDRG != null) {

								/**
								 * [tUnite_4 main ] start
								 */

								currentComponent = "tUnite_4";

								// ////////

								// for output
								tHashInput_tUnite_4_row42 = new tHashInput_tUnite_4_row42Struct();

								tHashInput_tUnite_4_row42.C_HLEVEL = DRG_BDRG.C_HLEVEL;
								tHashInput_tUnite_4_row42.C_FULLNAME = DRG_BDRG.C_FULLNAME;
								tHashInput_tUnite_4_row42.C_NAME = DRG_BDRG.C_NAME;
								tHashInput_tUnite_4_row42.C_SYNONYM_CD = DRG_BDRG.C_SYNONYM_CD;
								tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES = DRG_BDRG.C_VISUALATTRIBUTES;
								tHashInput_tUnite_4_row42.C_TOTALNUM = DRG_BDRG.C_TOTALNUM;
								tHashInput_tUnite_4_row42.C_BASECODE = DRG_BDRG.C_BASECODE;
								tHashInput_tUnite_4_row42.C_METADATAXML = DRG_BDRG.C_METADATAXML;
								tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN = DRG_BDRG.C_FACTTABLECOLUMN;
								tHashInput_tUnite_4_row42.C_TABLENAME = DRG_BDRG.C_TABLENAME;
								tHashInput_tUnite_4_row42.C_COLUMNNAME = DRG_BDRG.C_COLUMNNAME;
								tHashInput_tUnite_4_row42.C_COLUMNDATATYPE = DRG_BDRG.C_COLUMNDATATYPE;
								tHashInput_tUnite_4_row42.C_OPERATOR = DRG_BDRG.C_OPERATOR;
								tHashInput_tUnite_4_row42.C_DIMCODE = DRG_BDRG.C_DIMCODE;
								tHashInput_tUnite_4_row42.C_COMMENT = DRG_BDRG.C_COMMENT;
								tHashInput_tUnite_4_row42.C_TOOLTIP = DRG_BDRG.C_TOOLTIP;
								tHashInput_tUnite_4_row42.M_APPLIED_PATH = DRG_BDRG.M_APPLIED_PATH;
								tHashInput_tUnite_4_row42.UPDATE_DATE = DRG_BDRG.UPDATE_DATE;
								tHashInput_tUnite_4_row42.DOWNLOAD_DATE = DRG_BDRG.DOWNLOAD_DATE;
								tHashInput_tUnite_4_row42.IMPORT_DATE = DRG_BDRG.IMPORT_DATE;
								tHashInput_tUnite_4_row42.SOURCESYSTEM_CD = DRG_BDRG.SOURCESYSTEM_CD;
								tHashInput_tUnite_4_row42.VALUETYPE_CD = DRG_BDRG.VALUETYPE_CD;
								tHashInput_tUnite_4_row42.M_EXCLUSION_CD = DRG_BDRG.M_EXCLUSION_CD;
								tHashInput_tUnite_4_row42.C_PATH = DRG_BDRG.C_PATH;
								tHashInput_tUnite_4_row42.C_SYMBOL = DRG_BDRG.C_SYMBOL;

								nb_line_tUnite_4++;

								// ////////

								tos_count_tUnite_4++;

								/**
								 * [tUnite_4 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_4 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_4";

								tHashInput_tUnite_4_row42Struct oneRow_tHashOutput_tUnite_4 = new tHashInput_tUnite_4_row42Struct();

								oneRow_tHashOutput_tUnite_4.C_HLEVEL = tHashInput_tUnite_4_row42.C_HLEVEL;
								oneRow_tHashOutput_tUnite_4.C_FULLNAME = tHashInput_tUnite_4_row42.C_FULLNAME;
								oneRow_tHashOutput_tUnite_4.C_NAME = tHashInput_tUnite_4_row42.C_NAME;
								oneRow_tHashOutput_tUnite_4.C_SYNONYM_CD = tHashInput_tUnite_4_row42.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_4.C_VISUALATTRIBUTES = tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_4.C_TOTALNUM = tHashInput_tUnite_4_row42.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_4.C_BASECODE = tHashInput_tUnite_4_row42.C_BASECODE;
								oneRow_tHashOutput_tUnite_4.C_METADATAXML = tHashInput_tUnite_4_row42.C_METADATAXML;
								oneRow_tHashOutput_tUnite_4.C_FACTTABLECOLUMN = tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_4.C_TABLENAME = tHashInput_tUnite_4_row42.C_TABLENAME;
								oneRow_tHashOutput_tUnite_4.C_COLUMNNAME = tHashInput_tUnite_4_row42.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_4.C_COLUMNDATATYPE = tHashInput_tUnite_4_row42.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_4.C_OPERATOR = tHashInput_tUnite_4_row42.C_OPERATOR;
								oneRow_tHashOutput_tUnite_4.C_DIMCODE = tHashInput_tUnite_4_row42.C_DIMCODE;
								oneRow_tHashOutput_tUnite_4.C_COMMENT = tHashInput_tUnite_4_row42.C_COMMENT;
								oneRow_tHashOutput_tUnite_4.C_TOOLTIP = tHashInput_tUnite_4_row42.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_4.M_APPLIED_PATH = tHashInput_tUnite_4_row42.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_4.UPDATE_DATE = tHashInput_tUnite_4_row42.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_4.DOWNLOAD_DATE = tHashInput_tUnite_4_row42.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_4.IMPORT_DATE = tHashInput_tUnite_4_row42.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_4.SOURCESYSTEM_CD = tHashInput_tUnite_4_row42.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_4.VALUETYPE_CD = tHashInput_tUnite_4_row42.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_4.M_EXCLUSION_CD = tHashInput_tUnite_4_row42.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_4.C_PATH = tHashInput_tUnite_4_row42.C_PATH;
								oneRow_tHashOutput_tUnite_4.C_SYMBOL = tHashInput_tUnite_4_row42.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_4
										.put(oneRow_tHashOutput_tUnite_4);
								nb_line_tHashOutput_tUnite_4++;

								tos_count_tHashOutput_tUnite_4++;

								/**
								 * [tHashOutput_tUnite_4 main ] stop
								 */

							} // End of branch "DRG_BDRG"

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_18 end ] start
						 */

						currentComponent = "tFileInputDelimited_18";

						nb_line_tFileInputDelimited_18++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_18 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_18 != null) {
							csvReadertFileInputDelimited_18.close();
						}
					}
					if (csvReadertFileInputDelimited_18 != null) {
						globalMap.put("tFileInputDelimited_18_NB_LINE",
								nb_line_tFileInputDelimited_18);
					}
				}

				ok_Hash.put("tFileInputDelimited_18", true);
				end_Hash.put("tFileInputDelimited_18",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_18 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());
				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				DRG_DRGStruct DRG_DRG_tmp = new DRG_DRGStruct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_19 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_19", false);
				start_Hash.put("tFileInputDelimited_19",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_19";

				int tos_count_tFileInputDelimited_19 = 0;

				int nb_line_tFileInputDelimited_19 = 0;
				int footer_tFileInputDelimited_19 = 0;
				int totalLinetFileInputDelimited_19 = 0;
				int limittFileInputDelimited_19 = -1;
				int lastLinetFileInputDelimited_19 = -1;

				char fieldSeparator_tFileInputDelimited_19[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_19 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_19[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_19 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_19 = /**
				 * Start field
				 * tFileInputDelimited_19:FILENAME
				 */
				context.drgDir + "ST-DRG.csv"/**
				 * End field
				 * tFileInputDelimited_19:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_19 = null;

				try {

					String[] rowtFileInputDelimited_19 = null;
					int currentLinetFileInputDelimited_19 = 0;
					int outputLinetFileInputDelimited_19 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_19 = 0;
							if (footer_value_tFileInputDelimited_19 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_19,
									fieldSeparator_tFileInputDelimited_19[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_19)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_19[0]);
						}

						csvReadertFileInputDelimited_19
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_19[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_19[0] != '\r'))
							csvReadertFileInputDelimited_19.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_19[0]);

						csvReadertFileInputDelimited_19.setQuoteChar(' ');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_19
								.setEscapeChar(csvReadertFileInputDelimited_19
										.getQuoteChar());

						if (footer_tFileInputDelimited_19 > 0) {
							for (totalLinetFileInputDelimited_19 = 0; totalLinetFileInputDelimited_19 < 1; totalLinetFileInputDelimited_19++) {
								csvReadertFileInputDelimited_19.readNext();
							}
							csvReadertFileInputDelimited_19
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_19.readNext()) {

								rowtFileInputDelimited_19 = csvReadertFileInputDelimited_19
										.getValues();
								if (!(rowtFileInputDelimited_19.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_19[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_19++;

								}

							}
							int lastLineTemptFileInputDelimited_19 = totalLinetFileInputDelimited_19
									- footer_tFileInputDelimited_19 < 0 ? 0
									: totalLinetFileInputDelimited_19
											- footer_tFileInputDelimited_19;
							if (lastLinetFileInputDelimited_19 > 0) {
								lastLinetFileInputDelimited_19 = lastLinetFileInputDelimited_19 < lastLineTemptFileInputDelimited_19 ? lastLinetFileInputDelimited_19
										: lastLineTemptFileInputDelimited_19;
							} else {
								lastLinetFileInputDelimited_19 = lastLineTemptFileInputDelimited_19;
							}

							csvReadertFileInputDelimited_19.close();
							if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_19,
										fieldSeparator_tFileInputDelimited_19[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_19)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_19[0]);
							}
							csvReadertFileInputDelimited_19
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_19[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_19[0] != '\r'))
								csvReadertFileInputDelimited_19
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_19[0]);

							csvReadertFileInputDelimited_19.setQuoteChar(' ');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_19
									.setEscapeChar(csvReadertFileInputDelimited_19
											.getQuoteChar());

						}

						if (limittFileInputDelimited_19 != 0) {
							for (currentLinetFileInputDelimited_19 = 0; currentLinetFileInputDelimited_19 < 1; currentLinetFileInputDelimited_19++) {
								csvReadertFileInputDelimited_19.readNext();
							}
						}
						csvReadertFileInputDelimited_19
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_19 != 0
							&& csvReadertFileInputDelimited_19 != null
							&& csvReadertFileInputDelimited_19.readNext()) {

						rowtFileInputDelimited_19 = csvReadertFileInputDelimited_19
								.getValues();

						if (rowtFileInputDelimited_19.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_19[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_19++;

						if (lastLinetFileInputDelimited_19 > -1
								&& currentLinetFileInputDelimited_19 > lastLinetFileInputDelimited_19) {
							break;
						}
						outputLinetFileInputDelimited_19++;
						if (limittFileInputDelimited_19 > 0
								&& outputLinetFileInputDelimited_19 > limittFileInputDelimited_19) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_19 = false;
						row10 = new row10Struct();
						try {

							if (rowtFileInputDelimited_19.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_19[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.KATALOGVERSION_ID = null;

								row10.MDC_CODE = null;

								row10.BASISDRG_CODE = null;

								row10.DRG_ID = null;

								row10.DRG_NAME = null;

								row10.DRG_CODE = null;

								row10.DRG_PARTITION = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_19 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_19 = 0;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row10.KATALOGVERSION_ID = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row10.KATALOGVERSION_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 1;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row10.MDC_CODE = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row10.MDC_CODE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 2;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row10.BASISDRG_CODE = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row10.BASISDRG_CODE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 3;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row10.DRG_ID = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row10.DRG_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 4;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row10.DRG_NAME = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row10.DRG_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 5;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row10.DRG_CODE = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row10.DRG_CODE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 6;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row10.DRG_PARTITION = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row10.DRG_PARTITION = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_19 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_19 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_19 main ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						tos_count_tFileInputDelimited_19++;

						/**
						 * [tFileInputDelimited_19 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
								// ###############################
								// # Output tables

								DRG_DRG = null;

								// # Output table : 'DRG_DRG'
								DRG_DRG_tmp.C_HLEVEL = 6;
								DRG_DRG_tmp.C_FULLNAME = "\\i2b2\\ST\\DRG\\"
										+ StringHandling
												.UPCASE(row10.KATALOGVERSION_ID)
										+ "\\"
										+ StringHandling.UPCASE(row10.MDC_CODE)
										+ "\\"
										+ StringHandling
												.UPCASE(row10.BASISDRG_CODE)
										+ "\\"
										+ StringHandling.UPCASE(row10.DRG_CODE)
										+ "\\";
								DRG_DRG_tmp.C_NAME = row10.DRG_CODE + " "
										+ row10.DRG_NAME;
								DRG_DRG_tmp.C_SYNONYM_CD = 'N';
								DRG_DRG_tmp.C_VISUALATTRIBUTES = "LA";
								DRG_DRG_tmp.C_TOTALNUM = null;
								DRG_DRG_tmp.C_BASECODE = "ST|DRG-"
										+ StringHandling
												.UPCASE(row10.KATALOGVERSION_ID)
										+ ":"
										+ StringHandling.UPCASE(row10.DRG_CODE);
								DRG_DRG_tmp.C_METADATAXML = null;
								DRG_DRG_tmp.C_FACTTABLECOLUMN = "concept_cd";
								DRG_DRG_tmp.C_TABLENAME = "concept_dimension";
								DRG_DRG_tmp.C_COLUMNNAME = "concept_path";
								DRG_DRG_tmp.C_COLUMNDATATYPE = 'T';
								DRG_DRG_tmp.C_OPERATOR = "LIKE";
								DRG_DRG_tmp.C_DIMCODE = "\\i2b2\\ST\\DRG\\"
										+ StringHandling
												.UPCASE(row10.KATALOGVERSION_ID)
										+ "\\"
										+ StringHandling.UPCASE(row10.MDC_CODE)
										+ "\\"
										+ StringHandling
												.UPCASE(row10.BASISDRG_CODE)
										+ "\\"
										+ StringHandling.UPCASE(row10.DRG_CODE)
										+ "\\";
								DRG_DRG_tmp.C_COMMENT = null;
								DRG_DRG_tmp.C_TOOLTIP = row10.DRG_NAME;
								DRG_DRG_tmp.M_APPLIED_PATH = '@';
								DRG_DRG_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								DRG_DRG_tmp.DOWNLOAD_DATE = null;
								DRG_DRG_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								DRG_DRG_tmp.SOURCESYSTEM_CD = "DRG";
								DRG_DRG_tmp.VALUETYPE_CD = null;
								DRG_DRG_tmp.M_EXCLUSION_CD = null;
								DRG_DRG_tmp.C_PATH = null;
								DRG_DRG_tmp.C_SYMBOL = null;
								DRG_DRG = DRG_DRG_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_10 = false;

							tos_count_tMap_10++;

							/**
							 * [tMap_10 main ] stop
							 */
							// Start of branch "DRG_DRG"
							if (DRG_DRG != null) {

								/**
								 * [tUnite_4 main ] start
								 */

								currentComponent = "tUnite_4";

								// ////////

								// for output
								tHashInput_tUnite_4_row42 = new tHashInput_tUnite_4_row42Struct();

								tHashInput_tUnite_4_row42.C_HLEVEL = DRG_DRG.C_HLEVEL;
								tHashInput_tUnite_4_row42.C_FULLNAME = DRG_DRG.C_FULLNAME;
								tHashInput_tUnite_4_row42.C_NAME = DRG_DRG.C_NAME;
								tHashInput_tUnite_4_row42.C_SYNONYM_CD = DRG_DRG.C_SYNONYM_CD;
								tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES = DRG_DRG.C_VISUALATTRIBUTES;
								tHashInput_tUnite_4_row42.C_TOTALNUM = DRG_DRG.C_TOTALNUM;
								tHashInput_tUnite_4_row42.C_BASECODE = DRG_DRG.C_BASECODE;
								tHashInput_tUnite_4_row42.C_METADATAXML = DRG_DRG.C_METADATAXML;
								tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN = DRG_DRG.C_FACTTABLECOLUMN;
								tHashInput_tUnite_4_row42.C_TABLENAME = DRG_DRG.C_TABLENAME;
								tHashInput_tUnite_4_row42.C_COLUMNNAME = DRG_DRG.C_COLUMNNAME;
								tHashInput_tUnite_4_row42.C_COLUMNDATATYPE = DRG_DRG.C_COLUMNDATATYPE;
								tHashInput_tUnite_4_row42.C_OPERATOR = DRG_DRG.C_OPERATOR;
								tHashInput_tUnite_4_row42.C_DIMCODE = DRG_DRG.C_DIMCODE;
								tHashInput_tUnite_4_row42.C_COMMENT = DRG_DRG.C_COMMENT;
								tHashInput_tUnite_4_row42.C_TOOLTIP = DRG_DRG.C_TOOLTIP;
								tHashInput_tUnite_4_row42.M_APPLIED_PATH = DRG_DRG.M_APPLIED_PATH;
								tHashInput_tUnite_4_row42.UPDATE_DATE = DRG_DRG.UPDATE_DATE;
								tHashInput_tUnite_4_row42.DOWNLOAD_DATE = DRG_DRG.DOWNLOAD_DATE;
								tHashInput_tUnite_4_row42.IMPORT_DATE = DRG_DRG.IMPORT_DATE;
								tHashInput_tUnite_4_row42.SOURCESYSTEM_CD = DRG_DRG.SOURCESYSTEM_CD;
								tHashInput_tUnite_4_row42.VALUETYPE_CD = DRG_DRG.VALUETYPE_CD;
								tHashInput_tUnite_4_row42.M_EXCLUSION_CD = DRG_DRG.M_EXCLUSION_CD;
								tHashInput_tUnite_4_row42.C_PATH = DRG_DRG.C_PATH;
								tHashInput_tUnite_4_row42.C_SYMBOL = DRG_DRG.C_SYMBOL;

								nb_line_tUnite_4++;

								// ////////

								tos_count_tUnite_4++;

								/**
								 * [tUnite_4 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_4 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_4";

								tHashInput_tUnite_4_row42Struct oneRow_tHashOutput_tUnite_4 = new tHashInput_tUnite_4_row42Struct();

								oneRow_tHashOutput_tUnite_4.C_HLEVEL = tHashInput_tUnite_4_row42.C_HLEVEL;
								oneRow_tHashOutput_tUnite_4.C_FULLNAME = tHashInput_tUnite_4_row42.C_FULLNAME;
								oneRow_tHashOutput_tUnite_4.C_NAME = tHashInput_tUnite_4_row42.C_NAME;
								oneRow_tHashOutput_tUnite_4.C_SYNONYM_CD = tHashInput_tUnite_4_row42.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_4.C_VISUALATTRIBUTES = tHashInput_tUnite_4_row42.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_4.C_TOTALNUM = tHashInput_tUnite_4_row42.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_4.C_BASECODE = tHashInput_tUnite_4_row42.C_BASECODE;
								oneRow_tHashOutput_tUnite_4.C_METADATAXML = tHashInput_tUnite_4_row42.C_METADATAXML;
								oneRow_tHashOutput_tUnite_4.C_FACTTABLECOLUMN = tHashInput_tUnite_4_row42.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_4.C_TABLENAME = tHashInput_tUnite_4_row42.C_TABLENAME;
								oneRow_tHashOutput_tUnite_4.C_COLUMNNAME = tHashInput_tUnite_4_row42.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_4.C_COLUMNDATATYPE = tHashInput_tUnite_4_row42.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_4.C_OPERATOR = tHashInput_tUnite_4_row42.C_OPERATOR;
								oneRow_tHashOutput_tUnite_4.C_DIMCODE = tHashInput_tUnite_4_row42.C_DIMCODE;
								oneRow_tHashOutput_tUnite_4.C_COMMENT = tHashInput_tUnite_4_row42.C_COMMENT;
								oneRow_tHashOutput_tUnite_4.C_TOOLTIP = tHashInput_tUnite_4_row42.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_4.M_APPLIED_PATH = tHashInput_tUnite_4_row42.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_4.UPDATE_DATE = tHashInput_tUnite_4_row42.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_4.DOWNLOAD_DATE = tHashInput_tUnite_4_row42.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_4.IMPORT_DATE = tHashInput_tUnite_4_row42.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_4.SOURCESYSTEM_CD = tHashInput_tUnite_4_row42.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_4.VALUETYPE_CD = tHashInput_tUnite_4_row42.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_4.M_EXCLUSION_CD = tHashInput_tUnite_4_row42.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_4.C_PATH = tHashInput_tUnite_4_row42.C_PATH;
								oneRow_tHashOutput_tUnite_4.C_SYMBOL = tHashInput_tUnite_4_row42.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_4
										.put(oneRow_tHashOutput_tUnite_4);
								nb_line_tHashOutput_tUnite_4++;

								tos_count_tHashOutput_tUnite_4++;

								/**
								 * [tHashOutput_tUnite_4 main ] stop
								 */

							} // End of branch "DRG_DRG"

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_19 end ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						nb_line_tFileInputDelimited_19++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_19 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_19 != null) {
							csvReadertFileInputDelimited_19.close();
						}
					}
					if (csvReadertFileInputDelimited_19 != null) {
						globalMap.put("tFileInputDelimited_19_NB_LINE",
								nb_line_tFileInputDelimited_19);
					}
				}

				ok_Hash.put("tFileInputDelimited_19", true);
				end_Hash.put("tFileInputDelimited_19",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_19 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tUnite_4 end ] start
				 */

				currentComponent = "tUnite_4";

				globalMap.put("tUnite_4_NB_LINE", nb_line_tUnite_4);

				ok_Hash.put("tUnite_4", true);
				end_Hash.put("tUnite_4", System.currentTimeMillis());

				/**
				 * [tUnite_4 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_4 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_4";

				globalMap.put("tHashOutput_tUnite_4_NB_LINE",
						nb_line_tHashOutput_tUnite_4);

				ok_Hash.put("tHashOutput_tUnite_4", true);
				end_Hash.put("tHashOutput_tUnite_4", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_10_row44Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_10_row44Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_10_row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICD10_RootStruct implements
			routines.system.IPersistableRow<ICD10_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICD10_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICD10_FolderStruct implements
			routines.system.IPersistableRow<ICD10_FolderStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICD10_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICD10_LeafStruct implements
			routines.system.IPersistableRow<ICD10_LeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICD10_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				ICD10_RootStruct ICD10_Root = new ICD10_RootStruct();

				row19Struct row19 = new row19Struct();
				ICD10_FolderStruct ICD10_Folder = new ICD10_FolderStruct();

				row5Struct row5 = new row5Struct();
				ICD10_LeafStruct ICD10_Leaf = new ICD10_LeafStruct();

				tHashInput_tUnite_10_row44Struct tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

				/**
				 * [tHashOutput_tUnite_10 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_10", false);
				start_Hash.put("tHashOutput_tUnite_10",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_10";

				int tos_count_tHashOutput_tUnite_10 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_10 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_10_row44Struct> tHashFile_tHashOutput_tUnite_10 = null;
				if ((tHashFile_tHashOutput_tUnite_10 = mf_tHashOutput_tUnite_10
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_10")) == null) {
					tHashFile_tHashOutput_tUnite_10 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_10_row44Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_10.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_10",
						tHashFile_tHashOutput_tUnite_10);
				int nb_line_tHashOutput_tUnite_10 = 0;

				/**
				 * [tHashOutput_tUnite_10 begin ] stop
				 */

				/**
				 * [tUnite_10 begin ] start
				 */

				ok_Hash.put("tUnite_10", false);
				start_Hash.put("tUnite_10", System.currentTimeMillis());
				currentComponent = "tUnite_10";

				int tos_count_tUnite_10 = 0;

				int nb_line_tUnite_10 = 0;

				/**
				 * [tUnite_10 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_20", false);
				start_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_20";

				int tos_count_tFileInputDelimited_20 = 0;

				int nb_line_tFileInputDelimited_20 = 0;
				int footer_tFileInputDelimited_20 = 0;
				int totalLinetFileInputDelimited_20 = 0;
				int limittFileInputDelimited_20 = -1;
				int lastLinetFileInputDelimited_20 = -1;

				char fieldSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_20 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_20 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_20 = /**
				 * Start field
				 * tFileInputDelimited_20:FILENAME
				 */
				context.icd10Dir + "root_ICD-10-GM.csv"/**
				 * End field
				 * tFileInputDelimited_20:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_20 = null;

				try {

					String[] rowtFileInputDelimited_20 = null;
					int currentLinetFileInputDelimited_20 = 0;
					int outputLinetFileInputDelimited_20 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_20 = 0;
							if (footer_value_tFileInputDelimited_20 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_20,
									fieldSeparator_tFileInputDelimited_20[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_20)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_20[0]);
						}

						csvReadertFileInputDelimited_20
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
							csvReadertFileInputDelimited_20.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_20[0]);

						csvReadertFileInputDelimited_20.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_20
								.setEscapeChar(csvReadertFileInputDelimited_20
										.getQuoteChar());

						if (footer_tFileInputDelimited_20 > 0) {
							for (totalLinetFileInputDelimited_20 = 0; totalLinetFileInputDelimited_20 < 1; totalLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
							csvReadertFileInputDelimited_20
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_20.readNext()) {

								rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
										.getValues();
								if (!(rowtFileInputDelimited_20.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_20[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_20++;

								}

							}
							int lastLineTemptFileInputDelimited_20 = totalLinetFileInputDelimited_20
									- footer_tFileInputDelimited_20 < 0 ? 0
									: totalLinetFileInputDelimited_20
											- footer_tFileInputDelimited_20;
							if (lastLinetFileInputDelimited_20 > 0) {
								lastLinetFileInputDelimited_20 = lastLinetFileInputDelimited_20 < lastLineTemptFileInputDelimited_20 ? lastLinetFileInputDelimited_20
										: lastLineTemptFileInputDelimited_20;
							} else {
								lastLinetFileInputDelimited_20 = lastLineTemptFileInputDelimited_20;
							}

							csvReadertFileInputDelimited_20.close();
							if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_20,
										fieldSeparator_tFileInputDelimited_20[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_20)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_20[0]);
							}
							csvReadertFileInputDelimited_20
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
								csvReadertFileInputDelimited_20
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_20[0]);

							csvReadertFileInputDelimited_20.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_20
									.setEscapeChar(csvReadertFileInputDelimited_20
											.getQuoteChar());

						}

						if (limittFileInputDelimited_20 != 0) {
							for (currentLinetFileInputDelimited_20 = 0; currentLinetFileInputDelimited_20 < 1; currentLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
						}
						csvReadertFileInputDelimited_20
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_20 != 0
							&& csvReadertFileInputDelimited_20 != null
							&& csvReadertFileInputDelimited_20.readNext()) {

						rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
								.getValues();

						if (rowtFileInputDelimited_20.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_20[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_20++;

						if (lastLinetFileInputDelimited_20 > -1
								&& currentLinetFileInputDelimited_20 > lastLinetFileInputDelimited_20) {
							break;
						}
						outputLinetFileInputDelimited_20++;
						if (limittFileInputDelimited_20 > 0
								&& outputLinetFileInputDelimited_20 > limittFileInputDelimited_20) {
							break;
						}

						ICD10_Root = null;

						boolean whetherReject_tFileInputDelimited_20 = false;
						ICD10_Root = new ICD10_RootStruct();
						try {

							if (rowtFileInputDelimited_20.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_20[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								ICD10_Root.C_HLEVEL = null;

								ICD10_Root.C_FULLNAME = null;

								ICD10_Root.C_NAME = null;

								ICD10_Root.C_SYNONYM_CD = null;

								ICD10_Root.C_VISUALATTRIBUTES = null;

								ICD10_Root.C_TOTALNUM = null;

								ICD10_Root.C_BASECODE = null;

								ICD10_Root.C_METADATAXML = null;

								ICD10_Root.C_FACTTABLECOLUMN = null;

								ICD10_Root.C_TABLENAME = null;

								ICD10_Root.C_COLUMNNAME = null;

								ICD10_Root.C_COLUMNDATATYPE = null;

								ICD10_Root.C_OPERATOR = null;

								ICD10_Root.C_DIMCODE = null;

								ICD10_Root.C_COMMENT = null;

								ICD10_Root.C_TOOLTIP = null;

								ICD10_Root.M_APPLIED_PATH = null;

								ICD10_Root.UPDATE_DATE = null;

								ICD10_Root.DOWNLOAD_DATE = null;

								ICD10_Root.IMPORT_DATE = null;

								ICD10_Root.SOURCESYSTEM_CD = null;

								ICD10_Root.VALUETYPE_CD = null;

								ICD10_Root.M_EXCLUSION_CD = null;

								ICD10_Root.C_PATH = null;

								ICD10_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_20 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_20 = 0;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.C_HLEVEL = null;
									}

								} else {
									ICD10_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 1;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_FULLNAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 2;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_NAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 3;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.C_SYNONYM_CD = null;
									}

								} else {
									ICD10_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 4;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 5;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_TOTALNUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 6;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_BASECODE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 7;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_METADATAXML = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 8;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 9;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_TABLENAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 10;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_COLUMNNAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 11;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									ICD10_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 12;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_OPERATOR = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 13;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_DIMCODE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 14;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_COMMENT = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 15;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_TOOLTIP = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 16;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.M_APPLIED_PATH = null;
									}

								} else {
									ICD10_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 17;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICD10_Root.UPDATE_DATE = null;
									}

								} else {
									ICD10_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 18;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICD10_Root.DOWNLOAD_DATE = null;
									}

								} else {
									ICD10_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 19;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICD10_Root.IMPORT_DATE = null;
									}

								} else {
									ICD10_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 20;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 21;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.VALUETYPE_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 22;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.M_EXCLUSION_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 23;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_PATH = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 24;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_SYMBOL = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_20 = true;

							System.err.println(e.getMessage());
							ICD10_Root = null;

						}

						/**
						 * [tFileInputDelimited_20 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_20 main ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						tos_count_tFileInputDelimited_20++;

						/**
						 * [tFileInputDelimited_20 main ] stop
						 */
						// Start of branch "ICD10_Root"
						if (ICD10_Root != null) {

							/**
							 * [tUnite_10 main ] start
							 */

							currentComponent = "tUnite_10";

							// ////////

							// for output
							tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

							tHashInput_tUnite_10_row44.C_HLEVEL = ICD10_Root.C_HLEVEL;
							tHashInput_tUnite_10_row44.C_FULLNAME = ICD10_Root.C_FULLNAME;
							tHashInput_tUnite_10_row44.C_NAME = ICD10_Root.C_NAME;
							tHashInput_tUnite_10_row44.C_SYNONYM_CD = ICD10_Root.C_SYNONYM_CD;
							tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES = ICD10_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_10_row44.C_TOTALNUM = ICD10_Root.C_TOTALNUM;
							tHashInput_tUnite_10_row44.C_BASECODE = ICD10_Root.C_BASECODE;
							tHashInput_tUnite_10_row44.C_METADATAXML = ICD10_Root.C_METADATAXML;
							tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN = ICD10_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_10_row44.C_TABLENAME = ICD10_Root.C_TABLENAME;
							tHashInput_tUnite_10_row44.C_COLUMNNAME = ICD10_Root.C_COLUMNNAME;
							tHashInput_tUnite_10_row44.C_COLUMNDATATYPE = ICD10_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_10_row44.C_OPERATOR = ICD10_Root.C_OPERATOR;
							tHashInput_tUnite_10_row44.C_DIMCODE = ICD10_Root.C_DIMCODE;
							tHashInput_tUnite_10_row44.C_COMMENT = ICD10_Root.C_COMMENT;
							tHashInput_tUnite_10_row44.C_TOOLTIP = ICD10_Root.C_TOOLTIP;
							tHashInput_tUnite_10_row44.M_APPLIED_PATH = ICD10_Root.M_APPLIED_PATH;
							tHashInput_tUnite_10_row44.UPDATE_DATE = ICD10_Root.UPDATE_DATE;
							tHashInput_tUnite_10_row44.DOWNLOAD_DATE = ICD10_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_10_row44.IMPORT_DATE = ICD10_Root.IMPORT_DATE;
							tHashInput_tUnite_10_row44.SOURCESYSTEM_CD = ICD10_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_10_row44.VALUETYPE_CD = ICD10_Root.VALUETYPE_CD;
							tHashInput_tUnite_10_row44.M_EXCLUSION_CD = ICD10_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_10_row44.C_PATH = ICD10_Root.C_PATH;
							tHashInput_tUnite_10_row44.C_SYMBOL = ICD10_Root.C_SYMBOL;

							nb_line_tUnite_10++;

							// ////////

							tos_count_tUnite_10++;

							/**
							 * [tUnite_10 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_10 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_10";

							tHashInput_tUnite_10_row44Struct oneRow_tHashOutput_tUnite_10 = new tHashInput_tUnite_10_row44Struct();

							oneRow_tHashOutput_tUnite_10.C_HLEVEL = tHashInput_tUnite_10_row44.C_HLEVEL;
							oneRow_tHashOutput_tUnite_10.C_FULLNAME = tHashInput_tUnite_10_row44.C_FULLNAME;
							oneRow_tHashOutput_tUnite_10.C_NAME = tHashInput_tUnite_10_row44.C_NAME;
							oneRow_tHashOutput_tUnite_10.C_SYNONYM_CD = tHashInput_tUnite_10_row44.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_10.C_VISUALATTRIBUTES = tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_10.C_TOTALNUM = tHashInput_tUnite_10_row44.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_10.C_BASECODE = tHashInput_tUnite_10_row44.C_BASECODE;
							oneRow_tHashOutput_tUnite_10.C_METADATAXML = tHashInput_tUnite_10_row44.C_METADATAXML;
							oneRow_tHashOutput_tUnite_10.C_FACTTABLECOLUMN = tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_10.C_TABLENAME = tHashInput_tUnite_10_row44.C_TABLENAME;
							oneRow_tHashOutput_tUnite_10.C_COLUMNNAME = tHashInput_tUnite_10_row44.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_10.C_COLUMNDATATYPE = tHashInput_tUnite_10_row44.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_10.C_OPERATOR = tHashInput_tUnite_10_row44.C_OPERATOR;
							oneRow_tHashOutput_tUnite_10.C_DIMCODE = tHashInput_tUnite_10_row44.C_DIMCODE;
							oneRow_tHashOutput_tUnite_10.C_COMMENT = tHashInput_tUnite_10_row44.C_COMMENT;
							oneRow_tHashOutput_tUnite_10.C_TOOLTIP = tHashInput_tUnite_10_row44.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_10.M_APPLIED_PATH = tHashInput_tUnite_10_row44.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_10.UPDATE_DATE = tHashInput_tUnite_10_row44.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_10.DOWNLOAD_DATE = tHashInput_tUnite_10_row44.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_10.IMPORT_DATE = tHashInput_tUnite_10_row44.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_10.SOURCESYSTEM_CD = tHashInput_tUnite_10_row44.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_10.VALUETYPE_CD = tHashInput_tUnite_10_row44.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_10.M_EXCLUSION_CD = tHashInput_tUnite_10_row44.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_10.C_PATH = tHashInput_tUnite_10_row44.C_PATH;
							oneRow_tHashOutput_tUnite_10.C_SYMBOL = tHashInput_tUnite_10_row44.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_10
									.put(oneRow_tHashOutput_tUnite_10);
							nb_line_tHashOutput_tUnite_10++;

							tos_count_tHashOutput_tUnite_10++;

							/**
							 * [tHashOutput_tUnite_10 main ] stop
							 */

						} // End of branch "ICD10_Root"

						/**
						 * [tFileInputDelimited_20 end ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						nb_line_tFileInputDelimited_20++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_20 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_20 != null) {
							csvReadertFileInputDelimited_20.close();
						}
					}
					if (csvReadertFileInputDelimited_20 != null) {
						globalMap.put("tFileInputDelimited_20_NB_LINE",
								nb_line_tFileInputDelimited_20);
					}
				}

				ok_Hash.put("tFileInputDelimited_20", true);
				end_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_20 end ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());
				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ICD10_FolderStruct ICD10_Folder_tmp = new ICD10_FolderStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_1 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_1
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_1());
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = context.icd10Dir
							+ "icd-folders.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_1)),
								"UTF-8");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("/icd/class",
											"/icd/class"));
					x_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("code", "/icd/class"));
					xTmp0_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
					org.dom4j.XPath xTmp1_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("label", "/icd/class"));
					xTmp1_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
					org.dom4j.XPath xTmp2_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("path", "/icd/class"));
					xTmp2_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
					org.dom4j.XPath xTmp3_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("level", "/icd/class"));
					xTmp3_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;
						row19 = null;
						boolean whetherReject_tFileInputXML_1 = false;
						row19 = new row19Struct();
						try {
							Object obj0_tFileInputXML_1 = xTmp0_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row19.code = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row19.code = null;
							} else {
								row19.code = str_tFileInputXML_1;
							}
							Object obj1_tFileInputXML_1 = xTmp1_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj1_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_1 instanceof String
									|| obj1_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj1_tFileInputXML_1);
							} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row19.label = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row19.label = null;
							} else {
								row19.label = str_tFileInputXML_1;
							}
							Object obj2_tFileInputXML_1 = xTmp2_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj2_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj2_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_1 instanceof String
									|| obj2_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj2_tFileInputXML_1);
							} else if (obj2_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row19.path = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row19.path = null;
							} else {
								row19.path = str_tFileInputXML_1;
							}
							Object obj3_tFileInputXML_1 = xTmp3_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj3_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj3_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_1 instanceof String
									|| obj3_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj3_tFileInputXML_1);
							} else if (obj3_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)
									|| xml_api_tFileInputXML_1
											.isEmpty(node_tFileInputXML_1)) {
								row19.level = 0;
							} else {
								row19.level = ParserUtils
										.parseTo_int(str_tFileInputXML_1);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							row19 = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */
						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */
						// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tMap_11 main ] start
							 */

							currentComponent = "tMap_11";

							boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_11 = false;
							boolean mainRowRejected_tMap_11 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
								// ###############################
								// # Output tables

								ICD10_Folder = null;

								// # Output table : 'ICD10_Folder'
								ICD10_Folder_tmp.C_HLEVEL = row19.level - 1;
								ICD10_Folder_tmp.C_FULLNAME = row19.path;
								ICD10_Folder_tmp.C_NAME = row19.code + " - "
										+ row19.label;
								ICD10_Folder_tmp.C_SYNONYM_CD = 'N';
								ICD10_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								ICD10_Folder_tmp.C_TOTALNUM = null;
								ICD10_Folder_tmp.C_BASECODE = null;
								ICD10_Folder_tmp.C_METADATAXML = null;
								ICD10_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								ICD10_Folder_tmp.C_TABLENAME = "concept_dimension";
								ICD10_Folder_tmp.C_COLUMNNAME = "concept_path";
								ICD10_Folder_tmp.C_COLUMNDATATYPE = 'T';
								ICD10_Folder_tmp.C_OPERATOR = "LIKE";
								ICD10_Folder_tmp.C_DIMCODE = row19.path;
								ICD10_Folder_tmp.C_COMMENT = null;
								ICD10_Folder_tmp.C_TOOLTIP = row19.label;
								ICD10_Folder_tmp.M_APPLIED_PATH = '@';
								ICD10_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								ICD10_Folder_tmp.DOWNLOAD_DATE = null;
								ICD10_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								ICD10_Folder_tmp.SOURCESYSTEM_CD = "ICD-10-GM";
								ICD10_Folder_tmp.VALUETYPE_CD = null;
								ICD10_Folder_tmp.M_EXCLUSION_CD = null;
								ICD10_Folder_tmp.C_PATH = null;
								ICD10_Folder_tmp.C_SYMBOL = null;
								ICD10_Folder = ICD10_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_11 = false;

							tos_count_tMap_11++;

							/**
							 * [tMap_11 main ] stop
							 */
							// Start of branch "ICD10_Folder"
							if (ICD10_Folder != null) {

								/**
								 * [tUnite_10 main ] start
								 */

								currentComponent = "tUnite_10";

								// ////////

								// for output
								tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

								tHashInput_tUnite_10_row44.C_HLEVEL = ICD10_Folder.C_HLEVEL;
								tHashInput_tUnite_10_row44.C_FULLNAME = ICD10_Folder.C_FULLNAME;
								tHashInput_tUnite_10_row44.C_NAME = ICD10_Folder.C_NAME;
								tHashInput_tUnite_10_row44.C_SYNONYM_CD = ICD10_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES = ICD10_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_10_row44.C_TOTALNUM = ICD10_Folder.C_TOTALNUM;
								tHashInput_tUnite_10_row44.C_BASECODE = ICD10_Folder.C_BASECODE;
								tHashInput_tUnite_10_row44.C_METADATAXML = ICD10_Folder.C_METADATAXML;
								tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN = ICD10_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_10_row44.C_TABLENAME = ICD10_Folder.C_TABLENAME;
								tHashInput_tUnite_10_row44.C_COLUMNNAME = ICD10_Folder.C_COLUMNNAME;
								tHashInput_tUnite_10_row44.C_COLUMNDATATYPE = ICD10_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_10_row44.C_OPERATOR = ICD10_Folder.C_OPERATOR;
								tHashInput_tUnite_10_row44.C_DIMCODE = ICD10_Folder.C_DIMCODE;
								tHashInput_tUnite_10_row44.C_COMMENT = ICD10_Folder.C_COMMENT;
								tHashInput_tUnite_10_row44.C_TOOLTIP = ICD10_Folder.C_TOOLTIP;
								tHashInput_tUnite_10_row44.M_APPLIED_PATH = ICD10_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_10_row44.UPDATE_DATE = ICD10_Folder.UPDATE_DATE;
								tHashInput_tUnite_10_row44.DOWNLOAD_DATE = ICD10_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_10_row44.IMPORT_DATE = ICD10_Folder.IMPORT_DATE;
								tHashInput_tUnite_10_row44.SOURCESYSTEM_CD = ICD10_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_10_row44.VALUETYPE_CD = ICD10_Folder.VALUETYPE_CD;
								tHashInput_tUnite_10_row44.M_EXCLUSION_CD = ICD10_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_10_row44.C_PATH = ICD10_Folder.C_PATH;
								tHashInput_tUnite_10_row44.C_SYMBOL = ICD10_Folder.C_SYMBOL;

								nb_line_tUnite_10++;

								// ////////

								tos_count_tUnite_10++;

								/**
								 * [tUnite_10 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_10 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_10";

								tHashInput_tUnite_10_row44Struct oneRow_tHashOutput_tUnite_10 = new tHashInput_tUnite_10_row44Struct();

								oneRow_tHashOutput_tUnite_10.C_HLEVEL = tHashInput_tUnite_10_row44.C_HLEVEL;
								oneRow_tHashOutput_tUnite_10.C_FULLNAME = tHashInput_tUnite_10_row44.C_FULLNAME;
								oneRow_tHashOutput_tUnite_10.C_NAME = tHashInput_tUnite_10_row44.C_NAME;
								oneRow_tHashOutput_tUnite_10.C_SYNONYM_CD = tHashInput_tUnite_10_row44.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_10.C_VISUALATTRIBUTES = tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_10.C_TOTALNUM = tHashInput_tUnite_10_row44.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_10.C_BASECODE = tHashInput_tUnite_10_row44.C_BASECODE;
								oneRow_tHashOutput_tUnite_10.C_METADATAXML = tHashInput_tUnite_10_row44.C_METADATAXML;
								oneRow_tHashOutput_tUnite_10.C_FACTTABLECOLUMN = tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_10.C_TABLENAME = tHashInput_tUnite_10_row44.C_TABLENAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNNAME = tHashInput_tUnite_10_row44.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNDATATYPE = tHashInput_tUnite_10_row44.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_10.C_OPERATOR = tHashInput_tUnite_10_row44.C_OPERATOR;
								oneRow_tHashOutput_tUnite_10.C_DIMCODE = tHashInput_tUnite_10_row44.C_DIMCODE;
								oneRow_tHashOutput_tUnite_10.C_COMMENT = tHashInput_tUnite_10_row44.C_COMMENT;
								oneRow_tHashOutput_tUnite_10.C_TOOLTIP = tHashInput_tUnite_10_row44.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_10.M_APPLIED_PATH = tHashInput_tUnite_10_row44.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_10.UPDATE_DATE = tHashInput_tUnite_10_row44.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_10.DOWNLOAD_DATE = tHashInput_tUnite_10_row44.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_10.IMPORT_DATE = tHashInput_tUnite_10_row44.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_10.SOURCESYSTEM_CD = tHashInput_tUnite_10_row44.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_10.VALUETYPE_CD = tHashInput_tUnite_10_row44.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_10.M_EXCLUSION_CD = tHashInput_tUnite_10_row44.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_10.C_PATH = tHashInput_tUnite_10_row44.C_PATH;
								oneRow_tHashOutput_tUnite_10.C_SYMBOL = tHashInput_tUnite_10_row44.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_10
										.put(oneRow_tHashOutput_tUnite_10);
								nb_line_tHashOutput_tUnite_10++;

								tos_count_tHashOutput_tUnite_10++;

								/**
								 * [tHashOutput_tUnite_10 main ] stop
								 */

							} // End of branch "ICD10_Folder"

						} // End of branch "row19"

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tMap_16 begin ] start
				 */

				ok_Hash.put("tMap_16", false);
				start_Hash.put("tMap_16", System.currentTimeMillis());
				currentComponent = "tMap_16";

				int tos_count_tMap_16 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_16__Struct {
				}
				Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ICD10_LeafStruct ICD10_Leaf_tmp = new ICD10_LeafStruct();
				// ###############################

				/**
				 * [tMap_16 begin ] stop
				 */

				/**
				 * [tFileInputXML_7 begin ] start
				 */

				ok_Hash.put("tFileInputXML_7", false);
				start_Hash.put("tFileInputXML_7", System.currentTimeMillis());
				currentComponent = "tFileInputXML_7";

				int tos_count_tFileInputXML_7 = 0;

				int nb_line_tFileInputXML_7 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_7 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_7 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_7 = false;
				if (os_tFileInputXML_7.indexOf("windows") > -1
						|| os_tFileInputXML_7.indexOf("nt") > -1) {
					isWindows_tFileInputXML_7 = true;
				}
				class NameSpaceTool_tFileInputXML_7 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_7 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_7 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_7
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_7());
				Object filename_tFileInputXML_7 = null;
				try {
					filename_tFileInputXML_7 = context.icd10Dir
							+ "icd-leafs.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_7 != null
						&& filename_tFileInputXML_7 instanceof String
						&& filename_tFileInputXML_7.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_7) {
						filename_tFileInputXML_7 = filename_tFileInputXML_7
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_7 = true;
				org.dom4j.Document doc_tFileInputXML_7 = null;
				java.io.Closeable toClose_tFileInputXML_7 = null;
				try {
					if (filename_tFileInputXML_7 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_7 = (java.io.InputStream) filename_tFileInputXML_7;
						toClose_tFileInputXML_7 = inputStream_tFileInputXML_7;
						doc_tFileInputXML_7 = reader_tFileInputXML_7
								.read(inputStream_tFileInputXML_7);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_7 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_7)),
								"UTF-8");
						toClose_tFileInputXML_7 = unicodeReader_tFileInputXML_7;
						org.xml.sax.InputSource in_tFileInputXML_7 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_7);
						doc_tFileInputXML_7 = reader_tFileInputXML_7
								.read(in_tFileInputXML_7);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_7 = false;
				} finally {
					if (toClose_tFileInputXML_7 != null) {
						toClose_tFileInputXML_7.close();
					}
				}
				if (isValidFile_tFileInputXML_7) {
					NameSpaceTool_tFileInputXML_7 nsTool_tFileInputXML_7 = new NameSpaceTool_tFileInputXML_7();
					nsTool_tFileInputXML_7.countNSMap(doc_tFileInputXML_7
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_7 = nsTool_tFileInputXML_7.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_7 = doc_tFileInputXML_7
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("/icd/class",
											"/icd/class"));
					x_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_7 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_7
							.selectNodes(doc_tFileInputXML_7);
					XML_API_tFileInputXML_7 xml_api_tFileInputXML_7 = new XML_API_tFileInputXML_7();
					String str_tFileInputXML_7 = "";
					org.dom4j.Node node_tFileInputXML_7 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("code", "/icd/class"));
					xTmp0_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp1_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("label", "/icd/class"));
					xTmp1_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp2_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("path", "/icd/class"));
					xTmp2_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp3_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("level", "/icd/class"));
					xTmp3_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_7 : nodeList_tFileInputXML_7) {
						nb_line_tFileInputXML_7++;
						row5 = null;
						boolean whetherReject_tFileInputXML_7 = false;
						row5 = new row5Struct();
						try {
							Object obj0_tFileInputXML_7 = xTmp0_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj0_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj0_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj0_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_7 instanceof String
									|| obj0_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj0_tFileInputXML_7);
							} else if (obj0_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row5.code = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row5.code = null;
							} else {
								row5.code = str_tFileInputXML_7;
							}
							Object obj1_tFileInputXML_7 = xTmp1_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj1_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj1_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj1_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_7 instanceof String
									|| obj1_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj1_tFileInputXML_7);
							} else if (obj1_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row5.label = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row5.label = null;
							} else {
								row5.label = str_tFileInputXML_7;
							}
							Object obj2_tFileInputXML_7 = xTmp2_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj2_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj2_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj2_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_7 instanceof String
									|| obj2_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj2_tFileInputXML_7);
							} else if (obj2_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row5.path = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row5.path = null;
							} else {
								row5.path = str_tFileInputXML_7;
							}
							Object obj3_tFileInputXML_7 = xTmp3_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj3_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj3_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj3_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_7 instanceof String
									|| obj3_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj3_tFileInputXML_7);
							} else if (obj3_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)
									|| xml_api_tFileInputXML_7
											.isEmpty(node_tFileInputXML_7)) {
								row5.level = 0;
							} else {
								row5.level = ParserUtils
										.parseTo_int(str_tFileInputXML_7);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_7 = true;
							System.err.println(e.getMessage());
							row5 = null;
						}

						/**
						 * [tFileInputXML_7 begin ] stop
						 */
						/**
						 * [tFileInputXML_7 main ] start
						 */

						currentComponent = "tFileInputXML_7";

						tos_count_tFileInputXML_7++;

						/**
						 * [tFileInputXML_7 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_16 main ] start
							 */

							currentComponent = "tMap_16";

							boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_16 = false;
							boolean mainRowRejected_tMap_16 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
								// ###############################
								// # Output tables

								ICD10_Leaf = null;

								// # Output table : 'ICD10_Leaf'
								ICD10_Leaf_tmp.C_HLEVEL = row5.level - 1;
								ICD10_Leaf_tmp.C_FULLNAME = row5.path
										+ "Wert\\";
								ICD10_Leaf_tmp.C_NAME = row5.code + " - "
										+ row5.label + " (Wert)";
								ICD10_Leaf_tmp.C_SYNONYM_CD = 'N';
								ICD10_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								ICD10_Leaf_tmp.C_TOTALNUM = null;
								ICD10_Leaf_tmp.C_BASECODE = "ST|ICD-10-GM:"
										+ row5.code;
								ICD10_Leaf_tmp.C_METADATAXML = null;
								ICD10_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								ICD10_Leaf_tmp.C_TABLENAME = "concept_dimension";
								ICD10_Leaf_tmp.C_COLUMNNAME = "concept_path";
								ICD10_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								ICD10_Leaf_tmp.C_OPERATOR = "LIKE";
								ICD10_Leaf_tmp.C_DIMCODE = row5.path;
								ICD10_Leaf_tmp.C_COMMENT = null;
								ICD10_Leaf_tmp.C_TOOLTIP = row5.label;
								ICD10_Leaf_tmp.M_APPLIED_PATH = '@';
								ICD10_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								ICD10_Leaf_tmp.DOWNLOAD_DATE = null;
								ICD10_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								ICD10_Leaf_tmp.SOURCESYSTEM_CD = "ICD-10-GM";
								ICD10_Leaf_tmp.VALUETYPE_CD = null;
								ICD10_Leaf_tmp.M_EXCLUSION_CD = null;
								ICD10_Leaf_tmp.C_PATH = null;
								ICD10_Leaf_tmp.C_SYMBOL = null;
								ICD10_Leaf = ICD10_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_16 = false;

							tos_count_tMap_16++;

							/**
							 * [tMap_16 main ] stop
							 */
							// Start of branch "ICD10_Leaf"
							if (ICD10_Leaf != null) {

								/**
								 * [tUnite_10 main ] start
								 */

								currentComponent = "tUnite_10";

								// ////////

								// for output
								tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

								tHashInput_tUnite_10_row44.C_HLEVEL = ICD10_Leaf.C_HLEVEL;
								tHashInput_tUnite_10_row44.C_FULLNAME = ICD10_Leaf.C_FULLNAME;
								tHashInput_tUnite_10_row44.C_NAME = ICD10_Leaf.C_NAME;
								tHashInput_tUnite_10_row44.C_SYNONYM_CD = ICD10_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES = ICD10_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_10_row44.C_TOTALNUM = ICD10_Leaf.C_TOTALNUM;
								tHashInput_tUnite_10_row44.C_BASECODE = ICD10_Leaf.C_BASECODE;
								tHashInput_tUnite_10_row44.C_METADATAXML = ICD10_Leaf.C_METADATAXML;
								tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN = ICD10_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_10_row44.C_TABLENAME = ICD10_Leaf.C_TABLENAME;
								tHashInput_tUnite_10_row44.C_COLUMNNAME = ICD10_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_10_row44.C_COLUMNDATATYPE = ICD10_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_10_row44.C_OPERATOR = ICD10_Leaf.C_OPERATOR;
								tHashInput_tUnite_10_row44.C_DIMCODE = ICD10_Leaf.C_DIMCODE;
								tHashInput_tUnite_10_row44.C_COMMENT = ICD10_Leaf.C_COMMENT;
								tHashInput_tUnite_10_row44.C_TOOLTIP = ICD10_Leaf.C_TOOLTIP;
								tHashInput_tUnite_10_row44.M_APPLIED_PATH = ICD10_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_10_row44.UPDATE_DATE = ICD10_Leaf.UPDATE_DATE;
								tHashInput_tUnite_10_row44.DOWNLOAD_DATE = ICD10_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_10_row44.IMPORT_DATE = ICD10_Leaf.IMPORT_DATE;
								tHashInput_tUnite_10_row44.SOURCESYSTEM_CD = ICD10_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_10_row44.VALUETYPE_CD = ICD10_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_10_row44.M_EXCLUSION_CD = ICD10_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_10_row44.C_PATH = ICD10_Leaf.C_PATH;
								tHashInput_tUnite_10_row44.C_SYMBOL = ICD10_Leaf.C_SYMBOL;

								nb_line_tUnite_10++;

								// ////////

								tos_count_tUnite_10++;

								/**
								 * [tUnite_10 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_10 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_10";

								tHashInput_tUnite_10_row44Struct oneRow_tHashOutput_tUnite_10 = new tHashInput_tUnite_10_row44Struct();

								oneRow_tHashOutput_tUnite_10.C_HLEVEL = tHashInput_tUnite_10_row44.C_HLEVEL;
								oneRow_tHashOutput_tUnite_10.C_FULLNAME = tHashInput_tUnite_10_row44.C_FULLNAME;
								oneRow_tHashOutput_tUnite_10.C_NAME = tHashInput_tUnite_10_row44.C_NAME;
								oneRow_tHashOutput_tUnite_10.C_SYNONYM_CD = tHashInput_tUnite_10_row44.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_10.C_VISUALATTRIBUTES = tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_10.C_TOTALNUM = tHashInput_tUnite_10_row44.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_10.C_BASECODE = tHashInput_tUnite_10_row44.C_BASECODE;
								oneRow_tHashOutput_tUnite_10.C_METADATAXML = tHashInput_tUnite_10_row44.C_METADATAXML;
								oneRow_tHashOutput_tUnite_10.C_FACTTABLECOLUMN = tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_10.C_TABLENAME = tHashInput_tUnite_10_row44.C_TABLENAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNNAME = tHashInput_tUnite_10_row44.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNDATATYPE = tHashInput_tUnite_10_row44.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_10.C_OPERATOR = tHashInput_tUnite_10_row44.C_OPERATOR;
								oneRow_tHashOutput_tUnite_10.C_DIMCODE = tHashInput_tUnite_10_row44.C_DIMCODE;
								oneRow_tHashOutput_tUnite_10.C_COMMENT = tHashInput_tUnite_10_row44.C_COMMENT;
								oneRow_tHashOutput_tUnite_10.C_TOOLTIP = tHashInput_tUnite_10_row44.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_10.M_APPLIED_PATH = tHashInput_tUnite_10_row44.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_10.UPDATE_DATE = tHashInput_tUnite_10_row44.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_10.DOWNLOAD_DATE = tHashInput_tUnite_10_row44.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_10.IMPORT_DATE = tHashInput_tUnite_10_row44.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_10.SOURCESYSTEM_CD = tHashInput_tUnite_10_row44.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_10.VALUETYPE_CD = tHashInput_tUnite_10_row44.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_10.M_EXCLUSION_CD = tHashInput_tUnite_10_row44.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_10.C_PATH = tHashInput_tUnite_10_row44.C_PATH;
								oneRow_tHashOutput_tUnite_10.C_SYMBOL = tHashInput_tUnite_10_row44.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_10
										.put(oneRow_tHashOutput_tUnite_10);
								nb_line_tHashOutput_tUnite_10++;

								tos_count_tHashOutput_tUnite_10++;

								/**
								 * [tHashOutput_tUnite_10 main ] stop
								 */

							} // End of branch "ICD10_Leaf"

						} // End of branch "row5"

						/**
						 * [tFileInputXML_7 end ] start
						 */

						currentComponent = "tFileInputXML_7";

					}
				}
				globalMap.put("tFileInputXML_7_NB_LINE",
						nb_line_tFileInputXML_7);

				ok_Hash.put("tFileInputXML_7", true);
				end_Hash.put("tFileInputXML_7", System.currentTimeMillis());

				/**
				 * [tFileInputXML_7 end ] stop
				 */

				/**
				 * [tMap_16 end ] start
				 */

				currentComponent = "tMap_16";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_16", true);
				end_Hash.put("tMap_16", System.currentTimeMillis());

				/**
				 * [tMap_16 end ] stop
				 */

				/**
				 * [tUnite_10 end ] start
				 */

				currentComponent = "tUnite_10";

				globalMap.put("tUnite_10_NB_LINE", nb_line_tUnite_10);

				ok_Hash.put("tUnite_10", true);
				end_Hash.put("tUnite_10", System.currentTimeMillis());

				/**
				 * [tUnite_10 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_10 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_10";

				globalMap.put("tHashOutput_tUnite_10_NB_LINE",
						nb_line_tHashOutput_tUnite_10);

				ok_Hash.put("tHashOutput_tUnite_10", true);
				end_Hash.put("tHashOutput_tUnite_10",
						System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_11_row45Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_11_row45Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_11_row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OPS_RootStruct implements
			routines.system.IPersistableRow<OPS_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OPS_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OPS_FolderStruct implements
			routines.system.IPersistableRow<OPS_FolderStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OPS_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OPS_LeafStruct implements
			routines.system.IPersistableRow<OPS_LeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OPS_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				OPS_RootStruct OPS_Root = new OPS_RootStruct();

				row4Struct row4 = new row4Struct();
				OPS_FolderStruct OPS_Folder = new OPS_FolderStruct();

				row7Struct row7 = new row7Struct();
				OPS_LeafStruct OPS_Leaf = new OPS_LeafStruct();

				tHashInput_tUnite_11_row45Struct tHashInput_tUnite_11_row45 = new tHashInput_tUnite_11_row45Struct();

				/**
				 * [tHashOutput_tUnite_11 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_11", false);
				start_Hash.put("tHashOutput_tUnite_11",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_11";

				int tos_count_tHashOutput_tUnite_11 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_11 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_11_row45Struct> tHashFile_tHashOutput_tUnite_11 = null;
				if ((tHashFile_tHashOutput_tUnite_11 = mf_tHashOutput_tUnite_11
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_11")) == null) {
					tHashFile_tHashOutput_tUnite_11 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_11_row45Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_11.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_11",
						tHashFile_tHashOutput_tUnite_11);
				int nb_line_tHashOutput_tUnite_11 = 0;

				/**
				 * [tHashOutput_tUnite_11 begin ] stop
				 */

				/**
				 * [tUnite_11 begin ] start
				 */

				ok_Hash.put("tUnite_11", false);
				start_Hash.put("tUnite_11", System.currentTimeMillis());
				currentComponent = "tUnite_11";

				int tos_count_tUnite_11 = 0;

				int nb_line_tUnite_11 = 0;

				/**
				 * [tUnite_11 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				context.opsDir + "root_OPS.csv"/**
				 * End field
				 * tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						OPS_Root = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						OPS_Root = new OPS_RootStruct();
						try {

							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								OPS_Root.C_HLEVEL = null;

								OPS_Root.C_FULLNAME = null;

								OPS_Root.C_NAME = null;

								OPS_Root.C_SYNONYM_CD = null;

								OPS_Root.C_VISUALATTRIBUTES = null;

								OPS_Root.C_TOTALNUM = null;

								OPS_Root.C_BASECODE = null;

								OPS_Root.C_METADATAXML = null;

								OPS_Root.C_FACTTABLECOLUMN = null;

								OPS_Root.C_TABLENAME = null;

								OPS_Root.C_COLUMNNAME = null;

								OPS_Root.C_COLUMNDATATYPE = null;

								OPS_Root.C_OPERATOR = null;

								OPS_Root.C_DIMCODE = null;

								OPS_Root.C_COMMENT = null;

								OPS_Root.C_TOOLTIP = null;

								OPS_Root.M_APPLIED_PATH = null;

								OPS_Root.UPDATE_DATE = null;

								OPS_Root.DOWNLOAD_DATE = null;

								OPS_Root.IMPORT_DATE = null;

								OPS_Root.SOURCESYSTEM_CD = null;

								OPS_Root.VALUETYPE_CD = null;

								OPS_Root.M_EXCLUSION_CD = null;

								OPS_Root.C_PATH = null;

								OPS_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										OPS_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										OPS_Root.C_HLEVEL = null;
									}

								} else {
									OPS_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_FULLNAME = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_NAME = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										OPS_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										OPS_Root.C_SYNONYM_CD = null;
									}

								} else {
									OPS_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_TOTALNUM = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_BASECODE = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_METADATAXML = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_TABLENAME = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_COLUMNNAME = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 11;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										OPS_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										OPS_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									OPS_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 12;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_OPERATOR = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 13;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_DIMCODE = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 14;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_COMMENT = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 15;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_TOOLTIP = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 16;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										OPS_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										OPS_Root.M_APPLIED_PATH = null;
									}

								} else {
									OPS_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 17;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										OPS_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										OPS_Root.UPDATE_DATE = null;
									}

								} else {
									OPS_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 18;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										OPS_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										OPS_Root.DOWNLOAD_DATE = null;
									}

								} else {
									OPS_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 19;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										OPS_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										OPS_Root.IMPORT_DATE = null;
									}

								} else {
									OPS_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 20;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 21;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.VALUETYPE_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 22;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.M_EXCLUSION_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 23;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_PATH = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 24;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									OPS_Root.C_SYMBOL = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									OPS_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							OPS_Root = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "OPS_Root"
						if (OPS_Root != null) {

							/**
							 * [tUnite_11 main ] start
							 */

							currentComponent = "tUnite_11";

							// ////////

							// for output
							tHashInput_tUnite_11_row45 = new tHashInput_tUnite_11_row45Struct();

							tHashInput_tUnite_11_row45.C_HLEVEL = OPS_Root.C_HLEVEL;
							tHashInput_tUnite_11_row45.C_FULLNAME = OPS_Root.C_FULLNAME;
							tHashInput_tUnite_11_row45.C_NAME = OPS_Root.C_NAME;
							tHashInput_tUnite_11_row45.C_SYNONYM_CD = OPS_Root.C_SYNONYM_CD;
							tHashInput_tUnite_11_row45.C_VISUALATTRIBUTES = OPS_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_11_row45.C_TOTALNUM = OPS_Root.C_TOTALNUM;
							tHashInput_tUnite_11_row45.C_BASECODE = OPS_Root.C_BASECODE;
							tHashInput_tUnite_11_row45.C_METADATAXML = OPS_Root.C_METADATAXML;
							tHashInput_tUnite_11_row45.C_FACTTABLECOLUMN = OPS_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_11_row45.C_TABLENAME = OPS_Root.C_TABLENAME;
							tHashInput_tUnite_11_row45.C_COLUMNNAME = OPS_Root.C_COLUMNNAME;
							tHashInput_tUnite_11_row45.C_COLUMNDATATYPE = OPS_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_11_row45.C_OPERATOR = OPS_Root.C_OPERATOR;
							tHashInput_tUnite_11_row45.C_DIMCODE = OPS_Root.C_DIMCODE;
							tHashInput_tUnite_11_row45.C_COMMENT = OPS_Root.C_COMMENT;
							tHashInput_tUnite_11_row45.C_TOOLTIP = OPS_Root.C_TOOLTIP;
							tHashInput_tUnite_11_row45.M_APPLIED_PATH = OPS_Root.M_APPLIED_PATH;
							tHashInput_tUnite_11_row45.UPDATE_DATE = OPS_Root.UPDATE_DATE;
							tHashInput_tUnite_11_row45.DOWNLOAD_DATE = OPS_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_11_row45.IMPORT_DATE = OPS_Root.IMPORT_DATE;
							tHashInput_tUnite_11_row45.SOURCESYSTEM_CD = OPS_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_11_row45.VALUETYPE_CD = OPS_Root.VALUETYPE_CD;
							tHashInput_tUnite_11_row45.M_EXCLUSION_CD = OPS_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_11_row45.C_PATH = OPS_Root.C_PATH;
							tHashInput_tUnite_11_row45.C_SYMBOL = OPS_Root.C_SYMBOL;

							nb_line_tUnite_11++;

							// ////////

							tos_count_tUnite_11++;

							/**
							 * [tUnite_11 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_11 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_11";

							tHashInput_tUnite_11_row45Struct oneRow_tHashOutput_tUnite_11 = new tHashInput_tUnite_11_row45Struct();

							oneRow_tHashOutput_tUnite_11.C_HLEVEL = tHashInput_tUnite_11_row45.C_HLEVEL;
							oneRow_tHashOutput_tUnite_11.C_FULLNAME = tHashInput_tUnite_11_row45.C_FULLNAME;
							oneRow_tHashOutput_tUnite_11.C_NAME = tHashInput_tUnite_11_row45.C_NAME;
							oneRow_tHashOutput_tUnite_11.C_SYNONYM_CD = tHashInput_tUnite_11_row45.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_11.C_VISUALATTRIBUTES = tHashInput_tUnite_11_row45.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_11.C_TOTALNUM = tHashInput_tUnite_11_row45.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_11.C_BASECODE = tHashInput_tUnite_11_row45.C_BASECODE;
							oneRow_tHashOutput_tUnite_11.C_METADATAXML = tHashInput_tUnite_11_row45.C_METADATAXML;
							oneRow_tHashOutput_tUnite_11.C_FACTTABLECOLUMN = tHashInput_tUnite_11_row45.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_11.C_TABLENAME = tHashInput_tUnite_11_row45.C_TABLENAME;
							oneRow_tHashOutput_tUnite_11.C_COLUMNNAME = tHashInput_tUnite_11_row45.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_11.C_COLUMNDATATYPE = tHashInput_tUnite_11_row45.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_11.C_OPERATOR = tHashInput_tUnite_11_row45.C_OPERATOR;
							oneRow_tHashOutput_tUnite_11.C_DIMCODE = tHashInput_tUnite_11_row45.C_DIMCODE;
							oneRow_tHashOutput_tUnite_11.C_COMMENT = tHashInput_tUnite_11_row45.C_COMMENT;
							oneRow_tHashOutput_tUnite_11.C_TOOLTIP = tHashInput_tUnite_11_row45.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_11.M_APPLIED_PATH = tHashInput_tUnite_11_row45.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_11.UPDATE_DATE = tHashInput_tUnite_11_row45.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_11.DOWNLOAD_DATE = tHashInput_tUnite_11_row45.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_11.IMPORT_DATE = tHashInput_tUnite_11_row45.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_11.SOURCESYSTEM_CD = tHashInput_tUnite_11_row45.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_11.VALUETYPE_CD = tHashInput_tUnite_11_row45.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_11.M_EXCLUSION_CD = tHashInput_tUnite_11_row45.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_11.C_PATH = tHashInput_tUnite_11_row45.C_PATH;
							oneRow_tHashOutput_tUnite_11.C_SYMBOL = tHashInput_tUnite_11_row45.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_11
									.put(oneRow_tHashOutput_tUnite_11);
							nb_line_tHashOutput_tUnite_11++;

							tos_count_tHashOutput_tUnite_11++;

							/**
							 * [tHashOutput_tUnite_11 main ] stop
							 */

						} // End of branch "OPS_Root"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());
				currentComponent = "tMap_14";

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				OPS_FolderStruct OPS_Folder_tmp = new OPS_FolderStruct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tFileInputXML_4 begin ] start
				 */

				ok_Hash.put("tFileInputXML_4", false);
				start_Hash.put("tFileInputXML_4", System.currentTimeMillis());
				currentComponent = "tFileInputXML_4";

				int tos_count_tFileInputXML_4 = 0;

				int nb_line_tFileInputXML_4 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_4 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_4 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_4 = false;
				if (os_tFileInputXML_4.indexOf("windows") > -1
						|| os_tFileInputXML_4.indexOf("nt") > -1) {
					isWindows_tFileInputXML_4 = true;
				}
				class NameSpaceTool_tFileInputXML_4 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_4 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_4 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_4
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_4());
				Object filename_tFileInputXML_4 = null;
				try {
					filename_tFileInputXML_4 = context.opsDir
							+ "/ops-folders.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_4 != null
						&& filename_tFileInputXML_4 instanceof String
						&& filename_tFileInputXML_4.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_4) {
						filename_tFileInputXML_4 = filename_tFileInputXML_4
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_4 = true;
				org.dom4j.Document doc_tFileInputXML_4 = null;
				java.io.Closeable toClose_tFileInputXML_4 = null;
				try {
					if (filename_tFileInputXML_4 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_4 = (java.io.InputStream) filename_tFileInputXML_4;
						toClose_tFileInputXML_4 = inputStream_tFileInputXML_4;
						doc_tFileInputXML_4 = reader_tFileInputXML_4
								.read(inputStream_tFileInputXML_4);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_4 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_4)),
								"UTF-8");
						toClose_tFileInputXML_4 = unicodeReader_tFileInputXML_4;
						org.xml.sax.InputSource in_tFileInputXML_4 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_4);
						doc_tFileInputXML_4 = reader_tFileInputXML_4
								.read(in_tFileInputXML_4);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_4 = false;
				} finally {
					if (toClose_tFileInputXML_4 != null) {
						toClose_tFileInputXML_4.close();
					}
				}
				if (isValidFile_tFileInputXML_4) {
					NameSpaceTool_tFileInputXML_4 nsTool_tFileInputXML_4 = new NameSpaceTool_tFileInputXML_4();
					nsTool_tFileInputXML_4.countNSMap(doc_tFileInputXML_4
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_4 = nsTool_tFileInputXML_4.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_4 = doc_tFileInputXML_4
							.createXPath(nsTool_tFileInputXML_4
									.addDefaultNSPrefix("/ops/class",
											"/ops/class"));
					x_tFileInputXML_4
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_4 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_4
							.selectNodes(doc_tFileInputXML_4);
					XML_API_tFileInputXML_4 xml_api_tFileInputXML_4 = new XML_API_tFileInputXML_4();
					String str_tFileInputXML_4 = "";
					org.dom4j.Node node_tFileInputXML_4 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_4 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_4
									.addDefaultNSPrefix("code", "/ops/class"));
					xTmp0_tFileInputXML_4
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4);
					org.dom4j.XPath xTmp1_tFileInputXML_4 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_4
									.addDefaultNSPrefix("label", "/ops/class"));
					xTmp1_tFileInputXML_4
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4);
					org.dom4j.XPath xTmp2_tFileInputXML_4 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_4
									.addDefaultNSPrefix("path", "/ops/class"));
					xTmp2_tFileInputXML_4
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4);
					org.dom4j.XPath xTmp3_tFileInputXML_4 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_4
									.addDefaultNSPrefix("level", "/ops/class"));
					xTmp3_tFileInputXML_4
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_4 : nodeList_tFileInputXML_4) {
						nb_line_tFileInputXML_4++;
						row4 = null;
						boolean whetherReject_tFileInputXML_4 = false;
						row4 = new row4Struct();
						try {
							Object obj0_tFileInputXML_4 = xTmp0_tFileInputXML_4
									.evaluate(temp_tFileInputXML_4);
							if (obj0_tFileInputXML_4 == null) {
								node_tFileInputXML_4 = null;
								str_tFileInputXML_4 = "";

							} else if (obj0_tFileInputXML_4 instanceof org.dom4j.Node) {
								node_tFileInputXML_4 = (org.dom4j.Node) obj0_tFileInputXML_4;
								str_tFileInputXML_4 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_4,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_4 instanceof String
									|| obj0_tFileInputXML_4 instanceof Number) {
								node_tFileInputXML_4 = temp_tFileInputXML_4;
								str_tFileInputXML_4 = String
										.valueOf(obj0_tFileInputXML_4);
							} else if (obj0_tFileInputXML_4 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_4;
								node_tFileInputXML_4 = nodes_tFileInputXML_4
										.size() > 0 ? nodes_tFileInputXML_4
										.get(0) : null;
								str_tFileInputXML_4 = node_tFileInputXML_4 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_4,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_4
									.isEmpty(node_tFileInputXML_4)) {
								row4.code = "";
							} else if (xml_api_tFileInputXML_4
									.isMissing(node_tFileInputXML_4)) {
								row4.code = null;
							} else {
								row4.code = str_tFileInputXML_4;
							}
							Object obj1_tFileInputXML_4 = xTmp1_tFileInputXML_4
									.evaluate(temp_tFileInputXML_4);
							if (obj1_tFileInputXML_4 == null) {
								node_tFileInputXML_4 = null;
								str_tFileInputXML_4 = "";

							} else if (obj1_tFileInputXML_4 instanceof org.dom4j.Node) {
								node_tFileInputXML_4 = (org.dom4j.Node) obj1_tFileInputXML_4;
								str_tFileInputXML_4 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_4,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_4 instanceof String
									|| obj1_tFileInputXML_4 instanceof Number) {
								node_tFileInputXML_4 = temp_tFileInputXML_4;
								str_tFileInputXML_4 = String
										.valueOf(obj1_tFileInputXML_4);
							} else if (obj1_tFileInputXML_4 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_4;
								node_tFileInputXML_4 = nodes_tFileInputXML_4
										.size() > 0 ? nodes_tFileInputXML_4
										.get(0) : null;
								str_tFileInputXML_4 = node_tFileInputXML_4 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_4,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_4
									.isEmpty(node_tFileInputXML_4)) {
								row4.label = "";
							} else if (xml_api_tFileInputXML_4
									.isMissing(node_tFileInputXML_4)) {
								row4.label = null;
							} else {
								row4.label = str_tFileInputXML_4;
							}
							Object obj2_tFileInputXML_4 = xTmp2_tFileInputXML_4
									.evaluate(temp_tFileInputXML_4);
							if (obj2_tFileInputXML_4 == null) {
								node_tFileInputXML_4 = null;
								str_tFileInputXML_4 = "";

							} else if (obj2_tFileInputXML_4 instanceof org.dom4j.Node) {
								node_tFileInputXML_4 = (org.dom4j.Node) obj2_tFileInputXML_4;
								str_tFileInputXML_4 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_4,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_4 instanceof String
									|| obj2_tFileInputXML_4 instanceof Number) {
								node_tFileInputXML_4 = temp_tFileInputXML_4;
								str_tFileInputXML_4 = String
										.valueOf(obj2_tFileInputXML_4);
							} else if (obj2_tFileInputXML_4 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_4;
								node_tFileInputXML_4 = nodes_tFileInputXML_4
										.size() > 0 ? nodes_tFileInputXML_4
										.get(0) : null;
								str_tFileInputXML_4 = node_tFileInputXML_4 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_4,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_4
									.isEmpty(node_tFileInputXML_4)) {
								row4.path = "";
							} else if (xml_api_tFileInputXML_4
									.isMissing(node_tFileInputXML_4)) {
								row4.path = null;
							} else {
								row4.path = str_tFileInputXML_4;
							}
							Object obj3_tFileInputXML_4 = xTmp3_tFileInputXML_4
									.evaluate(temp_tFileInputXML_4);
							if (obj3_tFileInputXML_4 == null) {
								node_tFileInputXML_4 = null;
								str_tFileInputXML_4 = "";

							} else if (obj3_tFileInputXML_4 instanceof org.dom4j.Node) {
								node_tFileInputXML_4 = (org.dom4j.Node) obj3_tFileInputXML_4;
								str_tFileInputXML_4 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_4,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_4 instanceof String
									|| obj3_tFileInputXML_4 instanceof Number) {
								node_tFileInputXML_4 = temp_tFileInputXML_4;
								str_tFileInputXML_4 = String
										.valueOf(obj3_tFileInputXML_4);
							} else if (obj3_tFileInputXML_4 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_4;
								node_tFileInputXML_4 = nodes_tFileInputXML_4
										.size() > 0 ? nodes_tFileInputXML_4
										.get(0) : null;
								str_tFileInputXML_4 = node_tFileInputXML_4 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_4,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_4
									.isMissing(node_tFileInputXML_4)
									|| xml_api_tFileInputXML_4
											.isEmpty(node_tFileInputXML_4)) {
								row4.level = 0;
							} else {
								row4.level = ParserUtils
										.parseTo_int(str_tFileInputXML_4);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_4 = true;
							System.err.println(e.getMessage());
							row4 = null;
						}

						/**
						 * [tFileInputXML_4 begin ] stop
						 */
						/**
						 * [tFileInputXML_4 main ] start
						 */

						currentComponent = "tFileInputXML_4";

						tos_count_tFileInputXML_4++;

						/**
						 * [tFileInputXML_4 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_14 main ] start
							 */

							currentComponent = "tMap_14";

							boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_14 = false;
							boolean mainRowRejected_tMap_14 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
								// ###############################
								// # Output tables

								OPS_Folder = null;

								// # Output table : 'OPS_Folder'
								OPS_Folder_tmp.C_HLEVEL = row4.level - 1;
								OPS_Folder_tmp.C_FULLNAME = row4.path;
								OPS_Folder_tmp.C_NAME = row4.code + " - "
										+ row4.label;
								OPS_Folder_tmp.C_SYNONYM_CD = 'N';
								OPS_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								OPS_Folder_tmp.C_TOTALNUM = null;
								OPS_Folder_tmp.C_BASECODE = null;
								OPS_Folder_tmp.C_METADATAXML = null;
								OPS_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								OPS_Folder_tmp.C_TABLENAME = "concept_dimension";
								OPS_Folder_tmp.C_COLUMNNAME = "concept_path";
								OPS_Folder_tmp.C_COLUMNDATATYPE = 'T';
								OPS_Folder_tmp.C_OPERATOR = "LIKE";
								OPS_Folder_tmp.C_DIMCODE = row4.path;
								OPS_Folder_tmp.C_COMMENT = null;
								OPS_Folder_tmp.C_TOOLTIP = row4.label;
								OPS_Folder_tmp.M_APPLIED_PATH = '@';
								OPS_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								OPS_Folder_tmp.DOWNLOAD_DATE = null;
								OPS_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								OPS_Folder_tmp.SOURCESYSTEM_CD = "OPS";
								OPS_Folder_tmp.VALUETYPE_CD = null;
								OPS_Folder_tmp.M_EXCLUSION_CD = null;
								OPS_Folder_tmp.C_PATH = null;
								OPS_Folder_tmp.C_SYMBOL = null;
								OPS_Folder = OPS_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_14 = false;

							tos_count_tMap_14++;

							/**
							 * [tMap_14 main ] stop
							 */
							// Start of branch "OPS_Folder"
							if (OPS_Folder != null) {

								/**
								 * [tUnite_11 main ] start
								 */

								currentComponent = "tUnite_11";

								// ////////

								// for output
								tHashInput_tUnite_11_row45 = new tHashInput_tUnite_11_row45Struct();

								tHashInput_tUnite_11_row45.C_HLEVEL = OPS_Folder.C_HLEVEL;
								tHashInput_tUnite_11_row45.C_FULLNAME = OPS_Folder.C_FULLNAME;
								tHashInput_tUnite_11_row45.C_NAME = OPS_Folder.C_NAME;
								tHashInput_tUnite_11_row45.C_SYNONYM_CD = OPS_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_11_row45.C_VISUALATTRIBUTES = OPS_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_11_row45.C_TOTALNUM = OPS_Folder.C_TOTALNUM;
								tHashInput_tUnite_11_row45.C_BASECODE = OPS_Folder.C_BASECODE;
								tHashInput_tUnite_11_row45.C_METADATAXML = OPS_Folder.C_METADATAXML;
								tHashInput_tUnite_11_row45.C_FACTTABLECOLUMN = OPS_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_11_row45.C_TABLENAME = OPS_Folder.C_TABLENAME;
								tHashInput_tUnite_11_row45.C_COLUMNNAME = OPS_Folder.C_COLUMNNAME;
								tHashInput_tUnite_11_row45.C_COLUMNDATATYPE = OPS_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_11_row45.C_OPERATOR = OPS_Folder.C_OPERATOR;
								tHashInput_tUnite_11_row45.C_DIMCODE = OPS_Folder.C_DIMCODE;
								tHashInput_tUnite_11_row45.C_COMMENT = OPS_Folder.C_COMMENT;
								tHashInput_tUnite_11_row45.C_TOOLTIP = OPS_Folder.C_TOOLTIP;
								tHashInput_tUnite_11_row45.M_APPLIED_PATH = OPS_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_11_row45.UPDATE_DATE = OPS_Folder.UPDATE_DATE;
								tHashInput_tUnite_11_row45.DOWNLOAD_DATE = OPS_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_11_row45.IMPORT_DATE = OPS_Folder.IMPORT_DATE;
								tHashInput_tUnite_11_row45.SOURCESYSTEM_CD = OPS_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_11_row45.VALUETYPE_CD = OPS_Folder.VALUETYPE_CD;
								tHashInput_tUnite_11_row45.M_EXCLUSION_CD = OPS_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_11_row45.C_PATH = OPS_Folder.C_PATH;
								tHashInput_tUnite_11_row45.C_SYMBOL = OPS_Folder.C_SYMBOL;

								nb_line_tUnite_11++;

								// ////////

								tos_count_tUnite_11++;

								/**
								 * [tUnite_11 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_11 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_11";

								tHashInput_tUnite_11_row45Struct oneRow_tHashOutput_tUnite_11 = new tHashInput_tUnite_11_row45Struct();

								oneRow_tHashOutput_tUnite_11.C_HLEVEL = tHashInput_tUnite_11_row45.C_HLEVEL;
								oneRow_tHashOutput_tUnite_11.C_FULLNAME = tHashInput_tUnite_11_row45.C_FULLNAME;
								oneRow_tHashOutput_tUnite_11.C_NAME = tHashInput_tUnite_11_row45.C_NAME;
								oneRow_tHashOutput_tUnite_11.C_SYNONYM_CD = tHashInput_tUnite_11_row45.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_11.C_VISUALATTRIBUTES = tHashInput_tUnite_11_row45.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_11.C_TOTALNUM = tHashInput_tUnite_11_row45.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_11.C_BASECODE = tHashInput_tUnite_11_row45.C_BASECODE;
								oneRow_tHashOutput_tUnite_11.C_METADATAXML = tHashInput_tUnite_11_row45.C_METADATAXML;
								oneRow_tHashOutput_tUnite_11.C_FACTTABLECOLUMN = tHashInput_tUnite_11_row45.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_11.C_TABLENAME = tHashInput_tUnite_11_row45.C_TABLENAME;
								oneRow_tHashOutput_tUnite_11.C_COLUMNNAME = tHashInput_tUnite_11_row45.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_11.C_COLUMNDATATYPE = tHashInput_tUnite_11_row45.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_11.C_OPERATOR = tHashInput_tUnite_11_row45.C_OPERATOR;
								oneRow_tHashOutput_tUnite_11.C_DIMCODE = tHashInput_tUnite_11_row45.C_DIMCODE;
								oneRow_tHashOutput_tUnite_11.C_COMMENT = tHashInput_tUnite_11_row45.C_COMMENT;
								oneRow_tHashOutput_tUnite_11.C_TOOLTIP = tHashInput_tUnite_11_row45.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_11.M_APPLIED_PATH = tHashInput_tUnite_11_row45.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_11.UPDATE_DATE = tHashInput_tUnite_11_row45.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_11.DOWNLOAD_DATE = tHashInput_tUnite_11_row45.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_11.IMPORT_DATE = tHashInput_tUnite_11_row45.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_11.SOURCESYSTEM_CD = tHashInput_tUnite_11_row45.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_11.VALUETYPE_CD = tHashInput_tUnite_11_row45.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_11.M_EXCLUSION_CD = tHashInput_tUnite_11_row45.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_11.C_PATH = tHashInput_tUnite_11_row45.C_PATH;
								oneRow_tHashOutput_tUnite_11.C_SYMBOL = tHashInput_tUnite_11_row45.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_11
										.put(oneRow_tHashOutput_tUnite_11);
								nb_line_tHashOutput_tUnite_11++;

								tos_count_tHashOutput_tUnite_11++;

								/**
								 * [tHashOutput_tUnite_11 main ] stop
								 */

							} // End of branch "OPS_Folder"

						} // End of branch "row4"

						/**
						 * [tFileInputXML_4 end ] start
						 */

						currentComponent = "tFileInputXML_4";

					}
				}
				globalMap.put("tFileInputXML_4_NB_LINE",
						nb_line_tFileInputXML_4);

				ok_Hash.put("tFileInputXML_4", true);
				end_Hash.put("tFileInputXML_4", System.currentTimeMillis());

				/**
				 * [tFileInputXML_4 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tMap_17 begin ] start
				 */

				ok_Hash.put("tMap_17", false);
				start_Hash.put("tMap_17", System.currentTimeMillis());
				currentComponent = "tMap_17";

				int tos_count_tMap_17 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_17__Struct {
				}
				Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				OPS_LeafStruct OPS_Leaf_tmp = new OPS_LeafStruct();
				// ###############################

				/**
				 * [tMap_17 begin ] stop
				 */

				/**
				 * [tFileInputXML_8 begin ] start
				 */

				ok_Hash.put("tFileInputXML_8", false);
				start_Hash.put("tFileInputXML_8", System.currentTimeMillis());
				currentComponent = "tFileInputXML_8";

				int tos_count_tFileInputXML_8 = 0;

				int nb_line_tFileInputXML_8 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_8 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_8 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_8 = false;
				if (os_tFileInputXML_8.indexOf("windows") > -1
						|| os_tFileInputXML_8.indexOf("nt") > -1) {
					isWindows_tFileInputXML_8 = true;
				}
				class NameSpaceTool_tFileInputXML_8 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_8 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_8 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_8
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_8());
				Object filename_tFileInputXML_8 = null;
				try {
					filename_tFileInputXML_8 = context.opsDir
							+ "/ops-leafs.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_8 != null
						&& filename_tFileInputXML_8 instanceof String
						&& filename_tFileInputXML_8.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_8) {
						filename_tFileInputXML_8 = filename_tFileInputXML_8
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_8 = true;
				org.dom4j.Document doc_tFileInputXML_8 = null;
				java.io.Closeable toClose_tFileInputXML_8 = null;
				try {
					if (filename_tFileInputXML_8 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_8 = (java.io.InputStream) filename_tFileInputXML_8;
						toClose_tFileInputXML_8 = inputStream_tFileInputXML_8;
						doc_tFileInputXML_8 = reader_tFileInputXML_8
								.read(inputStream_tFileInputXML_8);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_8 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_8)),
								"UTF-8");
						toClose_tFileInputXML_8 = unicodeReader_tFileInputXML_8;
						org.xml.sax.InputSource in_tFileInputXML_8 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_8);
						doc_tFileInputXML_8 = reader_tFileInputXML_8
								.read(in_tFileInputXML_8);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_8 = false;
				} finally {
					if (toClose_tFileInputXML_8 != null) {
						toClose_tFileInputXML_8.close();
					}
				}
				if (isValidFile_tFileInputXML_8) {
					NameSpaceTool_tFileInputXML_8 nsTool_tFileInputXML_8 = new NameSpaceTool_tFileInputXML_8();
					nsTool_tFileInputXML_8.countNSMap(doc_tFileInputXML_8
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_8 = nsTool_tFileInputXML_8.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_8 = doc_tFileInputXML_8
							.createXPath(nsTool_tFileInputXML_8
									.addDefaultNSPrefix("/ops/class",
											"/ops/class"));
					x_tFileInputXML_8
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_8 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_8
							.selectNodes(doc_tFileInputXML_8);
					XML_API_tFileInputXML_8 xml_api_tFileInputXML_8 = new XML_API_tFileInputXML_8();
					String str_tFileInputXML_8 = "";
					org.dom4j.Node node_tFileInputXML_8 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_8 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_8
									.addDefaultNSPrefix("code", "/ops/class"));
					xTmp0_tFileInputXML_8
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);
					org.dom4j.XPath xTmp1_tFileInputXML_8 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_8
									.addDefaultNSPrefix("label", "/ops/class"));
					xTmp1_tFileInputXML_8
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);
					org.dom4j.XPath xTmp2_tFileInputXML_8 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_8
									.addDefaultNSPrefix("path", "/ops/class"));
					xTmp2_tFileInputXML_8
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);
					org.dom4j.XPath xTmp3_tFileInputXML_8 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_8
									.addDefaultNSPrefix("level", "/ops/class"));
					xTmp3_tFileInputXML_8
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_8 : nodeList_tFileInputXML_8) {
						nb_line_tFileInputXML_8++;
						row7 = null;
						boolean whetherReject_tFileInputXML_8 = false;
						row7 = new row7Struct();
						try {
							Object obj0_tFileInputXML_8 = xTmp0_tFileInputXML_8
									.evaluate(temp_tFileInputXML_8);
							if (obj0_tFileInputXML_8 == null) {
								node_tFileInputXML_8 = null;
								str_tFileInputXML_8 = "";

							} else if (obj0_tFileInputXML_8 instanceof org.dom4j.Node) {
								node_tFileInputXML_8 = (org.dom4j.Node) obj0_tFileInputXML_8;
								str_tFileInputXML_8 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_8,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_8 instanceof String
									|| obj0_tFileInputXML_8 instanceof Number) {
								node_tFileInputXML_8 = temp_tFileInputXML_8;
								str_tFileInputXML_8 = String
										.valueOf(obj0_tFileInputXML_8);
							} else if (obj0_tFileInputXML_8 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_8;
								node_tFileInputXML_8 = nodes_tFileInputXML_8
										.size() > 0 ? nodes_tFileInputXML_8
										.get(0) : null;
								str_tFileInputXML_8 = node_tFileInputXML_8 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_8,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_8
									.isEmpty(node_tFileInputXML_8)) {
								row7.code = "";
							} else if (xml_api_tFileInputXML_8
									.isMissing(node_tFileInputXML_8)) {
								row7.code = null;
							} else {
								row7.code = str_tFileInputXML_8;
							}
							Object obj1_tFileInputXML_8 = xTmp1_tFileInputXML_8
									.evaluate(temp_tFileInputXML_8);
							if (obj1_tFileInputXML_8 == null) {
								node_tFileInputXML_8 = null;
								str_tFileInputXML_8 = "";

							} else if (obj1_tFileInputXML_8 instanceof org.dom4j.Node) {
								node_tFileInputXML_8 = (org.dom4j.Node) obj1_tFileInputXML_8;
								str_tFileInputXML_8 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_8,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_8 instanceof String
									|| obj1_tFileInputXML_8 instanceof Number) {
								node_tFileInputXML_8 = temp_tFileInputXML_8;
								str_tFileInputXML_8 = String
										.valueOf(obj1_tFileInputXML_8);
							} else if (obj1_tFileInputXML_8 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_8;
								node_tFileInputXML_8 = nodes_tFileInputXML_8
										.size() > 0 ? nodes_tFileInputXML_8
										.get(0) : null;
								str_tFileInputXML_8 = node_tFileInputXML_8 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_8,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_8
									.isEmpty(node_tFileInputXML_8)) {
								row7.label = "";
							} else if (xml_api_tFileInputXML_8
									.isMissing(node_tFileInputXML_8)) {
								row7.label = null;
							} else {
								row7.label = str_tFileInputXML_8;
							}
							Object obj2_tFileInputXML_8 = xTmp2_tFileInputXML_8
									.evaluate(temp_tFileInputXML_8);
							if (obj2_tFileInputXML_8 == null) {
								node_tFileInputXML_8 = null;
								str_tFileInputXML_8 = "";

							} else if (obj2_tFileInputXML_8 instanceof org.dom4j.Node) {
								node_tFileInputXML_8 = (org.dom4j.Node) obj2_tFileInputXML_8;
								str_tFileInputXML_8 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_8,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_8 instanceof String
									|| obj2_tFileInputXML_8 instanceof Number) {
								node_tFileInputXML_8 = temp_tFileInputXML_8;
								str_tFileInputXML_8 = String
										.valueOf(obj2_tFileInputXML_8);
							} else if (obj2_tFileInputXML_8 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_8;
								node_tFileInputXML_8 = nodes_tFileInputXML_8
										.size() > 0 ? nodes_tFileInputXML_8
										.get(0) : null;
								str_tFileInputXML_8 = node_tFileInputXML_8 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_8,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_8
									.isEmpty(node_tFileInputXML_8)) {
								row7.path = "";
							} else if (xml_api_tFileInputXML_8
									.isMissing(node_tFileInputXML_8)) {
								row7.path = null;
							} else {
								row7.path = str_tFileInputXML_8;
							}
							Object obj3_tFileInputXML_8 = xTmp3_tFileInputXML_8
									.evaluate(temp_tFileInputXML_8);
							if (obj3_tFileInputXML_8 == null) {
								node_tFileInputXML_8 = null;
								str_tFileInputXML_8 = "";

							} else if (obj3_tFileInputXML_8 instanceof org.dom4j.Node) {
								node_tFileInputXML_8 = (org.dom4j.Node) obj3_tFileInputXML_8;
								str_tFileInputXML_8 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_8,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_8 instanceof String
									|| obj3_tFileInputXML_8 instanceof Number) {
								node_tFileInputXML_8 = temp_tFileInputXML_8;
								str_tFileInputXML_8 = String
										.valueOf(obj3_tFileInputXML_8);
							} else if (obj3_tFileInputXML_8 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_8;
								node_tFileInputXML_8 = nodes_tFileInputXML_8
										.size() > 0 ? nodes_tFileInputXML_8
										.get(0) : null;
								str_tFileInputXML_8 = node_tFileInputXML_8 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_8,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_8
									.isMissing(node_tFileInputXML_8)
									|| xml_api_tFileInputXML_8
											.isEmpty(node_tFileInputXML_8)) {
								row7.level = 0;
							} else {
								row7.level = ParserUtils
										.parseTo_int(str_tFileInputXML_8);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_8 = true;
							System.err.println(e.getMessage());
							row7 = null;
						}

						/**
						 * [tFileInputXML_8 begin ] stop
						 */
						/**
						 * [tFileInputXML_8 main ] start
						 */

						currentComponent = "tFileInputXML_8";

						tos_count_tFileInputXML_8++;

						/**
						 * [tFileInputXML_8 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMap_17 main ] start
							 */

							currentComponent = "tMap_17";

							boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_17 = false;
							boolean mainRowRejected_tMap_17 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
								// ###############################
								// # Output tables

								OPS_Leaf = null;

								// # Output table : 'OPS_Leaf'
								OPS_Leaf_tmp.C_HLEVEL = row7.level - 1;
								OPS_Leaf_tmp.C_FULLNAME = row7.path + "Wert\\";
								OPS_Leaf_tmp.C_NAME = row7.code + " - "
										+ row7.label + " (Wert)";
								OPS_Leaf_tmp.C_SYNONYM_CD = 'N';
								OPS_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								OPS_Leaf_tmp.C_TOTALNUM = null;
								OPS_Leaf_tmp.C_BASECODE = "ST|OPS:" + row7.code;
								OPS_Leaf_tmp.C_METADATAXML = null;
								OPS_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								OPS_Leaf_tmp.C_TABLENAME = "concept_dimension";
								OPS_Leaf_tmp.C_COLUMNNAME = "concept_path";
								OPS_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								OPS_Leaf_tmp.C_OPERATOR = "LIKE";
								OPS_Leaf_tmp.C_DIMCODE = row7.path;
								OPS_Leaf_tmp.C_COMMENT = null;
								OPS_Leaf_tmp.C_TOOLTIP = row7.label;
								OPS_Leaf_tmp.M_APPLIED_PATH = '@';
								OPS_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								OPS_Leaf_tmp.DOWNLOAD_DATE = null;
								OPS_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								OPS_Leaf_tmp.SOURCESYSTEM_CD = "OPS";
								OPS_Leaf_tmp.VALUETYPE_CD = null;
								OPS_Leaf_tmp.M_EXCLUSION_CD = null;
								OPS_Leaf_tmp.C_PATH = null;
								OPS_Leaf_tmp.C_SYMBOL = null;
								OPS_Leaf = OPS_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_17 = false;

							tos_count_tMap_17++;

							/**
							 * [tMap_17 main ] stop
							 */
							// Start of branch "OPS_Leaf"
							if (OPS_Leaf != null) {

								/**
								 * [tUnite_11 main ] start
								 */

								currentComponent = "tUnite_11";

								// ////////

								// for output
								tHashInput_tUnite_11_row45 = new tHashInput_tUnite_11_row45Struct();

								tHashInput_tUnite_11_row45.C_HLEVEL = OPS_Leaf.C_HLEVEL;
								tHashInput_tUnite_11_row45.C_FULLNAME = OPS_Leaf.C_FULLNAME;
								tHashInput_tUnite_11_row45.C_NAME = OPS_Leaf.C_NAME;
								tHashInput_tUnite_11_row45.C_SYNONYM_CD = OPS_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_11_row45.C_VISUALATTRIBUTES = OPS_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_11_row45.C_TOTALNUM = OPS_Leaf.C_TOTALNUM;
								tHashInput_tUnite_11_row45.C_BASECODE = OPS_Leaf.C_BASECODE;
								tHashInput_tUnite_11_row45.C_METADATAXML = OPS_Leaf.C_METADATAXML;
								tHashInput_tUnite_11_row45.C_FACTTABLECOLUMN = OPS_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_11_row45.C_TABLENAME = OPS_Leaf.C_TABLENAME;
								tHashInput_tUnite_11_row45.C_COLUMNNAME = OPS_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_11_row45.C_COLUMNDATATYPE = OPS_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_11_row45.C_OPERATOR = OPS_Leaf.C_OPERATOR;
								tHashInput_tUnite_11_row45.C_DIMCODE = OPS_Leaf.C_DIMCODE;
								tHashInput_tUnite_11_row45.C_COMMENT = OPS_Leaf.C_COMMENT;
								tHashInput_tUnite_11_row45.C_TOOLTIP = OPS_Leaf.C_TOOLTIP;
								tHashInput_tUnite_11_row45.M_APPLIED_PATH = OPS_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_11_row45.UPDATE_DATE = OPS_Leaf.UPDATE_DATE;
								tHashInput_tUnite_11_row45.DOWNLOAD_DATE = OPS_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_11_row45.IMPORT_DATE = OPS_Leaf.IMPORT_DATE;
								tHashInput_tUnite_11_row45.SOURCESYSTEM_CD = OPS_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_11_row45.VALUETYPE_CD = OPS_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_11_row45.M_EXCLUSION_CD = OPS_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_11_row45.C_PATH = OPS_Leaf.C_PATH;
								tHashInput_tUnite_11_row45.C_SYMBOL = OPS_Leaf.C_SYMBOL;

								nb_line_tUnite_11++;

								// ////////

								tos_count_tUnite_11++;

								/**
								 * [tUnite_11 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_11 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_11";

								tHashInput_tUnite_11_row45Struct oneRow_tHashOutput_tUnite_11 = new tHashInput_tUnite_11_row45Struct();

								oneRow_tHashOutput_tUnite_11.C_HLEVEL = tHashInput_tUnite_11_row45.C_HLEVEL;
								oneRow_tHashOutput_tUnite_11.C_FULLNAME = tHashInput_tUnite_11_row45.C_FULLNAME;
								oneRow_tHashOutput_tUnite_11.C_NAME = tHashInput_tUnite_11_row45.C_NAME;
								oneRow_tHashOutput_tUnite_11.C_SYNONYM_CD = tHashInput_tUnite_11_row45.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_11.C_VISUALATTRIBUTES = tHashInput_tUnite_11_row45.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_11.C_TOTALNUM = tHashInput_tUnite_11_row45.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_11.C_BASECODE = tHashInput_tUnite_11_row45.C_BASECODE;
								oneRow_tHashOutput_tUnite_11.C_METADATAXML = tHashInput_tUnite_11_row45.C_METADATAXML;
								oneRow_tHashOutput_tUnite_11.C_FACTTABLECOLUMN = tHashInput_tUnite_11_row45.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_11.C_TABLENAME = tHashInput_tUnite_11_row45.C_TABLENAME;
								oneRow_tHashOutput_tUnite_11.C_COLUMNNAME = tHashInput_tUnite_11_row45.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_11.C_COLUMNDATATYPE = tHashInput_tUnite_11_row45.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_11.C_OPERATOR = tHashInput_tUnite_11_row45.C_OPERATOR;
								oneRow_tHashOutput_tUnite_11.C_DIMCODE = tHashInput_tUnite_11_row45.C_DIMCODE;
								oneRow_tHashOutput_tUnite_11.C_COMMENT = tHashInput_tUnite_11_row45.C_COMMENT;
								oneRow_tHashOutput_tUnite_11.C_TOOLTIP = tHashInput_tUnite_11_row45.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_11.M_APPLIED_PATH = tHashInput_tUnite_11_row45.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_11.UPDATE_DATE = tHashInput_tUnite_11_row45.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_11.DOWNLOAD_DATE = tHashInput_tUnite_11_row45.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_11.IMPORT_DATE = tHashInput_tUnite_11_row45.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_11.SOURCESYSTEM_CD = tHashInput_tUnite_11_row45.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_11.VALUETYPE_CD = tHashInput_tUnite_11_row45.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_11.M_EXCLUSION_CD = tHashInput_tUnite_11_row45.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_11.C_PATH = tHashInput_tUnite_11_row45.C_PATH;
								oneRow_tHashOutput_tUnite_11.C_SYMBOL = tHashInput_tUnite_11_row45.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_11
										.put(oneRow_tHashOutput_tUnite_11);
								nb_line_tHashOutput_tUnite_11++;

								tos_count_tHashOutput_tUnite_11++;

								/**
								 * [tHashOutput_tUnite_11 main ] stop
								 */

							} // End of branch "OPS_Leaf"

						} // End of branch "row7"

						/**
						 * [tFileInputXML_8 end ] start
						 */

						currentComponent = "tFileInputXML_8";

					}
				}
				globalMap.put("tFileInputXML_8_NB_LINE",
						nb_line_tFileInputXML_8);

				ok_Hash.put("tFileInputXML_8", true);
				end_Hash.put("tFileInputXML_8", System.currentTimeMillis());

				/**
				 * [tFileInputXML_8 end ] stop
				 */

				/**
				 * [tMap_17 end ] start
				 */

				currentComponent = "tMap_17";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_17", true);
				end_Hash.put("tMap_17", System.currentTimeMillis());

				/**
				 * [tMap_17 end ] stop
				 */

				/**
				 * [tUnite_11 end ] start
				 */

				currentComponent = "tUnite_11";

				globalMap.put("tUnite_11_NB_LINE", nb_line_tUnite_11);

				ok_Hash.put("tUnite_11", true);
				end_Hash.put("tUnite_11", System.currentTimeMillis());

				/**
				 * [tUnite_11 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_11 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_11";

				globalMap.put("tHashOutput_tUnite_11_NB_LINE",
						nb_line_tHashOutput_tUnite_11);

				ok_Hash.put("tHashOutput_tUnite_11", true);
				end_Hash.put("tHashOutput_tUnite_11",
						System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_12_row46Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_12_row46Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_12_row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class LOINC_RootStruct implements
			routines.system.IPersistableRow<LOINC_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOINC_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class LOINC_FolderLeafStruct implements
			routines.system.IPersistableRow<LOINC_FolderLeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOINC_FolderLeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String PATH_TO_ROOT;

		public String getPATH_TO_ROOT() {
			return this.PATH_TO_ROOT;
		}

		public String SEQUENCE;

		public String getSEQUENCE() {
			return this.SEQUENCE;
		}

		public String IMMEDIATE_PARENT;

		public String getIMMEDIATE_PARENT() {
			return this.IMMEDIATE_PARENT;
		}

		public String CODE;

		public String getCODE() {
			return this.CODE;
		}

		public String CODE_TEXT;

		public String getCODE_TEXT() {
			return this.CODE_TEXT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.PATH_TO_ROOT = readString(dis);

					this.SEQUENCE = readString(dis);

					this.IMMEDIATE_PARENT = readString(dis);

					this.CODE = readString(dis);

					this.CODE_TEXT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATH_TO_ROOT, dos);

				// String

				writeString(this.SEQUENCE, dos);

				// String

				writeString(this.IMMEDIATE_PARENT, dos);

				// String

				writeString(this.CODE, dos);

				// String

				writeString(this.CODE_TEXT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATH_TO_ROOT=" + PATH_TO_ROOT);
			sb.append(",SEQUENCE=" + SEQUENCE);
			sb.append(",IMMEDIATE_PARENT=" + IMMEDIATE_PARENT);
			sb.append(",CODE=" + CODE);
			sb.append(",CODE_TEXT=" + CODE_TEXT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_24Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_24Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATH_TO_ROOT;

		public String getPATH_TO_ROOT() {
			return this.PATH_TO_ROOT;
		}

		public String SEQUENCE;

		public String getSEQUENCE() {
			return this.SEQUENCE;
		}

		public String IMMEDIATE_PARENT;

		public String getIMMEDIATE_PARENT() {
			return this.IMMEDIATE_PARENT;
		}

		public String CODE;

		public String getCODE() {
			return this.CODE;
		}

		public String CODE_TEXT;

		public String getCODE_TEXT() {
			return this.CODE_TEXT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CODE == null) ? 0 : this.CODE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_24Struct other = (after_tFileInputDelimited_24Struct) obj;

			if (this.CODE == null) {
				if (other.CODE != null)
					return false;
			} else if (!this.CODE.equals(other.CODE))
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_24Struct other) {

			other.PATH_TO_ROOT = this.PATH_TO_ROOT;
			other.SEQUENCE = this.SEQUENCE;
			other.IMMEDIATE_PARENT = this.IMMEDIATE_PARENT;
			other.CODE = this.CODE;
			other.CODE_TEXT = this.CODE_TEXT;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_24Struct other) {

			other.CODE = this.CODE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.PATH_TO_ROOT = readString(dis);

					this.SEQUENCE = readString(dis);

					this.IMMEDIATE_PARENT = readString(dis);

					this.CODE = readString(dis);

					this.CODE_TEXT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATH_TO_ROOT, dos);

				// String

				writeString(this.SEQUENCE, dos);

				// String

				writeString(this.IMMEDIATE_PARENT, dos);

				// String

				writeString(this.CODE, dos);

				// String

				writeString(this.CODE_TEXT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATH_TO_ROOT=" + PATH_TO_ROOT);
			sb.append(",SEQUENCE=" + SEQUENCE);
			sb.append(",IMMEDIATE_PARENT=" + IMMEDIATE_PARENT);
			sb.append(",CODE=" + CODE);
			sb.append(",CODE_TEXT=" + CODE_TEXT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CODE, other.CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_22Process(globalMap);

				LOINC_RootStruct LOINC_Root = new LOINC_RootStruct();

				row20Struct row20 = new row20Struct();
				LOINC_FolderLeafStruct LOINC_FolderLeaf = new LOINC_FolderLeafStruct();

				tHashInput_tUnite_12_row46Struct tHashInput_tUnite_12_row46 = new tHashInput_tUnite_12_row46Struct();

				/**
				 * [tHashOutput_tUnite_12 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_12", false);
				start_Hash.put("tHashOutput_tUnite_12",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_12";

				int tos_count_tHashOutput_tUnite_12 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_12 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_12_row46Struct> tHashFile_tHashOutput_tUnite_12 = null;
				if ((tHashFile_tHashOutput_tUnite_12 = mf_tHashOutput_tUnite_12
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_12")) == null) {
					tHashFile_tHashOutput_tUnite_12 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_12_row46Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_12.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_12",
						tHashFile_tHashOutput_tUnite_12);
				int nb_line_tHashOutput_tUnite_12 = 0;

				/**
				 * [tHashOutput_tUnite_12 begin ] stop
				 */

				/**
				 * [tUnite_12 begin ] start
				 */

				ok_Hash.put("tUnite_12", false);
				start_Hash.put("tUnite_12", System.currentTimeMillis());
				currentComponent = "tUnite_12";

				int tos_count_tUnite_12 = 0;

				int nb_line_tUnite_12 = 0;

				/**
				 * [tUnite_12 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_21 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_21", false);
				start_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_21";

				int tos_count_tFileInputDelimited_21 = 0;

				int nb_line_tFileInputDelimited_21 = 0;
				int footer_tFileInputDelimited_21 = 0;
				int totalLinetFileInputDelimited_21 = 0;
				int limittFileInputDelimited_21 = -1;
				int lastLinetFileInputDelimited_21 = -1;

				char fieldSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_21 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_21 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_21 = /**
				 * Start field
				 * tFileInputDelimited_21:FILENAME
				 */
				context.loincDir + "root_LOINC.csv"/**
				 * End field
				 * tFileInputDelimited_21:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_21 = null;

				try {

					String[] rowtFileInputDelimited_21 = null;
					int currentLinetFileInputDelimited_21 = 0;
					int outputLinetFileInputDelimited_21 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_21 = 0;
							if (footer_value_tFileInputDelimited_21 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_21,
									fieldSeparator_tFileInputDelimited_21[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_21)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_21[0]);
						}

						csvReadertFileInputDelimited_21
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
							csvReadertFileInputDelimited_21.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_21[0]);

						csvReadertFileInputDelimited_21.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_21
								.setEscapeChar(csvReadertFileInputDelimited_21
										.getQuoteChar());

						if (footer_tFileInputDelimited_21 > 0) {
							for (totalLinetFileInputDelimited_21 = 0; totalLinetFileInputDelimited_21 < 1; totalLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
							csvReadertFileInputDelimited_21
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_21.readNext()) {

								rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
										.getValues();
								if (!(rowtFileInputDelimited_21.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_21[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_21++;

								}

							}
							int lastLineTemptFileInputDelimited_21 = totalLinetFileInputDelimited_21
									- footer_tFileInputDelimited_21 < 0 ? 0
									: totalLinetFileInputDelimited_21
											- footer_tFileInputDelimited_21;
							if (lastLinetFileInputDelimited_21 > 0) {
								lastLinetFileInputDelimited_21 = lastLinetFileInputDelimited_21 < lastLineTemptFileInputDelimited_21 ? lastLinetFileInputDelimited_21
										: lastLineTemptFileInputDelimited_21;
							} else {
								lastLinetFileInputDelimited_21 = lastLineTemptFileInputDelimited_21;
							}

							csvReadertFileInputDelimited_21.close();
							if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_21,
										fieldSeparator_tFileInputDelimited_21[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_21)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_21[0]);
							}
							csvReadertFileInputDelimited_21
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
								csvReadertFileInputDelimited_21
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_21[0]);

							csvReadertFileInputDelimited_21.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_21
									.setEscapeChar(csvReadertFileInputDelimited_21
											.getQuoteChar());

						}

						if (limittFileInputDelimited_21 != 0) {
							for (currentLinetFileInputDelimited_21 = 0; currentLinetFileInputDelimited_21 < 1; currentLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
						}
						csvReadertFileInputDelimited_21
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_21 != 0
							&& csvReadertFileInputDelimited_21 != null
							&& csvReadertFileInputDelimited_21.readNext()) {

						rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
								.getValues();

						if (rowtFileInputDelimited_21.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_21[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_21++;

						if (lastLinetFileInputDelimited_21 > -1
								&& currentLinetFileInputDelimited_21 > lastLinetFileInputDelimited_21) {
							break;
						}
						outputLinetFileInputDelimited_21++;
						if (limittFileInputDelimited_21 > 0
								&& outputLinetFileInputDelimited_21 > limittFileInputDelimited_21) {
							break;
						}

						LOINC_Root = null;

						boolean whetherReject_tFileInputDelimited_21 = false;
						LOINC_Root = new LOINC_RootStruct();
						try {

							if (rowtFileInputDelimited_21.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_21[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								LOINC_Root.C_HLEVEL = null;

								LOINC_Root.C_FULLNAME = null;

								LOINC_Root.C_NAME = null;

								LOINC_Root.C_SYNONYM_CD = null;

								LOINC_Root.C_VISUALATTRIBUTES = null;

								LOINC_Root.C_TOTALNUM = null;

								LOINC_Root.C_BASECODE = null;

								LOINC_Root.C_METADATAXML = null;

								LOINC_Root.C_FACTTABLECOLUMN = null;

								LOINC_Root.C_TABLENAME = null;

								LOINC_Root.C_COLUMNNAME = null;

								LOINC_Root.C_COLUMNDATATYPE = null;

								LOINC_Root.C_OPERATOR = null;

								LOINC_Root.C_DIMCODE = null;

								LOINC_Root.C_COMMENT = null;

								LOINC_Root.C_TOOLTIP = null;

								LOINC_Root.M_APPLIED_PATH = null;

								LOINC_Root.UPDATE_DATE = null;

								LOINC_Root.DOWNLOAD_DATE = null;

								LOINC_Root.IMPORT_DATE = null;

								LOINC_Root.SOURCESYSTEM_CD = null;

								LOINC_Root.VALUETYPE_CD = null;

								LOINC_Root.M_EXCLUSION_CD = null;

								LOINC_Root.C_PATH = null;

								LOINC_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_21 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_21 = 0;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										LOINC_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										LOINC_Root.C_HLEVEL = null;
									}

								} else {
									LOINC_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 1;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_FULLNAME = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 2;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_NAME = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 3;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										LOINC_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										LOINC_Root.C_SYNONYM_CD = null;
									}

								} else {
									LOINC_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 4;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 5;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_TOTALNUM = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 6;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_BASECODE = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 7;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_METADATAXML = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 8;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 9;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_TABLENAME = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 10;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_COLUMNNAME = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 11;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										LOINC_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										LOINC_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									LOINC_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 12;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_OPERATOR = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 13;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_DIMCODE = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 14;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_COMMENT = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 15;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_TOOLTIP = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 16;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										LOINC_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										LOINC_Root.M_APPLIED_PATH = null;
									}

								} else {
									LOINC_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 17;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										LOINC_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										LOINC_Root.UPDATE_DATE = null;
									}

								} else {
									LOINC_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 18;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										LOINC_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										LOINC_Root.DOWNLOAD_DATE = null;
									}

								} else {
									LOINC_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 19;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										LOINC_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										LOINC_Root.IMPORT_DATE = null;
									}

								} else {
									LOINC_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 20;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 21;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.VALUETYPE_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 22;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.M_EXCLUSION_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 23;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_PATH = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 24;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									LOINC_Root.C_SYMBOL = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									LOINC_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_21 = true;

							System.err.println(e.getMessage());
							LOINC_Root = null;

						}

						/**
						 * [tFileInputDelimited_21 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_21 main ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						tos_count_tFileInputDelimited_21++;

						/**
						 * [tFileInputDelimited_21 main ] stop
						 */
						// Start of branch "LOINC_Root"
						if (LOINC_Root != null) {

							/**
							 * [tUnite_12 main ] start
							 */

							currentComponent = "tUnite_12";

							// ////////

							// for output
							tHashInput_tUnite_12_row46 = new tHashInput_tUnite_12_row46Struct();

							tHashInput_tUnite_12_row46.C_HLEVEL = LOINC_Root.C_HLEVEL;
							tHashInput_tUnite_12_row46.C_FULLNAME = LOINC_Root.C_FULLNAME;
							tHashInput_tUnite_12_row46.C_NAME = LOINC_Root.C_NAME;
							tHashInput_tUnite_12_row46.C_SYNONYM_CD = LOINC_Root.C_SYNONYM_CD;
							tHashInput_tUnite_12_row46.C_VISUALATTRIBUTES = LOINC_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_12_row46.C_TOTALNUM = LOINC_Root.C_TOTALNUM;
							tHashInput_tUnite_12_row46.C_BASECODE = LOINC_Root.C_BASECODE;
							tHashInput_tUnite_12_row46.C_METADATAXML = LOINC_Root.C_METADATAXML;
							tHashInput_tUnite_12_row46.C_FACTTABLECOLUMN = LOINC_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_12_row46.C_TABLENAME = LOINC_Root.C_TABLENAME;
							tHashInput_tUnite_12_row46.C_COLUMNNAME = LOINC_Root.C_COLUMNNAME;
							tHashInput_tUnite_12_row46.C_COLUMNDATATYPE = LOINC_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_12_row46.C_OPERATOR = LOINC_Root.C_OPERATOR;
							tHashInput_tUnite_12_row46.C_DIMCODE = LOINC_Root.C_DIMCODE;
							tHashInput_tUnite_12_row46.C_COMMENT = LOINC_Root.C_COMMENT;
							tHashInput_tUnite_12_row46.C_TOOLTIP = LOINC_Root.C_TOOLTIP;
							tHashInput_tUnite_12_row46.M_APPLIED_PATH = LOINC_Root.M_APPLIED_PATH;
							tHashInput_tUnite_12_row46.UPDATE_DATE = LOINC_Root.UPDATE_DATE;
							tHashInput_tUnite_12_row46.DOWNLOAD_DATE = LOINC_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_12_row46.IMPORT_DATE = LOINC_Root.IMPORT_DATE;
							tHashInput_tUnite_12_row46.SOURCESYSTEM_CD = LOINC_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_12_row46.VALUETYPE_CD = LOINC_Root.VALUETYPE_CD;
							tHashInput_tUnite_12_row46.M_EXCLUSION_CD = LOINC_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_12_row46.C_PATH = LOINC_Root.C_PATH;
							tHashInput_tUnite_12_row46.C_SYMBOL = LOINC_Root.C_SYMBOL;

							nb_line_tUnite_12++;

							// ////////

							tos_count_tUnite_12++;

							/**
							 * [tUnite_12 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_12 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_12";

							tHashInput_tUnite_12_row46Struct oneRow_tHashOutput_tUnite_12 = new tHashInput_tUnite_12_row46Struct();

							oneRow_tHashOutput_tUnite_12.C_HLEVEL = tHashInput_tUnite_12_row46.C_HLEVEL;
							oneRow_tHashOutput_tUnite_12.C_FULLNAME = tHashInput_tUnite_12_row46.C_FULLNAME;
							oneRow_tHashOutput_tUnite_12.C_NAME = tHashInput_tUnite_12_row46.C_NAME;
							oneRow_tHashOutput_tUnite_12.C_SYNONYM_CD = tHashInput_tUnite_12_row46.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_12.C_VISUALATTRIBUTES = tHashInput_tUnite_12_row46.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_12.C_TOTALNUM = tHashInput_tUnite_12_row46.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_12.C_BASECODE = tHashInput_tUnite_12_row46.C_BASECODE;
							oneRow_tHashOutput_tUnite_12.C_METADATAXML = tHashInput_tUnite_12_row46.C_METADATAXML;
							oneRow_tHashOutput_tUnite_12.C_FACTTABLECOLUMN = tHashInput_tUnite_12_row46.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_12.C_TABLENAME = tHashInput_tUnite_12_row46.C_TABLENAME;
							oneRow_tHashOutput_tUnite_12.C_COLUMNNAME = tHashInput_tUnite_12_row46.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_12.C_COLUMNDATATYPE = tHashInput_tUnite_12_row46.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_12.C_OPERATOR = tHashInput_tUnite_12_row46.C_OPERATOR;
							oneRow_tHashOutput_tUnite_12.C_DIMCODE = tHashInput_tUnite_12_row46.C_DIMCODE;
							oneRow_tHashOutput_tUnite_12.C_COMMENT = tHashInput_tUnite_12_row46.C_COMMENT;
							oneRow_tHashOutput_tUnite_12.C_TOOLTIP = tHashInput_tUnite_12_row46.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_12.M_APPLIED_PATH = tHashInput_tUnite_12_row46.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_12.UPDATE_DATE = tHashInput_tUnite_12_row46.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_12.DOWNLOAD_DATE = tHashInput_tUnite_12_row46.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_12.IMPORT_DATE = tHashInput_tUnite_12_row46.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_12.SOURCESYSTEM_CD = tHashInput_tUnite_12_row46.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_12.VALUETYPE_CD = tHashInput_tUnite_12_row46.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_12.M_EXCLUSION_CD = tHashInput_tUnite_12_row46.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_12.C_PATH = tHashInput_tUnite_12_row46.C_PATH;
							oneRow_tHashOutput_tUnite_12.C_SYMBOL = tHashInput_tUnite_12_row46.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_12
									.put(oneRow_tHashOutput_tUnite_12);
							nb_line_tHashOutput_tUnite_12++;

							tos_count_tHashOutput_tUnite_12++;

							/**
							 * [tHashOutput_tUnite_12 main ] stop
							 */

						} // End of branch "LOINC_Root"

						/**
						 * [tFileInputDelimited_21 end ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						nb_line_tFileInputDelimited_21++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_21 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_21 != null) {
							csvReadertFileInputDelimited_21.close();
						}
					}
					if (csvReadertFileInputDelimited_21 != null) {
						globalMap.put("tFileInputDelimited_21_NB_LINE",
								nb_line_tFileInputDelimited_21);
					}
				}

				ok_Hash.put("tFileInputDelimited_21", true);
				end_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_21 end ] stop
				 */

				/**
				 * [tMap_20 begin ] start
				 */

				ok_Hash.put("tMap_20", false);
				start_Hash.put("tMap_20", System.currentTimeMillis());
				currentComponent = "tMap_20";

				int tos_count_tMap_20 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) globalMap
						.get("tHash_Lookup_row21"));

				row21Struct row21HashKey = new row21Struct();
				row21Struct row21Default = new row21Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_20__Struct {
					Integer i2b2Level;
					String sequence;
					String i2b2pathToRoot;
					String i2b2VisualAttributes;
				}
				Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LOINC_FolderLeafStruct LOINC_FolderLeaf_tmp = new LOINC_FolderLeafStruct();
				// ###############################

				/**
				 * [tMap_20 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_24 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_24", false);
				start_Hash.put("tFileInputDelimited_24",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_24";

				int tos_count_tFileInputDelimited_24 = 0;

				int nb_line_tFileInputDelimited_24 = 0;
				int footer_tFileInputDelimited_24 = 0;
				int totalLinetFileInputDelimited_24 = 0;
				int limittFileInputDelimited_24 = -1;
				int lastLinetFileInputDelimited_24 = -1;

				char fieldSeparator_tFileInputDelimited_24[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_24 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_24[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_24 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_24 = /**
				 * Start field
				 * tFileInputDelimited_24:FILENAME
				 */
				context.loincDir + "LOINC_V240_MULTI-AXIAL_HIERARCHY.CSV"/**
				 * End
				 * field tFileInputDelimited_24:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_24 = null;

				try {

					String[] rowtFileInputDelimited_24 = null;
					int currentLinetFileInputDelimited_24 = 0;
					int outputLinetFileInputDelimited_24 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_24 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_24 = 0;
							if (footer_value_tFileInputDelimited_24 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_24 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_24,
									fieldSeparator_tFileInputDelimited_24[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_24 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_24)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_24[0]);
						}

						csvReadertFileInputDelimited_24
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_24[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_24[0] != '\r'))
							csvReadertFileInputDelimited_24.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_24[0]);

						csvReadertFileInputDelimited_24.setQuoteChar('"');

						csvReadertFileInputDelimited_24
								.setEscapeChar(csvReadertFileInputDelimited_24
										.getQuoteChar());

						if (footer_tFileInputDelimited_24 > 0) {
							for (totalLinetFileInputDelimited_24 = 0; totalLinetFileInputDelimited_24 < 1; totalLinetFileInputDelimited_24++) {
								csvReadertFileInputDelimited_24.readNext();
							}
							csvReadertFileInputDelimited_24
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_24.readNext()) {

								rowtFileInputDelimited_24 = csvReadertFileInputDelimited_24
										.getValues();
								if (!(rowtFileInputDelimited_24.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_24[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_24++;

								}

							}
							int lastLineTemptFileInputDelimited_24 = totalLinetFileInputDelimited_24
									- footer_tFileInputDelimited_24 < 0 ? 0
									: totalLinetFileInputDelimited_24
											- footer_tFileInputDelimited_24;
							if (lastLinetFileInputDelimited_24 > 0) {
								lastLinetFileInputDelimited_24 = lastLinetFileInputDelimited_24 < lastLineTemptFileInputDelimited_24 ? lastLinetFileInputDelimited_24
										: lastLineTemptFileInputDelimited_24;
							} else {
								lastLinetFileInputDelimited_24 = lastLineTemptFileInputDelimited_24;
							}

							csvReadertFileInputDelimited_24.close();
							if (filename_tFileInputDelimited_24 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_24 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_24,
										fieldSeparator_tFileInputDelimited_24[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_24 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_24)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_24[0]);
							}
							csvReadertFileInputDelimited_24
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_24[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_24[0] != '\r'))
								csvReadertFileInputDelimited_24
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_24[0]);

							csvReadertFileInputDelimited_24.setQuoteChar('"');

							csvReadertFileInputDelimited_24
									.setEscapeChar(csvReadertFileInputDelimited_24
											.getQuoteChar());

						}

						if (limittFileInputDelimited_24 != 0) {
							for (currentLinetFileInputDelimited_24 = 0; currentLinetFileInputDelimited_24 < 1; currentLinetFileInputDelimited_24++) {
								csvReadertFileInputDelimited_24.readNext();
							}
						}
						csvReadertFileInputDelimited_24
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_24 != 0
							&& csvReadertFileInputDelimited_24 != null
							&& csvReadertFileInputDelimited_24.readNext()) {

						rowtFileInputDelimited_24 = csvReadertFileInputDelimited_24
								.getValues();

						if (rowtFileInputDelimited_24.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_24[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_24++;

						if (lastLinetFileInputDelimited_24 > -1
								&& currentLinetFileInputDelimited_24 > lastLinetFileInputDelimited_24) {
							break;
						}
						outputLinetFileInputDelimited_24++;
						if (limittFileInputDelimited_24 > 0
								&& outputLinetFileInputDelimited_24 > limittFileInputDelimited_24) {
							break;
						}

						row20 = null;

						boolean whetherReject_tFileInputDelimited_24 = false;
						row20 = new row20Struct();
						try {

							if (rowtFileInputDelimited_24.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_24[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row20.PATH_TO_ROOT = null;

								row20.SEQUENCE = null;

								row20.IMMEDIATE_PARENT = null;

								row20.CODE = null;

								row20.CODE_TEXT = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_24 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_24 = 0;

								if (columnIndexWithD_tFileInputDelimited_24 < rowtFileInputDelimited_24.length) {

									row20.PATH_TO_ROOT = rowtFileInputDelimited_24[columnIndexWithD_tFileInputDelimited_24];

								} else {
									row20.PATH_TO_ROOT = null;
								}

								columnIndexWithD_tFileInputDelimited_24 = 1;

								if (columnIndexWithD_tFileInputDelimited_24 < rowtFileInputDelimited_24.length) {

									row20.SEQUENCE = rowtFileInputDelimited_24[columnIndexWithD_tFileInputDelimited_24];

								} else {
									row20.SEQUENCE = null;
								}

								columnIndexWithD_tFileInputDelimited_24 = 2;

								if (columnIndexWithD_tFileInputDelimited_24 < rowtFileInputDelimited_24.length) {

									row20.IMMEDIATE_PARENT = rowtFileInputDelimited_24[columnIndexWithD_tFileInputDelimited_24];

								} else {
									row20.IMMEDIATE_PARENT = null;
								}

								columnIndexWithD_tFileInputDelimited_24 = 3;

								if (columnIndexWithD_tFileInputDelimited_24 < rowtFileInputDelimited_24.length) {

									row20.CODE = rowtFileInputDelimited_24[columnIndexWithD_tFileInputDelimited_24];

								} else {
									row20.CODE = null;
								}

								columnIndexWithD_tFileInputDelimited_24 = 4;

								if (columnIndexWithD_tFileInputDelimited_24 < rowtFileInputDelimited_24.length) {

									row20.CODE_TEXT = rowtFileInputDelimited_24[columnIndexWithD_tFileInputDelimited_24];

								} else {
									row20.CODE_TEXT = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_24 = true;

							System.err.println(e.getMessage());
							row20 = null;

						}

						/**
						 * [tFileInputDelimited_24 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_24 main ] start
						 */

						currentComponent = "tFileInputDelimited_24";

						tos_count_tFileInputDelimited_24++;

						/**
						 * [tFileInputDelimited_24 main ] stop
						 */
						// Start of branch "row20"
						if (row20 != null) {

							/**
							 * [tMap_20 main ] start
							 */

							currentComponent = "tMap_20";

							boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_20 = false;
							boolean mainRowRejected_tMap_20 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row21"
							// /////////////////////////////////////////////

							boolean forceLooprow21 = false;

							row21Struct row21ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_20) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_20 = false;

								row21HashKey.LOINC_NUM = row20.CODE;

								row21HashKey.hashCodeDirty = true;

								tHash_Lookup_row21.lookup(row21HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row21 != null
									&& tHash_Lookup_row21
											.getCount(row21HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.LOINC_NUM = '"
								// + row21HashKey.LOINC_NUM + "'");
							} // G 071

							row21Struct row21 = null;

							row21Struct fromLookup_row21 = null;
							row21 = row21Default;

							if (tHash_Lookup_row21 != null
									&& tHash_Lookup_row21.hasNext()) { // G 099

								fromLookup_row21 = tHash_Lookup_row21.next();

							} // G 099

							if (fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_20__Struct Var = Var__tMap_20;
								Var.i2b2Level = row20.PATH_TO_ROOT.equals("") ? 3
										: 4 + (StringHandling.COUNT(
												row20.PATH_TO_ROOT, "\\"));
								Var.sequence = row20.SEQUENCE.length() == 1 ? "0"
										+ row20.SEQUENCE
										: row20.SEQUENCE;
								Var.i2b2pathToRoot = row20.PATH_TO_ROOT
										.equals("") ? row20.PATH_TO_ROOT
										: row20.PATH_TO_ROOT + "\\";
								Var.i2b2VisualAttributes = row20.CODE
										.startsWith("LP") ? "FA" : "LA";// ###############################
								// ###############################
								// # Output tables

								LOINC_FolderLeaf = null;

								// # Output table : 'LOINC_FolderLeaf'
								LOINC_FolderLeaf_tmp.C_HLEVEL = Var.i2b2Level;
								LOINC_FolderLeaf_tmp.C_FULLNAME = "\\i2b2\\ST\\LOINC"
										+ "\\"
										+ Var.i2b2pathToRoot
										+ row20.CODE + "\\";
								LOINC_FolderLeaf_tmp.C_NAME = Var.sequence
										+ " - " + row20.CODE_TEXT + " ("
										+ row20.CODE + ")";
								LOINC_FolderLeaf_tmp.C_SYNONYM_CD = 'N';
								LOINC_FolderLeaf_tmp.C_VISUALATTRIBUTES = Var.i2b2VisualAttributes;
								LOINC_FolderLeaf_tmp.C_TOTALNUM = null;
								LOINC_FolderLeaf_tmp.C_BASECODE = "ST|LOINC:"
										+ row20.CODE;
								LOINC_FolderLeaf_tmp.C_METADATAXML = null;
								LOINC_FolderLeaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								LOINC_FolderLeaf_tmp.C_TABLENAME = "concept_dimension";
								LOINC_FolderLeaf_tmp.C_COLUMNNAME = "concept_path";
								LOINC_FolderLeaf_tmp.C_COLUMNDATATYPE = 'T';
								LOINC_FolderLeaf_tmp.C_OPERATOR = "LIKE";
								LOINC_FolderLeaf_tmp.C_DIMCODE = "\\i2b2\\ST\\LOINC"
										+ "\\" + row20.PATH_TO_ROOT + "\\";
								LOINC_FolderLeaf_tmp.C_COMMENT = null;
								LOINC_FolderLeaf_tmp.C_TOOLTIP = row21.LONG_COMMON_NAME;
								LOINC_FolderLeaf_tmp.M_APPLIED_PATH = '@';
								LOINC_FolderLeaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								LOINC_FolderLeaf_tmp.DOWNLOAD_DATE = null;
								LOINC_FolderLeaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								LOINC_FolderLeaf_tmp.SOURCESYSTEM_CD = "LOINC";
								LOINC_FolderLeaf_tmp.VALUETYPE_CD = null;
								LOINC_FolderLeaf_tmp.M_EXCLUSION_CD = null;
								LOINC_FolderLeaf_tmp.C_PATH = null;
								LOINC_FolderLeaf_tmp.C_SYMBOL = null;
								LOINC_FolderLeaf = LOINC_FolderLeaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_20 = false;

							tos_count_tMap_20++;

							/**
							 * [tMap_20 main ] stop
							 */
							// Start of branch "LOINC_FolderLeaf"
							if (LOINC_FolderLeaf != null) {

								/**
								 * [tUnite_12 main ] start
								 */

								currentComponent = "tUnite_12";

								// ////////

								// for output
								tHashInput_tUnite_12_row46 = new tHashInput_tUnite_12_row46Struct();

								tHashInput_tUnite_12_row46.C_HLEVEL = LOINC_FolderLeaf.C_HLEVEL;
								tHashInput_tUnite_12_row46.C_FULLNAME = LOINC_FolderLeaf.C_FULLNAME;
								tHashInput_tUnite_12_row46.C_NAME = LOINC_FolderLeaf.C_NAME;
								tHashInput_tUnite_12_row46.C_SYNONYM_CD = LOINC_FolderLeaf.C_SYNONYM_CD;
								tHashInput_tUnite_12_row46.C_VISUALATTRIBUTES = LOINC_FolderLeaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_12_row46.C_TOTALNUM = LOINC_FolderLeaf.C_TOTALNUM;
								tHashInput_tUnite_12_row46.C_BASECODE = LOINC_FolderLeaf.C_BASECODE;
								tHashInput_tUnite_12_row46.C_METADATAXML = LOINC_FolderLeaf.C_METADATAXML;
								tHashInput_tUnite_12_row46.C_FACTTABLECOLUMN = LOINC_FolderLeaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_12_row46.C_TABLENAME = LOINC_FolderLeaf.C_TABLENAME;
								tHashInput_tUnite_12_row46.C_COLUMNNAME = LOINC_FolderLeaf.C_COLUMNNAME;
								tHashInput_tUnite_12_row46.C_COLUMNDATATYPE = LOINC_FolderLeaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_12_row46.C_OPERATOR = LOINC_FolderLeaf.C_OPERATOR;
								tHashInput_tUnite_12_row46.C_DIMCODE = LOINC_FolderLeaf.C_DIMCODE;
								tHashInput_tUnite_12_row46.C_COMMENT = LOINC_FolderLeaf.C_COMMENT;
								tHashInput_tUnite_12_row46.C_TOOLTIP = LOINC_FolderLeaf.C_TOOLTIP;
								tHashInput_tUnite_12_row46.M_APPLIED_PATH = LOINC_FolderLeaf.M_APPLIED_PATH;
								tHashInput_tUnite_12_row46.UPDATE_DATE = LOINC_FolderLeaf.UPDATE_DATE;
								tHashInput_tUnite_12_row46.DOWNLOAD_DATE = LOINC_FolderLeaf.DOWNLOAD_DATE;
								tHashInput_tUnite_12_row46.IMPORT_DATE = LOINC_FolderLeaf.IMPORT_DATE;
								tHashInput_tUnite_12_row46.SOURCESYSTEM_CD = LOINC_FolderLeaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_12_row46.VALUETYPE_CD = LOINC_FolderLeaf.VALUETYPE_CD;
								tHashInput_tUnite_12_row46.M_EXCLUSION_CD = LOINC_FolderLeaf.M_EXCLUSION_CD;
								tHashInput_tUnite_12_row46.C_PATH = LOINC_FolderLeaf.C_PATH;
								tHashInput_tUnite_12_row46.C_SYMBOL = LOINC_FolderLeaf.C_SYMBOL;

								nb_line_tUnite_12++;

								// ////////

								tos_count_tUnite_12++;

								/**
								 * [tUnite_12 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_12 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_12";

								tHashInput_tUnite_12_row46Struct oneRow_tHashOutput_tUnite_12 = new tHashInput_tUnite_12_row46Struct();

								oneRow_tHashOutput_tUnite_12.C_HLEVEL = tHashInput_tUnite_12_row46.C_HLEVEL;
								oneRow_tHashOutput_tUnite_12.C_FULLNAME = tHashInput_tUnite_12_row46.C_FULLNAME;
								oneRow_tHashOutput_tUnite_12.C_NAME = tHashInput_tUnite_12_row46.C_NAME;
								oneRow_tHashOutput_tUnite_12.C_SYNONYM_CD = tHashInput_tUnite_12_row46.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_12.C_VISUALATTRIBUTES = tHashInput_tUnite_12_row46.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_12.C_TOTALNUM = tHashInput_tUnite_12_row46.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_12.C_BASECODE = tHashInput_tUnite_12_row46.C_BASECODE;
								oneRow_tHashOutput_tUnite_12.C_METADATAXML = tHashInput_tUnite_12_row46.C_METADATAXML;
								oneRow_tHashOutput_tUnite_12.C_FACTTABLECOLUMN = tHashInput_tUnite_12_row46.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_12.C_TABLENAME = tHashInput_tUnite_12_row46.C_TABLENAME;
								oneRow_tHashOutput_tUnite_12.C_COLUMNNAME = tHashInput_tUnite_12_row46.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_12.C_COLUMNDATATYPE = tHashInput_tUnite_12_row46.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_12.C_OPERATOR = tHashInput_tUnite_12_row46.C_OPERATOR;
								oneRow_tHashOutput_tUnite_12.C_DIMCODE = tHashInput_tUnite_12_row46.C_DIMCODE;
								oneRow_tHashOutput_tUnite_12.C_COMMENT = tHashInput_tUnite_12_row46.C_COMMENT;
								oneRow_tHashOutput_tUnite_12.C_TOOLTIP = tHashInput_tUnite_12_row46.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_12.M_APPLIED_PATH = tHashInput_tUnite_12_row46.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_12.UPDATE_DATE = tHashInput_tUnite_12_row46.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_12.DOWNLOAD_DATE = tHashInput_tUnite_12_row46.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_12.IMPORT_DATE = tHashInput_tUnite_12_row46.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_12.SOURCESYSTEM_CD = tHashInput_tUnite_12_row46.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_12.VALUETYPE_CD = tHashInput_tUnite_12_row46.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_12.M_EXCLUSION_CD = tHashInput_tUnite_12_row46.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_12.C_PATH = tHashInput_tUnite_12_row46.C_PATH;
								oneRow_tHashOutput_tUnite_12.C_SYMBOL = tHashInput_tUnite_12_row46.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_12
										.put(oneRow_tHashOutput_tUnite_12);
								nb_line_tHashOutput_tUnite_12++;

								tos_count_tHashOutput_tUnite_12++;

								/**
								 * [tHashOutput_tUnite_12 main ] stop
								 */

							} // End of branch "LOINC_FolderLeaf"

						} // End of branch "row20"

						/**
						 * [tFileInputDelimited_24 end ] start
						 */

						currentComponent = "tFileInputDelimited_24";

						nb_line_tFileInputDelimited_24++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_24 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_24 != null) {
							csvReadertFileInputDelimited_24.close();
						}
					}
					if (csvReadertFileInputDelimited_24 != null) {
						globalMap.put("tFileInputDelimited_24_NB_LINE",
								nb_line_tFileInputDelimited_24);
					}
				}

				ok_Hash.put("tFileInputDelimited_24", true);
				end_Hash.put("tFileInputDelimited_24",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_24 end ] stop
				 */

				/**
				 * [tMap_20 end ] start
				 */

				currentComponent = "tMap_20";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row21 != null) {
					tHash_Lookup_row21.endGet();
				}
				globalMap.remove("tHash_Lookup_row21");

				// ###############################

				ok_Hash.put("tMap_20", true);
				end_Hash.put("tMap_20", System.currentTimeMillis());

				/**
				 * [tMap_20 end ] stop
				 */

				/**
				 * [tUnite_12 end ] start
				 */

				currentComponent = "tUnite_12";

				globalMap.put("tUnite_12_NB_LINE", nb_line_tUnite_12);

				ok_Hash.put("tUnite_12", true);
				end_Hash.put("tUnite_12", System.currentTimeMillis());

				/**
				 * [tUnite_12 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_12 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_12";

				globalMap.put("tHashOutput_tUnite_12_NB_LINE",
						nb_line_tHashOutput_tUnite_12);

				ok_Hash.put("tHashOutput_tUnite_12", true);
				end_Hash.put("tHashOutput_tUnite_12",
						System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_20"
			globalMap.remove("tHash_Lookup_row21");

		}

		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableComparableLookupRow<row21Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String LOINC_NUM;

		public String getLOINC_NUM() {
			return this.LOINC_NUM;
		}

		public String COMPONENT;

		public String getCOMPONENT() {
			return this.COMPONENT;
		}

		public String PROPERTY;

		public String getPROPERTY() {
			return this.PROPERTY;
		}

		public String TIME_ASPCT;

		public String getTIME_ASPCT() {
			return this.TIME_ASPCT;
		}

		public String SYSTEM;

		public String getSYSTEM() {
			return this.SYSTEM;
		}

		public String SCALE_TYP;

		public String getSCALE_TYP() {
			return this.SCALE_TYP;
		}

		public String METHOD_TYP;

		public String getMETHOD_TYP() {
			return this.METHOD_TYP;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public Integer DATE_LAST_CHANGED;

		public Integer getDATE_LAST_CHANGED() {
			return this.DATE_LAST_CHANGED;
		}

		public String CHNG_TYPE;

		public String getCHNG_TYPE() {
			return this.CHNG_TYPE;
		}

		public String COMMENTS;

		public String getCOMMENTS() {
			return this.COMMENTS;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public String MAP_TO;

		public String getMAP_TO() {
			return this.MAP_TO;
		}

		public String CONSUMER_NAME;

		public String getCONSUMER_NAME() {
			return this.CONSUMER_NAME;
		}

		public String MOLAR_MASS;

		public String getMOLAR_MASS() {
			return this.MOLAR_MASS;
		}

		public Integer CLASSTYPE;

		public Integer getCLASSTYPE() {
			return this.CLASSTYPE;
		}

		public String FORMULA;

		public String getFORMULA() {
			return this.FORMULA;
		}

		public String SPECIES;

		public String getSPECIES() {
			return this.SPECIES;
		}

		public String EXMPL_ANSWERS;

		public String getEXMPL_ANSWERS() {
			return this.EXMPL_ANSWERS;
		}

		public String ACSSYM;

		public String getACSSYM() {
			return this.ACSSYM;
		}

		public String BASE_NAME;

		public String getBASE_NAME() {
			return this.BASE_NAME;
		}

		public String NAACCR_ID;

		public String getNAACCR_ID() {
			return this.NAACCR_ID;
		}

		public String CODE_TABLE;

		public String getCODE_TABLE() {
			return this.CODE_TABLE;
		}

		public String SURVEY_QUEST_TEXT;

		public String getSURVEY_QUEST_TEXT() {
			return this.SURVEY_QUEST_TEXT;
		}

		public String SURVEY_QUEST_SRC;

		public String getSURVEY_QUEST_SRC() {
			return this.SURVEY_QUEST_SRC;
		}

		public String UNITSREQUIRED;

		public String getUNITSREQUIRED() {
			return this.UNITSREQUIRED;
		}

		public String SUBMITTED_UNITS;

		public String getSUBMITTED_UNITS() {
			return this.SUBMITTED_UNITS;
		}

		public String RELATEDNAMES2;

		public String getRELATEDNAMES2() {
			return this.RELATEDNAMES2;
		}

		public String SHORTNAME;

		public String getSHORTNAME() {
			return this.SHORTNAME;
		}

		public String ORDER_OBS;

		public String getORDER_OBS() {
			return this.ORDER_OBS;
		}

		public String CDISC_COMMON_TESTS;

		public String getCDISC_COMMON_TESTS() {
			return this.CDISC_COMMON_TESTS;
		}

		public String HL7_FIELD_SUBFIELD_ID;

		public String getHL7_FIELD_SUBFIELD_ID() {
			return this.HL7_FIELD_SUBFIELD_ID;
		}

		public String EXTERNAL_COPYRIGHT_NOTICE;

		public String getEXTERNAL_COPYRIGHT_NOTICE() {
			return this.EXTERNAL_COPYRIGHT_NOTICE;
		}

		public String EXAMPLE_UNITS;

		public String getEXAMPLE_UNITS() {
			return this.EXAMPLE_UNITS;
		}

		public String LONG_COMMON_NAME;

		public String getLONG_COMMON_NAME() {
			return this.LONG_COMMON_NAME;
		}

		public String HL7_V2_DATATYPE;

		public String getHL7_V2_DATATYPE() {
			return this.HL7_V2_DATATYPE;
		}

		public String HL7_V3_DATATYPE;

		public String getHL7_V3_DATATYPE() {
			return this.HL7_V3_DATATYPE;
		}

		public String CURATED_RANGE_AND_UNITS;

		public String getCURATED_RANGE_AND_UNITS() {
			return this.CURATED_RANGE_AND_UNITS;
		}

		public String DOCUMENT_SECTION;

		public String getDOCUMENT_SECTION() {
			return this.DOCUMENT_SECTION;
		}

		public String EXAMPLE_UCUM_UNITS;

		public String getEXAMPLE_UCUM_UNITS() {
			return this.EXAMPLE_UCUM_UNITS;
		}

		public String EXAMPLE_SI_UCUM_UNITS;

		public String getEXAMPLE_SI_UCUM_UNITS() {
			return this.EXAMPLE_SI_UCUM_UNITS;
		}

		public String STATUS_REASON;

		public String getSTATUS_REASON() {
			return this.STATUS_REASON;
		}

		public String STATUS_TEXT;

		public String getSTATUS_TEXT() {
			return this.STATUS_TEXT;
		}

		public String CHANGE_REASON_PUBLIC;

		public String getCHANGE_REASON_PUBLIC() {
			return this.CHANGE_REASON_PUBLIC;
		}

		public Integer COMMON_TEST_RANK;

		public Integer getCOMMON_TEST_RANK() {
			return this.COMMON_TEST_RANK;
		}

		public Integer COMMON_ORDER_RANK;

		public Integer getCOMMON_ORDER_RANK() {
			return this.COMMON_ORDER_RANK;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.LOINC_NUM == null) ? 0 : this.LOINC_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.LOINC_NUM == null) {
				if (other.LOINC_NUM != null)
					return false;
			} else if (!this.LOINC_NUM.equals(other.LOINC_NUM))
				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.LOINC_NUM = this.LOINC_NUM;
			other.COMPONENT = this.COMPONENT;
			other.PROPERTY = this.PROPERTY;
			other.TIME_ASPCT = this.TIME_ASPCT;
			other.SYSTEM = this.SYSTEM;
			other.SCALE_TYP = this.SCALE_TYP;
			other.METHOD_TYP = this.METHOD_TYP;
			other.Column7 = this.Column7;
			other.SOURCE = this.SOURCE;
			other.DATE_LAST_CHANGED = this.DATE_LAST_CHANGED;
			other.CHNG_TYPE = this.CHNG_TYPE;
			other.COMMENTS = this.COMMENTS;
			other.STATUS = this.STATUS;
			other.MAP_TO = this.MAP_TO;
			other.CONSUMER_NAME = this.CONSUMER_NAME;
			other.MOLAR_MASS = this.MOLAR_MASS;
			other.CLASSTYPE = this.CLASSTYPE;
			other.FORMULA = this.FORMULA;
			other.SPECIES = this.SPECIES;
			other.EXMPL_ANSWERS = this.EXMPL_ANSWERS;
			other.ACSSYM = this.ACSSYM;
			other.BASE_NAME = this.BASE_NAME;
			other.NAACCR_ID = this.NAACCR_ID;
			other.CODE_TABLE = this.CODE_TABLE;
			other.SURVEY_QUEST_TEXT = this.SURVEY_QUEST_TEXT;
			other.SURVEY_QUEST_SRC = this.SURVEY_QUEST_SRC;
			other.UNITSREQUIRED = this.UNITSREQUIRED;
			other.SUBMITTED_UNITS = this.SUBMITTED_UNITS;
			other.RELATEDNAMES2 = this.RELATEDNAMES2;
			other.SHORTNAME = this.SHORTNAME;
			other.ORDER_OBS = this.ORDER_OBS;
			other.CDISC_COMMON_TESTS = this.CDISC_COMMON_TESTS;
			other.HL7_FIELD_SUBFIELD_ID = this.HL7_FIELD_SUBFIELD_ID;
			other.EXTERNAL_COPYRIGHT_NOTICE = this.EXTERNAL_COPYRIGHT_NOTICE;
			other.EXAMPLE_UNITS = this.EXAMPLE_UNITS;
			other.LONG_COMMON_NAME = this.LONG_COMMON_NAME;
			other.HL7_V2_DATATYPE = this.HL7_V2_DATATYPE;
			other.HL7_V3_DATATYPE = this.HL7_V3_DATATYPE;
			other.CURATED_RANGE_AND_UNITS = this.CURATED_RANGE_AND_UNITS;
			other.DOCUMENT_SECTION = this.DOCUMENT_SECTION;
			other.EXAMPLE_UCUM_UNITS = this.EXAMPLE_UCUM_UNITS;
			other.EXAMPLE_SI_UCUM_UNITS = this.EXAMPLE_SI_UCUM_UNITS;
			other.STATUS_REASON = this.STATUS_REASON;
			other.STATUS_TEXT = this.STATUS_TEXT;
			other.CHANGE_REASON_PUBLIC = this.CHANGE_REASON_PUBLIC;
			other.COMMON_TEST_RANK = this.COMMON_TEST_RANK;
			other.COMMON_ORDER_RANK = this.COMMON_ORDER_RANK;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.LOINC_NUM = this.LOINC_NUM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.LOINC_NUM = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.LOINC_NUM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.COMPONENT = readString(dis, ois);

				this.PROPERTY = readString(dis, ois);

				this.TIME_ASPCT = readString(dis, ois);

				this.SYSTEM = readString(dis, ois);

				this.SCALE_TYP = readString(dis, ois);

				this.METHOD_TYP = readString(dis, ois);

				this.Column7 = readString(dis, ois);

				this.SOURCE = readString(dis, ois);

				this.DATE_LAST_CHANGED = readInteger(dis, ois);

				this.CHNG_TYPE = readString(dis, ois);

				this.COMMENTS = readString(dis, ois);

				this.STATUS = readString(dis, ois);

				this.MAP_TO = readString(dis, ois);

				this.CONSUMER_NAME = readString(dis, ois);

				this.MOLAR_MASS = readString(dis, ois);

				this.CLASSTYPE = readInteger(dis, ois);

				this.FORMULA = readString(dis, ois);

				this.SPECIES = readString(dis, ois);

				this.EXMPL_ANSWERS = readString(dis, ois);

				this.ACSSYM = readString(dis, ois);

				this.BASE_NAME = readString(dis, ois);

				this.NAACCR_ID = readString(dis, ois);

				this.CODE_TABLE = readString(dis, ois);

				this.SURVEY_QUEST_TEXT = readString(dis, ois);

				this.SURVEY_QUEST_SRC = readString(dis, ois);

				this.UNITSREQUIRED = readString(dis, ois);

				this.SUBMITTED_UNITS = readString(dis, ois);

				this.RELATEDNAMES2 = readString(dis, ois);

				this.SHORTNAME = readString(dis, ois);

				this.ORDER_OBS = readString(dis, ois);

				this.CDISC_COMMON_TESTS = readString(dis, ois);

				this.HL7_FIELD_SUBFIELD_ID = readString(dis, ois);

				this.EXTERNAL_COPYRIGHT_NOTICE = readString(dis, ois);

				this.EXAMPLE_UNITS = readString(dis, ois);

				this.LONG_COMMON_NAME = readString(dis, ois);

				this.HL7_V2_DATATYPE = readString(dis, ois);

				this.HL7_V3_DATATYPE = readString(dis, ois);

				this.CURATED_RANGE_AND_UNITS = readString(dis, ois);

				this.DOCUMENT_SECTION = readString(dis, ois);

				this.EXAMPLE_UCUM_UNITS = readString(dis, ois);

				this.EXAMPLE_SI_UCUM_UNITS = readString(dis, ois);

				this.STATUS_REASON = readString(dis, ois);

				this.STATUS_TEXT = readString(dis, ois);

				this.CHANGE_REASON_PUBLIC = readString(dis, ois);

				this.COMMON_TEST_RANK = readInteger(dis, ois);

				this.COMMON_ORDER_RANK = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.COMPONENT, dos, oos);

				writeString(this.PROPERTY, dos, oos);

				writeString(this.TIME_ASPCT, dos, oos);

				writeString(this.SYSTEM, dos, oos);

				writeString(this.SCALE_TYP, dos, oos);

				writeString(this.METHOD_TYP, dos, oos);

				writeString(this.Column7, dos, oos);

				writeString(this.SOURCE, dos, oos);

				writeInteger(this.DATE_LAST_CHANGED, dos, oos);

				writeString(this.CHNG_TYPE, dos, oos);

				writeString(this.COMMENTS, dos, oos);

				writeString(this.STATUS, dos, oos);

				writeString(this.MAP_TO, dos, oos);

				writeString(this.CONSUMER_NAME, dos, oos);

				writeString(this.MOLAR_MASS, dos, oos);

				writeInteger(this.CLASSTYPE, dos, oos);

				writeString(this.FORMULA, dos, oos);

				writeString(this.SPECIES, dos, oos);

				writeString(this.EXMPL_ANSWERS, dos, oos);

				writeString(this.ACSSYM, dos, oos);

				writeString(this.BASE_NAME, dos, oos);

				writeString(this.NAACCR_ID, dos, oos);

				writeString(this.CODE_TABLE, dos, oos);

				writeString(this.SURVEY_QUEST_TEXT, dos, oos);

				writeString(this.SURVEY_QUEST_SRC, dos, oos);

				writeString(this.UNITSREQUIRED, dos, oos);

				writeString(this.SUBMITTED_UNITS, dos, oos);

				writeString(this.RELATEDNAMES2, dos, oos);

				writeString(this.SHORTNAME, dos, oos);

				writeString(this.ORDER_OBS, dos, oos);

				writeString(this.CDISC_COMMON_TESTS, dos, oos);

				writeString(this.HL7_FIELD_SUBFIELD_ID, dos, oos);

				writeString(this.EXTERNAL_COPYRIGHT_NOTICE, dos, oos);

				writeString(this.EXAMPLE_UNITS, dos, oos);

				writeString(this.LONG_COMMON_NAME, dos, oos);

				writeString(this.HL7_V2_DATATYPE, dos, oos);

				writeString(this.HL7_V3_DATATYPE, dos, oos);

				writeString(this.CURATED_RANGE_AND_UNITS, dos, oos);

				writeString(this.DOCUMENT_SECTION, dos, oos);

				writeString(this.EXAMPLE_UCUM_UNITS, dos, oos);

				writeString(this.EXAMPLE_SI_UCUM_UNITS, dos, oos);

				writeString(this.STATUS_REASON, dos, oos);

				writeString(this.STATUS_TEXT, dos, oos);

				writeString(this.CHANGE_REASON_PUBLIC, dos, oos);

				writeInteger(this.COMMON_TEST_RANK, dos, oos);

				writeInteger(this.COMMON_ORDER_RANK, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOINC_NUM=" + LOINC_NUM);
			sb.append(",COMPONENT=" + COMPONENT);
			sb.append(",PROPERTY=" + PROPERTY);
			sb.append(",TIME_ASPCT=" + TIME_ASPCT);
			sb.append(",SYSTEM=" + SYSTEM);
			sb.append(",SCALE_TYP=" + SCALE_TYP);
			sb.append(",METHOD_TYP=" + METHOD_TYP);
			sb.append(",Column7=" + Column7);
			sb.append(",SOURCE=" + SOURCE);
			sb.append(",DATE_LAST_CHANGED=" + String.valueOf(DATE_LAST_CHANGED));
			sb.append(",CHNG_TYPE=" + CHNG_TYPE);
			sb.append(",COMMENTS=" + COMMENTS);
			sb.append(",STATUS=" + STATUS);
			sb.append(",MAP_TO=" + MAP_TO);
			sb.append(",CONSUMER_NAME=" + CONSUMER_NAME);
			sb.append(",MOLAR_MASS=" + MOLAR_MASS);
			sb.append(",CLASSTYPE=" + String.valueOf(CLASSTYPE));
			sb.append(",FORMULA=" + FORMULA);
			sb.append(",SPECIES=" + SPECIES);
			sb.append(",EXMPL_ANSWERS=" + EXMPL_ANSWERS);
			sb.append(",ACSSYM=" + ACSSYM);
			sb.append(",BASE_NAME=" + BASE_NAME);
			sb.append(",NAACCR_ID=" + NAACCR_ID);
			sb.append(",CODE_TABLE=" + CODE_TABLE);
			sb.append(",SURVEY_QUEST_TEXT=" + SURVEY_QUEST_TEXT);
			sb.append(",SURVEY_QUEST_SRC=" + SURVEY_QUEST_SRC);
			sb.append(",UNITSREQUIRED=" + UNITSREQUIRED);
			sb.append(",SUBMITTED_UNITS=" + SUBMITTED_UNITS);
			sb.append(",RELATEDNAMES2=" + RELATEDNAMES2);
			sb.append(",SHORTNAME=" + SHORTNAME);
			sb.append(",ORDER_OBS=" + ORDER_OBS);
			sb.append(",CDISC_COMMON_TESTS=" + CDISC_COMMON_TESTS);
			sb.append(",HL7_FIELD_SUBFIELD_ID=" + HL7_FIELD_SUBFIELD_ID);
			sb.append(",EXTERNAL_COPYRIGHT_NOTICE=" + EXTERNAL_COPYRIGHT_NOTICE);
			sb.append(",EXAMPLE_UNITS=" + EXAMPLE_UNITS);
			sb.append(",LONG_COMMON_NAME=" + LONG_COMMON_NAME);
			sb.append(",HL7_V2_DATATYPE=" + HL7_V2_DATATYPE);
			sb.append(",HL7_V3_DATATYPE=" + HL7_V3_DATATYPE);
			sb.append(",CURATED_RANGE_AND_UNITS=" + CURATED_RANGE_AND_UNITS);
			sb.append(",DOCUMENT_SECTION=" + DOCUMENT_SECTION);
			sb.append(",EXAMPLE_UCUM_UNITS=" + EXAMPLE_UCUM_UNITS);
			sb.append(",EXAMPLE_SI_UCUM_UNITS=" + EXAMPLE_SI_UCUM_UNITS);
			sb.append(",STATUS_REASON=" + STATUS_REASON);
			sb.append(",STATUS_TEXT=" + STATUS_TEXT);
			sb.append(",CHANGE_REASON_PUBLIC=" + CHANGE_REASON_PUBLIC);
			sb.append(",COMMON_TEST_RANK=" + String.valueOf(COMMON_TEST_RANK));
			sb.append(",COMMON_ORDER_RANK=" + String.valueOf(COMMON_ORDER_RANK));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOINC_NUM, other.LOINC_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_22Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tAdvancedHash_row21 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row21", false);
				start_Hash.put("tAdvancedHash_row21",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row21";

				int tos_count_tAdvancedHash_row21 = 0;

				// connection name:row21
				// source node:tFileInputDelimited_22 -
				// inputs:(after_tFileInputDelimited_24) outputs:(row21,row21) |
				// target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
				// linked node: tMap_20 - inputs:(row20,row21)
				// outputs:(LOINC_FolderLeaf)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row21Struct> getLookup(matchingModeEnum_row21);

				globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);

				/**
				 * [tAdvancedHash_row21 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_22 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_22", false);
				start_Hash.put("tFileInputDelimited_22",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_22";

				int tos_count_tFileInputDelimited_22 = 0;

				int nb_line_tFileInputDelimited_22 = 0;
				int footer_tFileInputDelimited_22 = 0;
				int totalLinetFileInputDelimited_22 = 0;
				int limittFileInputDelimited_22 = -1;
				int lastLinetFileInputDelimited_22 = -1;

				char fieldSeparator_tFileInputDelimited_22[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_22 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_22[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_22 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_22 = /**
				 * Start field
				 * tFileInputDelimited_22:FILENAME
				 */
				context.loincDir + "LOINCDB.TXT"/**
				 * End field
				 * tFileInputDelimited_22:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_22 = null;

				try {

					String[] rowtFileInputDelimited_22 = null;
					int currentLinetFileInputDelimited_22 = 0;
					int outputLinetFileInputDelimited_22 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_22 = 0;
							if (footer_value_tFileInputDelimited_22 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_22,
									fieldSeparator_tFileInputDelimited_22[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_22)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_22[0]);
						}

						csvReadertFileInputDelimited_22
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_22[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_22[0] != '\r'))
							csvReadertFileInputDelimited_22.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_22[0]);

						csvReadertFileInputDelimited_22.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_22
								.setEscapeChar(csvReadertFileInputDelimited_22
										.getQuoteChar());

						if (footer_tFileInputDelimited_22 > 0) {
							for (totalLinetFileInputDelimited_22 = 0; totalLinetFileInputDelimited_22 < 1; totalLinetFileInputDelimited_22++) {
								csvReadertFileInputDelimited_22.readNext();
							}
							csvReadertFileInputDelimited_22
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_22.readNext()) {

								rowtFileInputDelimited_22 = csvReadertFileInputDelimited_22
										.getValues();
								if (!(rowtFileInputDelimited_22.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_22[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_22++;

								}

							}
							int lastLineTemptFileInputDelimited_22 = totalLinetFileInputDelimited_22
									- footer_tFileInputDelimited_22 < 0 ? 0
									: totalLinetFileInputDelimited_22
											- footer_tFileInputDelimited_22;
							if (lastLinetFileInputDelimited_22 > 0) {
								lastLinetFileInputDelimited_22 = lastLinetFileInputDelimited_22 < lastLineTemptFileInputDelimited_22 ? lastLinetFileInputDelimited_22
										: lastLineTemptFileInputDelimited_22;
							} else {
								lastLinetFileInputDelimited_22 = lastLineTemptFileInputDelimited_22;
							}

							csvReadertFileInputDelimited_22.close();
							if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_22,
										fieldSeparator_tFileInputDelimited_22[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_22)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_22[0]);
							}
							csvReadertFileInputDelimited_22
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_22[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_22[0] != '\r'))
								csvReadertFileInputDelimited_22
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_22[0]);

							csvReadertFileInputDelimited_22.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_22
									.setEscapeChar(csvReadertFileInputDelimited_22
											.getQuoteChar());

						}

						if (limittFileInputDelimited_22 != 0) {
							for (currentLinetFileInputDelimited_22 = 0; currentLinetFileInputDelimited_22 < 1; currentLinetFileInputDelimited_22++) {
								csvReadertFileInputDelimited_22.readNext();
							}
						}
						csvReadertFileInputDelimited_22
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_22 != 0
							&& csvReadertFileInputDelimited_22 != null
							&& csvReadertFileInputDelimited_22.readNext()) {

						rowtFileInputDelimited_22 = csvReadertFileInputDelimited_22
								.getValues();

						if (rowtFileInputDelimited_22.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_22[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_22++;

						if (lastLinetFileInputDelimited_22 > -1
								&& currentLinetFileInputDelimited_22 > lastLinetFileInputDelimited_22) {
							break;
						}
						outputLinetFileInputDelimited_22++;
						if (limittFileInputDelimited_22 > 0
								&& outputLinetFileInputDelimited_22 > limittFileInputDelimited_22) {
							break;
						}

						row21 = null;

						row21 = null;

						boolean whetherReject_tFileInputDelimited_22 = false;
						row21 = new row21Struct();
						try {

							if (rowtFileInputDelimited_22.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_22[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row21.LOINC_NUM = null;

								row21.COMPONENT = null;

								row21.PROPERTY = null;

								row21.TIME_ASPCT = null;

								row21.SYSTEM = null;

								row21.SCALE_TYP = null;

								row21.METHOD_TYP = null;

								row21.Column7 = null;

								row21.SOURCE = null;

								row21.DATE_LAST_CHANGED = null;

								row21.CHNG_TYPE = null;

								row21.COMMENTS = null;

								row21.STATUS = null;

								row21.MAP_TO = null;

								row21.CONSUMER_NAME = null;

								row21.MOLAR_MASS = null;

								row21.CLASSTYPE = null;

								row21.FORMULA = null;

								row21.SPECIES = null;

								row21.EXMPL_ANSWERS = null;

								row21.ACSSYM = null;

								row21.BASE_NAME = null;

								row21.NAACCR_ID = null;

								row21.CODE_TABLE = null;

								row21.SURVEY_QUEST_TEXT = null;

								row21.SURVEY_QUEST_SRC = null;

								row21.UNITSREQUIRED = null;

								row21.SUBMITTED_UNITS = null;

								row21.RELATEDNAMES2 = null;

								row21.SHORTNAME = null;

								row21.ORDER_OBS = null;

								row21.CDISC_COMMON_TESTS = null;

								row21.HL7_FIELD_SUBFIELD_ID = null;

								row21.EXTERNAL_COPYRIGHT_NOTICE = null;

								row21.EXAMPLE_UNITS = null;

								row21.LONG_COMMON_NAME = null;

								row21.HL7_V2_DATATYPE = null;

								row21.HL7_V3_DATATYPE = null;

								row21.CURATED_RANGE_AND_UNITS = null;

								row21.DOCUMENT_SECTION = null;

								row21.EXAMPLE_UCUM_UNITS = null;

								row21.EXAMPLE_SI_UCUM_UNITS = null;

								row21.STATUS_REASON = null;

								row21.STATUS_TEXT = null;

								row21.CHANGE_REASON_PUBLIC = null;

								row21.COMMON_TEST_RANK = null;

								row21.COMMON_ORDER_RANK = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_22 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_22 = 0;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.LOINC_NUM = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.LOINC_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 1;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.COMPONENT = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.COMPONENT = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 2;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.PROPERTY = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.PROPERTY = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 3;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.TIME_ASPCT = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.TIME_ASPCT = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 4;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SYSTEM = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SYSTEM = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 5;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SCALE_TYP = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SCALE_TYP = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 6;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.METHOD_TYP = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.METHOD_TYP = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 7;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.Column7 = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.Column7 = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 8;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SOURCE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 9;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row21.DATE_LAST_CHANGED = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]);

									} else {
										row21.DATE_LAST_CHANGED = null;
									}

								} else {
									row21.DATE_LAST_CHANGED = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 10;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.CHNG_TYPE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.CHNG_TYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 11;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.COMMENTS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.COMMENTS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 12;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.STATUS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 13;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.MAP_TO = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.MAP_TO = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 14;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.CONSUMER_NAME = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.CONSUMER_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 15;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.MOLAR_MASS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.MOLAR_MASS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 16;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row21.CLASSTYPE = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]);

									} else {
										row21.CLASSTYPE = null;
									}

								} else {
									row21.CLASSTYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 17;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.FORMULA = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.FORMULA = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 18;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SPECIES = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SPECIES = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 19;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.EXMPL_ANSWERS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.EXMPL_ANSWERS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 20;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.ACSSYM = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.ACSSYM = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 21;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.BASE_NAME = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.BASE_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 22;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.NAACCR_ID = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.NAACCR_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 23;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.CODE_TABLE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.CODE_TABLE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 24;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SURVEY_QUEST_TEXT = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SURVEY_QUEST_TEXT = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 25;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SURVEY_QUEST_SRC = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SURVEY_QUEST_SRC = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 26;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.UNITSREQUIRED = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.UNITSREQUIRED = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 27;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SUBMITTED_UNITS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SUBMITTED_UNITS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 28;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.RELATEDNAMES2 = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.RELATEDNAMES2 = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 29;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.SHORTNAME = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.SHORTNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 30;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.ORDER_OBS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.ORDER_OBS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 31;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.CDISC_COMMON_TESTS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.CDISC_COMMON_TESTS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 32;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.HL7_FIELD_SUBFIELD_ID = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.HL7_FIELD_SUBFIELD_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 33;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.EXTERNAL_COPYRIGHT_NOTICE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.EXTERNAL_COPYRIGHT_NOTICE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 34;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.EXAMPLE_UNITS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.EXAMPLE_UNITS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 35;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.LONG_COMMON_NAME = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.LONG_COMMON_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 36;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.HL7_V2_DATATYPE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.HL7_V2_DATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 37;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.HL7_V3_DATATYPE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.HL7_V3_DATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 38;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.CURATED_RANGE_AND_UNITS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.CURATED_RANGE_AND_UNITS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 39;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.DOCUMENT_SECTION = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.DOCUMENT_SECTION = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 40;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.EXAMPLE_UCUM_UNITS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.EXAMPLE_UCUM_UNITS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 41;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.EXAMPLE_SI_UCUM_UNITS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.EXAMPLE_SI_UCUM_UNITS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 42;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.STATUS_REASON = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.STATUS_REASON = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 43;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.STATUS_TEXT = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.STATUS_TEXT = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 44;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row21.CHANGE_REASON_PUBLIC = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row21.CHANGE_REASON_PUBLIC = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 45;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row21.COMMON_TEST_RANK = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]);

									} else {
										row21.COMMON_TEST_RANK = null;
									}

								} else {
									row21.COMMON_TEST_RANK = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 46;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row21.COMMON_ORDER_RANK = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]);

									} else {
										row21.COMMON_ORDER_RANK = null;
									}

								} else {
									row21.COMMON_ORDER_RANK = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_22 = true;

							System.err.println(e.getMessage());
							row21 = null;

						}

						/**
						 * [tFileInputDelimited_22 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_22 main ] start
						 */

						currentComponent = "tFileInputDelimited_22";

						tos_count_tFileInputDelimited_22++;

						/**
						 * [tFileInputDelimited_22 main ] stop
						 */
						// Start of branch "row21"
						if (row21 != null) {

							/**
							 * [tAdvancedHash_row21 main ] start
							 */

							currentComponent = "tAdvancedHash_row21";

							row21Struct row21_HashRow = new row21Struct();

							row21_HashRow.LOINC_NUM = row21.LOINC_NUM;

							row21_HashRow.COMPONENT = row21.COMPONENT;

							row21_HashRow.PROPERTY = row21.PROPERTY;

							row21_HashRow.TIME_ASPCT = row21.TIME_ASPCT;

							row21_HashRow.SYSTEM = row21.SYSTEM;

							row21_HashRow.SCALE_TYP = row21.SCALE_TYP;

							row21_HashRow.METHOD_TYP = row21.METHOD_TYP;

							row21_HashRow.Column7 = row21.Column7;

							row21_HashRow.SOURCE = row21.SOURCE;

							row21_HashRow.DATE_LAST_CHANGED = row21.DATE_LAST_CHANGED;

							row21_HashRow.CHNG_TYPE = row21.CHNG_TYPE;

							row21_HashRow.COMMENTS = row21.COMMENTS;

							row21_HashRow.STATUS = row21.STATUS;

							row21_HashRow.MAP_TO = row21.MAP_TO;

							row21_HashRow.CONSUMER_NAME = row21.CONSUMER_NAME;

							row21_HashRow.MOLAR_MASS = row21.MOLAR_MASS;

							row21_HashRow.CLASSTYPE = row21.CLASSTYPE;

							row21_HashRow.FORMULA = row21.FORMULA;

							row21_HashRow.SPECIES = row21.SPECIES;

							row21_HashRow.EXMPL_ANSWERS = row21.EXMPL_ANSWERS;

							row21_HashRow.ACSSYM = row21.ACSSYM;

							row21_HashRow.BASE_NAME = row21.BASE_NAME;

							row21_HashRow.NAACCR_ID = row21.NAACCR_ID;

							row21_HashRow.CODE_TABLE = row21.CODE_TABLE;

							row21_HashRow.SURVEY_QUEST_TEXT = row21.SURVEY_QUEST_TEXT;

							row21_HashRow.SURVEY_QUEST_SRC = row21.SURVEY_QUEST_SRC;

							row21_HashRow.UNITSREQUIRED = row21.UNITSREQUIRED;

							row21_HashRow.SUBMITTED_UNITS = row21.SUBMITTED_UNITS;

							row21_HashRow.RELATEDNAMES2 = row21.RELATEDNAMES2;

							row21_HashRow.SHORTNAME = row21.SHORTNAME;

							row21_HashRow.ORDER_OBS = row21.ORDER_OBS;

							row21_HashRow.CDISC_COMMON_TESTS = row21.CDISC_COMMON_TESTS;

							row21_HashRow.HL7_FIELD_SUBFIELD_ID = row21.HL7_FIELD_SUBFIELD_ID;

							row21_HashRow.EXTERNAL_COPYRIGHT_NOTICE = row21.EXTERNAL_COPYRIGHT_NOTICE;

							row21_HashRow.EXAMPLE_UNITS = row21.EXAMPLE_UNITS;

							row21_HashRow.LONG_COMMON_NAME = row21.LONG_COMMON_NAME;

							row21_HashRow.HL7_V2_DATATYPE = row21.HL7_V2_DATATYPE;

							row21_HashRow.HL7_V3_DATATYPE = row21.HL7_V3_DATATYPE;

							row21_HashRow.CURATED_RANGE_AND_UNITS = row21.CURATED_RANGE_AND_UNITS;

							row21_HashRow.DOCUMENT_SECTION = row21.DOCUMENT_SECTION;

							row21_HashRow.EXAMPLE_UCUM_UNITS = row21.EXAMPLE_UCUM_UNITS;

							row21_HashRow.EXAMPLE_SI_UCUM_UNITS = row21.EXAMPLE_SI_UCUM_UNITS;

							row21_HashRow.STATUS_REASON = row21.STATUS_REASON;

							row21_HashRow.STATUS_TEXT = row21.STATUS_TEXT;

							row21_HashRow.CHANGE_REASON_PUBLIC = row21.CHANGE_REASON_PUBLIC;

							row21_HashRow.COMMON_TEST_RANK = row21.COMMON_TEST_RANK;

							row21_HashRow.COMMON_ORDER_RANK = row21.COMMON_ORDER_RANK;

							tHash_Lookup_row21.put(row21_HashRow);

							tos_count_tAdvancedHash_row21++;

							/**
							 * [tAdvancedHash_row21 main ] stop
							 */

						} // End of branch "row21"

						/**
						 * [tFileInputDelimited_22 end ] start
						 */

						currentComponent = "tFileInputDelimited_22";

						nb_line_tFileInputDelimited_22++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_22 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_22 != null) {
							csvReadertFileInputDelimited_22.close();
						}
					}
					if (csvReadertFileInputDelimited_22 != null) {
						globalMap.put("tFileInputDelimited_22_NB_LINE",
								nb_line_tFileInputDelimited_22);
					}
				}

				ok_Hash.put("tFileInputDelimited_22", true);
				end_Hash.put("tFileInputDelimited_22",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_22 end ] stop
				 */

				/**
				 * [tAdvancedHash_row21 end ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				tHash_Lookup_row21.endPut();

				ok_Hash.put("tAdvancedHash_row21", true);
				end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row21 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_13_row48Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_13_row48Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_13_row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICDO_RootStruct implements
			routines.system.IPersistableRow<ICDO_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICDO_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICDO_FolderStruct implements
			routines.system.IPersistableRow<ICDO_FolderStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICDO_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICDO_LeafStruct implements
			routines.system.IPersistableRow<ICDO_LeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICDO_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_25Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				ICDO_RootStruct ICDO_Root = new ICDO_RootStruct();

				row23Struct row23 = new row23Struct();
				ICDO_FolderStruct ICDO_Folder = new ICDO_FolderStruct();

				row24Struct row24 = new row24Struct();
				ICDO_LeafStruct ICDO_Leaf = new ICDO_LeafStruct();

				tHashInput_tUnite_13_row48Struct tHashInput_tUnite_13_row48 = new tHashInput_tUnite_13_row48Struct();

				/**
				 * [tHashOutput_tUnite_13 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_13", false);
				start_Hash.put("tHashOutput_tUnite_13",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_13";

				int tos_count_tHashOutput_tUnite_13 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_13 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_13_row48Struct> tHashFile_tHashOutput_tUnite_13 = null;
				if ((tHashFile_tHashOutput_tUnite_13 = mf_tHashOutput_tUnite_13
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_13")) == null) {
					tHashFile_tHashOutput_tUnite_13 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_13_row48Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_13.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_13",
						tHashFile_tHashOutput_tUnite_13);
				int nb_line_tHashOutput_tUnite_13 = 0;

				/**
				 * [tHashOutput_tUnite_13 begin ] stop
				 */

				/**
				 * [tUnite_13 begin ] start
				 */

				ok_Hash.put("tUnite_13", false);
				start_Hash.put("tUnite_13", System.currentTimeMillis());
				currentComponent = "tUnite_13";

				int tos_count_tUnite_13 = 0;

				int nb_line_tUnite_13 = 0;

				/**
				 * [tUnite_13 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_25 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_25", false);
				start_Hash.put("tFileInputDelimited_25",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_25";

				int tos_count_tFileInputDelimited_25 = 0;

				int nb_line_tFileInputDelimited_25 = 0;
				int footer_tFileInputDelimited_25 = 0;
				int totalLinetFileInputDelimited_25 = 0;
				int limittFileInputDelimited_25 = -1;
				int lastLinetFileInputDelimited_25 = -1;

				char fieldSeparator_tFileInputDelimited_25[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_25 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_25[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_25 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_25 = /**
				 * Start field
				 * tFileInputDelimited_25:FILENAME
				 */
				context.icdoDir + "root_ICD-O-3.csv"/**
				 * End field
				 * tFileInputDelimited_25:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_25 = null;

				try {

					String[] rowtFileInputDelimited_25 = null;
					int currentLinetFileInputDelimited_25 = 0;
					int outputLinetFileInputDelimited_25 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_25 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_25 = 0;
							if (footer_value_tFileInputDelimited_25 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_25,
									fieldSeparator_tFileInputDelimited_25[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_25)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_25[0]);
						}

						csvReadertFileInputDelimited_25
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_25[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_25[0] != '\r'))
							csvReadertFileInputDelimited_25.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_25[0]);

						csvReadertFileInputDelimited_25.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_25
								.setEscapeChar(csvReadertFileInputDelimited_25
										.getQuoteChar());

						if (footer_tFileInputDelimited_25 > 0) {
							for (totalLinetFileInputDelimited_25 = 0; totalLinetFileInputDelimited_25 < 1; totalLinetFileInputDelimited_25++) {
								csvReadertFileInputDelimited_25.readNext();
							}
							csvReadertFileInputDelimited_25
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_25.readNext()) {

								rowtFileInputDelimited_25 = csvReadertFileInputDelimited_25
										.getValues();
								if (!(rowtFileInputDelimited_25.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_25[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_25++;

								}

							}
							int lastLineTemptFileInputDelimited_25 = totalLinetFileInputDelimited_25
									- footer_tFileInputDelimited_25 < 0 ? 0
									: totalLinetFileInputDelimited_25
											- footer_tFileInputDelimited_25;
							if (lastLinetFileInputDelimited_25 > 0) {
								lastLinetFileInputDelimited_25 = lastLinetFileInputDelimited_25 < lastLineTemptFileInputDelimited_25 ? lastLinetFileInputDelimited_25
										: lastLineTemptFileInputDelimited_25;
							} else {
								lastLinetFileInputDelimited_25 = lastLineTemptFileInputDelimited_25;
							}

							csvReadertFileInputDelimited_25.close();
							if (filename_tFileInputDelimited_25 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_25,
										fieldSeparator_tFileInputDelimited_25[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_25)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_25[0]);
							}
							csvReadertFileInputDelimited_25
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_25[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_25[0] != '\r'))
								csvReadertFileInputDelimited_25
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_25[0]);

							csvReadertFileInputDelimited_25.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_25
									.setEscapeChar(csvReadertFileInputDelimited_25
											.getQuoteChar());

						}

						if (limittFileInputDelimited_25 != 0) {
							for (currentLinetFileInputDelimited_25 = 0; currentLinetFileInputDelimited_25 < 1; currentLinetFileInputDelimited_25++) {
								csvReadertFileInputDelimited_25.readNext();
							}
						}
						csvReadertFileInputDelimited_25
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_25 != 0
							&& csvReadertFileInputDelimited_25 != null
							&& csvReadertFileInputDelimited_25.readNext()) {

						rowtFileInputDelimited_25 = csvReadertFileInputDelimited_25
								.getValues();

						if (rowtFileInputDelimited_25.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_25[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_25++;

						if (lastLinetFileInputDelimited_25 > -1
								&& currentLinetFileInputDelimited_25 > lastLinetFileInputDelimited_25) {
							break;
						}
						outputLinetFileInputDelimited_25++;
						if (limittFileInputDelimited_25 > 0
								&& outputLinetFileInputDelimited_25 > limittFileInputDelimited_25) {
							break;
						}

						ICDO_Root = null;

						boolean whetherReject_tFileInputDelimited_25 = false;
						ICDO_Root = new ICDO_RootStruct();
						try {

							if (rowtFileInputDelimited_25.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_25[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								ICDO_Root.C_HLEVEL = null;

								ICDO_Root.C_FULLNAME = null;

								ICDO_Root.C_NAME = null;

								ICDO_Root.C_SYNONYM_CD = null;

								ICDO_Root.C_VISUALATTRIBUTES = null;

								ICDO_Root.C_TOTALNUM = null;

								ICDO_Root.C_BASECODE = null;

								ICDO_Root.C_METADATAXML = null;

								ICDO_Root.C_FACTTABLECOLUMN = null;

								ICDO_Root.C_TABLENAME = null;

								ICDO_Root.C_COLUMNNAME = null;

								ICDO_Root.C_COLUMNDATATYPE = null;

								ICDO_Root.C_OPERATOR = null;

								ICDO_Root.C_DIMCODE = null;

								ICDO_Root.C_COMMENT = null;

								ICDO_Root.C_TOOLTIP = null;

								ICDO_Root.M_APPLIED_PATH = null;

								ICDO_Root.UPDATE_DATE = null;

								ICDO_Root.DOWNLOAD_DATE = null;

								ICDO_Root.IMPORT_DATE = null;

								ICDO_Root.SOURCESYSTEM_CD = null;

								ICDO_Root.VALUETYPE_CD = null;

								ICDO_Root.M_EXCLUSION_CD = null;

								ICDO_Root.C_PATH = null;

								ICDO_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_25 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_25 = 0;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										ICDO_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]);

									} else {
										ICDO_Root.C_HLEVEL = null;
									}

								} else {
									ICDO_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 1;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_FULLNAME = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 2;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_NAME = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 3;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										ICDO_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]);

									} else {
										ICDO_Root.C_SYNONYM_CD = null;
									}

								} else {
									ICDO_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 4;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 5;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_TOTALNUM = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 6;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_BASECODE = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 7;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_METADATAXML = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 8;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 9;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_TABLENAME = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 10;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_COLUMNNAME = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 11;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										ICDO_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]);

									} else {
										ICDO_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									ICDO_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 12;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_OPERATOR = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 13;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_DIMCODE = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 14;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_COMMENT = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 15;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_TOOLTIP = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 16;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										ICDO_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]);

									} else {
										ICDO_Root.M_APPLIED_PATH = null;
									}

								} else {
									ICDO_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 17;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										ICDO_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICDO_Root.UPDATE_DATE = null;
									}

								} else {
									ICDO_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 18;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										ICDO_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICDO_Root.DOWNLOAD_DATE = null;
									}

								} else {
									ICDO_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 19;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										ICDO_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICDO_Root.IMPORT_DATE = null;
									}

								} else {
									ICDO_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 20;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 21;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.VALUETYPE_CD = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 22;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.M_EXCLUSION_CD = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 23;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_PATH = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 24;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									ICDO_Root.C_SYMBOL = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									ICDO_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_25 = true;

							System.err.println(e.getMessage());
							ICDO_Root = null;

						}

						/**
						 * [tFileInputDelimited_25 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_25 main ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						tos_count_tFileInputDelimited_25++;

						/**
						 * [tFileInputDelimited_25 main ] stop
						 */
						// Start of branch "ICDO_Root"
						if (ICDO_Root != null) {

							/**
							 * [tUnite_13 main ] start
							 */

							currentComponent = "tUnite_13";

							// ////////

							// for output
							tHashInput_tUnite_13_row48 = new tHashInput_tUnite_13_row48Struct();

							tHashInput_tUnite_13_row48.C_HLEVEL = ICDO_Root.C_HLEVEL;
							tHashInput_tUnite_13_row48.C_FULLNAME = ICDO_Root.C_FULLNAME;
							tHashInput_tUnite_13_row48.C_NAME = ICDO_Root.C_NAME;
							tHashInput_tUnite_13_row48.C_SYNONYM_CD = ICDO_Root.C_SYNONYM_CD;
							tHashInput_tUnite_13_row48.C_VISUALATTRIBUTES = ICDO_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_13_row48.C_TOTALNUM = ICDO_Root.C_TOTALNUM;
							tHashInput_tUnite_13_row48.C_BASECODE = ICDO_Root.C_BASECODE;
							tHashInput_tUnite_13_row48.C_METADATAXML = ICDO_Root.C_METADATAXML;
							tHashInput_tUnite_13_row48.C_FACTTABLECOLUMN = ICDO_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_13_row48.C_TABLENAME = ICDO_Root.C_TABLENAME;
							tHashInput_tUnite_13_row48.C_COLUMNNAME = ICDO_Root.C_COLUMNNAME;
							tHashInput_tUnite_13_row48.C_COLUMNDATATYPE = ICDO_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_13_row48.C_OPERATOR = ICDO_Root.C_OPERATOR;
							tHashInput_tUnite_13_row48.C_DIMCODE = ICDO_Root.C_DIMCODE;
							tHashInput_tUnite_13_row48.C_COMMENT = ICDO_Root.C_COMMENT;
							tHashInput_tUnite_13_row48.C_TOOLTIP = ICDO_Root.C_TOOLTIP;
							tHashInput_tUnite_13_row48.M_APPLIED_PATH = ICDO_Root.M_APPLIED_PATH;
							tHashInput_tUnite_13_row48.UPDATE_DATE = ICDO_Root.UPDATE_DATE;
							tHashInput_tUnite_13_row48.DOWNLOAD_DATE = ICDO_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_13_row48.IMPORT_DATE = ICDO_Root.IMPORT_DATE;
							tHashInput_tUnite_13_row48.SOURCESYSTEM_CD = ICDO_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_13_row48.VALUETYPE_CD = ICDO_Root.VALUETYPE_CD;
							tHashInput_tUnite_13_row48.M_EXCLUSION_CD = ICDO_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_13_row48.C_PATH = ICDO_Root.C_PATH;
							tHashInput_tUnite_13_row48.C_SYMBOL = ICDO_Root.C_SYMBOL;

							nb_line_tUnite_13++;

							// ////////

							tos_count_tUnite_13++;

							/**
							 * [tUnite_13 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_13 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_13";

							tHashInput_tUnite_13_row48Struct oneRow_tHashOutput_tUnite_13 = new tHashInput_tUnite_13_row48Struct();

							oneRow_tHashOutput_tUnite_13.C_HLEVEL = tHashInput_tUnite_13_row48.C_HLEVEL;
							oneRow_tHashOutput_tUnite_13.C_FULLNAME = tHashInput_tUnite_13_row48.C_FULLNAME;
							oneRow_tHashOutput_tUnite_13.C_NAME = tHashInput_tUnite_13_row48.C_NAME;
							oneRow_tHashOutput_tUnite_13.C_SYNONYM_CD = tHashInput_tUnite_13_row48.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_13.C_VISUALATTRIBUTES = tHashInput_tUnite_13_row48.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_13.C_TOTALNUM = tHashInput_tUnite_13_row48.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_13.C_BASECODE = tHashInput_tUnite_13_row48.C_BASECODE;
							oneRow_tHashOutput_tUnite_13.C_METADATAXML = tHashInput_tUnite_13_row48.C_METADATAXML;
							oneRow_tHashOutput_tUnite_13.C_FACTTABLECOLUMN = tHashInput_tUnite_13_row48.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_13.C_TABLENAME = tHashInput_tUnite_13_row48.C_TABLENAME;
							oneRow_tHashOutput_tUnite_13.C_COLUMNNAME = tHashInput_tUnite_13_row48.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_13.C_COLUMNDATATYPE = tHashInput_tUnite_13_row48.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_13.C_OPERATOR = tHashInput_tUnite_13_row48.C_OPERATOR;
							oneRow_tHashOutput_tUnite_13.C_DIMCODE = tHashInput_tUnite_13_row48.C_DIMCODE;
							oneRow_tHashOutput_tUnite_13.C_COMMENT = tHashInput_tUnite_13_row48.C_COMMENT;
							oneRow_tHashOutput_tUnite_13.C_TOOLTIP = tHashInput_tUnite_13_row48.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_13.M_APPLIED_PATH = tHashInput_tUnite_13_row48.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_13.UPDATE_DATE = tHashInput_tUnite_13_row48.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_13.DOWNLOAD_DATE = tHashInput_tUnite_13_row48.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_13.IMPORT_DATE = tHashInput_tUnite_13_row48.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_13.SOURCESYSTEM_CD = tHashInput_tUnite_13_row48.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_13.VALUETYPE_CD = tHashInput_tUnite_13_row48.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_13.M_EXCLUSION_CD = tHashInput_tUnite_13_row48.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_13.C_PATH = tHashInput_tUnite_13_row48.C_PATH;
							oneRow_tHashOutput_tUnite_13.C_SYMBOL = tHashInput_tUnite_13_row48.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_13
									.put(oneRow_tHashOutput_tUnite_13);
							nb_line_tHashOutput_tUnite_13++;

							tos_count_tHashOutput_tUnite_13++;

							/**
							 * [tHashOutput_tUnite_13 main ] stop
							 */

						} // End of branch "ICDO_Root"

						/**
						 * [tFileInputDelimited_25 end ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						nb_line_tFileInputDelimited_25++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_25 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_25 != null) {
							csvReadertFileInputDelimited_25.close();
						}
					}
					if (csvReadertFileInputDelimited_25 != null) {
						globalMap.put("tFileInputDelimited_25_NB_LINE",
								nb_line_tFileInputDelimited_25);
					}
				}

				ok_Hash.put("tFileInputDelimited_25", true);
				end_Hash.put("tFileInputDelimited_25",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_25 end ] stop
				 */

				/**
				 * [tMap_18 begin ] start
				 */

				ok_Hash.put("tMap_18", false);
				start_Hash.put("tMap_18", System.currentTimeMillis());
				currentComponent = "tMap_18";

				int tos_count_tMap_18 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_18__Struct {
				}
				Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ICDO_FolderStruct ICDO_Folder_tmp = new ICDO_FolderStruct();
				// ###############################

				/**
				 * [tMap_18 begin ] stop
				 */

				/**
				 * [tFileInputXML_9 begin ] start
				 */

				ok_Hash.put("tFileInputXML_9", false);
				start_Hash.put("tFileInputXML_9", System.currentTimeMillis());
				currentComponent = "tFileInputXML_9";

				int tos_count_tFileInputXML_9 = 0;

				int nb_line_tFileInputXML_9 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_9 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_9 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_9 = false;
				if (os_tFileInputXML_9.indexOf("windows") > -1
						|| os_tFileInputXML_9.indexOf("nt") > -1) {
					isWindows_tFileInputXML_9 = true;
				}
				class NameSpaceTool_tFileInputXML_9 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_9 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_9 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_9
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_9());
				Object filename_tFileInputXML_9 = null;
				try {
					filename_tFileInputXML_9 = context.icdoDir
							+ "/icdo-folders.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_9 != null
						&& filename_tFileInputXML_9 instanceof String
						&& filename_tFileInputXML_9.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_9) {
						filename_tFileInputXML_9 = filename_tFileInputXML_9
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_9 = true;
				org.dom4j.Document doc_tFileInputXML_9 = null;
				java.io.Closeable toClose_tFileInputXML_9 = null;
				try {
					if (filename_tFileInputXML_9 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_9 = (java.io.InputStream) filename_tFileInputXML_9;
						toClose_tFileInputXML_9 = inputStream_tFileInputXML_9;
						doc_tFileInputXML_9 = reader_tFileInputXML_9
								.read(inputStream_tFileInputXML_9);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_9 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_9)),
								"UTF-8");
						toClose_tFileInputXML_9 = unicodeReader_tFileInputXML_9;
						org.xml.sax.InputSource in_tFileInputXML_9 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_9);
						doc_tFileInputXML_9 = reader_tFileInputXML_9
								.read(in_tFileInputXML_9);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_9 = false;
				} finally {
					if (toClose_tFileInputXML_9 != null) {
						toClose_tFileInputXML_9.close();
					}
				}
				if (isValidFile_tFileInputXML_9) {
					NameSpaceTool_tFileInputXML_9 nsTool_tFileInputXML_9 = new NameSpaceTool_tFileInputXML_9();
					nsTool_tFileInputXML_9.countNSMap(doc_tFileInputXML_9
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_9 = nsTool_tFileInputXML_9.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_9 = doc_tFileInputXML_9
							.createXPath(nsTool_tFileInputXML_9
									.addDefaultNSPrefix("/icdo/class",
											"/icdo/class"));
					x_tFileInputXML_9
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_9);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_9 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_9
							.selectNodes(doc_tFileInputXML_9);
					XML_API_tFileInputXML_9 xml_api_tFileInputXML_9 = new XML_API_tFileInputXML_9();
					String str_tFileInputXML_9 = "";
					org.dom4j.Node node_tFileInputXML_9 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_9 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_9
									.addDefaultNSPrefix("code", "/icdo/class"));
					xTmp0_tFileInputXML_9
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_9);
					org.dom4j.XPath xTmp1_tFileInputXML_9 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_9
									.addDefaultNSPrefix("label", "/icdo/class"));
					xTmp1_tFileInputXML_9
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_9);
					org.dom4j.XPath xTmp2_tFileInputXML_9 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_9
									.addDefaultNSPrefix("path", "/icdo/class"));
					xTmp2_tFileInputXML_9
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_9);
					org.dom4j.XPath xTmp3_tFileInputXML_9 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_9
									.addDefaultNSPrefix("level", "/icdo/class"));
					xTmp3_tFileInputXML_9
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_9);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_9 : nodeList_tFileInputXML_9) {
						nb_line_tFileInputXML_9++;
						row23 = null;
						boolean whetherReject_tFileInputXML_9 = false;
						row23 = new row23Struct();
						try {
							Object obj0_tFileInputXML_9 = xTmp0_tFileInputXML_9
									.evaluate(temp_tFileInputXML_9);
							if (obj0_tFileInputXML_9 == null) {
								node_tFileInputXML_9 = null;
								str_tFileInputXML_9 = "";

							} else if (obj0_tFileInputXML_9 instanceof org.dom4j.Node) {
								node_tFileInputXML_9 = (org.dom4j.Node) obj0_tFileInputXML_9;
								str_tFileInputXML_9 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_9,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_9 instanceof String
									|| obj0_tFileInputXML_9 instanceof Number) {
								node_tFileInputXML_9 = temp_tFileInputXML_9;
								str_tFileInputXML_9 = String
										.valueOf(obj0_tFileInputXML_9);
							} else if (obj0_tFileInputXML_9 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_9 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_9;
								node_tFileInputXML_9 = nodes_tFileInputXML_9
										.size() > 0 ? nodes_tFileInputXML_9
										.get(0) : null;
								str_tFileInputXML_9 = node_tFileInputXML_9 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_9,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_9
									.isEmpty(node_tFileInputXML_9)) {
								row23.code = "";
							} else if (xml_api_tFileInputXML_9
									.isMissing(node_tFileInputXML_9)) {
								row23.code = null;
							} else {
								row23.code = str_tFileInputXML_9;
							}
							Object obj1_tFileInputXML_9 = xTmp1_tFileInputXML_9
									.evaluate(temp_tFileInputXML_9);
							if (obj1_tFileInputXML_9 == null) {
								node_tFileInputXML_9 = null;
								str_tFileInputXML_9 = "";

							} else if (obj1_tFileInputXML_9 instanceof org.dom4j.Node) {
								node_tFileInputXML_9 = (org.dom4j.Node) obj1_tFileInputXML_9;
								str_tFileInputXML_9 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_9,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_9 instanceof String
									|| obj1_tFileInputXML_9 instanceof Number) {
								node_tFileInputXML_9 = temp_tFileInputXML_9;
								str_tFileInputXML_9 = String
										.valueOf(obj1_tFileInputXML_9);
							} else if (obj1_tFileInputXML_9 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_9 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_9;
								node_tFileInputXML_9 = nodes_tFileInputXML_9
										.size() > 0 ? nodes_tFileInputXML_9
										.get(0) : null;
								str_tFileInputXML_9 = node_tFileInputXML_9 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_9,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_9
									.isEmpty(node_tFileInputXML_9)) {
								row23.label = "";
							} else if (xml_api_tFileInputXML_9
									.isMissing(node_tFileInputXML_9)) {
								row23.label = null;
							} else {
								row23.label = str_tFileInputXML_9;
							}
							Object obj2_tFileInputXML_9 = xTmp2_tFileInputXML_9
									.evaluate(temp_tFileInputXML_9);
							if (obj2_tFileInputXML_9 == null) {
								node_tFileInputXML_9 = null;
								str_tFileInputXML_9 = "";

							} else if (obj2_tFileInputXML_9 instanceof org.dom4j.Node) {
								node_tFileInputXML_9 = (org.dom4j.Node) obj2_tFileInputXML_9;
								str_tFileInputXML_9 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_9,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_9 instanceof String
									|| obj2_tFileInputXML_9 instanceof Number) {
								node_tFileInputXML_9 = temp_tFileInputXML_9;
								str_tFileInputXML_9 = String
										.valueOf(obj2_tFileInputXML_9);
							} else if (obj2_tFileInputXML_9 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_9 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_9;
								node_tFileInputXML_9 = nodes_tFileInputXML_9
										.size() > 0 ? nodes_tFileInputXML_9
										.get(0) : null;
								str_tFileInputXML_9 = node_tFileInputXML_9 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_9,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_9
									.isEmpty(node_tFileInputXML_9)) {
								row23.path = "";
							} else if (xml_api_tFileInputXML_9
									.isMissing(node_tFileInputXML_9)) {
								row23.path = null;
							} else {
								row23.path = str_tFileInputXML_9;
							}
							Object obj3_tFileInputXML_9 = xTmp3_tFileInputXML_9
									.evaluate(temp_tFileInputXML_9);
							if (obj3_tFileInputXML_9 == null) {
								node_tFileInputXML_9 = null;
								str_tFileInputXML_9 = "";

							} else if (obj3_tFileInputXML_9 instanceof org.dom4j.Node) {
								node_tFileInputXML_9 = (org.dom4j.Node) obj3_tFileInputXML_9;
								str_tFileInputXML_9 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_9,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_9 instanceof String
									|| obj3_tFileInputXML_9 instanceof Number) {
								node_tFileInputXML_9 = temp_tFileInputXML_9;
								str_tFileInputXML_9 = String
										.valueOf(obj3_tFileInputXML_9);
							} else if (obj3_tFileInputXML_9 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_9 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_9;
								node_tFileInputXML_9 = nodes_tFileInputXML_9
										.size() > 0 ? nodes_tFileInputXML_9
										.get(0) : null;
								str_tFileInputXML_9 = node_tFileInputXML_9 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_9,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_9
									.isMissing(node_tFileInputXML_9)
									|| xml_api_tFileInputXML_9
											.isEmpty(node_tFileInputXML_9)) {
								row23.level = 0;
							} else {
								row23.level = ParserUtils
										.parseTo_int(str_tFileInputXML_9);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_9 = true;
							System.err.println(e.getMessage());
							row23 = null;
						}

						/**
						 * [tFileInputXML_9 begin ] stop
						 */
						/**
						 * [tFileInputXML_9 main ] start
						 */

						currentComponent = "tFileInputXML_9";

						tos_count_tFileInputXML_9++;

						/**
						 * [tFileInputXML_9 main ] stop
						 */
						// Start of branch "row23"
						if (row23 != null) {

							/**
							 * [tMap_18 main ] start
							 */

							currentComponent = "tMap_18";

							boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_18 = false;
							boolean mainRowRejected_tMap_18 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
								// ###############################
								// # Output tables

								ICDO_Folder = null;

								// # Output table : 'ICDO_Folder'
								ICDO_Folder_tmp.C_HLEVEL = row23.level - 1;
								ICDO_Folder_tmp.C_FULLNAME = row23.path;
								ICDO_Folder_tmp.C_NAME = row23.code + " - "
										+ row23.label;
								ICDO_Folder_tmp.C_SYNONYM_CD = 'N';
								ICDO_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								ICDO_Folder_tmp.C_TOTALNUM = null;
								ICDO_Folder_tmp.C_BASECODE = null;
								ICDO_Folder_tmp.C_METADATAXML = null;
								ICDO_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								ICDO_Folder_tmp.C_TABLENAME = "concept_dimension";
								ICDO_Folder_tmp.C_COLUMNNAME = "concept_path";
								ICDO_Folder_tmp.C_COLUMNDATATYPE = 'T';
								ICDO_Folder_tmp.C_OPERATOR = "LIKE";
								ICDO_Folder_tmp.C_DIMCODE = row23.path;
								ICDO_Folder_tmp.C_COMMENT = null;
								ICDO_Folder_tmp.C_TOOLTIP = row23.label;
								ICDO_Folder_tmp.M_APPLIED_PATH = '@';
								ICDO_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								ICDO_Folder_tmp.DOWNLOAD_DATE = null;
								ICDO_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								ICDO_Folder_tmp.SOURCESYSTEM_CD = "ICD-O";
								ICDO_Folder_tmp.VALUETYPE_CD = null;
								ICDO_Folder_tmp.M_EXCLUSION_CD = null;
								ICDO_Folder_tmp.C_PATH = null;
								ICDO_Folder_tmp.C_SYMBOL = null;
								ICDO_Folder = ICDO_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_18 = false;

							tos_count_tMap_18++;

							/**
							 * [tMap_18 main ] stop
							 */
							// Start of branch "ICDO_Folder"
							if (ICDO_Folder != null) {

								/**
								 * [tUnite_13 main ] start
								 */

								currentComponent = "tUnite_13";

								// ////////

								// for output
								tHashInput_tUnite_13_row48 = new tHashInput_tUnite_13_row48Struct();

								tHashInput_tUnite_13_row48.C_HLEVEL = ICDO_Folder.C_HLEVEL;
								tHashInput_tUnite_13_row48.C_FULLNAME = ICDO_Folder.C_FULLNAME;
								tHashInput_tUnite_13_row48.C_NAME = ICDO_Folder.C_NAME;
								tHashInput_tUnite_13_row48.C_SYNONYM_CD = ICDO_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_13_row48.C_VISUALATTRIBUTES = ICDO_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_13_row48.C_TOTALNUM = ICDO_Folder.C_TOTALNUM;
								tHashInput_tUnite_13_row48.C_BASECODE = ICDO_Folder.C_BASECODE;
								tHashInput_tUnite_13_row48.C_METADATAXML = ICDO_Folder.C_METADATAXML;
								tHashInput_tUnite_13_row48.C_FACTTABLECOLUMN = ICDO_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_13_row48.C_TABLENAME = ICDO_Folder.C_TABLENAME;
								tHashInput_tUnite_13_row48.C_COLUMNNAME = ICDO_Folder.C_COLUMNNAME;
								tHashInput_tUnite_13_row48.C_COLUMNDATATYPE = ICDO_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_13_row48.C_OPERATOR = ICDO_Folder.C_OPERATOR;
								tHashInput_tUnite_13_row48.C_DIMCODE = ICDO_Folder.C_DIMCODE;
								tHashInput_tUnite_13_row48.C_COMMENT = ICDO_Folder.C_COMMENT;
								tHashInput_tUnite_13_row48.C_TOOLTIP = ICDO_Folder.C_TOOLTIP;
								tHashInput_tUnite_13_row48.M_APPLIED_PATH = ICDO_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_13_row48.UPDATE_DATE = ICDO_Folder.UPDATE_DATE;
								tHashInput_tUnite_13_row48.DOWNLOAD_DATE = ICDO_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_13_row48.IMPORT_DATE = ICDO_Folder.IMPORT_DATE;
								tHashInput_tUnite_13_row48.SOURCESYSTEM_CD = ICDO_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_13_row48.VALUETYPE_CD = ICDO_Folder.VALUETYPE_CD;
								tHashInput_tUnite_13_row48.M_EXCLUSION_CD = ICDO_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_13_row48.C_PATH = ICDO_Folder.C_PATH;
								tHashInput_tUnite_13_row48.C_SYMBOL = ICDO_Folder.C_SYMBOL;

								nb_line_tUnite_13++;

								// ////////

								tos_count_tUnite_13++;

								/**
								 * [tUnite_13 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_13 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_13";

								tHashInput_tUnite_13_row48Struct oneRow_tHashOutput_tUnite_13 = new tHashInput_tUnite_13_row48Struct();

								oneRow_tHashOutput_tUnite_13.C_HLEVEL = tHashInput_tUnite_13_row48.C_HLEVEL;
								oneRow_tHashOutput_tUnite_13.C_FULLNAME = tHashInput_tUnite_13_row48.C_FULLNAME;
								oneRow_tHashOutput_tUnite_13.C_NAME = tHashInput_tUnite_13_row48.C_NAME;
								oneRow_tHashOutput_tUnite_13.C_SYNONYM_CD = tHashInput_tUnite_13_row48.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_13.C_VISUALATTRIBUTES = tHashInput_tUnite_13_row48.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_13.C_TOTALNUM = tHashInput_tUnite_13_row48.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_13.C_BASECODE = tHashInput_tUnite_13_row48.C_BASECODE;
								oneRow_tHashOutput_tUnite_13.C_METADATAXML = tHashInput_tUnite_13_row48.C_METADATAXML;
								oneRow_tHashOutput_tUnite_13.C_FACTTABLECOLUMN = tHashInput_tUnite_13_row48.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_13.C_TABLENAME = tHashInput_tUnite_13_row48.C_TABLENAME;
								oneRow_tHashOutput_tUnite_13.C_COLUMNNAME = tHashInput_tUnite_13_row48.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_13.C_COLUMNDATATYPE = tHashInput_tUnite_13_row48.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_13.C_OPERATOR = tHashInput_tUnite_13_row48.C_OPERATOR;
								oneRow_tHashOutput_tUnite_13.C_DIMCODE = tHashInput_tUnite_13_row48.C_DIMCODE;
								oneRow_tHashOutput_tUnite_13.C_COMMENT = tHashInput_tUnite_13_row48.C_COMMENT;
								oneRow_tHashOutput_tUnite_13.C_TOOLTIP = tHashInput_tUnite_13_row48.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_13.M_APPLIED_PATH = tHashInput_tUnite_13_row48.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_13.UPDATE_DATE = tHashInput_tUnite_13_row48.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_13.DOWNLOAD_DATE = tHashInput_tUnite_13_row48.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_13.IMPORT_DATE = tHashInput_tUnite_13_row48.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_13.SOURCESYSTEM_CD = tHashInput_tUnite_13_row48.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_13.VALUETYPE_CD = tHashInput_tUnite_13_row48.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_13.M_EXCLUSION_CD = tHashInput_tUnite_13_row48.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_13.C_PATH = tHashInput_tUnite_13_row48.C_PATH;
								oneRow_tHashOutput_tUnite_13.C_SYMBOL = tHashInput_tUnite_13_row48.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_13
										.put(oneRow_tHashOutput_tUnite_13);
								nb_line_tHashOutput_tUnite_13++;

								tos_count_tHashOutput_tUnite_13++;

								/**
								 * [tHashOutput_tUnite_13 main ] stop
								 */

							} // End of branch "ICDO_Folder"

						} // End of branch "row23"

						/**
						 * [tFileInputXML_9 end ] start
						 */

						currentComponent = "tFileInputXML_9";

					}
				}
				globalMap.put("tFileInputXML_9_NB_LINE",
						nb_line_tFileInputXML_9);

				ok_Hash.put("tFileInputXML_9", true);
				end_Hash.put("tFileInputXML_9", System.currentTimeMillis());

				/**
				 * [tFileInputXML_9 end ] stop
				 */

				/**
				 * [tMap_18 end ] start
				 */

				currentComponent = "tMap_18";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_18", true);
				end_Hash.put("tMap_18", System.currentTimeMillis());

				/**
				 * [tMap_18 end ] stop
				 */

				/**
				 * [tMap_19 begin ] start
				 */

				ok_Hash.put("tMap_19", false);
				start_Hash.put("tMap_19", System.currentTimeMillis());
				currentComponent = "tMap_19";

				int tos_count_tMap_19 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_19__Struct {
				}
				Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ICDO_LeafStruct ICDO_Leaf_tmp = new ICDO_LeafStruct();
				// ###############################

				/**
				 * [tMap_19 begin ] stop
				 */

				/**
				 * [tFileInputXML_10 begin ] start
				 */

				ok_Hash.put("tFileInputXML_10", false);
				start_Hash.put("tFileInputXML_10", System.currentTimeMillis());
				currentComponent = "tFileInputXML_10";

				int tos_count_tFileInputXML_10 = 0;

				int nb_line_tFileInputXML_10 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_10 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_10 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_10 = false;
				if (os_tFileInputXML_10.indexOf("windows") > -1
						|| os_tFileInputXML_10.indexOf("nt") > -1) {
					isWindows_tFileInputXML_10 = true;
				}
				class NameSpaceTool_tFileInputXML_10 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_10 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_10 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_10
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_10());
				Object filename_tFileInputXML_10 = null;
				try {
					filename_tFileInputXML_10 = context.icdoDir
							+ "/icdo-leafs.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_10 != null
						&& filename_tFileInputXML_10 instanceof String
						&& filename_tFileInputXML_10.toString()
								.startsWith("//")) {
					if (!isWindows_tFileInputXML_10) {
						filename_tFileInputXML_10 = filename_tFileInputXML_10
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_10 = true;
				org.dom4j.Document doc_tFileInputXML_10 = null;
				java.io.Closeable toClose_tFileInputXML_10 = null;
				try {
					if (filename_tFileInputXML_10 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_10 = (java.io.InputStream) filename_tFileInputXML_10;
						toClose_tFileInputXML_10 = inputStream_tFileInputXML_10;
						doc_tFileInputXML_10 = reader_tFileInputXML_10
								.read(inputStream_tFileInputXML_10);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_10 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_10)),
								"UTF-8");
						toClose_tFileInputXML_10 = unicodeReader_tFileInputXML_10;
						org.xml.sax.InputSource in_tFileInputXML_10 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_10);
						doc_tFileInputXML_10 = reader_tFileInputXML_10
								.read(in_tFileInputXML_10);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_10 = false;
				} finally {
					if (toClose_tFileInputXML_10 != null) {
						toClose_tFileInputXML_10.close();
					}
				}
				if (isValidFile_tFileInputXML_10) {
					NameSpaceTool_tFileInputXML_10 nsTool_tFileInputXML_10 = new NameSpaceTool_tFileInputXML_10();
					nsTool_tFileInputXML_10.countNSMap(doc_tFileInputXML_10
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_10 = nsTool_tFileInputXML_10.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_10 = doc_tFileInputXML_10
							.createXPath(nsTool_tFileInputXML_10
									.addDefaultNSPrefix("/icdo/class",
											"/icdo/class"));
					x_tFileInputXML_10
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_10 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_10
							.selectNodes(doc_tFileInputXML_10);
					XML_API_tFileInputXML_10 xml_api_tFileInputXML_10 = new XML_API_tFileInputXML_10();
					String str_tFileInputXML_10 = "";
					org.dom4j.Node node_tFileInputXML_10 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_10 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_10
									.addDefaultNSPrefix("code", "/icdo/class"));
					xTmp0_tFileInputXML_10
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);
					org.dom4j.XPath xTmp1_tFileInputXML_10 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_10
									.addDefaultNSPrefix("label", "/icdo/class"));
					xTmp1_tFileInputXML_10
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);
					org.dom4j.XPath xTmp2_tFileInputXML_10 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_10
									.addDefaultNSPrefix("path", "/icdo/class"));
					xTmp2_tFileInputXML_10
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);
					org.dom4j.XPath xTmp3_tFileInputXML_10 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_10
									.addDefaultNSPrefix("level", "/icdo/class"));
					xTmp3_tFileInputXML_10
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_10 : nodeList_tFileInputXML_10) {
						nb_line_tFileInputXML_10++;
						row24 = null;
						boolean whetherReject_tFileInputXML_10 = false;
						row24 = new row24Struct();
						try {
							Object obj0_tFileInputXML_10 = xTmp0_tFileInputXML_10
									.evaluate(temp_tFileInputXML_10);
							if (obj0_tFileInputXML_10 == null) {
								node_tFileInputXML_10 = null;
								str_tFileInputXML_10 = "";

							} else if (obj0_tFileInputXML_10 instanceof org.dom4j.Node) {
								node_tFileInputXML_10 = (org.dom4j.Node) obj0_tFileInputXML_10;
								str_tFileInputXML_10 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_10,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_10 instanceof String
									|| obj0_tFileInputXML_10 instanceof Number) {
								node_tFileInputXML_10 = temp_tFileInputXML_10;
								str_tFileInputXML_10 = String
										.valueOf(obj0_tFileInputXML_10);
							} else if (obj0_tFileInputXML_10 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_10;
								node_tFileInputXML_10 = nodes_tFileInputXML_10
										.size() > 0 ? nodes_tFileInputXML_10
										.get(0) : null;
								str_tFileInputXML_10 = node_tFileInputXML_10 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_10,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_10
									.isEmpty(node_tFileInputXML_10)) {
								row24.code = "";
							} else if (xml_api_tFileInputXML_10
									.isMissing(node_tFileInputXML_10)) {
								row24.code = null;
							} else {
								row24.code = str_tFileInputXML_10;
							}
							Object obj1_tFileInputXML_10 = xTmp1_tFileInputXML_10
									.evaluate(temp_tFileInputXML_10);
							if (obj1_tFileInputXML_10 == null) {
								node_tFileInputXML_10 = null;
								str_tFileInputXML_10 = "";

							} else if (obj1_tFileInputXML_10 instanceof org.dom4j.Node) {
								node_tFileInputXML_10 = (org.dom4j.Node) obj1_tFileInputXML_10;
								str_tFileInputXML_10 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_10,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_10 instanceof String
									|| obj1_tFileInputXML_10 instanceof Number) {
								node_tFileInputXML_10 = temp_tFileInputXML_10;
								str_tFileInputXML_10 = String
										.valueOf(obj1_tFileInputXML_10);
							} else if (obj1_tFileInputXML_10 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_10;
								node_tFileInputXML_10 = nodes_tFileInputXML_10
										.size() > 0 ? nodes_tFileInputXML_10
										.get(0) : null;
								str_tFileInputXML_10 = node_tFileInputXML_10 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_10,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_10
									.isEmpty(node_tFileInputXML_10)) {
								row24.label = "";
							} else if (xml_api_tFileInputXML_10
									.isMissing(node_tFileInputXML_10)) {
								row24.label = null;
							} else {
								row24.label = str_tFileInputXML_10;
							}
							Object obj2_tFileInputXML_10 = xTmp2_tFileInputXML_10
									.evaluate(temp_tFileInputXML_10);
							if (obj2_tFileInputXML_10 == null) {
								node_tFileInputXML_10 = null;
								str_tFileInputXML_10 = "";

							} else if (obj2_tFileInputXML_10 instanceof org.dom4j.Node) {
								node_tFileInputXML_10 = (org.dom4j.Node) obj2_tFileInputXML_10;
								str_tFileInputXML_10 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_10,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_10 instanceof String
									|| obj2_tFileInputXML_10 instanceof Number) {
								node_tFileInputXML_10 = temp_tFileInputXML_10;
								str_tFileInputXML_10 = String
										.valueOf(obj2_tFileInputXML_10);
							} else if (obj2_tFileInputXML_10 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_10;
								node_tFileInputXML_10 = nodes_tFileInputXML_10
										.size() > 0 ? nodes_tFileInputXML_10
										.get(0) : null;
								str_tFileInputXML_10 = node_tFileInputXML_10 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_10,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_10
									.isEmpty(node_tFileInputXML_10)) {
								row24.path = "";
							} else if (xml_api_tFileInputXML_10
									.isMissing(node_tFileInputXML_10)) {
								row24.path = null;
							} else {
								row24.path = str_tFileInputXML_10;
							}
							Object obj3_tFileInputXML_10 = xTmp3_tFileInputXML_10
									.evaluate(temp_tFileInputXML_10);
							if (obj3_tFileInputXML_10 == null) {
								node_tFileInputXML_10 = null;
								str_tFileInputXML_10 = "";

							} else if (obj3_tFileInputXML_10 instanceof org.dom4j.Node) {
								node_tFileInputXML_10 = (org.dom4j.Node) obj3_tFileInputXML_10;
								str_tFileInputXML_10 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_10,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_10 instanceof String
									|| obj3_tFileInputXML_10 instanceof Number) {
								node_tFileInputXML_10 = temp_tFileInputXML_10;
								str_tFileInputXML_10 = String
										.valueOf(obj3_tFileInputXML_10);
							} else if (obj3_tFileInputXML_10 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_10;
								node_tFileInputXML_10 = nodes_tFileInputXML_10
										.size() > 0 ? nodes_tFileInputXML_10
										.get(0) : null;
								str_tFileInputXML_10 = node_tFileInputXML_10 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_10,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_10
									.isMissing(node_tFileInputXML_10)
									|| xml_api_tFileInputXML_10
											.isEmpty(node_tFileInputXML_10)) {
								row24.level = 0;
							} else {
								row24.level = ParserUtils
										.parseTo_int(str_tFileInputXML_10);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_10 = true;
							System.err.println(e.getMessage());
							row24 = null;
						}

						/**
						 * [tFileInputXML_10 begin ] stop
						 */
						/**
						 * [tFileInputXML_10 main ] start
						 */

						currentComponent = "tFileInputXML_10";

						tos_count_tFileInputXML_10++;

						/**
						 * [tFileInputXML_10 main ] stop
						 */
						// Start of branch "row24"
						if (row24 != null) {

							/**
							 * [tMap_19 main ] start
							 */

							currentComponent = "tMap_19";

							boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_19 = false;
							boolean mainRowRejected_tMap_19 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
								// ###############################
								// # Output tables

								ICDO_Leaf = null;

								// # Output table : 'ICDO_Leaf'
								ICDO_Leaf_tmp.C_HLEVEL = row24.level - 1;
								ICDO_Leaf_tmp.C_FULLNAME = row24.path
										+ "Wert\\";
								ICDO_Leaf_tmp.C_NAME = row24.code + " - "
										+ row24.label + " (Wert)";
								ICDO_Leaf_tmp.C_SYNONYM_CD = 'N';
								ICDO_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								ICDO_Leaf_tmp.C_TOTALNUM = null;
								ICDO_Leaf_tmp.C_BASECODE = "ST|ICD-O:"
										+ row24.code;
								ICDO_Leaf_tmp.C_METADATAXML = null;
								ICDO_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								ICDO_Leaf_tmp.C_TABLENAME = "concept_dimension";
								ICDO_Leaf_tmp.C_COLUMNNAME = "concept_path";
								ICDO_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								ICDO_Leaf_tmp.C_OPERATOR = "LIKE";
								ICDO_Leaf_tmp.C_DIMCODE = row24.path;
								ICDO_Leaf_tmp.C_COMMENT = null;
								ICDO_Leaf_tmp.C_TOOLTIP = row24.label;
								ICDO_Leaf_tmp.M_APPLIED_PATH = '@';
								ICDO_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								ICDO_Leaf_tmp.DOWNLOAD_DATE = null;
								ICDO_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								ICDO_Leaf_tmp.SOURCESYSTEM_CD = "ICD-O";
								ICDO_Leaf_tmp.VALUETYPE_CD = null;
								ICDO_Leaf_tmp.M_EXCLUSION_CD = null;
								ICDO_Leaf_tmp.C_PATH = null;
								ICDO_Leaf_tmp.C_SYMBOL = null;
								ICDO_Leaf = ICDO_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_19 = false;

							tos_count_tMap_19++;

							/**
							 * [tMap_19 main ] stop
							 */
							// Start of branch "ICDO_Leaf"
							if (ICDO_Leaf != null) {

								/**
								 * [tUnite_13 main ] start
								 */

								currentComponent = "tUnite_13";

								// ////////

								// for output
								tHashInput_tUnite_13_row48 = new tHashInput_tUnite_13_row48Struct();

								tHashInput_tUnite_13_row48.C_HLEVEL = ICDO_Leaf.C_HLEVEL;
								tHashInput_tUnite_13_row48.C_FULLNAME = ICDO_Leaf.C_FULLNAME;
								tHashInput_tUnite_13_row48.C_NAME = ICDO_Leaf.C_NAME;
								tHashInput_tUnite_13_row48.C_SYNONYM_CD = ICDO_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_13_row48.C_VISUALATTRIBUTES = ICDO_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_13_row48.C_TOTALNUM = ICDO_Leaf.C_TOTALNUM;
								tHashInput_tUnite_13_row48.C_BASECODE = ICDO_Leaf.C_BASECODE;
								tHashInput_tUnite_13_row48.C_METADATAXML = ICDO_Leaf.C_METADATAXML;
								tHashInput_tUnite_13_row48.C_FACTTABLECOLUMN = ICDO_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_13_row48.C_TABLENAME = ICDO_Leaf.C_TABLENAME;
								tHashInput_tUnite_13_row48.C_COLUMNNAME = ICDO_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_13_row48.C_COLUMNDATATYPE = ICDO_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_13_row48.C_OPERATOR = ICDO_Leaf.C_OPERATOR;
								tHashInput_tUnite_13_row48.C_DIMCODE = ICDO_Leaf.C_DIMCODE;
								tHashInput_tUnite_13_row48.C_COMMENT = ICDO_Leaf.C_COMMENT;
								tHashInput_tUnite_13_row48.C_TOOLTIP = ICDO_Leaf.C_TOOLTIP;
								tHashInput_tUnite_13_row48.M_APPLIED_PATH = ICDO_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_13_row48.UPDATE_DATE = ICDO_Leaf.UPDATE_DATE;
								tHashInput_tUnite_13_row48.DOWNLOAD_DATE = ICDO_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_13_row48.IMPORT_DATE = ICDO_Leaf.IMPORT_DATE;
								tHashInput_tUnite_13_row48.SOURCESYSTEM_CD = ICDO_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_13_row48.VALUETYPE_CD = ICDO_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_13_row48.M_EXCLUSION_CD = ICDO_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_13_row48.C_PATH = ICDO_Leaf.C_PATH;
								tHashInput_tUnite_13_row48.C_SYMBOL = ICDO_Leaf.C_SYMBOL;

								nb_line_tUnite_13++;

								// ////////

								tos_count_tUnite_13++;

								/**
								 * [tUnite_13 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_13 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_13";

								tHashInput_tUnite_13_row48Struct oneRow_tHashOutput_tUnite_13 = new tHashInput_tUnite_13_row48Struct();

								oneRow_tHashOutput_tUnite_13.C_HLEVEL = tHashInput_tUnite_13_row48.C_HLEVEL;
								oneRow_tHashOutput_tUnite_13.C_FULLNAME = tHashInput_tUnite_13_row48.C_FULLNAME;
								oneRow_tHashOutput_tUnite_13.C_NAME = tHashInput_tUnite_13_row48.C_NAME;
								oneRow_tHashOutput_tUnite_13.C_SYNONYM_CD = tHashInput_tUnite_13_row48.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_13.C_VISUALATTRIBUTES = tHashInput_tUnite_13_row48.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_13.C_TOTALNUM = tHashInput_tUnite_13_row48.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_13.C_BASECODE = tHashInput_tUnite_13_row48.C_BASECODE;
								oneRow_tHashOutput_tUnite_13.C_METADATAXML = tHashInput_tUnite_13_row48.C_METADATAXML;
								oneRow_tHashOutput_tUnite_13.C_FACTTABLECOLUMN = tHashInput_tUnite_13_row48.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_13.C_TABLENAME = tHashInput_tUnite_13_row48.C_TABLENAME;
								oneRow_tHashOutput_tUnite_13.C_COLUMNNAME = tHashInput_tUnite_13_row48.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_13.C_COLUMNDATATYPE = tHashInput_tUnite_13_row48.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_13.C_OPERATOR = tHashInput_tUnite_13_row48.C_OPERATOR;
								oneRow_tHashOutput_tUnite_13.C_DIMCODE = tHashInput_tUnite_13_row48.C_DIMCODE;
								oneRow_tHashOutput_tUnite_13.C_COMMENT = tHashInput_tUnite_13_row48.C_COMMENT;
								oneRow_tHashOutput_tUnite_13.C_TOOLTIP = tHashInput_tUnite_13_row48.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_13.M_APPLIED_PATH = tHashInput_tUnite_13_row48.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_13.UPDATE_DATE = tHashInput_tUnite_13_row48.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_13.DOWNLOAD_DATE = tHashInput_tUnite_13_row48.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_13.IMPORT_DATE = tHashInput_tUnite_13_row48.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_13.SOURCESYSTEM_CD = tHashInput_tUnite_13_row48.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_13.VALUETYPE_CD = tHashInput_tUnite_13_row48.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_13.M_EXCLUSION_CD = tHashInput_tUnite_13_row48.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_13.C_PATH = tHashInput_tUnite_13_row48.C_PATH;
								oneRow_tHashOutput_tUnite_13.C_SYMBOL = tHashInput_tUnite_13_row48.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_13
										.put(oneRow_tHashOutput_tUnite_13);
								nb_line_tHashOutput_tUnite_13++;

								tos_count_tHashOutput_tUnite_13++;

								/**
								 * [tHashOutput_tUnite_13 main ] stop
								 */

							} // End of branch "ICDO_Leaf"

						} // End of branch "row24"

						/**
						 * [tFileInputXML_10 end ] start
						 */

						currentComponent = "tFileInputXML_10";

					}
				}
				globalMap.put("tFileInputXML_10_NB_LINE",
						nb_line_tFileInputXML_10);

				ok_Hash.put("tFileInputXML_10", true);
				end_Hash.put("tFileInputXML_10", System.currentTimeMillis());

				/**
				 * [tFileInputXML_10 end ] stop
				 */

				/**
				 * [tMap_19 end ] start
				 */

				currentComponent = "tMap_19";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_19", true);
				end_Hash.put("tMap_19", System.currentTimeMillis());

				/**
				 * [tMap_19 end ] stop
				 */

				/**
				 * [tUnite_13 end ] start
				 */

				currentComponent = "tUnite_13";

				globalMap.put("tUnite_13_NB_LINE", nb_line_tUnite_13);

				ok_Hash.put("tUnite_13", true);
				end_Hash.put("tUnite_13", System.currentTimeMillis());

				/**
				 * [tUnite_13 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_13 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_13";

				globalMap.put("tHashOutput_tUnite_13_NB_LINE",
						nb_line_tHashOutput_tUnite_13);

				ok_Hash.put("tHashOutput_tUnite_13", true);
				end_Hash.put("tHashOutput_tUnite_13",
						System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_14_row47Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_14_row47Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_14_row47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TNM_RootStruct implements
			routines.system.IPersistableRow<TNM_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TNM_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TNM_FolderStruct implements
			routines.system.IPersistableRow<TNM_FolderStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TNM_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TNM_LeafStruct implements
			routines.system.IPersistableRow<TNM_LeafStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TNM_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_26Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				TNM_RootStruct TNM_Root = new TNM_RootStruct();

				row26Struct row26 = new row26Struct();
				TNM_FolderStruct TNM_Folder = new TNM_FolderStruct();

				row27Struct row27 = new row27Struct();
				TNM_LeafStruct TNM_Leaf = new TNM_LeafStruct();

				tHashInput_tUnite_14_row47Struct tHashInput_tUnite_14_row47 = new tHashInput_tUnite_14_row47Struct();

				/**
				 * [tHashOutput_tUnite_14 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_14", false);
				start_Hash.put("tHashOutput_tUnite_14",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_14";

				int tos_count_tHashOutput_tUnite_14 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_14 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_14_row47Struct> tHashFile_tHashOutput_tUnite_14 = null;
				if ((tHashFile_tHashOutput_tUnite_14 = mf_tHashOutput_tUnite_14
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_14")) == null) {
					tHashFile_tHashOutput_tUnite_14 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_14_row47Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_14.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_14",
						tHashFile_tHashOutput_tUnite_14);
				int nb_line_tHashOutput_tUnite_14 = 0;

				/**
				 * [tHashOutput_tUnite_14 begin ] stop
				 */

				/**
				 * [tUnite_14 begin ] start
				 */

				ok_Hash.put("tUnite_14", false);
				start_Hash.put("tUnite_14", System.currentTimeMillis());
				currentComponent = "tUnite_14";

				int tos_count_tUnite_14 = 0;

				int nb_line_tUnite_14 = 0;

				/**
				 * [tUnite_14 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_26 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_26", false);
				start_Hash.put("tFileInputDelimited_26",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_26";

				int tos_count_tFileInputDelimited_26 = 0;

				int nb_line_tFileInputDelimited_26 = 0;
				int footer_tFileInputDelimited_26 = 0;
				int totalLinetFileInputDelimited_26 = 0;
				int limittFileInputDelimited_26 = -1;
				int lastLinetFileInputDelimited_26 = -1;

				char fieldSeparator_tFileInputDelimited_26[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_26 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_26[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_26 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_26 = /**
				 * Start field
				 * tFileInputDelimited_26:FILENAME
				 */
				context.tnmDir + "root_TNM.csv"/**
				 * End field
				 * tFileInputDelimited_26:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_26 = null;

				try {

					String[] rowtFileInputDelimited_26 = null;
					int currentLinetFileInputDelimited_26 = 0;
					int outputLinetFileInputDelimited_26 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_26 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_26 = 0;
							if (footer_value_tFileInputDelimited_26 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_26,
									fieldSeparator_tFileInputDelimited_26[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_26)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_26[0]);
						}

						csvReadertFileInputDelimited_26
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_26[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_26[0] != '\r'))
							csvReadertFileInputDelimited_26.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_26[0]);

						csvReadertFileInputDelimited_26.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_26
								.setEscapeChar(csvReadertFileInputDelimited_26
										.getQuoteChar());

						if (footer_tFileInputDelimited_26 > 0) {
							for (totalLinetFileInputDelimited_26 = 0; totalLinetFileInputDelimited_26 < 1; totalLinetFileInputDelimited_26++) {
								csvReadertFileInputDelimited_26.readNext();
							}
							csvReadertFileInputDelimited_26
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_26.readNext()) {

								rowtFileInputDelimited_26 = csvReadertFileInputDelimited_26
										.getValues();
								if (!(rowtFileInputDelimited_26.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_26[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_26++;

								}

							}
							int lastLineTemptFileInputDelimited_26 = totalLinetFileInputDelimited_26
									- footer_tFileInputDelimited_26 < 0 ? 0
									: totalLinetFileInputDelimited_26
											- footer_tFileInputDelimited_26;
							if (lastLinetFileInputDelimited_26 > 0) {
								lastLinetFileInputDelimited_26 = lastLinetFileInputDelimited_26 < lastLineTemptFileInputDelimited_26 ? lastLinetFileInputDelimited_26
										: lastLineTemptFileInputDelimited_26;
							} else {
								lastLinetFileInputDelimited_26 = lastLineTemptFileInputDelimited_26;
							}

							csvReadertFileInputDelimited_26.close();
							if (filename_tFileInputDelimited_26 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_26,
										fieldSeparator_tFileInputDelimited_26[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_26)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_26[0]);
							}
							csvReadertFileInputDelimited_26
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_26[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_26[0] != '\r'))
								csvReadertFileInputDelimited_26
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_26[0]);

							csvReadertFileInputDelimited_26.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_26
									.setEscapeChar(csvReadertFileInputDelimited_26
											.getQuoteChar());

						}

						if (limittFileInputDelimited_26 != 0) {
							for (currentLinetFileInputDelimited_26 = 0; currentLinetFileInputDelimited_26 < 1; currentLinetFileInputDelimited_26++) {
								csvReadertFileInputDelimited_26.readNext();
							}
						}
						csvReadertFileInputDelimited_26
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_26 != 0
							&& csvReadertFileInputDelimited_26 != null
							&& csvReadertFileInputDelimited_26.readNext()) {

						rowtFileInputDelimited_26 = csvReadertFileInputDelimited_26
								.getValues();

						if (rowtFileInputDelimited_26.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_26[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_26++;

						if (lastLinetFileInputDelimited_26 > -1
								&& currentLinetFileInputDelimited_26 > lastLinetFileInputDelimited_26) {
							break;
						}
						outputLinetFileInputDelimited_26++;
						if (limittFileInputDelimited_26 > 0
								&& outputLinetFileInputDelimited_26 > limittFileInputDelimited_26) {
							break;
						}

						TNM_Root = null;

						boolean whetherReject_tFileInputDelimited_26 = false;
						TNM_Root = new TNM_RootStruct();
						try {

							if (rowtFileInputDelimited_26.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_26[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								TNM_Root.C_HLEVEL = null;

								TNM_Root.C_FULLNAME = null;

								TNM_Root.C_NAME = null;

								TNM_Root.C_SYNONYM_CD = null;

								TNM_Root.C_VISUALATTRIBUTES = null;

								TNM_Root.C_TOTALNUM = null;

								TNM_Root.C_BASECODE = null;

								TNM_Root.C_METADATAXML = null;

								TNM_Root.C_FACTTABLECOLUMN = null;

								TNM_Root.C_TABLENAME = null;

								TNM_Root.C_COLUMNNAME = null;

								TNM_Root.C_COLUMNDATATYPE = null;

								TNM_Root.C_OPERATOR = null;

								TNM_Root.C_DIMCODE = null;

								TNM_Root.C_COMMENT = null;

								TNM_Root.C_TOOLTIP = null;

								TNM_Root.M_APPLIED_PATH = null;

								TNM_Root.UPDATE_DATE = null;

								TNM_Root.DOWNLOAD_DATE = null;

								TNM_Root.IMPORT_DATE = null;

								TNM_Root.SOURCESYSTEM_CD = null;

								TNM_Root.VALUETYPE_CD = null;

								TNM_Root.M_EXCLUSION_CD = null;

								TNM_Root.C_PATH = null;

								TNM_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_26 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_26 = 0;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
											.length() > 0) {

										TNM_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]);

									} else {
										TNM_Root.C_HLEVEL = null;
									}

								} else {
									TNM_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 1;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_FULLNAME = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 2;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_NAME = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 3;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
											.length() > 0) {

										TNM_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]);

									} else {
										TNM_Root.C_SYNONYM_CD = null;
									}

								} else {
									TNM_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 4;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 5;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_TOTALNUM = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 6;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_BASECODE = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 7;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_METADATAXML = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 8;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 9;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_TABLENAME = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 10;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_COLUMNNAME = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 11;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
											.length() > 0) {

										TNM_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]);

									} else {
										TNM_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									TNM_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 12;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_OPERATOR = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 13;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_DIMCODE = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 14;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_COMMENT = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 15;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_TOOLTIP = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 16;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
											.length() > 0) {

										TNM_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]);

									} else {
										TNM_Root.M_APPLIED_PATH = null;
									}

								} else {
									TNM_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 17;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
											.length() > 0) {

										TNM_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										TNM_Root.UPDATE_DATE = null;
									}

								} else {
									TNM_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 18;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
											.length() > 0) {

										TNM_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										TNM_Root.DOWNLOAD_DATE = null;
									}

								} else {
									TNM_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 19;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
											.length() > 0) {

										TNM_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										TNM_Root.IMPORT_DATE = null;
									}

								} else {
									TNM_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 20;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 21;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.VALUETYPE_CD = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 22;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.M_EXCLUSION_CD = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 23;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_PATH = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_26 = 24;

								if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

									TNM_Root.C_SYMBOL = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

								} else {
									TNM_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_26 = true;

							System.err.println(e.getMessage());
							TNM_Root = null;

						}

						/**
						 * [tFileInputDelimited_26 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_26 main ] start
						 */

						currentComponent = "tFileInputDelimited_26";

						tos_count_tFileInputDelimited_26++;

						/**
						 * [tFileInputDelimited_26 main ] stop
						 */
						// Start of branch "TNM_Root"
						if (TNM_Root != null) {

							/**
							 * [tUnite_14 main ] start
							 */

							currentComponent = "tUnite_14";

							// ////////

							// for output
							tHashInput_tUnite_14_row47 = new tHashInput_tUnite_14_row47Struct();

							tHashInput_tUnite_14_row47.C_HLEVEL = TNM_Root.C_HLEVEL;
							tHashInput_tUnite_14_row47.C_FULLNAME = TNM_Root.C_FULLNAME;
							tHashInput_tUnite_14_row47.C_NAME = TNM_Root.C_NAME;
							tHashInput_tUnite_14_row47.C_SYNONYM_CD = TNM_Root.C_SYNONYM_CD;
							tHashInput_tUnite_14_row47.C_VISUALATTRIBUTES = TNM_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_14_row47.C_TOTALNUM = TNM_Root.C_TOTALNUM;
							tHashInput_tUnite_14_row47.C_BASECODE = TNM_Root.C_BASECODE;
							tHashInput_tUnite_14_row47.C_METADATAXML = TNM_Root.C_METADATAXML;
							tHashInput_tUnite_14_row47.C_FACTTABLECOLUMN = TNM_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_14_row47.C_TABLENAME = TNM_Root.C_TABLENAME;
							tHashInput_tUnite_14_row47.C_COLUMNNAME = TNM_Root.C_COLUMNNAME;
							tHashInput_tUnite_14_row47.C_COLUMNDATATYPE = TNM_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_14_row47.C_OPERATOR = TNM_Root.C_OPERATOR;
							tHashInput_tUnite_14_row47.C_DIMCODE = TNM_Root.C_DIMCODE;
							tHashInput_tUnite_14_row47.C_COMMENT = TNM_Root.C_COMMENT;
							tHashInput_tUnite_14_row47.C_TOOLTIP = TNM_Root.C_TOOLTIP;
							tHashInput_tUnite_14_row47.M_APPLIED_PATH = TNM_Root.M_APPLIED_PATH;
							tHashInput_tUnite_14_row47.UPDATE_DATE = TNM_Root.UPDATE_DATE;
							tHashInput_tUnite_14_row47.DOWNLOAD_DATE = TNM_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_14_row47.IMPORT_DATE = TNM_Root.IMPORT_DATE;
							tHashInput_tUnite_14_row47.SOURCESYSTEM_CD = TNM_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_14_row47.VALUETYPE_CD = TNM_Root.VALUETYPE_CD;
							tHashInput_tUnite_14_row47.M_EXCLUSION_CD = TNM_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_14_row47.C_PATH = TNM_Root.C_PATH;
							tHashInput_tUnite_14_row47.C_SYMBOL = TNM_Root.C_SYMBOL;

							nb_line_tUnite_14++;

							// ////////

							tos_count_tUnite_14++;

							/**
							 * [tUnite_14 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_14 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_14";

							tHashInput_tUnite_14_row47Struct oneRow_tHashOutput_tUnite_14 = new tHashInput_tUnite_14_row47Struct();

							oneRow_tHashOutput_tUnite_14.C_HLEVEL = tHashInput_tUnite_14_row47.C_HLEVEL;
							oneRow_tHashOutput_tUnite_14.C_FULLNAME = tHashInput_tUnite_14_row47.C_FULLNAME;
							oneRow_tHashOutput_tUnite_14.C_NAME = tHashInput_tUnite_14_row47.C_NAME;
							oneRow_tHashOutput_tUnite_14.C_SYNONYM_CD = tHashInput_tUnite_14_row47.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_14.C_VISUALATTRIBUTES = tHashInput_tUnite_14_row47.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_14.C_TOTALNUM = tHashInput_tUnite_14_row47.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_14.C_BASECODE = tHashInput_tUnite_14_row47.C_BASECODE;
							oneRow_tHashOutput_tUnite_14.C_METADATAXML = tHashInput_tUnite_14_row47.C_METADATAXML;
							oneRow_tHashOutput_tUnite_14.C_FACTTABLECOLUMN = tHashInput_tUnite_14_row47.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_14.C_TABLENAME = tHashInput_tUnite_14_row47.C_TABLENAME;
							oneRow_tHashOutput_tUnite_14.C_COLUMNNAME = tHashInput_tUnite_14_row47.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_14.C_COLUMNDATATYPE = tHashInput_tUnite_14_row47.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_14.C_OPERATOR = tHashInput_tUnite_14_row47.C_OPERATOR;
							oneRow_tHashOutput_tUnite_14.C_DIMCODE = tHashInput_tUnite_14_row47.C_DIMCODE;
							oneRow_tHashOutput_tUnite_14.C_COMMENT = tHashInput_tUnite_14_row47.C_COMMENT;
							oneRow_tHashOutput_tUnite_14.C_TOOLTIP = tHashInput_tUnite_14_row47.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_14.M_APPLIED_PATH = tHashInput_tUnite_14_row47.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_14.UPDATE_DATE = tHashInput_tUnite_14_row47.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_14.DOWNLOAD_DATE = tHashInput_tUnite_14_row47.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_14.IMPORT_DATE = tHashInput_tUnite_14_row47.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_14.SOURCESYSTEM_CD = tHashInput_tUnite_14_row47.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_14.VALUETYPE_CD = tHashInput_tUnite_14_row47.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_14.M_EXCLUSION_CD = tHashInput_tUnite_14_row47.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_14.C_PATH = tHashInput_tUnite_14_row47.C_PATH;
							oneRow_tHashOutput_tUnite_14.C_SYMBOL = tHashInput_tUnite_14_row47.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_14
									.put(oneRow_tHashOutput_tUnite_14);
							nb_line_tHashOutput_tUnite_14++;

							tos_count_tHashOutput_tUnite_14++;

							/**
							 * [tHashOutput_tUnite_14 main ] stop
							 */

						} // End of branch "TNM_Root"

						/**
						 * [tFileInputDelimited_26 end ] start
						 */

						currentComponent = "tFileInputDelimited_26";

						nb_line_tFileInputDelimited_26++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_26 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_26 != null) {
							csvReadertFileInputDelimited_26.close();
						}
					}
					if (csvReadertFileInputDelimited_26 != null) {
						globalMap.put("tFileInputDelimited_26_NB_LINE",
								nb_line_tFileInputDelimited_26);
					}
				}

				ok_Hash.put("tFileInputDelimited_26", true);
				end_Hash.put("tFileInputDelimited_26",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_26 end ] stop
				 */

				/**
				 * [tMap_21 begin ] start
				 */

				ok_Hash.put("tMap_21", false);
				start_Hash.put("tMap_21", System.currentTimeMillis());
				currentComponent = "tMap_21";

				int tos_count_tMap_21 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_21__Struct {
				}
				Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				TNM_FolderStruct TNM_Folder_tmp = new TNM_FolderStruct();
				// ###############################

				/**
				 * [tMap_21 begin ] stop
				 */

				/**
				 * [tFileInputXML_11 begin ] start
				 */

				ok_Hash.put("tFileInputXML_11", false);
				start_Hash.put("tFileInputXML_11", System.currentTimeMillis());
				currentComponent = "tFileInputXML_11";

				int tos_count_tFileInputXML_11 = 0;

				int nb_line_tFileInputXML_11 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_11 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_11 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_11 = false;
				if (os_tFileInputXML_11.indexOf("windows") > -1
						|| os_tFileInputXML_11.indexOf("nt") > -1) {
					isWindows_tFileInputXML_11 = true;
				}
				class NameSpaceTool_tFileInputXML_11 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_11 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_11 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_11
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_11());
				Object filename_tFileInputXML_11 = null;
				try {
					filename_tFileInputXML_11 = context.tnmDir
							+ "/tnm-folders.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_11 != null
						&& filename_tFileInputXML_11 instanceof String
						&& filename_tFileInputXML_11.toString()
								.startsWith("//")) {
					if (!isWindows_tFileInputXML_11) {
						filename_tFileInputXML_11 = filename_tFileInputXML_11
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_11 = true;
				org.dom4j.Document doc_tFileInputXML_11 = null;
				java.io.Closeable toClose_tFileInputXML_11 = null;
				try {
					if (filename_tFileInputXML_11 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_11 = (java.io.InputStream) filename_tFileInputXML_11;
						toClose_tFileInputXML_11 = inputStream_tFileInputXML_11;
						doc_tFileInputXML_11 = reader_tFileInputXML_11
								.read(inputStream_tFileInputXML_11);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_11 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_11)),
								"UTF-8");
						toClose_tFileInputXML_11 = unicodeReader_tFileInputXML_11;
						org.xml.sax.InputSource in_tFileInputXML_11 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_11);
						doc_tFileInputXML_11 = reader_tFileInputXML_11
								.read(in_tFileInputXML_11);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_11 = false;
				} finally {
					if (toClose_tFileInputXML_11 != null) {
						toClose_tFileInputXML_11.close();
					}
				}
				if (isValidFile_tFileInputXML_11) {
					NameSpaceTool_tFileInputXML_11 nsTool_tFileInputXML_11 = new NameSpaceTool_tFileInputXML_11();
					nsTool_tFileInputXML_11.countNSMap(doc_tFileInputXML_11
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_11 = nsTool_tFileInputXML_11.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_11 = doc_tFileInputXML_11
							.createXPath(nsTool_tFileInputXML_11
									.addDefaultNSPrefix("/tnm/class",
											"/tnm/class"));
					x_tFileInputXML_11
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_11 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_11
							.selectNodes(doc_tFileInputXML_11);
					XML_API_tFileInputXML_11 xml_api_tFileInputXML_11 = new XML_API_tFileInputXML_11();
					String str_tFileInputXML_11 = "";
					org.dom4j.Node node_tFileInputXML_11 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_11 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_11
									.addDefaultNSPrefix("code", "/tnm/class"));
					xTmp0_tFileInputXML_11
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);
					org.dom4j.XPath xTmp1_tFileInputXML_11 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_11
									.addDefaultNSPrefix("label", "/tnm/class"));
					xTmp1_tFileInputXML_11
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);
					org.dom4j.XPath xTmp2_tFileInputXML_11 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_11
									.addDefaultNSPrefix("path", "/tnm/class"));
					xTmp2_tFileInputXML_11
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);
					org.dom4j.XPath xTmp3_tFileInputXML_11 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_11
									.addDefaultNSPrefix("level", "/tnm/class"));
					xTmp3_tFileInputXML_11
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_11 : nodeList_tFileInputXML_11) {
						nb_line_tFileInputXML_11++;
						row26 = null;
						boolean whetherReject_tFileInputXML_11 = false;
						row26 = new row26Struct();
						try {
							Object obj0_tFileInputXML_11 = xTmp0_tFileInputXML_11
									.evaluate(temp_tFileInputXML_11);
							if (obj0_tFileInputXML_11 == null) {
								node_tFileInputXML_11 = null;
								str_tFileInputXML_11 = "";

							} else if (obj0_tFileInputXML_11 instanceof org.dom4j.Node) {
								node_tFileInputXML_11 = (org.dom4j.Node) obj0_tFileInputXML_11;
								str_tFileInputXML_11 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_11,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_11 instanceof String
									|| obj0_tFileInputXML_11 instanceof Number) {
								node_tFileInputXML_11 = temp_tFileInputXML_11;
								str_tFileInputXML_11 = String
										.valueOf(obj0_tFileInputXML_11);
							} else if (obj0_tFileInputXML_11 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_11;
								node_tFileInputXML_11 = nodes_tFileInputXML_11
										.size() > 0 ? nodes_tFileInputXML_11
										.get(0) : null;
								str_tFileInputXML_11 = node_tFileInputXML_11 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_11,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_11
									.isEmpty(node_tFileInputXML_11)) {
								row26.code = "";
							} else if (xml_api_tFileInputXML_11
									.isMissing(node_tFileInputXML_11)) {
								row26.code = null;
							} else {
								row26.code = str_tFileInputXML_11;
							}
							Object obj1_tFileInputXML_11 = xTmp1_tFileInputXML_11
									.evaluate(temp_tFileInputXML_11);
							if (obj1_tFileInputXML_11 == null) {
								node_tFileInputXML_11 = null;
								str_tFileInputXML_11 = "";

							} else if (obj1_tFileInputXML_11 instanceof org.dom4j.Node) {
								node_tFileInputXML_11 = (org.dom4j.Node) obj1_tFileInputXML_11;
								str_tFileInputXML_11 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_11,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_11 instanceof String
									|| obj1_tFileInputXML_11 instanceof Number) {
								node_tFileInputXML_11 = temp_tFileInputXML_11;
								str_tFileInputXML_11 = String
										.valueOf(obj1_tFileInputXML_11);
							} else if (obj1_tFileInputXML_11 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_11;
								node_tFileInputXML_11 = nodes_tFileInputXML_11
										.size() > 0 ? nodes_tFileInputXML_11
										.get(0) : null;
								str_tFileInputXML_11 = node_tFileInputXML_11 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_11,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_11
									.isEmpty(node_tFileInputXML_11)) {
								row26.label = "";
							} else if (xml_api_tFileInputXML_11
									.isMissing(node_tFileInputXML_11)) {
								row26.label = null;
							} else {
								row26.label = str_tFileInputXML_11;
							}
							Object obj2_tFileInputXML_11 = xTmp2_tFileInputXML_11
									.evaluate(temp_tFileInputXML_11);
							if (obj2_tFileInputXML_11 == null) {
								node_tFileInputXML_11 = null;
								str_tFileInputXML_11 = "";

							} else if (obj2_tFileInputXML_11 instanceof org.dom4j.Node) {
								node_tFileInputXML_11 = (org.dom4j.Node) obj2_tFileInputXML_11;
								str_tFileInputXML_11 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_11,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_11 instanceof String
									|| obj2_tFileInputXML_11 instanceof Number) {
								node_tFileInputXML_11 = temp_tFileInputXML_11;
								str_tFileInputXML_11 = String
										.valueOf(obj2_tFileInputXML_11);
							} else if (obj2_tFileInputXML_11 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_11;
								node_tFileInputXML_11 = nodes_tFileInputXML_11
										.size() > 0 ? nodes_tFileInputXML_11
										.get(0) : null;
								str_tFileInputXML_11 = node_tFileInputXML_11 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_11,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_11
									.isEmpty(node_tFileInputXML_11)) {
								row26.path = "";
							} else if (xml_api_tFileInputXML_11
									.isMissing(node_tFileInputXML_11)) {
								row26.path = null;
							} else {
								row26.path = str_tFileInputXML_11;
							}
							Object obj3_tFileInputXML_11 = xTmp3_tFileInputXML_11
									.evaluate(temp_tFileInputXML_11);
							if (obj3_tFileInputXML_11 == null) {
								node_tFileInputXML_11 = null;
								str_tFileInputXML_11 = "";

							} else if (obj3_tFileInputXML_11 instanceof org.dom4j.Node) {
								node_tFileInputXML_11 = (org.dom4j.Node) obj3_tFileInputXML_11;
								str_tFileInputXML_11 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_11,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_11 instanceof String
									|| obj3_tFileInputXML_11 instanceof Number) {
								node_tFileInputXML_11 = temp_tFileInputXML_11;
								str_tFileInputXML_11 = String
										.valueOf(obj3_tFileInputXML_11);
							} else if (obj3_tFileInputXML_11 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_11;
								node_tFileInputXML_11 = nodes_tFileInputXML_11
										.size() > 0 ? nodes_tFileInputXML_11
										.get(0) : null;
								str_tFileInputXML_11 = node_tFileInputXML_11 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_11,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_11
									.isMissing(node_tFileInputXML_11)
									|| xml_api_tFileInputXML_11
											.isEmpty(node_tFileInputXML_11)) {
								row26.level = 0;
							} else {
								row26.level = ParserUtils
										.parseTo_int(str_tFileInputXML_11);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_11 = true;
							System.err.println(e.getMessage());
							row26 = null;
						}

						/**
						 * [tFileInputXML_11 begin ] stop
						 */
						/**
						 * [tFileInputXML_11 main ] start
						 */

						currentComponent = "tFileInputXML_11";

						tos_count_tFileInputXML_11++;

						/**
						 * [tFileInputXML_11 main ] stop
						 */
						// Start of branch "row26"
						if (row26 != null) {

							/**
							 * [tMap_21 main ] start
							 */

							currentComponent = "tMap_21";

							boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_21 = false;
							boolean mainRowRejected_tMap_21 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
								// ###############################
								// # Output tables

								TNM_Folder = null;

								// # Output table : 'TNM_Folder'
								TNM_Folder_tmp.C_HLEVEL = row26.level + 1;
								TNM_Folder_tmp.C_FULLNAME = row26.path;
								TNM_Folder_tmp.C_NAME = row26.code + " - "
										+ row26.label;
								TNM_Folder_tmp.C_SYNONYM_CD = 'N';
								TNM_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								TNM_Folder_tmp.C_TOTALNUM = null;
								TNM_Folder_tmp.C_BASECODE = null;
								TNM_Folder_tmp.C_METADATAXML = null;
								TNM_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								TNM_Folder_tmp.C_TABLENAME = "concept_dimension";
								TNM_Folder_tmp.C_COLUMNNAME = "concept_path";
								TNM_Folder_tmp.C_COLUMNDATATYPE = 'T';
								TNM_Folder_tmp.C_OPERATOR = "LIKE";
								TNM_Folder_tmp.C_DIMCODE = row26.path;
								TNM_Folder_tmp.C_COMMENT = null;
								TNM_Folder_tmp.C_TOOLTIP = row26.label;
								TNM_Folder_tmp.M_APPLIED_PATH = '@';
								TNM_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								TNM_Folder_tmp.DOWNLOAD_DATE = null;
								TNM_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								TNM_Folder_tmp.SOURCESYSTEM_CD = "TNM";
								TNM_Folder_tmp.VALUETYPE_CD = null;
								TNM_Folder_tmp.M_EXCLUSION_CD = null;
								TNM_Folder_tmp.C_PATH = null;
								TNM_Folder_tmp.C_SYMBOL = null;
								TNM_Folder = TNM_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_21 = false;

							tos_count_tMap_21++;

							/**
							 * [tMap_21 main ] stop
							 */
							// Start of branch "TNM_Folder"
							if (TNM_Folder != null) {

								/**
								 * [tUnite_14 main ] start
								 */

								currentComponent = "tUnite_14";

								// ////////

								// for output
								tHashInput_tUnite_14_row47 = new tHashInput_tUnite_14_row47Struct();

								tHashInput_tUnite_14_row47.C_HLEVEL = TNM_Folder.C_HLEVEL;
								tHashInput_tUnite_14_row47.C_FULLNAME = TNM_Folder.C_FULLNAME;
								tHashInput_tUnite_14_row47.C_NAME = TNM_Folder.C_NAME;
								tHashInput_tUnite_14_row47.C_SYNONYM_CD = TNM_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_14_row47.C_VISUALATTRIBUTES = TNM_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_14_row47.C_TOTALNUM = TNM_Folder.C_TOTALNUM;
								tHashInput_tUnite_14_row47.C_BASECODE = TNM_Folder.C_BASECODE;
								tHashInput_tUnite_14_row47.C_METADATAXML = TNM_Folder.C_METADATAXML;
								tHashInput_tUnite_14_row47.C_FACTTABLECOLUMN = TNM_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_14_row47.C_TABLENAME = TNM_Folder.C_TABLENAME;
								tHashInput_tUnite_14_row47.C_COLUMNNAME = TNM_Folder.C_COLUMNNAME;
								tHashInput_tUnite_14_row47.C_COLUMNDATATYPE = TNM_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_14_row47.C_OPERATOR = TNM_Folder.C_OPERATOR;
								tHashInput_tUnite_14_row47.C_DIMCODE = TNM_Folder.C_DIMCODE;
								tHashInput_tUnite_14_row47.C_COMMENT = TNM_Folder.C_COMMENT;
								tHashInput_tUnite_14_row47.C_TOOLTIP = TNM_Folder.C_TOOLTIP;
								tHashInput_tUnite_14_row47.M_APPLIED_PATH = TNM_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_14_row47.UPDATE_DATE = TNM_Folder.UPDATE_DATE;
								tHashInput_tUnite_14_row47.DOWNLOAD_DATE = TNM_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_14_row47.IMPORT_DATE = TNM_Folder.IMPORT_DATE;
								tHashInput_tUnite_14_row47.SOURCESYSTEM_CD = TNM_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_14_row47.VALUETYPE_CD = TNM_Folder.VALUETYPE_CD;
								tHashInput_tUnite_14_row47.M_EXCLUSION_CD = TNM_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_14_row47.C_PATH = TNM_Folder.C_PATH;
								tHashInput_tUnite_14_row47.C_SYMBOL = TNM_Folder.C_SYMBOL;

								nb_line_tUnite_14++;

								// ////////

								tos_count_tUnite_14++;

								/**
								 * [tUnite_14 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_14 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_14";

								tHashInput_tUnite_14_row47Struct oneRow_tHashOutput_tUnite_14 = new tHashInput_tUnite_14_row47Struct();

								oneRow_tHashOutput_tUnite_14.C_HLEVEL = tHashInput_tUnite_14_row47.C_HLEVEL;
								oneRow_tHashOutput_tUnite_14.C_FULLNAME = tHashInput_tUnite_14_row47.C_FULLNAME;
								oneRow_tHashOutput_tUnite_14.C_NAME = tHashInput_tUnite_14_row47.C_NAME;
								oneRow_tHashOutput_tUnite_14.C_SYNONYM_CD = tHashInput_tUnite_14_row47.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_14.C_VISUALATTRIBUTES = tHashInput_tUnite_14_row47.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_14.C_TOTALNUM = tHashInput_tUnite_14_row47.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_14.C_BASECODE = tHashInput_tUnite_14_row47.C_BASECODE;
								oneRow_tHashOutput_tUnite_14.C_METADATAXML = tHashInput_tUnite_14_row47.C_METADATAXML;
								oneRow_tHashOutput_tUnite_14.C_FACTTABLECOLUMN = tHashInput_tUnite_14_row47.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_14.C_TABLENAME = tHashInput_tUnite_14_row47.C_TABLENAME;
								oneRow_tHashOutput_tUnite_14.C_COLUMNNAME = tHashInput_tUnite_14_row47.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_14.C_COLUMNDATATYPE = tHashInput_tUnite_14_row47.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_14.C_OPERATOR = tHashInput_tUnite_14_row47.C_OPERATOR;
								oneRow_tHashOutput_tUnite_14.C_DIMCODE = tHashInput_tUnite_14_row47.C_DIMCODE;
								oneRow_tHashOutput_tUnite_14.C_COMMENT = tHashInput_tUnite_14_row47.C_COMMENT;
								oneRow_tHashOutput_tUnite_14.C_TOOLTIP = tHashInput_tUnite_14_row47.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_14.M_APPLIED_PATH = tHashInput_tUnite_14_row47.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_14.UPDATE_DATE = tHashInput_tUnite_14_row47.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_14.DOWNLOAD_DATE = tHashInput_tUnite_14_row47.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_14.IMPORT_DATE = tHashInput_tUnite_14_row47.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_14.SOURCESYSTEM_CD = tHashInput_tUnite_14_row47.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_14.VALUETYPE_CD = tHashInput_tUnite_14_row47.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_14.M_EXCLUSION_CD = tHashInput_tUnite_14_row47.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_14.C_PATH = tHashInput_tUnite_14_row47.C_PATH;
								oneRow_tHashOutput_tUnite_14.C_SYMBOL = tHashInput_tUnite_14_row47.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_14
										.put(oneRow_tHashOutput_tUnite_14);
								nb_line_tHashOutput_tUnite_14++;

								tos_count_tHashOutput_tUnite_14++;

								/**
								 * [tHashOutput_tUnite_14 main ] stop
								 */

							} // End of branch "TNM_Folder"

						} // End of branch "row26"

						/**
						 * [tFileInputXML_11 end ] start
						 */

						currentComponent = "tFileInputXML_11";

					}
				}
				globalMap.put("tFileInputXML_11_NB_LINE",
						nb_line_tFileInputXML_11);

				ok_Hash.put("tFileInputXML_11", true);
				end_Hash.put("tFileInputXML_11", System.currentTimeMillis());

				/**
				 * [tFileInputXML_11 end ] stop
				 */

				/**
				 * [tMap_21 end ] start
				 */

				currentComponent = "tMap_21";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_21", true);
				end_Hash.put("tMap_21", System.currentTimeMillis());

				/**
				 * [tMap_21 end ] stop
				 */

				/**
				 * [tMap_22 begin ] start
				 */

				ok_Hash.put("tMap_22", false);
				start_Hash.put("tMap_22", System.currentTimeMillis());
				currentComponent = "tMap_22";

				int tos_count_tMap_22 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_22__Struct {
				}
				Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				TNM_LeafStruct TNM_Leaf_tmp = new TNM_LeafStruct();
				// ###############################

				/**
				 * [tMap_22 begin ] stop
				 */

				/**
				 * [tFileInputXML_12 begin ] start
				 */

				ok_Hash.put("tFileInputXML_12", false);
				start_Hash.put("tFileInputXML_12", System.currentTimeMillis());
				currentComponent = "tFileInputXML_12";

				int tos_count_tFileInputXML_12 = 0;

				int nb_line_tFileInputXML_12 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_12 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_12 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_12 = false;
				if (os_tFileInputXML_12.indexOf("windows") > -1
						|| os_tFileInputXML_12.indexOf("nt") > -1) {
					isWindows_tFileInputXML_12 = true;
				}
				class NameSpaceTool_tFileInputXML_12 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_12 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_12 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_12
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_12());
				Object filename_tFileInputXML_12 = null;
				try {
					filename_tFileInputXML_12 = context.tnmDir
							+ "/tnm-leafs.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_12 != null
						&& filename_tFileInputXML_12 instanceof String
						&& filename_tFileInputXML_12.toString()
								.startsWith("//")) {
					if (!isWindows_tFileInputXML_12) {
						filename_tFileInputXML_12 = filename_tFileInputXML_12
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_12 = true;
				org.dom4j.Document doc_tFileInputXML_12 = null;
				java.io.Closeable toClose_tFileInputXML_12 = null;
				try {
					if (filename_tFileInputXML_12 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_12 = (java.io.InputStream) filename_tFileInputXML_12;
						toClose_tFileInputXML_12 = inputStream_tFileInputXML_12;
						doc_tFileInputXML_12 = reader_tFileInputXML_12
								.read(inputStream_tFileInputXML_12);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_12 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_12)),
								"UTF-8");
						toClose_tFileInputXML_12 = unicodeReader_tFileInputXML_12;
						org.xml.sax.InputSource in_tFileInputXML_12 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_12);
						doc_tFileInputXML_12 = reader_tFileInputXML_12
								.read(in_tFileInputXML_12);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_12 = false;
				} finally {
					if (toClose_tFileInputXML_12 != null) {
						toClose_tFileInputXML_12.close();
					}
				}
				if (isValidFile_tFileInputXML_12) {
					NameSpaceTool_tFileInputXML_12 nsTool_tFileInputXML_12 = new NameSpaceTool_tFileInputXML_12();
					nsTool_tFileInputXML_12.countNSMap(doc_tFileInputXML_12
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_12 = nsTool_tFileInputXML_12.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_12 = doc_tFileInputXML_12
							.createXPath(nsTool_tFileInputXML_12
									.addDefaultNSPrefix("/tnm/class",
											"/tnm/class"));
					x_tFileInputXML_12
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_12);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_12 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_12
							.selectNodes(doc_tFileInputXML_12);
					XML_API_tFileInputXML_12 xml_api_tFileInputXML_12 = new XML_API_tFileInputXML_12();
					String str_tFileInputXML_12 = "";
					org.dom4j.Node node_tFileInputXML_12 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_12 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_12
									.addDefaultNSPrefix("code", "/tnm/class"));
					xTmp0_tFileInputXML_12
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_12);
					org.dom4j.XPath xTmp1_tFileInputXML_12 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_12
									.addDefaultNSPrefix("label", "/tnm/class"));
					xTmp1_tFileInputXML_12
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_12);
					org.dom4j.XPath xTmp2_tFileInputXML_12 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_12
									.addDefaultNSPrefix("path", "/tnm/class"));
					xTmp2_tFileInputXML_12
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_12);
					org.dom4j.XPath xTmp3_tFileInputXML_12 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_12
									.addDefaultNSPrefix("level", "/tnm/class"));
					xTmp3_tFileInputXML_12
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_12);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_12 : nodeList_tFileInputXML_12) {
						nb_line_tFileInputXML_12++;
						row27 = null;
						boolean whetherReject_tFileInputXML_12 = false;
						row27 = new row27Struct();
						try {
							Object obj0_tFileInputXML_12 = xTmp0_tFileInputXML_12
									.evaluate(temp_tFileInputXML_12);
							if (obj0_tFileInputXML_12 == null) {
								node_tFileInputXML_12 = null;
								str_tFileInputXML_12 = "";

							} else if (obj0_tFileInputXML_12 instanceof org.dom4j.Node) {
								node_tFileInputXML_12 = (org.dom4j.Node) obj0_tFileInputXML_12;
								str_tFileInputXML_12 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_12,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_12 instanceof String
									|| obj0_tFileInputXML_12 instanceof Number) {
								node_tFileInputXML_12 = temp_tFileInputXML_12;
								str_tFileInputXML_12 = String
										.valueOf(obj0_tFileInputXML_12);
							} else if (obj0_tFileInputXML_12 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_12 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_12;
								node_tFileInputXML_12 = nodes_tFileInputXML_12
										.size() > 0 ? nodes_tFileInputXML_12
										.get(0) : null;
								str_tFileInputXML_12 = node_tFileInputXML_12 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_12,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_12
									.isEmpty(node_tFileInputXML_12)) {
								row27.code = "";
							} else if (xml_api_tFileInputXML_12
									.isMissing(node_tFileInputXML_12)) {
								row27.code = null;
							} else {
								row27.code = str_tFileInputXML_12;
							}
							Object obj1_tFileInputXML_12 = xTmp1_tFileInputXML_12
									.evaluate(temp_tFileInputXML_12);
							if (obj1_tFileInputXML_12 == null) {
								node_tFileInputXML_12 = null;
								str_tFileInputXML_12 = "";

							} else if (obj1_tFileInputXML_12 instanceof org.dom4j.Node) {
								node_tFileInputXML_12 = (org.dom4j.Node) obj1_tFileInputXML_12;
								str_tFileInputXML_12 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_12,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_12 instanceof String
									|| obj1_tFileInputXML_12 instanceof Number) {
								node_tFileInputXML_12 = temp_tFileInputXML_12;
								str_tFileInputXML_12 = String
										.valueOf(obj1_tFileInputXML_12);
							} else if (obj1_tFileInputXML_12 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_12 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_12;
								node_tFileInputXML_12 = nodes_tFileInputXML_12
										.size() > 0 ? nodes_tFileInputXML_12
										.get(0) : null;
								str_tFileInputXML_12 = node_tFileInputXML_12 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_12,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_12
									.isEmpty(node_tFileInputXML_12)) {
								row27.label = "";
							} else if (xml_api_tFileInputXML_12
									.isMissing(node_tFileInputXML_12)) {
								row27.label = null;
							} else {
								row27.label = str_tFileInputXML_12;
							}
							Object obj2_tFileInputXML_12 = xTmp2_tFileInputXML_12
									.evaluate(temp_tFileInputXML_12);
							if (obj2_tFileInputXML_12 == null) {
								node_tFileInputXML_12 = null;
								str_tFileInputXML_12 = "";

							} else if (obj2_tFileInputXML_12 instanceof org.dom4j.Node) {
								node_tFileInputXML_12 = (org.dom4j.Node) obj2_tFileInputXML_12;
								str_tFileInputXML_12 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_12,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_12 instanceof String
									|| obj2_tFileInputXML_12 instanceof Number) {
								node_tFileInputXML_12 = temp_tFileInputXML_12;
								str_tFileInputXML_12 = String
										.valueOf(obj2_tFileInputXML_12);
							} else if (obj2_tFileInputXML_12 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_12 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_12;
								node_tFileInputXML_12 = nodes_tFileInputXML_12
										.size() > 0 ? nodes_tFileInputXML_12
										.get(0) : null;
								str_tFileInputXML_12 = node_tFileInputXML_12 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_12,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_12
									.isEmpty(node_tFileInputXML_12)) {
								row27.path = "";
							} else if (xml_api_tFileInputXML_12
									.isMissing(node_tFileInputXML_12)) {
								row27.path = null;
							} else {
								row27.path = str_tFileInputXML_12;
							}
							Object obj3_tFileInputXML_12 = xTmp3_tFileInputXML_12
									.evaluate(temp_tFileInputXML_12);
							if (obj3_tFileInputXML_12 == null) {
								node_tFileInputXML_12 = null;
								str_tFileInputXML_12 = "";

							} else if (obj3_tFileInputXML_12 instanceof org.dom4j.Node) {
								node_tFileInputXML_12 = (org.dom4j.Node) obj3_tFileInputXML_12;
								str_tFileInputXML_12 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_12,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_12 instanceof String
									|| obj3_tFileInputXML_12 instanceof Number) {
								node_tFileInputXML_12 = temp_tFileInputXML_12;
								str_tFileInputXML_12 = String
										.valueOf(obj3_tFileInputXML_12);
							} else if (obj3_tFileInputXML_12 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_12 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_12;
								node_tFileInputXML_12 = nodes_tFileInputXML_12
										.size() > 0 ? nodes_tFileInputXML_12
										.get(0) : null;
								str_tFileInputXML_12 = node_tFileInputXML_12 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_12,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_12
									.isMissing(node_tFileInputXML_12)
									|| xml_api_tFileInputXML_12
											.isEmpty(node_tFileInputXML_12)) {
								row27.level = 0;
							} else {
								row27.level = ParserUtils
										.parseTo_int(str_tFileInputXML_12);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_12 = true;
							System.err.println(e.getMessage());
							row27 = null;
						}

						/**
						 * [tFileInputXML_12 begin ] stop
						 */
						/**
						 * [tFileInputXML_12 main ] start
						 */

						currentComponent = "tFileInputXML_12";

						tos_count_tFileInputXML_12++;

						/**
						 * [tFileInputXML_12 main ] stop
						 */
						// Start of branch "row27"
						if (row27 != null) {

							/**
							 * [tMap_22 main ] start
							 */

							currentComponent = "tMap_22";

							boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_22 = false;
							boolean mainRowRejected_tMap_22 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
								// ###############################
								// # Output tables

								TNM_Leaf = null;

								// # Output table : 'TNM_Leaf'
								TNM_Leaf_tmp.C_HLEVEL = row27.level + 1;
								TNM_Leaf_tmp.C_FULLNAME = row27.path + "Wert\\";
								TNM_Leaf_tmp.C_NAME = row27.code + " - "
										+ row27.label + " (Wert)";
								TNM_Leaf_tmp.C_SYNONYM_CD = 'N';
								TNM_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								TNM_Leaf_tmp.C_TOTALNUM = null;
								TNM_Leaf_tmp.C_BASECODE = "ST|TNM:"
										+ row27.code;
								TNM_Leaf_tmp.C_METADATAXML = null;
								TNM_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								TNM_Leaf_tmp.C_TABLENAME = "concept_dimension";
								TNM_Leaf_tmp.C_COLUMNNAME = "concept_path";
								TNM_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								TNM_Leaf_tmp.C_OPERATOR = "LIKE";
								TNM_Leaf_tmp.C_DIMCODE = row27.path;
								TNM_Leaf_tmp.C_COMMENT = null;
								TNM_Leaf_tmp.C_TOOLTIP = row27.label;
								TNM_Leaf_tmp.M_APPLIED_PATH = '@';
								TNM_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								TNM_Leaf_tmp.DOWNLOAD_DATE = null;
								TNM_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								TNM_Leaf_tmp.SOURCESYSTEM_CD = "TNM";
								TNM_Leaf_tmp.VALUETYPE_CD = null;
								TNM_Leaf_tmp.M_EXCLUSION_CD = null;
								TNM_Leaf_tmp.C_PATH = null;
								TNM_Leaf_tmp.C_SYMBOL = null;
								TNM_Leaf = TNM_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_22 = false;

							tos_count_tMap_22++;

							/**
							 * [tMap_22 main ] stop
							 */
							// Start of branch "TNM_Leaf"
							if (TNM_Leaf != null) {

								/**
								 * [tUnite_14 main ] start
								 */

								currentComponent = "tUnite_14";

								// ////////

								// for output
								tHashInput_tUnite_14_row47 = new tHashInput_tUnite_14_row47Struct();

								tHashInput_tUnite_14_row47.C_HLEVEL = TNM_Leaf.C_HLEVEL;
								tHashInput_tUnite_14_row47.C_FULLNAME = TNM_Leaf.C_FULLNAME;
								tHashInput_tUnite_14_row47.C_NAME = TNM_Leaf.C_NAME;
								tHashInput_tUnite_14_row47.C_SYNONYM_CD = TNM_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_14_row47.C_VISUALATTRIBUTES = TNM_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_14_row47.C_TOTALNUM = TNM_Leaf.C_TOTALNUM;
								tHashInput_tUnite_14_row47.C_BASECODE = TNM_Leaf.C_BASECODE;
								tHashInput_tUnite_14_row47.C_METADATAXML = TNM_Leaf.C_METADATAXML;
								tHashInput_tUnite_14_row47.C_FACTTABLECOLUMN = TNM_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_14_row47.C_TABLENAME = TNM_Leaf.C_TABLENAME;
								tHashInput_tUnite_14_row47.C_COLUMNNAME = TNM_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_14_row47.C_COLUMNDATATYPE = TNM_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_14_row47.C_OPERATOR = TNM_Leaf.C_OPERATOR;
								tHashInput_tUnite_14_row47.C_DIMCODE = TNM_Leaf.C_DIMCODE;
								tHashInput_tUnite_14_row47.C_COMMENT = TNM_Leaf.C_COMMENT;
								tHashInput_tUnite_14_row47.C_TOOLTIP = TNM_Leaf.C_TOOLTIP;
								tHashInput_tUnite_14_row47.M_APPLIED_PATH = TNM_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_14_row47.UPDATE_DATE = TNM_Leaf.UPDATE_DATE;
								tHashInput_tUnite_14_row47.DOWNLOAD_DATE = TNM_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_14_row47.IMPORT_DATE = TNM_Leaf.IMPORT_DATE;
								tHashInput_tUnite_14_row47.SOURCESYSTEM_CD = TNM_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_14_row47.VALUETYPE_CD = TNM_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_14_row47.M_EXCLUSION_CD = TNM_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_14_row47.C_PATH = TNM_Leaf.C_PATH;
								tHashInput_tUnite_14_row47.C_SYMBOL = TNM_Leaf.C_SYMBOL;

								nb_line_tUnite_14++;

								// ////////

								tos_count_tUnite_14++;

								/**
								 * [tUnite_14 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_14 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_14";

								tHashInput_tUnite_14_row47Struct oneRow_tHashOutput_tUnite_14 = new tHashInput_tUnite_14_row47Struct();

								oneRow_tHashOutput_tUnite_14.C_HLEVEL = tHashInput_tUnite_14_row47.C_HLEVEL;
								oneRow_tHashOutput_tUnite_14.C_FULLNAME = tHashInput_tUnite_14_row47.C_FULLNAME;
								oneRow_tHashOutput_tUnite_14.C_NAME = tHashInput_tUnite_14_row47.C_NAME;
								oneRow_tHashOutput_tUnite_14.C_SYNONYM_CD = tHashInput_tUnite_14_row47.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_14.C_VISUALATTRIBUTES = tHashInput_tUnite_14_row47.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_14.C_TOTALNUM = tHashInput_tUnite_14_row47.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_14.C_BASECODE = tHashInput_tUnite_14_row47.C_BASECODE;
								oneRow_tHashOutput_tUnite_14.C_METADATAXML = tHashInput_tUnite_14_row47.C_METADATAXML;
								oneRow_tHashOutput_tUnite_14.C_FACTTABLECOLUMN = tHashInput_tUnite_14_row47.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_14.C_TABLENAME = tHashInput_tUnite_14_row47.C_TABLENAME;
								oneRow_tHashOutput_tUnite_14.C_COLUMNNAME = tHashInput_tUnite_14_row47.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_14.C_COLUMNDATATYPE = tHashInput_tUnite_14_row47.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_14.C_OPERATOR = tHashInput_tUnite_14_row47.C_OPERATOR;
								oneRow_tHashOutput_tUnite_14.C_DIMCODE = tHashInput_tUnite_14_row47.C_DIMCODE;
								oneRow_tHashOutput_tUnite_14.C_COMMENT = tHashInput_tUnite_14_row47.C_COMMENT;
								oneRow_tHashOutput_tUnite_14.C_TOOLTIP = tHashInput_tUnite_14_row47.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_14.M_APPLIED_PATH = tHashInput_tUnite_14_row47.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_14.UPDATE_DATE = tHashInput_tUnite_14_row47.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_14.DOWNLOAD_DATE = tHashInput_tUnite_14_row47.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_14.IMPORT_DATE = tHashInput_tUnite_14_row47.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_14.SOURCESYSTEM_CD = tHashInput_tUnite_14_row47.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_14.VALUETYPE_CD = tHashInput_tUnite_14_row47.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_14.M_EXCLUSION_CD = tHashInput_tUnite_14_row47.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_14.C_PATH = tHashInput_tUnite_14_row47.C_PATH;
								oneRow_tHashOutput_tUnite_14.C_SYMBOL = tHashInput_tUnite_14_row47.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_14
										.put(oneRow_tHashOutput_tUnite_14);
								nb_line_tHashOutput_tUnite_14++;

								tos_count_tHashOutput_tUnite_14++;

								/**
								 * [tHashOutput_tUnite_14 main ] stop
								 */

							} // End of branch "TNM_Leaf"

						} // End of branch "row27"

						/**
						 * [tFileInputXML_12 end ] start
						 */

						currentComponent = "tFileInputXML_12";

					}
				}
				globalMap.put("tFileInputXML_12_NB_LINE",
						nb_line_tFileInputXML_12);

				ok_Hash.put("tFileInputXML_12", true);
				end_Hash.put("tFileInputXML_12", System.currentTimeMillis());

				/**
				 * [tFileInputXML_12 end ] stop
				 */

				/**
				 * [tMap_22 end ] start
				 */

				currentComponent = "tMap_22";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_22", true);
				end_Hash.put("tMap_22", System.currentTimeMillis());

				/**
				 * [tMap_22 end ] stop
				 */

				/**
				 * [tUnite_14 end ] start
				 */

				currentComponent = "tUnite_14";

				globalMap.put("tUnite_14_NB_LINE", nb_line_tUnite_14);

				ok_Hash.put("tUnite_14", true);
				end_Hash.put("tUnite_14", System.currentTimeMillis());

				/**
				 * [tUnite_14 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_14 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_14";

				globalMap.put("tHashOutput_tUnite_14_NB_LINE",
						nb_line_tHashOutput_tUnite_14);

				ok_Hash.put("tHashOutput_tUnite_14", true);
				end_Hash.put("tHashOutput_tUnite_14",
						System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_26_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_5_row43Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_5_row43Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_5_row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MedDRA_RootStruct implements
			routines.system.IPersistableRow<MedDRA_RootStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MedDRA_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MedDRA_Level1_SOCStruct implements
			routines.system.IPersistableRow<MedDRA_Level1_SOCStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MedDRA_Level1_SOCStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String short_name;

		public String getShort_name() {
			return this.short_name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.short_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.short_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",short_name=" + short_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_30Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_30Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String short_name;

		public String getShort_name() {
			return this.short_name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code == null) ? 0 : this.code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_30Struct other = (after_tFileInputDelimited_30Struct) obj;

			if (this.code == null) {
				if (other.code != null)
					return false;
			} else if (!this.code.equals(other.code))
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_30Struct other) {

			other.code = this.code;
			other.label = this.label;
			other.short_name = this.short_name;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_30Struct other) {

			other.code = this.code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.short_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.short_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",short_name=" + short_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code, other.code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MedDRA_Level2_HLGTStruct implements
			routines.system.IPersistableRow<MedDRA_Level2_HLGTStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MedDRA_Level2_HLGTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_44Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_44Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code == null) ? 0 : this.code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_44Struct other = (after_tFileInputDelimited_44Struct) obj;

			if (this.code == null) {
				if (other.code != null)
					return false;
			} else if (!this.code.equals(other.code))
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_44Struct other) {

			other.code = this.code;
			other.label = this.label;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_44Struct other) {

			other.code = this.code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_44Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code, other.code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MedDRA_Level3_HLTStruct implements
			routines.system.IPersistableRow<MedDRA_Level3_HLTStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MedDRA_Level3_HLTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_36Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_36Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code == null) ? 0 : this.code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_36Struct other = (after_tFileInputDelimited_36Struct) obj;

			if (this.code == null) {
				if (other.code != null)
					return false;
			} else if (!this.code.equals(other.code))
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_36Struct other) {

			other.code = this.code;
			other.label = this.label;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_36Struct other) {

			other.code = this.code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code, other.code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MedDRA_Level4_PTStruct implements
			routines.system.IPersistableRow<MedDRA_Level4_PTStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MedDRA_Level4_PTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_41Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_41Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code == null) ? 0 : this.code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_41Struct other = (after_tFileInputDelimited_41Struct) obj;

			if (this.code == null) {
				if (other.code != null)
					return false;
			} else if (!this.code.equals(other.code))
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_41Struct other) {

			other.code = this.code;
			other.label = this.label;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_41Struct other) {

			other.code = this.code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_41Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code, other.code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MedDRA_Level5_LLTStruct implements
			routines.system.IPersistableRow<MedDRA_Level5_LLTStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MedDRA_Level5_LLTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.broader = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.broader, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",broader=" + broader);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_38Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_38Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code == null) ? 0 : this.code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_38Struct other = (after_tFileInputDelimited_38Struct) obj;

			if (this.code == null) {
				if (other.code != null)
					return false;
			} else if (!this.code.equals(other.code))
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_38Struct other) {

			other.code = this.code;
			other.label = this.label;
			other.broader = this.broader;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_38Struct other) {

			other.code = this.code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.broader = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.broader, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",broader=" + broader);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_38Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code, other.code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_34Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_34_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_43Process(globalMap);
				tFileInputDelimited_45Process(globalMap);
				tFileInputDelimited_42Process(globalMap);
				tFileInputDelimited_35Process(globalMap);
				tFileInputDelimited_46Process(globalMap);
				tFileInputDelimited_47Process(globalMap);
				tFileInputDelimited_40Process(globalMap);
				tFileInputDelimited_48Process(globalMap);
				tFileInputDelimited_49Process(globalMap);
				tFileInputDelimited_50Process(globalMap);

				MedDRA_RootStruct MedDRA_Root = new MedDRA_RootStruct();

				row8Struct row8 = new row8Struct();
				MedDRA_Level1_SOCStruct MedDRA_Level1_SOC = new MedDRA_Level1_SOCStruct();

				row22Struct row22 = new row22Struct();
				MedDRA_Level2_HLGTStruct MedDRA_Level2_HLGT = new MedDRA_Level2_HLGTStruct();

				row17Struct row17 = new row17Struct();
				MedDRA_Level3_HLTStruct MedDRA_Level3_HLT = new MedDRA_Level3_HLTStruct();

				row33Struct row33 = new row33Struct();
				MedDRA_Level4_PTStruct MedDRA_Level4_PT = new MedDRA_Level4_PTStruct();

				row37Struct row37 = new row37Struct();
				MedDRA_Level5_LLTStruct MedDRA_Level5_LLT = new MedDRA_Level5_LLTStruct();

				tHashInput_tUnite_5_row43Struct tHashInput_tUnite_5_row43 = new tHashInput_tUnite_5_row43Struct();

				/**
				 * [tHashOutput_tUnite_5 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_5", false);
				start_Hash.put("tHashOutput_tUnite_5",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_5";

				int tos_count_tHashOutput_tUnite_5 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_5 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_5_row43Struct> tHashFile_tHashOutput_tUnite_5 = null;
				if ((tHashFile_tHashOutput_tUnite_5 = mf_tHashOutput_tUnite_5
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_5")) == null) {
					tHashFile_tHashOutput_tUnite_5 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_5_row43Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_5.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_5",
						tHashFile_tHashOutput_tUnite_5);
				int nb_line_tHashOutput_tUnite_5 = 0;

				/**
				 * [tHashOutput_tUnite_5 begin ] stop
				 */

				/**
				 * [tUnite_5 begin ] start
				 */

				ok_Hash.put("tUnite_5", false);
				start_Hash.put("tUnite_5", System.currentTimeMillis());
				currentComponent = "tUnite_5";

				int tos_count_tUnite_5 = 0;

				int nb_line_tUnite_5 = 0;

				/**
				 * [tUnite_5 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_34 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_34", false);
				start_Hash.put("tFileInputDelimited_34",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_34";

				int tos_count_tFileInputDelimited_34 = 0;

				int nb_line_tFileInputDelimited_34 = 0;
				int footer_tFileInputDelimited_34 = 0;
				int totalLinetFileInputDelimited_34 = 0;
				int limittFileInputDelimited_34 = -1;
				int lastLinetFileInputDelimited_34 = -1;

				char fieldSeparator_tFileInputDelimited_34[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_34 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_34[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_34 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_34 = /**
				 * Start field
				 * tFileInputDelimited_34:FILENAME
				 */
				context.rootDir + context.meddraDir + "root_MedDRA.csv"/**
				 * End
				 * field tFileInputDelimited_34:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_34 = null;

				try {

					String[] rowtFileInputDelimited_34 = null;
					int currentLinetFileInputDelimited_34 = 0;
					int outputLinetFileInputDelimited_34 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_34 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_34 = 0;
							if (footer_value_tFileInputDelimited_34 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_34 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_34,
									fieldSeparator_tFileInputDelimited_34[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_34 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_34)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_34[0]);
						}

						csvReadertFileInputDelimited_34
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_34[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_34[0] != '\r'))
							csvReadertFileInputDelimited_34.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_34[0]);

						csvReadertFileInputDelimited_34.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_34
								.setEscapeChar(csvReadertFileInputDelimited_34
										.getQuoteChar());

						if (footer_tFileInputDelimited_34 > 0) {
							for (totalLinetFileInputDelimited_34 = 0; totalLinetFileInputDelimited_34 < 1; totalLinetFileInputDelimited_34++) {
								csvReadertFileInputDelimited_34.readNext();
							}
							csvReadertFileInputDelimited_34
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_34.readNext()) {

								rowtFileInputDelimited_34 = csvReadertFileInputDelimited_34
										.getValues();
								if (!(rowtFileInputDelimited_34.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_34[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_34++;

								}

							}
							int lastLineTemptFileInputDelimited_34 = totalLinetFileInputDelimited_34
									- footer_tFileInputDelimited_34 < 0 ? 0
									: totalLinetFileInputDelimited_34
											- footer_tFileInputDelimited_34;
							if (lastLinetFileInputDelimited_34 > 0) {
								lastLinetFileInputDelimited_34 = lastLinetFileInputDelimited_34 < lastLineTemptFileInputDelimited_34 ? lastLinetFileInputDelimited_34
										: lastLineTemptFileInputDelimited_34;
							} else {
								lastLinetFileInputDelimited_34 = lastLineTemptFileInputDelimited_34;
							}

							csvReadertFileInputDelimited_34.close();
							if (filename_tFileInputDelimited_34 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_34 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_34,
										fieldSeparator_tFileInputDelimited_34[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_34 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_34)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_34[0]);
							}
							csvReadertFileInputDelimited_34
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_34[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_34[0] != '\r'))
								csvReadertFileInputDelimited_34
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_34[0]);

							csvReadertFileInputDelimited_34.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_34
									.setEscapeChar(csvReadertFileInputDelimited_34
											.getQuoteChar());

						}

						if (limittFileInputDelimited_34 != 0) {
							for (currentLinetFileInputDelimited_34 = 0; currentLinetFileInputDelimited_34 < 1; currentLinetFileInputDelimited_34++) {
								csvReadertFileInputDelimited_34.readNext();
							}
						}
						csvReadertFileInputDelimited_34
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_34 != 0
							&& csvReadertFileInputDelimited_34 != null
							&& csvReadertFileInputDelimited_34.readNext()) {

						rowtFileInputDelimited_34 = csvReadertFileInputDelimited_34
								.getValues();

						if (rowtFileInputDelimited_34.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_34[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_34++;

						if (lastLinetFileInputDelimited_34 > -1
								&& currentLinetFileInputDelimited_34 > lastLinetFileInputDelimited_34) {
							break;
						}
						outputLinetFileInputDelimited_34++;
						if (limittFileInputDelimited_34 > 0
								&& outputLinetFileInputDelimited_34 > limittFileInputDelimited_34) {
							break;
						}

						MedDRA_Root = null;

						boolean whetherReject_tFileInputDelimited_34 = false;
						MedDRA_Root = new MedDRA_RootStruct();
						try {

							if (rowtFileInputDelimited_34.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_34[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								MedDRA_Root.C_HLEVEL = null;

								MedDRA_Root.C_FULLNAME = null;

								MedDRA_Root.C_NAME = null;

								MedDRA_Root.C_SYNONYM_CD = null;

								MedDRA_Root.C_VISUALATTRIBUTES = null;

								MedDRA_Root.C_TOTALNUM = null;

								MedDRA_Root.C_BASECODE = null;

								MedDRA_Root.C_METADATAXML = null;

								MedDRA_Root.C_FACTTABLECOLUMN = null;

								MedDRA_Root.C_TABLENAME = null;

								MedDRA_Root.C_COLUMNNAME = null;

								MedDRA_Root.C_COLUMNDATATYPE = null;

								MedDRA_Root.C_OPERATOR = null;

								MedDRA_Root.C_DIMCODE = null;

								MedDRA_Root.C_COMMENT = null;

								MedDRA_Root.C_TOOLTIP = null;

								MedDRA_Root.M_APPLIED_PATH = null;

								MedDRA_Root.UPDATE_DATE = null;

								MedDRA_Root.DOWNLOAD_DATE = null;

								MedDRA_Root.IMPORT_DATE = null;

								MedDRA_Root.SOURCESYSTEM_CD = null;

								MedDRA_Root.VALUETYPE_CD = null;

								MedDRA_Root.M_EXCLUSION_CD = null;

								MedDRA_Root.C_PATH = null;

								MedDRA_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_34 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_34 = 0;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									if (rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]
											.length() > 0) {

										MedDRA_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]);

									} else {
										MedDRA_Root.C_HLEVEL = null;
									}

								} else {
									MedDRA_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 1;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_FULLNAME = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 2;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_NAME = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 3;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									if (rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]
											.length() > 0) {

										MedDRA_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]);

									} else {
										MedDRA_Root.C_SYNONYM_CD = null;
									}

								} else {
									MedDRA_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 4;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 5;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_TOTALNUM = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 6;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_BASECODE = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 7;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_METADATAXML = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 8;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 9;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_TABLENAME = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 10;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_COLUMNNAME = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 11;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									if (rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]
											.length() > 0) {

										MedDRA_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]);

									} else {
										MedDRA_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									MedDRA_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 12;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_OPERATOR = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 13;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_DIMCODE = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 14;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_COMMENT = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 15;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_TOOLTIP = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 16;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									if (rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]
											.length() > 0) {

										MedDRA_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]);

									} else {
										MedDRA_Root.M_APPLIED_PATH = null;
									}

								} else {
									MedDRA_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 17;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									if (rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]
											.length() > 0) {

										MedDRA_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										MedDRA_Root.UPDATE_DATE = null;
									}

								} else {
									MedDRA_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 18;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									if (rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]
											.length() > 0) {

										MedDRA_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										MedDRA_Root.DOWNLOAD_DATE = null;
									}

								} else {
									MedDRA_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 19;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									if (rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34]
											.length() > 0) {

										MedDRA_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										MedDRA_Root.IMPORT_DATE = null;
									}

								} else {
									MedDRA_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 20;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 21;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.VALUETYPE_CD = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 22;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.M_EXCLUSION_CD = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 23;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_PATH = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_34 = 24;

								if (columnIndexWithD_tFileInputDelimited_34 < rowtFileInputDelimited_34.length) {

									MedDRA_Root.C_SYMBOL = rowtFileInputDelimited_34[columnIndexWithD_tFileInputDelimited_34];

								} else {
									MedDRA_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_34 = true;

							System.err.println(e.getMessage());
							MedDRA_Root = null;

						}

						/**
						 * [tFileInputDelimited_34 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_34 main ] start
						 */

						currentComponent = "tFileInputDelimited_34";

						tos_count_tFileInputDelimited_34++;

						/**
						 * [tFileInputDelimited_34 main ] stop
						 */
						// Start of branch "MedDRA_Root"
						if (MedDRA_Root != null) {

							/**
							 * [tUnite_5 main ] start
							 */

							currentComponent = "tUnite_5";

							// ////////

							// for output
							tHashInput_tUnite_5_row43 = new tHashInput_tUnite_5_row43Struct();

							tHashInput_tUnite_5_row43.C_HLEVEL = MedDRA_Root.C_HLEVEL;
							tHashInput_tUnite_5_row43.C_FULLNAME = MedDRA_Root.C_FULLNAME;
							tHashInput_tUnite_5_row43.C_NAME = MedDRA_Root.C_NAME;
							tHashInput_tUnite_5_row43.C_SYNONYM_CD = MedDRA_Root.C_SYNONYM_CD;
							tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES = MedDRA_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_5_row43.C_TOTALNUM = MedDRA_Root.C_TOTALNUM;
							tHashInput_tUnite_5_row43.C_BASECODE = MedDRA_Root.C_BASECODE;
							tHashInput_tUnite_5_row43.C_METADATAXML = MedDRA_Root.C_METADATAXML;
							tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN = MedDRA_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_5_row43.C_TABLENAME = MedDRA_Root.C_TABLENAME;
							tHashInput_tUnite_5_row43.C_COLUMNNAME = MedDRA_Root.C_COLUMNNAME;
							tHashInput_tUnite_5_row43.C_COLUMNDATATYPE = MedDRA_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_5_row43.C_OPERATOR = MedDRA_Root.C_OPERATOR;
							tHashInput_tUnite_5_row43.C_DIMCODE = MedDRA_Root.C_DIMCODE;
							tHashInput_tUnite_5_row43.C_COMMENT = MedDRA_Root.C_COMMENT;
							tHashInput_tUnite_5_row43.C_TOOLTIP = MedDRA_Root.C_TOOLTIP;
							tHashInput_tUnite_5_row43.M_APPLIED_PATH = MedDRA_Root.M_APPLIED_PATH;
							tHashInput_tUnite_5_row43.UPDATE_DATE = MedDRA_Root.UPDATE_DATE;
							tHashInput_tUnite_5_row43.DOWNLOAD_DATE = MedDRA_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_5_row43.IMPORT_DATE = MedDRA_Root.IMPORT_DATE;
							tHashInput_tUnite_5_row43.SOURCESYSTEM_CD = MedDRA_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_5_row43.VALUETYPE_CD = MedDRA_Root.VALUETYPE_CD;
							tHashInput_tUnite_5_row43.M_EXCLUSION_CD = MedDRA_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_5_row43.C_PATH = MedDRA_Root.C_PATH;
							tHashInput_tUnite_5_row43.C_SYMBOL = MedDRA_Root.C_SYMBOL;

							nb_line_tUnite_5++;

							// ////////

							tos_count_tUnite_5++;

							/**
							 * [tUnite_5 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_5 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_5";

							tHashInput_tUnite_5_row43Struct oneRow_tHashOutput_tUnite_5 = new tHashInput_tUnite_5_row43Struct();

							oneRow_tHashOutput_tUnite_5.C_HLEVEL = tHashInput_tUnite_5_row43.C_HLEVEL;
							oneRow_tHashOutput_tUnite_5.C_FULLNAME = tHashInput_tUnite_5_row43.C_FULLNAME;
							oneRow_tHashOutput_tUnite_5.C_NAME = tHashInput_tUnite_5_row43.C_NAME;
							oneRow_tHashOutput_tUnite_5.C_SYNONYM_CD = tHashInput_tUnite_5_row43.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_5.C_VISUALATTRIBUTES = tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_5.C_TOTALNUM = tHashInput_tUnite_5_row43.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_5.C_BASECODE = tHashInput_tUnite_5_row43.C_BASECODE;
							oneRow_tHashOutput_tUnite_5.C_METADATAXML = tHashInput_tUnite_5_row43.C_METADATAXML;
							oneRow_tHashOutput_tUnite_5.C_FACTTABLECOLUMN = tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_5.C_TABLENAME = tHashInput_tUnite_5_row43.C_TABLENAME;
							oneRow_tHashOutput_tUnite_5.C_COLUMNNAME = tHashInput_tUnite_5_row43.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_5.C_COLUMNDATATYPE = tHashInput_tUnite_5_row43.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_5.C_OPERATOR = tHashInput_tUnite_5_row43.C_OPERATOR;
							oneRow_tHashOutput_tUnite_5.C_DIMCODE = tHashInput_tUnite_5_row43.C_DIMCODE;
							oneRow_tHashOutput_tUnite_5.C_COMMENT = tHashInput_tUnite_5_row43.C_COMMENT;
							oneRow_tHashOutput_tUnite_5.C_TOOLTIP = tHashInput_tUnite_5_row43.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_5.M_APPLIED_PATH = tHashInput_tUnite_5_row43.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_5.UPDATE_DATE = tHashInput_tUnite_5_row43.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_5.DOWNLOAD_DATE = tHashInput_tUnite_5_row43.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_5.IMPORT_DATE = tHashInput_tUnite_5_row43.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_5.SOURCESYSTEM_CD = tHashInput_tUnite_5_row43.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_5.VALUETYPE_CD = tHashInput_tUnite_5_row43.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_5.M_EXCLUSION_CD = tHashInput_tUnite_5_row43.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_5.C_PATH = tHashInput_tUnite_5_row43.C_PATH;
							oneRow_tHashOutput_tUnite_5.C_SYMBOL = tHashInput_tUnite_5_row43.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_5
									.put(oneRow_tHashOutput_tUnite_5);
							nb_line_tHashOutput_tUnite_5++;

							tos_count_tHashOutput_tUnite_5++;

							/**
							 * [tHashOutput_tUnite_5 main ] stop
							 */

						} // End of branch "MedDRA_Root"

						/**
						 * [tFileInputDelimited_34 end ] start
						 */

						currentComponent = "tFileInputDelimited_34";

						nb_line_tFileInputDelimited_34++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_34 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_34 != null) {
							csvReadertFileInputDelimited_34.close();
						}
					}
					if (csvReadertFileInputDelimited_34 != null) {
						globalMap.put("tFileInputDelimited_34_NB_LINE",
								nb_line_tFileInputDelimited_34);
					}
				}

				ok_Hash.put("tFileInputDelimited_34", true);
				end_Hash.put("tFileInputDelimited_34",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_34 end ] stop
				 */

				/**
				 * [tMap_39 begin ] start
				 */

				ok_Hash.put("tMap_39", false);
				start_Hash.put("tMap_39", System.currentTimeMillis());
				currentComponent = "tMap_39";

				int tos_count_tMap_39 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_39__Struct {
				}
				Var__tMap_39__Struct Var__tMap_39 = new Var__tMap_39__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MedDRA_Level1_SOCStruct MedDRA_Level1_SOC_tmp = new MedDRA_Level1_SOCStruct();
				// ###############################

				/**
				 * [tMap_39 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_30 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_30", false);
				start_Hash.put("tFileInputDelimited_30",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_30";

				int tos_count_tFileInputDelimited_30 = 0;

				int nb_line_tFileInputDelimited_30 = 0;
				int footer_tFileInputDelimited_30 = 0;
				int totalLinetFileInputDelimited_30 = 0;
				int limittFileInputDelimited_30 = -1;
				int lastLinetFileInputDelimited_30 = -1;

				char fieldSeparator_tFileInputDelimited_30[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_30 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_30[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_30 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_30 = /**
				 * Start field
				 * tFileInputDelimited_30:FILENAME
				 */
				context.rootDir + context.meddraDir + "soc.asc"/**
				 * End field
				 * tFileInputDelimited_30:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_30 = null;

				try {

					String[] rowtFileInputDelimited_30 = null;
					int currentLinetFileInputDelimited_30 = 0;
					int outputLinetFileInputDelimited_30 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_30 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_30 = 0;
							if (footer_value_tFileInputDelimited_30 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_30 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_30,
									fieldSeparator_tFileInputDelimited_30[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_30 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_30)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_30[0]);
						}

						csvReadertFileInputDelimited_30
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_30[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_30[0] != '\r'))
							csvReadertFileInputDelimited_30.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_30[0]);

						csvReadertFileInputDelimited_30.setQuoteChar('"');

						csvReadertFileInputDelimited_30
								.setEscapeChar(csvReadertFileInputDelimited_30
										.getQuoteChar());

						if (footer_tFileInputDelimited_30 > 0) {
							for (totalLinetFileInputDelimited_30 = 0; totalLinetFileInputDelimited_30 < 0; totalLinetFileInputDelimited_30++) {
								csvReadertFileInputDelimited_30.readNext();
							}
							csvReadertFileInputDelimited_30
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_30.readNext()) {

								rowtFileInputDelimited_30 = csvReadertFileInputDelimited_30
										.getValues();
								if (!(rowtFileInputDelimited_30.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_30[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_30++;

								}

							}
							int lastLineTemptFileInputDelimited_30 = totalLinetFileInputDelimited_30
									- footer_tFileInputDelimited_30 < 0 ? 0
									: totalLinetFileInputDelimited_30
											- footer_tFileInputDelimited_30;
							if (lastLinetFileInputDelimited_30 > 0) {
								lastLinetFileInputDelimited_30 = lastLinetFileInputDelimited_30 < lastLineTemptFileInputDelimited_30 ? lastLinetFileInputDelimited_30
										: lastLineTemptFileInputDelimited_30;
							} else {
								lastLinetFileInputDelimited_30 = lastLineTemptFileInputDelimited_30;
							}

							csvReadertFileInputDelimited_30.close();
							if (filename_tFileInputDelimited_30 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_30 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_30,
										fieldSeparator_tFileInputDelimited_30[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_30 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_30)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_30[0]);
							}
							csvReadertFileInputDelimited_30
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_30[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_30[0] != '\r'))
								csvReadertFileInputDelimited_30
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_30[0]);

							csvReadertFileInputDelimited_30.setQuoteChar('"');

							csvReadertFileInputDelimited_30
									.setEscapeChar(csvReadertFileInputDelimited_30
											.getQuoteChar());

						}

						if (limittFileInputDelimited_30 != 0) {
							for (currentLinetFileInputDelimited_30 = 0; currentLinetFileInputDelimited_30 < 0; currentLinetFileInputDelimited_30++) {
								csvReadertFileInputDelimited_30.readNext();
							}
						}
						csvReadertFileInputDelimited_30
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_30 != 0
							&& csvReadertFileInputDelimited_30 != null
							&& csvReadertFileInputDelimited_30.readNext()) {

						rowtFileInputDelimited_30 = csvReadertFileInputDelimited_30
								.getValues();

						if (rowtFileInputDelimited_30.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_30[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_30++;

						if (lastLinetFileInputDelimited_30 > -1
								&& currentLinetFileInputDelimited_30 > lastLinetFileInputDelimited_30) {
							break;
						}
						outputLinetFileInputDelimited_30++;
						if (limittFileInputDelimited_30 > 0
								&& outputLinetFileInputDelimited_30 > limittFileInputDelimited_30) {
							break;
						}

						row8 = null;

						boolean whetherReject_tFileInputDelimited_30 = false;
						row8 = new row8Struct();
						try {

							if (rowtFileInputDelimited_30.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_30[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.code = null;

								row8.label = null;

								row8.short_name = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_30 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_30 = 0;

								if (columnIndexWithD_tFileInputDelimited_30 < rowtFileInputDelimited_30.length) {

									row8.code = rowtFileInputDelimited_30[columnIndexWithD_tFileInputDelimited_30];

								} else {
									row8.code = null;
								}

								columnIndexWithD_tFileInputDelimited_30 = 1;

								if (columnIndexWithD_tFileInputDelimited_30 < rowtFileInputDelimited_30.length) {

									row8.label = rowtFileInputDelimited_30[columnIndexWithD_tFileInputDelimited_30];

								} else {
									row8.label = null;
								}

								columnIndexWithD_tFileInputDelimited_30 = 2;

								if (columnIndexWithD_tFileInputDelimited_30 < rowtFileInputDelimited_30.length) {

									row8.short_name = rowtFileInputDelimited_30[columnIndexWithD_tFileInputDelimited_30];

								} else {
									row8.short_name = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_30 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_30 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_30 main ] start
						 */

						currentComponent = "tFileInputDelimited_30";

						tos_count_tFileInputDelimited_30++;

						/**
						 * [tFileInputDelimited_30 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tMap_39 main ] start
							 */

							currentComponent = "tMap_39";

							boolean hasCasePrimitiveKeyWithNull_tMap_39 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_39 = false;
							boolean mainRowRejected_tMap_39 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row16"
							// /////////////////////////////////////////////

							boolean forceLooprow16 = false;

							row16Struct row16ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_39) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_39 = false;

								row16HashKey.code = row8.code;

								row16HashKey.hashCodeDirty = true;

								tHash_Lookup_row16.lookup(row16HashKey);

								if (!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_39 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row16 != null
									&& tHash_Lookup_row16
											.getCount(row16HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.code = '"
								// + row16HashKey.code + "'");
							} // G 071

							row16Struct row16 = null;

							row16Struct fromLookup_row16 = null;
							row16 = row16Default;

							if (tHash_Lookup_row16 != null
									&& tHash_Lookup_row16.hasNext()) { // G 099

								fromLookup_row16 = tHash_Lookup_row16.next();

							} // G 099

							if (fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_39__Struct Var = Var__tMap_39;// ###############################
								// ###############################
								// # Output tables

								MedDRA_Level1_SOC = null;

								if (!rejectedInnerJoin_tMap_39) {

									// # Output table : 'MedDRA_Level1_SOC'
									MedDRA_Level1_SOC_tmp.C_HLEVEL = 3;
									MedDRA_Level1_SOC_tmp.C_FULLNAME = "\\i2b2\\ST\\MedDRA"
											+ "\\" + row8.code + "\\";
									MedDRA_Level1_SOC_tmp.C_NAME = row16.order
											+ " - " + row8.label;
									MedDRA_Level1_SOC_tmp.C_SYNONYM_CD = 'N';
									MedDRA_Level1_SOC_tmp.C_VISUALATTRIBUTES = "FA";
									MedDRA_Level1_SOC_tmp.C_TOTALNUM = null;
									MedDRA_Level1_SOC_tmp.C_BASECODE = "ST|MedDRA:"
											+ row8.code;
									MedDRA_Level1_SOC_tmp.C_METADATAXML = null;
									MedDRA_Level1_SOC_tmp.C_FACTTABLECOLUMN = "concept_cd";
									MedDRA_Level1_SOC_tmp.C_TABLENAME = "concept_dimension";
									MedDRA_Level1_SOC_tmp.C_COLUMNNAME = "concept_path";
									MedDRA_Level1_SOC_tmp.C_COLUMNDATATYPE = 'T';
									MedDRA_Level1_SOC_tmp.C_OPERATOR = "LIKE";
									MedDRA_Level1_SOC_tmp.C_DIMCODE = "\\i2b2\\ST\\MedDRA"
											+ "\\" + row8.code + "\\";
									MedDRA_Level1_SOC_tmp.C_COMMENT = null;
									MedDRA_Level1_SOC_tmp.C_TOOLTIP = row8.short_name;
									MedDRA_Level1_SOC_tmp.M_APPLIED_PATH = '@';
									MedDRA_Level1_SOC_tmp.UPDATE_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level1_SOC_tmp.DOWNLOAD_DATE = null;
									MedDRA_Level1_SOC_tmp.IMPORT_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level1_SOC_tmp.SOURCESYSTEM_CD = "MedDRA";
									MedDRA_Level1_SOC_tmp.VALUETYPE_CD = null;
									MedDRA_Level1_SOC_tmp.M_EXCLUSION_CD = null;
									MedDRA_Level1_SOC_tmp.C_PATH = null;
									MedDRA_Level1_SOC_tmp.C_SYMBOL = null;
									MedDRA_Level1_SOC = MedDRA_Level1_SOC_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_39 = false;

							tos_count_tMap_39++;

							/**
							 * [tMap_39 main ] stop
							 */
							// Start of branch "MedDRA_Level1_SOC"
							if (MedDRA_Level1_SOC != null) {

								/**
								 * [tUnite_5 main ] start
								 */

								currentComponent = "tUnite_5";

								// ////////

								// for output
								tHashInput_tUnite_5_row43 = new tHashInput_tUnite_5_row43Struct();

								tHashInput_tUnite_5_row43.C_HLEVEL = MedDRA_Level1_SOC.C_HLEVEL;
								tHashInput_tUnite_5_row43.C_FULLNAME = MedDRA_Level1_SOC.C_FULLNAME;
								tHashInput_tUnite_5_row43.C_NAME = MedDRA_Level1_SOC.C_NAME;
								tHashInput_tUnite_5_row43.C_SYNONYM_CD = MedDRA_Level1_SOC.C_SYNONYM_CD;
								tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES = MedDRA_Level1_SOC.C_VISUALATTRIBUTES;
								tHashInput_tUnite_5_row43.C_TOTALNUM = MedDRA_Level1_SOC.C_TOTALNUM;
								tHashInput_tUnite_5_row43.C_BASECODE = MedDRA_Level1_SOC.C_BASECODE;
								tHashInput_tUnite_5_row43.C_METADATAXML = MedDRA_Level1_SOC.C_METADATAXML;
								tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN = MedDRA_Level1_SOC.C_FACTTABLECOLUMN;
								tHashInput_tUnite_5_row43.C_TABLENAME = MedDRA_Level1_SOC.C_TABLENAME;
								tHashInput_tUnite_5_row43.C_COLUMNNAME = MedDRA_Level1_SOC.C_COLUMNNAME;
								tHashInput_tUnite_5_row43.C_COLUMNDATATYPE = MedDRA_Level1_SOC.C_COLUMNDATATYPE;
								tHashInput_tUnite_5_row43.C_OPERATOR = MedDRA_Level1_SOC.C_OPERATOR;
								tHashInput_tUnite_5_row43.C_DIMCODE = MedDRA_Level1_SOC.C_DIMCODE;
								tHashInput_tUnite_5_row43.C_COMMENT = MedDRA_Level1_SOC.C_COMMENT;
								tHashInput_tUnite_5_row43.C_TOOLTIP = MedDRA_Level1_SOC.C_TOOLTIP;
								tHashInput_tUnite_5_row43.M_APPLIED_PATH = MedDRA_Level1_SOC.M_APPLIED_PATH;
								tHashInput_tUnite_5_row43.UPDATE_DATE = MedDRA_Level1_SOC.UPDATE_DATE;
								tHashInput_tUnite_5_row43.DOWNLOAD_DATE = MedDRA_Level1_SOC.DOWNLOAD_DATE;
								tHashInput_tUnite_5_row43.IMPORT_DATE = MedDRA_Level1_SOC.IMPORT_DATE;
								tHashInput_tUnite_5_row43.SOURCESYSTEM_CD = MedDRA_Level1_SOC.SOURCESYSTEM_CD;
								tHashInput_tUnite_5_row43.VALUETYPE_CD = MedDRA_Level1_SOC.VALUETYPE_CD;
								tHashInput_tUnite_5_row43.M_EXCLUSION_CD = MedDRA_Level1_SOC.M_EXCLUSION_CD;
								tHashInput_tUnite_5_row43.C_PATH = MedDRA_Level1_SOC.C_PATH;
								tHashInput_tUnite_5_row43.C_SYMBOL = MedDRA_Level1_SOC.C_SYMBOL;

								nb_line_tUnite_5++;

								// ////////

								tos_count_tUnite_5++;

								/**
								 * [tUnite_5 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_5 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_5";

								tHashInput_tUnite_5_row43Struct oneRow_tHashOutput_tUnite_5 = new tHashInput_tUnite_5_row43Struct();

								oneRow_tHashOutput_tUnite_5.C_HLEVEL = tHashInput_tUnite_5_row43.C_HLEVEL;
								oneRow_tHashOutput_tUnite_5.C_FULLNAME = tHashInput_tUnite_5_row43.C_FULLNAME;
								oneRow_tHashOutput_tUnite_5.C_NAME = tHashInput_tUnite_5_row43.C_NAME;
								oneRow_tHashOutput_tUnite_5.C_SYNONYM_CD = tHashInput_tUnite_5_row43.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_5.C_VISUALATTRIBUTES = tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_5.C_TOTALNUM = tHashInput_tUnite_5_row43.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_5.C_BASECODE = tHashInput_tUnite_5_row43.C_BASECODE;
								oneRow_tHashOutput_tUnite_5.C_METADATAXML = tHashInput_tUnite_5_row43.C_METADATAXML;
								oneRow_tHashOutput_tUnite_5.C_FACTTABLECOLUMN = tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_5.C_TABLENAME = tHashInput_tUnite_5_row43.C_TABLENAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNNAME = tHashInput_tUnite_5_row43.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNDATATYPE = tHashInput_tUnite_5_row43.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_5.C_OPERATOR = tHashInput_tUnite_5_row43.C_OPERATOR;
								oneRow_tHashOutput_tUnite_5.C_DIMCODE = tHashInput_tUnite_5_row43.C_DIMCODE;
								oneRow_tHashOutput_tUnite_5.C_COMMENT = tHashInput_tUnite_5_row43.C_COMMENT;
								oneRow_tHashOutput_tUnite_5.C_TOOLTIP = tHashInput_tUnite_5_row43.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_5.M_APPLIED_PATH = tHashInput_tUnite_5_row43.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_5.UPDATE_DATE = tHashInput_tUnite_5_row43.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_5.DOWNLOAD_DATE = tHashInput_tUnite_5_row43.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_5.IMPORT_DATE = tHashInput_tUnite_5_row43.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_5.SOURCESYSTEM_CD = tHashInput_tUnite_5_row43.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_5.VALUETYPE_CD = tHashInput_tUnite_5_row43.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_5.M_EXCLUSION_CD = tHashInput_tUnite_5_row43.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_5.C_PATH = tHashInput_tUnite_5_row43.C_PATH;
								oneRow_tHashOutput_tUnite_5.C_SYMBOL = tHashInput_tUnite_5_row43.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_5
										.put(oneRow_tHashOutput_tUnite_5);
								nb_line_tHashOutput_tUnite_5++;

								tos_count_tHashOutput_tUnite_5++;

								/**
								 * [tHashOutput_tUnite_5 main ] stop
								 */

							} // End of branch "MedDRA_Level1_SOC"

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_30 end ] start
						 */

						currentComponent = "tFileInputDelimited_30";

						nb_line_tFileInputDelimited_30++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_30 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_30 != null) {
							csvReadertFileInputDelimited_30.close();
						}
					}
					if (csvReadertFileInputDelimited_30 != null) {
						globalMap.put("tFileInputDelimited_30_NB_LINE",
								nb_line_tFileInputDelimited_30);
					}
				}

				ok_Hash.put("tFileInputDelimited_30", true);
				end_Hash.put("tFileInputDelimited_30",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_30 end ] stop
				 */

				/**
				 * [tMap_39 end ] start
				 */

				currentComponent = "tMap_39";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				// ###############################

				ok_Hash.put("tMap_39", true);
				end_Hash.put("tMap_39", System.currentTimeMillis());

				/**
				 * [tMap_39 end ] stop
				 */

				/**
				 * [tMap_40 begin ] start
				 */

				ok_Hash.put("tMap_40", false);
				start_Hash.put("tMap_40", System.currentTimeMillis());
				currentComponent = "tMap_40";

				int tos_count_tMap_40 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) globalMap
						.get("tHash_Lookup_row25"));

				row25Struct row25HashKey = new row25Struct();
				row25Struct row25Default = new row25Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_40__Struct {
				}
				Var__tMap_40__Struct Var__tMap_40 = new Var__tMap_40__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MedDRA_Level2_HLGTStruct MedDRA_Level2_HLGT_tmp = new MedDRA_Level2_HLGTStruct();
				// ###############################

				/**
				 * [tMap_40 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_44 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_44", false);
				start_Hash.put("tFileInputDelimited_44",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_44";

				int tos_count_tFileInputDelimited_44 = 0;

				int nb_line_tFileInputDelimited_44 = 0;
				int footer_tFileInputDelimited_44 = 0;
				int totalLinetFileInputDelimited_44 = 0;
				int limittFileInputDelimited_44 = -1;
				int lastLinetFileInputDelimited_44 = -1;

				char fieldSeparator_tFileInputDelimited_44[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_44 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_44[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_44 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_44 = /**
				 * Start field
				 * tFileInputDelimited_44:FILENAME
				 */
				context.rootDir + context.meddraDir + "hlgt.asc"/**
				 * End field
				 * tFileInputDelimited_44:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_44 = null;

				try {

					String[] rowtFileInputDelimited_44 = null;
					int currentLinetFileInputDelimited_44 = 0;
					int outputLinetFileInputDelimited_44 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_44 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_44 = 0;
							if (footer_value_tFileInputDelimited_44 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_44 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_44,
									fieldSeparator_tFileInputDelimited_44[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_44 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_44)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_44[0]);
						}

						csvReadertFileInputDelimited_44
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_44[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_44[0] != '\r'))
							csvReadertFileInputDelimited_44.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_44[0]);

						csvReadertFileInputDelimited_44.setQuoteChar('"');

						csvReadertFileInputDelimited_44
								.setEscapeChar(csvReadertFileInputDelimited_44
										.getQuoteChar());

						if (footer_tFileInputDelimited_44 > 0) {
							for (totalLinetFileInputDelimited_44 = 0; totalLinetFileInputDelimited_44 < 0; totalLinetFileInputDelimited_44++) {
								csvReadertFileInputDelimited_44.readNext();
							}
							csvReadertFileInputDelimited_44
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_44.readNext()) {

								rowtFileInputDelimited_44 = csvReadertFileInputDelimited_44
										.getValues();
								if (!(rowtFileInputDelimited_44.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_44[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_44++;

								}

							}
							int lastLineTemptFileInputDelimited_44 = totalLinetFileInputDelimited_44
									- footer_tFileInputDelimited_44 < 0 ? 0
									: totalLinetFileInputDelimited_44
											- footer_tFileInputDelimited_44;
							if (lastLinetFileInputDelimited_44 > 0) {
								lastLinetFileInputDelimited_44 = lastLinetFileInputDelimited_44 < lastLineTemptFileInputDelimited_44 ? lastLinetFileInputDelimited_44
										: lastLineTemptFileInputDelimited_44;
							} else {
								lastLinetFileInputDelimited_44 = lastLineTemptFileInputDelimited_44;
							}

							csvReadertFileInputDelimited_44.close();
							if (filename_tFileInputDelimited_44 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_44 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_44,
										fieldSeparator_tFileInputDelimited_44[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_44 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_44)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_44[0]);
							}
							csvReadertFileInputDelimited_44
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_44[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_44[0] != '\r'))
								csvReadertFileInputDelimited_44
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_44[0]);

							csvReadertFileInputDelimited_44.setQuoteChar('"');

							csvReadertFileInputDelimited_44
									.setEscapeChar(csvReadertFileInputDelimited_44
											.getQuoteChar());

						}

						if (limittFileInputDelimited_44 != 0) {
							for (currentLinetFileInputDelimited_44 = 0; currentLinetFileInputDelimited_44 < 0; currentLinetFileInputDelimited_44++) {
								csvReadertFileInputDelimited_44.readNext();
							}
						}
						csvReadertFileInputDelimited_44
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_44 != 0
							&& csvReadertFileInputDelimited_44 != null
							&& csvReadertFileInputDelimited_44.readNext()) {

						rowtFileInputDelimited_44 = csvReadertFileInputDelimited_44
								.getValues();

						if (rowtFileInputDelimited_44.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_44[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_44++;

						if (lastLinetFileInputDelimited_44 > -1
								&& currentLinetFileInputDelimited_44 > lastLinetFileInputDelimited_44) {
							break;
						}
						outputLinetFileInputDelimited_44++;
						if (limittFileInputDelimited_44 > 0
								&& outputLinetFileInputDelimited_44 > limittFileInputDelimited_44) {
							break;
						}

						row22 = null;

						boolean whetherReject_tFileInputDelimited_44 = false;
						row22 = new row22Struct();
						try {

							if (rowtFileInputDelimited_44.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_44[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row22.code = null;

								row22.label = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_44 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_44 = 0;

								if (columnIndexWithD_tFileInputDelimited_44 < rowtFileInputDelimited_44.length) {

									row22.code = rowtFileInputDelimited_44[columnIndexWithD_tFileInputDelimited_44];

								} else {
									row22.code = null;
								}

								columnIndexWithD_tFileInputDelimited_44 = 1;

								if (columnIndexWithD_tFileInputDelimited_44 < rowtFileInputDelimited_44.length) {

									row22.label = rowtFileInputDelimited_44[columnIndexWithD_tFileInputDelimited_44];

								} else {
									row22.label = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_44 = true;

							System.err.println(e.getMessage());
							row22 = null;

						}

						/**
						 * [tFileInputDelimited_44 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_44 main ] start
						 */

						currentComponent = "tFileInputDelimited_44";

						tos_count_tFileInputDelimited_44++;

						/**
						 * [tFileInputDelimited_44 main ] stop
						 */
						// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tMap_40 main ] start
							 */

							currentComponent = "tMap_40";

							boolean hasCasePrimitiveKeyWithNull_tMap_40 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_40 = false;
							boolean mainRowRejected_tMap_40 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row25"
							// /////////////////////////////////////////////

							boolean forceLooprow25 = false;

							row25Struct row25ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_40) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_40 = false;

								row25HashKey.narrower = row22.code;

								row25HashKey.hashCodeDirty = true;

								tHash_Lookup_row25.lookup(row25HashKey);

								if (!tHash_Lookup_row25.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_40 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row25 != null
									&& tHash_Lookup_row25
											.getCount(row25HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.narrower = '"
								// + row25HashKey.narrower + "'");
							} // G 071

							row25Struct row25 = null;

							row25Struct fromLookup_row25 = null;
							row25 = row25Default;

							if (tHash_Lookup_row25 != null
									&& tHash_Lookup_row25.hasNext()) { // G 099

								fromLookup_row25 = tHash_Lookup_row25.next();

							} // G 099

							if (fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_40__Struct Var = Var__tMap_40;// ###############################
								// ###############################
								// # Output tables

								MedDRA_Level2_HLGT = null;

								if (!rejectedInnerJoin_tMap_40) {

									// # Output table : 'MedDRA_Level2_HLGT'
									MedDRA_Level2_HLGT_tmp.C_HLEVEL = 4;
									MedDRA_Level2_HLGT_tmp.C_FULLNAME = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row25.broader
											+ "\\"
											+ row22.code + "\\";
									MedDRA_Level2_HLGT_tmp.C_NAME = row22.label;
									MedDRA_Level2_HLGT_tmp.C_SYNONYM_CD = 'N';
									MedDRA_Level2_HLGT_tmp.C_VISUALATTRIBUTES = "FA";
									MedDRA_Level2_HLGT_tmp.C_TOTALNUM = null;
									MedDRA_Level2_HLGT_tmp.C_BASECODE = "ST|MedDRA:"
											+ row22.code;
									MedDRA_Level2_HLGT_tmp.C_METADATAXML = null;
									MedDRA_Level2_HLGT_tmp.C_FACTTABLECOLUMN = "concept_cd";
									MedDRA_Level2_HLGT_tmp.C_TABLENAME = "concept_dimension";
									MedDRA_Level2_HLGT_tmp.C_COLUMNNAME = "concept_path";
									MedDRA_Level2_HLGT_tmp.C_COLUMNDATATYPE = 'T';
									MedDRA_Level2_HLGT_tmp.C_OPERATOR = "LIKE";
									MedDRA_Level2_HLGT_tmp.C_DIMCODE = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row25.broader
											+ "\\"
											+ row22.code + "\\";
									MedDRA_Level2_HLGT_tmp.C_COMMENT = null;
									MedDRA_Level2_HLGT_tmp.C_TOOLTIP = row22.label;
									MedDRA_Level2_HLGT_tmp.M_APPLIED_PATH = '@';
									MedDRA_Level2_HLGT_tmp.UPDATE_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level2_HLGT_tmp.DOWNLOAD_DATE = null;
									MedDRA_Level2_HLGT_tmp.IMPORT_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level2_HLGT_tmp.SOURCESYSTEM_CD = "MedDRA";
									MedDRA_Level2_HLGT_tmp.VALUETYPE_CD = null;
									MedDRA_Level2_HLGT_tmp.M_EXCLUSION_CD = null;
									MedDRA_Level2_HLGT_tmp.C_PATH = null;
									MedDRA_Level2_HLGT_tmp.C_SYMBOL = null;
									MedDRA_Level2_HLGT = MedDRA_Level2_HLGT_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_40 = false;

							tos_count_tMap_40++;

							/**
							 * [tMap_40 main ] stop
							 */
							// Start of branch "MedDRA_Level2_HLGT"
							if (MedDRA_Level2_HLGT != null) {

								/**
								 * [tUnite_5 main ] start
								 */

								currentComponent = "tUnite_5";

								// ////////

								// for output
								tHashInput_tUnite_5_row43 = new tHashInput_tUnite_5_row43Struct();

								tHashInput_tUnite_5_row43.C_HLEVEL = MedDRA_Level2_HLGT.C_HLEVEL;
								tHashInput_tUnite_5_row43.C_FULLNAME = MedDRA_Level2_HLGT.C_FULLNAME;
								tHashInput_tUnite_5_row43.C_NAME = MedDRA_Level2_HLGT.C_NAME;
								tHashInput_tUnite_5_row43.C_SYNONYM_CD = MedDRA_Level2_HLGT.C_SYNONYM_CD;
								tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES = MedDRA_Level2_HLGT.C_VISUALATTRIBUTES;
								tHashInput_tUnite_5_row43.C_TOTALNUM = MedDRA_Level2_HLGT.C_TOTALNUM;
								tHashInput_tUnite_5_row43.C_BASECODE = MedDRA_Level2_HLGT.C_BASECODE;
								tHashInput_tUnite_5_row43.C_METADATAXML = MedDRA_Level2_HLGT.C_METADATAXML;
								tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN = MedDRA_Level2_HLGT.C_FACTTABLECOLUMN;
								tHashInput_tUnite_5_row43.C_TABLENAME = MedDRA_Level2_HLGT.C_TABLENAME;
								tHashInput_tUnite_5_row43.C_COLUMNNAME = MedDRA_Level2_HLGT.C_COLUMNNAME;
								tHashInput_tUnite_5_row43.C_COLUMNDATATYPE = MedDRA_Level2_HLGT.C_COLUMNDATATYPE;
								tHashInput_tUnite_5_row43.C_OPERATOR = MedDRA_Level2_HLGT.C_OPERATOR;
								tHashInput_tUnite_5_row43.C_DIMCODE = MedDRA_Level2_HLGT.C_DIMCODE;
								tHashInput_tUnite_5_row43.C_COMMENT = MedDRA_Level2_HLGT.C_COMMENT;
								tHashInput_tUnite_5_row43.C_TOOLTIP = MedDRA_Level2_HLGT.C_TOOLTIP;
								tHashInput_tUnite_5_row43.M_APPLIED_PATH = MedDRA_Level2_HLGT.M_APPLIED_PATH;
								tHashInput_tUnite_5_row43.UPDATE_DATE = MedDRA_Level2_HLGT.UPDATE_DATE;
								tHashInput_tUnite_5_row43.DOWNLOAD_DATE = MedDRA_Level2_HLGT.DOWNLOAD_DATE;
								tHashInput_tUnite_5_row43.IMPORT_DATE = MedDRA_Level2_HLGT.IMPORT_DATE;
								tHashInput_tUnite_5_row43.SOURCESYSTEM_CD = MedDRA_Level2_HLGT.SOURCESYSTEM_CD;
								tHashInput_tUnite_5_row43.VALUETYPE_CD = MedDRA_Level2_HLGT.VALUETYPE_CD;
								tHashInput_tUnite_5_row43.M_EXCLUSION_CD = MedDRA_Level2_HLGT.M_EXCLUSION_CD;
								tHashInput_tUnite_5_row43.C_PATH = MedDRA_Level2_HLGT.C_PATH;
								tHashInput_tUnite_5_row43.C_SYMBOL = MedDRA_Level2_HLGT.C_SYMBOL;

								nb_line_tUnite_5++;

								// ////////

								tos_count_tUnite_5++;

								/**
								 * [tUnite_5 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_5 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_5";

								tHashInput_tUnite_5_row43Struct oneRow_tHashOutput_tUnite_5 = new tHashInput_tUnite_5_row43Struct();

								oneRow_tHashOutput_tUnite_5.C_HLEVEL = tHashInput_tUnite_5_row43.C_HLEVEL;
								oneRow_tHashOutput_tUnite_5.C_FULLNAME = tHashInput_tUnite_5_row43.C_FULLNAME;
								oneRow_tHashOutput_tUnite_5.C_NAME = tHashInput_tUnite_5_row43.C_NAME;
								oneRow_tHashOutput_tUnite_5.C_SYNONYM_CD = tHashInput_tUnite_5_row43.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_5.C_VISUALATTRIBUTES = tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_5.C_TOTALNUM = tHashInput_tUnite_5_row43.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_5.C_BASECODE = tHashInput_tUnite_5_row43.C_BASECODE;
								oneRow_tHashOutput_tUnite_5.C_METADATAXML = tHashInput_tUnite_5_row43.C_METADATAXML;
								oneRow_tHashOutput_tUnite_5.C_FACTTABLECOLUMN = tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_5.C_TABLENAME = tHashInput_tUnite_5_row43.C_TABLENAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNNAME = tHashInput_tUnite_5_row43.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNDATATYPE = tHashInput_tUnite_5_row43.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_5.C_OPERATOR = tHashInput_tUnite_5_row43.C_OPERATOR;
								oneRow_tHashOutput_tUnite_5.C_DIMCODE = tHashInput_tUnite_5_row43.C_DIMCODE;
								oneRow_tHashOutput_tUnite_5.C_COMMENT = tHashInput_tUnite_5_row43.C_COMMENT;
								oneRow_tHashOutput_tUnite_5.C_TOOLTIP = tHashInput_tUnite_5_row43.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_5.M_APPLIED_PATH = tHashInput_tUnite_5_row43.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_5.UPDATE_DATE = tHashInput_tUnite_5_row43.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_5.DOWNLOAD_DATE = tHashInput_tUnite_5_row43.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_5.IMPORT_DATE = tHashInput_tUnite_5_row43.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_5.SOURCESYSTEM_CD = tHashInput_tUnite_5_row43.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_5.VALUETYPE_CD = tHashInput_tUnite_5_row43.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_5.M_EXCLUSION_CD = tHashInput_tUnite_5_row43.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_5.C_PATH = tHashInput_tUnite_5_row43.C_PATH;
								oneRow_tHashOutput_tUnite_5.C_SYMBOL = tHashInput_tUnite_5_row43.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_5
										.put(oneRow_tHashOutput_tUnite_5);
								nb_line_tHashOutput_tUnite_5++;

								tos_count_tHashOutput_tUnite_5++;

								/**
								 * [tHashOutput_tUnite_5 main ] stop
								 */

							} // End of branch "MedDRA_Level2_HLGT"

						} // End of branch "row22"

						/**
						 * [tFileInputDelimited_44 end ] start
						 */

						currentComponent = "tFileInputDelimited_44";

						nb_line_tFileInputDelimited_44++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_44 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_44 != null) {
							csvReadertFileInputDelimited_44.close();
						}
					}
					if (csvReadertFileInputDelimited_44 != null) {
						globalMap.put("tFileInputDelimited_44_NB_LINE",
								nb_line_tFileInputDelimited_44);
					}
				}

				ok_Hash.put("tFileInputDelimited_44", true);
				end_Hash.put("tFileInputDelimited_44",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_44 end ] stop
				 */

				/**
				 * [tMap_40 end ] start
				 */

				currentComponent = "tMap_40";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row25 != null) {
					tHash_Lookup_row25.endGet();
				}
				globalMap.remove("tHash_Lookup_row25");

				// ###############################

				ok_Hash.put("tMap_40", true);
				end_Hash.put("tMap_40", System.currentTimeMillis());

				/**
				 * [tMap_40 end ] stop
				 */

				/**
				 * [tMap_34 begin ] start
				 */

				ok_Hash.put("tMap_34", false);
				start_Hash.put("tMap_34", System.currentTimeMillis());
				currentComponent = "tMap_34";

				int tos_count_tMap_34 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) globalMap
						.get("tHash_Lookup_row28"));

				row28Struct row28HashKey = new row28Struct();
				row28Struct row28Default = new row28Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_34__Struct {
				}
				Var__tMap_34__Struct Var__tMap_34 = new Var__tMap_34__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MedDRA_Level3_HLTStruct MedDRA_Level3_HLT_tmp = new MedDRA_Level3_HLTStruct();
				// ###############################

				/**
				 * [tMap_34 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_36 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_36", false);
				start_Hash.put("tFileInputDelimited_36",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_36";

				int tos_count_tFileInputDelimited_36 = 0;

				int nb_line_tFileInputDelimited_36 = 0;
				int footer_tFileInputDelimited_36 = 0;
				int totalLinetFileInputDelimited_36 = 0;
				int limittFileInputDelimited_36 = -1;
				int lastLinetFileInputDelimited_36 = -1;

				char fieldSeparator_tFileInputDelimited_36[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_36 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_36[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_36 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_36 = /**
				 * Start field
				 * tFileInputDelimited_36:FILENAME
				 */
				context.rootDir + context.meddraDir + "hlt.asc"/**
				 * End field
				 * tFileInputDelimited_36:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_36 = null;

				try {

					String[] rowtFileInputDelimited_36 = null;
					int currentLinetFileInputDelimited_36 = 0;
					int outputLinetFileInputDelimited_36 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_36 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_36 = 0;
							if (footer_value_tFileInputDelimited_36 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_36 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_36,
									fieldSeparator_tFileInputDelimited_36[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_36 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_36)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_36[0]);
						}

						csvReadertFileInputDelimited_36
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_36[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_36[0] != '\r'))
							csvReadertFileInputDelimited_36.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_36[0]);

						csvReadertFileInputDelimited_36.setQuoteChar('"');

						csvReadertFileInputDelimited_36
								.setEscapeChar(csvReadertFileInputDelimited_36
										.getQuoteChar());

						if (footer_tFileInputDelimited_36 > 0) {
							for (totalLinetFileInputDelimited_36 = 0; totalLinetFileInputDelimited_36 < 0; totalLinetFileInputDelimited_36++) {
								csvReadertFileInputDelimited_36.readNext();
							}
							csvReadertFileInputDelimited_36
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_36.readNext()) {

								rowtFileInputDelimited_36 = csvReadertFileInputDelimited_36
										.getValues();
								if (!(rowtFileInputDelimited_36.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_36[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_36++;

								}

							}
							int lastLineTemptFileInputDelimited_36 = totalLinetFileInputDelimited_36
									- footer_tFileInputDelimited_36 < 0 ? 0
									: totalLinetFileInputDelimited_36
											- footer_tFileInputDelimited_36;
							if (lastLinetFileInputDelimited_36 > 0) {
								lastLinetFileInputDelimited_36 = lastLinetFileInputDelimited_36 < lastLineTemptFileInputDelimited_36 ? lastLinetFileInputDelimited_36
										: lastLineTemptFileInputDelimited_36;
							} else {
								lastLinetFileInputDelimited_36 = lastLineTemptFileInputDelimited_36;
							}

							csvReadertFileInputDelimited_36.close();
							if (filename_tFileInputDelimited_36 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_36 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_36,
										fieldSeparator_tFileInputDelimited_36[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_36 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_36)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_36[0]);
							}
							csvReadertFileInputDelimited_36
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_36[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_36[0] != '\r'))
								csvReadertFileInputDelimited_36
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_36[0]);

							csvReadertFileInputDelimited_36.setQuoteChar('"');

							csvReadertFileInputDelimited_36
									.setEscapeChar(csvReadertFileInputDelimited_36
											.getQuoteChar());

						}

						if (limittFileInputDelimited_36 != 0) {
							for (currentLinetFileInputDelimited_36 = 0; currentLinetFileInputDelimited_36 < 0; currentLinetFileInputDelimited_36++) {
								csvReadertFileInputDelimited_36.readNext();
							}
						}
						csvReadertFileInputDelimited_36
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_36 != 0
							&& csvReadertFileInputDelimited_36 != null
							&& csvReadertFileInputDelimited_36.readNext()) {

						rowtFileInputDelimited_36 = csvReadertFileInputDelimited_36
								.getValues();

						if (rowtFileInputDelimited_36.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_36[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_36++;

						if (lastLinetFileInputDelimited_36 > -1
								&& currentLinetFileInputDelimited_36 > lastLinetFileInputDelimited_36) {
							break;
						}
						outputLinetFileInputDelimited_36++;
						if (limittFileInputDelimited_36 > 0
								&& outputLinetFileInputDelimited_36 > limittFileInputDelimited_36) {
							break;
						}

						row17 = null;

						boolean whetherReject_tFileInputDelimited_36 = false;
						row17 = new row17Struct();
						try {

							if (rowtFileInputDelimited_36.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_36[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row17.code = null;

								row17.label = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_36 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_36 = 0;

								if (columnIndexWithD_tFileInputDelimited_36 < rowtFileInputDelimited_36.length) {

									row17.code = rowtFileInputDelimited_36[columnIndexWithD_tFileInputDelimited_36];

								} else {
									row17.code = null;
								}

								columnIndexWithD_tFileInputDelimited_36 = 1;

								if (columnIndexWithD_tFileInputDelimited_36 < rowtFileInputDelimited_36.length) {

									row17.label = rowtFileInputDelimited_36[columnIndexWithD_tFileInputDelimited_36];

								} else {
									row17.label = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_36 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_36 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_36 main ] start
						 */

						currentComponent = "tFileInputDelimited_36";

						tos_count_tFileInputDelimited_36++;

						/**
						 * [tFileInputDelimited_36 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tMap_34 main ] start
							 */

							currentComponent = "tMap_34";

							boolean hasCasePrimitiveKeyWithNull_tMap_34 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_34 = false;
							boolean mainRowRejected_tMap_34 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row18"
							// /////////////////////////////////////////////

							boolean forceLooprow18 = false;

							row18Struct row18ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_34) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_34 = false;

								row18HashKey.narrower = row17.code;

								row18HashKey.hashCodeDirty = true;

								tHash_Lookup_row18.lookup(row18HashKey);

								if (!tHash_Lookup_row18.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_34 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18
											.getCount(row18HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.narrower = '"
								// + row18HashKey.narrower + "'");
							} // G 071

							row18Struct row18 = null;

							row18Struct fromLookup_row18 = null;
							row18 = row18Default;

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18.hasNext()) { // G 099

								fromLookup_row18 = tHash_Lookup_row18.next();

							} // G 099

							if (fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row28"
							// /////////////////////////////////////////////

							boolean forceLooprow28 = false;

							row28Struct row28ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_34) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_34 = false;

								row28HashKey.narrower = row18.broader;

								row28HashKey.hashCodeDirty = true;

								tHash_Lookup_row28.lookup(row28HashKey);

								if (!tHash_Lookup_row28.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_34 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row28 != null
									&& tHash_Lookup_row28
											.getCount(row28HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.narrower = '"
								// + row28HashKey.narrower + "'");
							} // G 071

							row28Struct row28 = null;

							row28Struct fromLookup_row28 = null;
							row28 = row28Default;

							if (tHash_Lookup_row28 != null
									&& tHash_Lookup_row28.hasNext()) { // G 099

								fromLookup_row28 = tHash_Lookup_row28.next();

							} // G 099

							if (fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_34__Struct Var = Var__tMap_34;// ###############################
								// ###############################
								// # Output tables

								MedDRA_Level3_HLT = null;

								if (!rejectedInnerJoin_tMap_34) {

									// # Output table : 'MedDRA_Level3_HLT'
									MedDRA_Level3_HLT_tmp.C_HLEVEL = 5;
									MedDRA_Level3_HLT_tmp.C_FULLNAME = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row28.broader
											+ "\\"
											+ row18.broader
											+ "\\"
											+ row17.code
											+ "\\";
									MedDRA_Level3_HLT_tmp.C_NAME = row17.label;
									MedDRA_Level3_HLT_tmp.C_SYNONYM_CD = 'N';
									MedDRA_Level3_HLT_tmp.C_VISUALATTRIBUTES = "FA";
									MedDRA_Level3_HLT_tmp.C_TOTALNUM = null;
									MedDRA_Level3_HLT_tmp.C_BASECODE = "ST|MedDRA:"
											+ row17.code;
									MedDRA_Level3_HLT_tmp.C_METADATAXML = null;
									MedDRA_Level3_HLT_tmp.C_FACTTABLECOLUMN = "concept_cd";
									MedDRA_Level3_HLT_tmp.C_TABLENAME = "concept_dimension";
									MedDRA_Level3_HLT_tmp.C_COLUMNNAME = "concept_path";
									MedDRA_Level3_HLT_tmp.C_COLUMNDATATYPE = 'T';
									MedDRA_Level3_HLT_tmp.C_OPERATOR = "LIKE";
									MedDRA_Level3_HLT_tmp.C_DIMCODE = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row28.broader
											+ "\\"
											+ row18.broader
											+ "\\"
											+ row17.code
											+ "\\";
									MedDRA_Level3_HLT_tmp.C_COMMENT = null;
									MedDRA_Level3_HLT_tmp.C_TOOLTIP = row17.label;
									MedDRA_Level3_HLT_tmp.M_APPLIED_PATH = '@';
									MedDRA_Level3_HLT_tmp.UPDATE_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level3_HLT_tmp.DOWNLOAD_DATE = null;
									MedDRA_Level3_HLT_tmp.IMPORT_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level3_HLT_tmp.SOURCESYSTEM_CD = "MedDRA";
									MedDRA_Level3_HLT_tmp.VALUETYPE_CD = null;
									MedDRA_Level3_HLT_tmp.M_EXCLUSION_CD = null;
									MedDRA_Level3_HLT_tmp.C_PATH = null;
									MedDRA_Level3_HLT_tmp.C_SYMBOL = null;
									MedDRA_Level3_HLT = MedDRA_Level3_HLT_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_34 = false;

							tos_count_tMap_34++;

							/**
							 * [tMap_34 main ] stop
							 */
							// Start of branch "MedDRA_Level3_HLT"
							if (MedDRA_Level3_HLT != null) {

								/**
								 * [tUnite_5 main ] start
								 */

								currentComponent = "tUnite_5";

								// ////////

								// for output
								tHashInput_tUnite_5_row43 = new tHashInput_tUnite_5_row43Struct();

								tHashInput_tUnite_5_row43.C_HLEVEL = MedDRA_Level3_HLT.C_HLEVEL;
								tHashInput_tUnite_5_row43.C_FULLNAME = MedDRA_Level3_HLT.C_FULLNAME;
								tHashInput_tUnite_5_row43.C_NAME = MedDRA_Level3_HLT.C_NAME;
								tHashInput_tUnite_5_row43.C_SYNONYM_CD = MedDRA_Level3_HLT.C_SYNONYM_CD;
								tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES = MedDRA_Level3_HLT.C_VISUALATTRIBUTES;
								tHashInput_tUnite_5_row43.C_TOTALNUM = MedDRA_Level3_HLT.C_TOTALNUM;
								tHashInput_tUnite_5_row43.C_BASECODE = MedDRA_Level3_HLT.C_BASECODE;
								tHashInput_tUnite_5_row43.C_METADATAXML = MedDRA_Level3_HLT.C_METADATAXML;
								tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN = MedDRA_Level3_HLT.C_FACTTABLECOLUMN;
								tHashInput_tUnite_5_row43.C_TABLENAME = MedDRA_Level3_HLT.C_TABLENAME;
								tHashInput_tUnite_5_row43.C_COLUMNNAME = MedDRA_Level3_HLT.C_COLUMNNAME;
								tHashInput_tUnite_5_row43.C_COLUMNDATATYPE = MedDRA_Level3_HLT.C_COLUMNDATATYPE;
								tHashInput_tUnite_5_row43.C_OPERATOR = MedDRA_Level3_HLT.C_OPERATOR;
								tHashInput_tUnite_5_row43.C_DIMCODE = MedDRA_Level3_HLT.C_DIMCODE;
								tHashInput_tUnite_5_row43.C_COMMENT = MedDRA_Level3_HLT.C_COMMENT;
								tHashInput_tUnite_5_row43.C_TOOLTIP = MedDRA_Level3_HLT.C_TOOLTIP;
								tHashInput_tUnite_5_row43.M_APPLIED_PATH = MedDRA_Level3_HLT.M_APPLIED_PATH;
								tHashInput_tUnite_5_row43.UPDATE_DATE = MedDRA_Level3_HLT.UPDATE_DATE;
								tHashInput_tUnite_5_row43.DOWNLOAD_DATE = MedDRA_Level3_HLT.DOWNLOAD_DATE;
								tHashInput_tUnite_5_row43.IMPORT_DATE = MedDRA_Level3_HLT.IMPORT_DATE;
								tHashInput_tUnite_5_row43.SOURCESYSTEM_CD = MedDRA_Level3_HLT.SOURCESYSTEM_CD;
								tHashInput_tUnite_5_row43.VALUETYPE_CD = MedDRA_Level3_HLT.VALUETYPE_CD;
								tHashInput_tUnite_5_row43.M_EXCLUSION_CD = MedDRA_Level3_HLT.M_EXCLUSION_CD;
								tHashInput_tUnite_5_row43.C_PATH = MedDRA_Level3_HLT.C_PATH;
								tHashInput_tUnite_5_row43.C_SYMBOL = MedDRA_Level3_HLT.C_SYMBOL;

								nb_line_tUnite_5++;

								// ////////

								tos_count_tUnite_5++;

								/**
								 * [tUnite_5 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_5 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_5";

								tHashInput_tUnite_5_row43Struct oneRow_tHashOutput_tUnite_5 = new tHashInput_tUnite_5_row43Struct();

								oneRow_tHashOutput_tUnite_5.C_HLEVEL = tHashInput_tUnite_5_row43.C_HLEVEL;
								oneRow_tHashOutput_tUnite_5.C_FULLNAME = tHashInput_tUnite_5_row43.C_FULLNAME;
								oneRow_tHashOutput_tUnite_5.C_NAME = tHashInput_tUnite_5_row43.C_NAME;
								oneRow_tHashOutput_tUnite_5.C_SYNONYM_CD = tHashInput_tUnite_5_row43.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_5.C_VISUALATTRIBUTES = tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_5.C_TOTALNUM = tHashInput_tUnite_5_row43.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_5.C_BASECODE = tHashInput_tUnite_5_row43.C_BASECODE;
								oneRow_tHashOutput_tUnite_5.C_METADATAXML = tHashInput_tUnite_5_row43.C_METADATAXML;
								oneRow_tHashOutput_tUnite_5.C_FACTTABLECOLUMN = tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_5.C_TABLENAME = tHashInput_tUnite_5_row43.C_TABLENAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNNAME = tHashInput_tUnite_5_row43.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNDATATYPE = tHashInput_tUnite_5_row43.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_5.C_OPERATOR = tHashInput_tUnite_5_row43.C_OPERATOR;
								oneRow_tHashOutput_tUnite_5.C_DIMCODE = tHashInput_tUnite_5_row43.C_DIMCODE;
								oneRow_tHashOutput_tUnite_5.C_COMMENT = tHashInput_tUnite_5_row43.C_COMMENT;
								oneRow_tHashOutput_tUnite_5.C_TOOLTIP = tHashInput_tUnite_5_row43.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_5.M_APPLIED_PATH = tHashInput_tUnite_5_row43.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_5.UPDATE_DATE = tHashInput_tUnite_5_row43.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_5.DOWNLOAD_DATE = tHashInput_tUnite_5_row43.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_5.IMPORT_DATE = tHashInput_tUnite_5_row43.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_5.SOURCESYSTEM_CD = tHashInput_tUnite_5_row43.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_5.VALUETYPE_CD = tHashInput_tUnite_5_row43.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_5.M_EXCLUSION_CD = tHashInput_tUnite_5_row43.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_5.C_PATH = tHashInput_tUnite_5_row43.C_PATH;
								oneRow_tHashOutput_tUnite_5.C_SYMBOL = tHashInput_tUnite_5_row43.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_5
										.put(oneRow_tHashOutput_tUnite_5);
								nb_line_tHashOutput_tUnite_5++;

								tos_count_tHashOutput_tUnite_5++;

								/**
								 * [tHashOutput_tUnite_5 main ] stop
								 */

							} // End of branch "MedDRA_Level3_HLT"

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_36 end ] start
						 */

						currentComponent = "tFileInputDelimited_36";

						nb_line_tFileInputDelimited_36++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_36 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_36 != null) {
							csvReadertFileInputDelimited_36.close();
						}
					}
					if (csvReadertFileInputDelimited_36 != null) {
						globalMap.put("tFileInputDelimited_36_NB_LINE",
								nb_line_tFileInputDelimited_36);
					}
				}

				ok_Hash.put("tFileInputDelimited_36", true);
				end_Hash.put("tFileInputDelimited_36",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_36 end ] stop
				 */

				/**
				 * [tMap_34 end ] start
				 */

				currentComponent = "tMap_34";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				if (tHash_Lookup_row28 != null) {
					tHash_Lookup_row28.endGet();
				}
				globalMap.remove("tHash_Lookup_row28");

				// ###############################

				ok_Hash.put("tMap_34", true);
				end_Hash.put("tMap_34", System.currentTimeMillis());

				/**
				 * [tMap_34 end ] stop
				 */

				/**
				 * [tMap_35 begin ] start
				 */

				ok_Hash.put("tMap_35", false);
				start_Hash.put("tMap_35", System.currentTimeMillis());
				currentComponent = "tMap_35";

				int tos_count_tMap_35 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) globalMap
						.get("tHash_Lookup_row36"));

				row36Struct row36HashKey = new row36Struct();
				row36Struct row36Default = new row36Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) globalMap
						.get("tHash_Lookup_row35"));

				row35Struct row35HashKey = new row35Struct();
				row35Struct row35Default = new row35Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) globalMap
						.get("tHash_Lookup_row34"));

				row34Struct row34HashKey = new row34Struct();
				row34Struct row34Default = new row34Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_35__Struct {
				}
				Var__tMap_35__Struct Var__tMap_35 = new Var__tMap_35__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MedDRA_Level4_PTStruct MedDRA_Level4_PT_tmp = new MedDRA_Level4_PTStruct();
				// ###############################

				/**
				 * [tMap_35 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_41 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_41", false);
				start_Hash.put("tFileInputDelimited_41",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_41";

				int tos_count_tFileInputDelimited_41 = 0;

				int nb_line_tFileInputDelimited_41 = 0;
				int footer_tFileInputDelimited_41 = 0;
				int totalLinetFileInputDelimited_41 = 0;
				int limittFileInputDelimited_41 = -1;
				int lastLinetFileInputDelimited_41 = -1;

				char fieldSeparator_tFileInputDelimited_41[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_41 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_41[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_41 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_41 = /**
				 * Start field
				 * tFileInputDelimited_41:FILENAME
				 */
				context.rootDir + context.meddraDir + "pt.asc"/**
				 * End field
				 * tFileInputDelimited_41:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_41 = null;

				try {

					String[] rowtFileInputDelimited_41 = null;
					int currentLinetFileInputDelimited_41 = 0;
					int outputLinetFileInputDelimited_41 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_41 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_41 = 0;
							if (footer_value_tFileInputDelimited_41 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_41 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_41,
									fieldSeparator_tFileInputDelimited_41[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_41 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_41)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_41[0]);
						}

						csvReadertFileInputDelimited_41
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_41[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_41[0] != '\r'))
							csvReadertFileInputDelimited_41.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_41[0]);

						csvReadertFileInputDelimited_41.setQuoteChar('"');

						csvReadertFileInputDelimited_41
								.setEscapeChar(csvReadertFileInputDelimited_41
										.getQuoteChar());

						if (footer_tFileInputDelimited_41 > 0) {
							for (totalLinetFileInputDelimited_41 = 0; totalLinetFileInputDelimited_41 < 0; totalLinetFileInputDelimited_41++) {
								csvReadertFileInputDelimited_41.readNext();
							}
							csvReadertFileInputDelimited_41
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_41.readNext()) {

								rowtFileInputDelimited_41 = csvReadertFileInputDelimited_41
										.getValues();
								if (!(rowtFileInputDelimited_41.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_41[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_41++;

								}

							}
							int lastLineTemptFileInputDelimited_41 = totalLinetFileInputDelimited_41
									- footer_tFileInputDelimited_41 < 0 ? 0
									: totalLinetFileInputDelimited_41
											- footer_tFileInputDelimited_41;
							if (lastLinetFileInputDelimited_41 > 0) {
								lastLinetFileInputDelimited_41 = lastLinetFileInputDelimited_41 < lastLineTemptFileInputDelimited_41 ? lastLinetFileInputDelimited_41
										: lastLineTemptFileInputDelimited_41;
							} else {
								lastLinetFileInputDelimited_41 = lastLineTemptFileInputDelimited_41;
							}

							csvReadertFileInputDelimited_41.close();
							if (filename_tFileInputDelimited_41 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_41 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_41,
										fieldSeparator_tFileInputDelimited_41[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_41 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_41)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_41[0]);
							}
							csvReadertFileInputDelimited_41
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_41[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_41[0] != '\r'))
								csvReadertFileInputDelimited_41
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_41[0]);

							csvReadertFileInputDelimited_41.setQuoteChar('"');

							csvReadertFileInputDelimited_41
									.setEscapeChar(csvReadertFileInputDelimited_41
											.getQuoteChar());

						}

						if (limittFileInputDelimited_41 != 0) {
							for (currentLinetFileInputDelimited_41 = 0; currentLinetFileInputDelimited_41 < 0; currentLinetFileInputDelimited_41++) {
								csvReadertFileInputDelimited_41.readNext();
							}
						}
						csvReadertFileInputDelimited_41
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_41 != 0
							&& csvReadertFileInputDelimited_41 != null
							&& csvReadertFileInputDelimited_41.readNext()) {

						rowtFileInputDelimited_41 = csvReadertFileInputDelimited_41
								.getValues();

						if (rowtFileInputDelimited_41.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_41[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_41++;

						if (lastLinetFileInputDelimited_41 > -1
								&& currentLinetFileInputDelimited_41 > lastLinetFileInputDelimited_41) {
							break;
						}
						outputLinetFileInputDelimited_41++;
						if (limittFileInputDelimited_41 > 0
								&& outputLinetFileInputDelimited_41 > limittFileInputDelimited_41) {
							break;
						}

						row33 = null;

						boolean whetherReject_tFileInputDelimited_41 = false;
						row33 = new row33Struct();
						try {

							if (rowtFileInputDelimited_41.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_41[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row33.code = null;

								row33.label = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_41 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_41 = 0;

								if (columnIndexWithD_tFileInputDelimited_41 < rowtFileInputDelimited_41.length) {

									row33.code = rowtFileInputDelimited_41[columnIndexWithD_tFileInputDelimited_41];

								} else {
									row33.code = null;
								}

								columnIndexWithD_tFileInputDelimited_41 = 1;

								if (columnIndexWithD_tFileInputDelimited_41 < rowtFileInputDelimited_41.length) {

									row33.label = rowtFileInputDelimited_41[columnIndexWithD_tFileInputDelimited_41];

								} else {
									row33.label = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_41 = true;

							System.err.println(e.getMessage());
							row33 = null;

						}

						/**
						 * [tFileInputDelimited_41 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_41 main ] start
						 */

						currentComponent = "tFileInputDelimited_41";

						tos_count_tFileInputDelimited_41++;

						/**
						 * [tFileInputDelimited_41 main ] stop
						 */
						// Start of branch "row33"
						if (row33 != null) {

							/**
							 * [tMap_35 main ] start
							 */

							currentComponent = "tMap_35";

							boolean hasCasePrimitiveKeyWithNull_tMap_35 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_35 = false;
							boolean mainRowRejected_tMap_35 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row36"
							// /////////////////////////////////////////////

							boolean forceLooprow36 = false;

							row36Struct row36ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_35) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_35 = false;

								row36HashKey.narrower = row33.code;

								row36HashKey.hashCodeDirty = true;

								tHash_Lookup_row36.lookup(row36HashKey);

								if (!tHash_Lookup_row36.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_35 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row36 != null
									&& tHash_Lookup_row36
											.getCount(row36HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row36' and it contains more one result from keys :  row36.narrower = '"
								// + row36HashKey.narrower + "'");
							} // G 071

							row36Struct row36 = null;

							row36Struct fromLookup_row36 = null;
							row36 = row36Default;

							if (tHash_Lookup_row36 != null
									&& tHash_Lookup_row36.hasNext()) { // G 099

								fromLookup_row36 = tHash_Lookup_row36.next();

							} // G 099

							if (fromLookup_row36 != null) {
								row36 = fromLookup_row36;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row35"
							// /////////////////////////////////////////////

							boolean forceLooprow35 = false;

							row35Struct row35ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_35) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_35 = false;

								row35HashKey.narrower = row36.broader;

								row35HashKey.hashCodeDirty = true;

								tHash_Lookup_row35.lookup(row35HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row35 != null
									&& tHash_Lookup_row35
											.getCount(row35HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row35' and it contains more one result from keys :  row35.narrower = '"
								// + row35HashKey.narrower + "'");
							} // G 071

							row35Struct row35 = null;

							row35Struct fromLookup_row35 = null;
							row35 = row35Default;

							if (tHash_Lookup_row35 != null
									&& tHash_Lookup_row35.hasNext()) { // G 099

								fromLookup_row35 = tHash_Lookup_row35.next();

							} // G 099

							if (fromLookup_row35 != null) {
								row35 = fromLookup_row35;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row34"
							// /////////////////////////////////////////////

							boolean forceLooprow34 = false;

							row34Struct row34ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_35) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_35 = false;

								row34HashKey.narrower = row35.broader;

								row34HashKey.hashCodeDirty = true;

								tHash_Lookup_row34.lookup(row34HashKey);

								if (!tHash_Lookup_row34.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_35 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row34 != null
									&& tHash_Lookup_row34
											.getCount(row34HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.narrower = '"
								// + row34HashKey.narrower + "'");
							} // G 071

							row34Struct row34 = null;

							row34Struct fromLookup_row34 = null;
							row34 = row34Default;

							if (tHash_Lookup_row34 != null
									&& tHash_Lookup_row34.hasNext()) { // G 099

								fromLookup_row34 = tHash_Lookup_row34.next();

							} // G 099

							if (fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_35__Struct Var = Var__tMap_35;// ###############################
								// ###############################
								// # Output tables

								MedDRA_Level4_PT = null;

								if (!rejectedInnerJoin_tMap_35) {

									// # Output table : 'MedDRA_Level4_PT'
									MedDRA_Level4_PT_tmp.C_HLEVEL = 6;
									MedDRA_Level4_PT_tmp.C_FULLNAME = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row34.broader
											+ "\\"
											+ row35.broader
											+ "\\"
											+ row36.broader
											+ "\\"
											+ row33.code
											+ "\\";
									MedDRA_Level4_PT_tmp.C_NAME = row33.label;
									MedDRA_Level4_PT_tmp.C_SYNONYM_CD = 'N';
									MedDRA_Level4_PT_tmp.C_VISUALATTRIBUTES = "FA";
									MedDRA_Level4_PT_tmp.C_TOTALNUM = null;
									MedDRA_Level4_PT_tmp.C_BASECODE = "ST|MedDRA:"
											+ row33.code;
									MedDRA_Level4_PT_tmp.C_METADATAXML = null;
									MedDRA_Level4_PT_tmp.C_FACTTABLECOLUMN = "concept_cd";
									MedDRA_Level4_PT_tmp.C_TABLENAME = "concept_dimension";
									MedDRA_Level4_PT_tmp.C_COLUMNNAME = "concept_path";
									MedDRA_Level4_PT_tmp.C_COLUMNDATATYPE = 'T';
									MedDRA_Level4_PT_tmp.C_OPERATOR = "LIKE";
									MedDRA_Level4_PT_tmp.C_DIMCODE = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row34.broader
											+ "\\"
											+ row35.broader
											+ "\\"
											+ row36.broader
											+ "\\"
											+ row33.code
											+ "\\";
									MedDRA_Level4_PT_tmp.C_COMMENT = null;
									MedDRA_Level4_PT_tmp.C_TOOLTIP = row33.label;
									MedDRA_Level4_PT_tmp.M_APPLIED_PATH = '@';
									MedDRA_Level4_PT_tmp.UPDATE_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level4_PT_tmp.DOWNLOAD_DATE = null;
									MedDRA_Level4_PT_tmp.IMPORT_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level4_PT_tmp.SOURCESYSTEM_CD = "MedDRA";
									MedDRA_Level4_PT_tmp.VALUETYPE_CD = null;
									MedDRA_Level4_PT_tmp.M_EXCLUSION_CD = null;
									MedDRA_Level4_PT_tmp.C_PATH = null;
									MedDRA_Level4_PT_tmp.C_SYMBOL = null;
									MedDRA_Level4_PT = MedDRA_Level4_PT_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_35 = false;

							tos_count_tMap_35++;

							/**
							 * [tMap_35 main ] stop
							 */
							// Start of branch "MedDRA_Level4_PT"
							if (MedDRA_Level4_PT != null) {

								/**
								 * [tUnite_5 main ] start
								 */

								currentComponent = "tUnite_5";

								// ////////

								// for output
								tHashInput_tUnite_5_row43 = new tHashInput_tUnite_5_row43Struct();

								tHashInput_tUnite_5_row43.C_HLEVEL = MedDRA_Level4_PT.C_HLEVEL;
								tHashInput_tUnite_5_row43.C_FULLNAME = MedDRA_Level4_PT.C_FULLNAME;
								tHashInput_tUnite_5_row43.C_NAME = MedDRA_Level4_PT.C_NAME;
								tHashInput_tUnite_5_row43.C_SYNONYM_CD = MedDRA_Level4_PT.C_SYNONYM_CD;
								tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES = MedDRA_Level4_PT.C_VISUALATTRIBUTES;
								tHashInput_tUnite_5_row43.C_TOTALNUM = MedDRA_Level4_PT.C_TOTALNUM;
								tHashInput_tUnite_5_row43.C_BASECODE = MedDRA_Level4_PT.C_BASECODE;
								tHashInput_tUnite_5_row43.C_METADATAXML = MedDRA_Level4_PT.C_METADATAXML;
								tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN = MedDRA_Level4_PT.C_FACTTABLECOLUMN;
								tHashInput_tUnite_5_row43.C_TABLENAME = MedDRA_Level4_PT.C_TABLENAME;
								tHashInput_tUnite_5_row43.C_COLUMNNAME = MedDRA_Level4_PT.C_COLUMNNAME;
								tHashInput_tUnite_5_row43.C_COLUMNDATATYPE = MedDRA_Level4_PT.C_COLUMNDATATYPE;
								tHashInput_tUnite_5_row43.C_OPERATOR = MedDRA_Level4_PT.C_OPERATOR;
								tHashInput_tUnite_5_row43.C_DIMCODE = MedDRA_Level4_PT.C_DIMCODE;
								tHashInput_tUnite_5_row43.C_COMMENT = MedDRA_Level4_PT.C_COMMENT;
								tHashInput_tUnite_5_row43.C_TOOLTIP = MedDRA_Level4_PT.C_TOOLTIP;
								tHashInput_tUnite_5_row43.M_APPLIED_PATH = MedDRA_Level4_PT.M_APPLIED_PATH;
								tHashInput_tUnite_5_row43.UPDATE_DATE = MedDRA_Level4_PT.UPDATE_DATE;
								tHashInput_tUnite_5_row43.DOWNLOAD_DATE = MedDRA_Level4_PT.DOWNLOAD_DATE;
								tHashInput_tUnite_5_row43.IMPORT_DATE = MedDRA_Level4_PT.IMPORT_DATE;
								tHashInput_tUnite_5_row43.SOURCESYSTEM_CD = MedDRA_Level4_PT.SOURCESYSTEM_CD;
								tHashInput_tUnite_5_row43.VALUETYPE_CD = MedDRA_Level4_PT.VALUETYPE_CD;
								tHashInput_tUnite_5_row43.M_EXCLUSION_CD = MedDRA_Level4_PT.M_EXCLUSION_CD;
								tHashInput_tUnite_5_row43.C_PATH = MedDRA_Level4_PT.C_PATH;
								tHashInput_tUnite_5_row43.C_SYMBOL = MedDRA_Level4_PT.C_SYMBOL;

								nb_line_tUnite_5++;

								// ////////

								tos_count_tUnite_5++;

								/**
								 * [tUnite_5 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_5 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_5";

								tHashInput_tUnite_5_row43Struct oneRow_tHashOutput_tUnite_5 = new tHashInput_tUnite_5_row43Struct();

								oneRow_tHashOutput_tUnite_5.C_HLEVEL = tHashInput_tUnite_5_row43.C_HLEVEL;
								oneRow_tHashOutput_tUnite_5.C_FULLNAME = tHashInput_tUnite_5_row43.C_FULLNAME;
								oneRow_tHashOutput_tUnite_5.C_NAME = tHashInput_tUnite_5_row43.C_NAME;
								oneRow_tHashOutput_tUnite_5.C_SYNONYM_CD = tHashInput_tUnite_5_row43.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_5.C_VISUALATTRIBUTES = tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_5.C_TOTALNUM = tHashInput_tUnite_5_row43.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_5.C_BASECODE = tHashInput_tUnite_5_row43.C_BASECODE;
								oneRow_tHashOutput_tUnite_5.C_METADATAXML = tHashInput_tUnite_5_row43.C_METADATAXML;
								oneRow_tHashOutput_tUnite_5.C_FACTTABLECOLUMN = tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_5.C_TABLENAME = tHashInput_tUnite_5_row43.C_TABLENAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNNAME = tHashInput_tUnite_5_row43.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNDATATYPE = tHashInput_tUnite_5_row43.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_5.C_OPERATOR = tHashInput_tUnite_5_row43.C_OPERATOR;
								oneRow_tHashOutput_tUnite_5.C_DIMCODE = tHashInput_tUnite_5_row43.C_DIMCODE;
								oneRow_tHashOutput_tUnite_5.C_COMMENT = tHashInput_tUnite_5_row43.C_COMMENT;
								oneRow_tHashOutput_tUnite_5.C_TOOLTIP = tHashInput_tUnite_5_row43.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_5.M_APPLIED_PATH = tHashInput_tUnite_5_row43.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_5.UPDATE_DATE = tHashInput_tUnite_5_row43.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_5.DOWNLOAD_DATE = tHashInput_tUnite_5_row43.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_5.IMPORT_DATE = tHashInput_tUnite_5_row43.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_5.SOURCESYSTEM_CD = tHashInput_tUnite_5_row43.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_5.VALUETYPE_CD = tHashInput_tUnite_5_row43.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_5.M_EXCLUSION_CD = tHashInput_tUnite_5_row43.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_5.C_PATH = tHashInput_tUnite_5_row43.C_PATH;
								oneRow_tHashOutput_tUnite_5.C_SYMBOL = tHashInput_tUnite_5_row43.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_5
										.put(oneRow_tHashOutput_tUnite_5);
								nb_line_tHashOutput_tUnite_5++;

								tos_count_tHashOutput_tUnite_5++;

								/**
								 * [tHashOutput_tUnite_5 main ] stop
								 */

							} // End of branch "MedDRA_Level4_PT"

						} // End of branch "row33"

						/**
						 * [tFileInputDelimited_41 end ] start
						 */

						currentComponent = "tFileInputDelimited_41";

						nb_line_tFileInputDelimited_41++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_41 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_41 != null) {
							csvReadertFileInputDelimited_41.close();
						}
					}
					if (csvReadertFileInputDelimited_41 != null) {
						globalMap.put("tFileInputDelimited_41_NB_LINE",
								nb_line_tFileInputDelimited_41);
					}
				}

				ok_Hash.put("tFileInputDelimited_41", true);
				end_Hash.put("tFileInputDelimited_41",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_41 end ] stop
				 */

				/**
				 * [tMap_35 end ] start
				 */

				currentComponent = "tMap_35";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row36 != null) {
					tHash_Lookup_row36.endGet();
				}
				globalMap.remove("tHash_Lookup_row36");

				if (tHash_Lookup_row35 != null) {
					tHash_Lookup_row35.endGet();
				}
				globalMap.remove("tHash_Lookup_row35");

				if (tHash_Lookup_row34 != null) {
					tHash_Lookup_row34.endGet();
				}
				globalMap.remove("tHash_Lookup_row34");

				// ###############################

				ok_Hash.put("tMap_35", true);
				end_Hash.put("tMap_35", System.currentTimeMillis());

				/**
				 * [tMap_35 end ] stop
				 */

				/**
				 * [tMap_36 begin ] start
				 */

				ok_Hash.put("tMap_36", false);
				start_Hash.put("tMap_36", System.currentTimeMillis());
				currentComponent = "tMap_36";

				int tos_count_tMap_36 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) globalMap
						.get("tHash_Lookup_row40"));

				row40Struct row40HashKey = new row40Struct();
				row40Struct row40Default = new row40Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) globalMap
						.get("tHash_Lookup_row39"));

				row39Struct row39HashKey = new row39Struct();
				row39Struct row39Default = new row39Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) globalMap
						.get("tHash_Lookup_row38"));

				row38Struct row38HashKey = new row38Struct();
				row38Struct row38Default = new row38Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_36__Struct {
					String label;
				}
				Var__tMap_36__Struct Var__tMap_36 = new Var__tMap_36__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MedDRA_Level5_LLTStruct MedDRA_Level5_LLT_tmp = new MedDRA_Level5_LLTStruct();
				// ###############################

				/**
				 * [tMap_36 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_38 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_38", false);
				start_Hash.put("tFileInputDelimited_38",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_38";

				int tos_count_tFileInputDelimited_38 = 0;

				int nb_line_tFileInputDelimited_38 = 0;
				int footer_tFileInputDelimited_38 = 0;
				int totalLinetFileInputDelimited_38 = 0;
				int limittFileInputDelimited_38 = -1;
				int lastLinetFileInputDelimited_38 = -1;

				char fieldSeparator_tFileInputDelimited_38[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_38 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_38[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_38 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_38 = /**
				 * Start field
				 * tFileInputDelimited_38:FILENAME
				 */
				context.rootDir + context.meddraDir + "llt.asc"/**
				 * End field
				 * tFileInputDelimited_38:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_38 = null;

				try {

					String[] rowtFileInputDelimited_38 = null;
					int currentLinetFileInputDelimited_38 = 0;
					int outputLinetFileInputDelimited_38 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_38 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_38 = 0;
							if (footer_value_tFileInputDelimited_38 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_38 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_38,
									fieldSeparator_tFileInputDelimited_38[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_38 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_38)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_38[0]);
						}

						csvReadertFileInputDelimited_38
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_38[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_38[0] != '\r'))
							csvReadertFileInputDelimited_38.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_38[0]);

						csvReadertFileInputDelimited_38.setQuoteChar('"');

						csvReadertFileInputDelimited_38
								.setEscapeChar(csvReadertFileInputDelimited_38
										.getQuoteChar());

						if (footer_tFileInputDelimited_38 > 0) {
							for (totalLinetFileInputDelimited_38 = 0; totalLinetFileInputDelimited_38 < 0; totalLinetFileInputDelimited_38++) {
								csvReadertFileInputDelimited_38.readNext();
							}
							csvReadertFileInputDelimited_38
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_38.readNext()) {

								rowtFileInputDelimited_38 = csvReadertFileInputDelimited_38
										.getValues();
								if (!(rowtFileInputDelimited_38.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_38[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_38++;

								}

							}
							int lastLineTemptFileInputDelimited_38 = totalLinetFileInputDelimited_38
									- footer_tFileInputDelimited_38 < 0 ? 0
									: totalLinetFileInputDelimited_38
											- footer_tFileInputDelimited_38;
							if (lastLinetFileInputDelimited_38 > 0) {
								lastLinetFileInputDelimited_38 = lastLinetFileInputDelimited_38 < lastLineTemptFileInputDelimited_38 ? lastLinetFileInputDelimited_38
										: lastLineTemptFileInputDelimited_38;
							} else {
								lastLinetFileInputDelimited_38 = lastLineTemptFileInputDelimited_38;
							}

							csvReadertFileInputDelimited_38.close();
							if (filename_tFileInputDelimited_38 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_38 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_38,
										fieldSeparator_tFileInputDelimited_38[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_38 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_38)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_38[0]);
							}
							csvReadertFileInputDelimited_38
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_38[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_38[0] != '\r'))
								csvReadertFileInputDelimited_38
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_38[0]);

							csvReadertFileInputDelimited_38.setQuoteChar('"');

							csvReadertFileInputDelimited_38
									.setEscapeChar(csvReadertFileInputDelimited_38
											.getQuoteChar());

						}

						if (limittFileInputDelimited_38 != 0) {
							for (currentLinetFileInputDelimited_38 = 0; currentLinetFileInputDelimited_38 < 0; currentLinetFileInputDelimited_38++) {
								csvReadertFileInputDelimited_38.readNext();
							}
						}
						csvReadertFileInputDelimited_38
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_38 != 0
							&& csvReadertFileInputDelimited_38 != null
							&& csvReadertFileInputDelimited_38.readNext()) {

						rowtFileInputDelimited_38 = csvReadertFileInputDelimited_38
								.getValues();

						if (rowtFileInputDelimited_38.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_38[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_38++;

						if (lastLinetFileInputDelimited_38 > -1
								&& currentLinetFileInputDelimited_38 > lastLinetFileInputDelimited_38) {
							break;
						}
						outputLinetFileInputDelimited_38++;
						if (limittFileInputDelimited_38 > 0
								&& outputLinetFileInputDelimited_38 > limittFileInputDelimited_38) {
							break;
						}

						row37 = null;

						boolean whetherReject_tFileInputDelimited_38 = false;
						row37 = new row37Struct();
						try {

							if (rowtFileInputDelimited_38.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_38[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row37.code = null;

								row37.label = null;

								row37.broader = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_38 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_38 = 0;

								if (columnIndexWithD_tFileInputDelimited_38 < rowtFileInputDelimited_38.length) {

									row37.code = rowtFileInputDelimited_38[columnIndexWithD_tFileInputDelimited_38];

								} else {
									row37.code = null;
								}

								columnIndexWithD_tFileInputDelimited_38 = 1;

								if (columnIndexWithD_tFileInputDelimited_38 < rowtFileInputDelimited_38.length) {

									row37.label = rowtFileInputDelimited_38[columnIndexWithD_tFileInputDelimited_38];

								} else {
									row37.label = null;
								}

								columnIndexWithD_tFileInputDelimited_38 = 2;

								if (columnIndexWithD_tFileInputDelimited_38 < rowtFileInputDelimited_38.length) {

									row37.broader = rowtFileInputDelimited_38[columnIndexWithD_tFileInputDelimited_38];

								} else {
									row37.broader = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_38 = true;

							System.err.println(e.getMessage());
							row37 = null;

						}

						/**
						 * [tFileInputDelimited_38 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_38 main ] start
						 */

						currentComponent = "tFileInputDelimited_38";

						tos_count_tFileInputDelimited_38++;

						/**
						 * [tFileInputDelimited_38 main ] stop
						 */
						// Start of branch "row37"
						if (row37 != null) {

							/**
							 * [tMap_36 main ] start
							 */

							currentComponent = "tMap_36";

							boolean hasCasePrimitiveKeyWithNull_tMap_36 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_36 = false;
							boolean mainRowRejected_tMap_36 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row40"
							// /////////////////////////////////////////////

							boolean forceLooprow40 = false;

							row40Struct row40ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_36) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_36 = false;

								row40HashKey.narrower = row37.broader;

								row40HashKey.hashCodeDirty = true;

								tHash_Lookup_row40.lookup(row40HashKey);

								if (!tHash_Lookup_row40.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_36 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row40 != null
									&& tHash_Lookup_row40
											.getCount(row40HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.narrower = '"
								// + row40HashKey.narrower + "'");
							} // G 071

							row40Struct row40 = null;

							row40Struct fromLookup_row40 = null;
							row40 = row40Default;

							if (tHash_Lookup_row40 != null
									&& tHash_Lookup_row40.hasNext()) { // G 099

								fromLookup_row40 = tHash_Lookup_row40.next();

							} // G 099

							if (fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row39"
							// /////////////////////////////////////////////

							boolean forceLooprow39 = false;

							row39Struct row39ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_36) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_36 = false;

								row39HashKey.narrower = row40.broader;

								row39HashKey.hashCodeDirty = true;

								tHash_Lookup_row39.lookup(row39HashKey);

								if (!tHash_Lookup_row39.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_36 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row39 != null
									&& tHash_Lookup_row39
											.getCount(row39HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row39' and it contains more one result from keys :  row39.narrower = '"
								// + row39HashKey.narrower + "'");
							} // G 071

							row39Struct row39 = null;

							row39Struct fromLookup_row39 = null;
							row39 = row39Default;

							if (tHash_Lookup_row39 != null
									&& tHash_Lookup_row39.hasNext()) { // G 099

								fromLookup_row39 = tHash_Lookup_row39.next();

							} // G 099

							if (fromLookup_row39 != null) {
								row39 = fromLookup_row39;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row38"
							// /////////////////////////////////////////////

							boolean forceLooprow38 = false;

							row38Struct row38ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_36) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_36 = false;

								row38HashKey.narrower = row39.broader;

								row38HashKey.hashCodeDirty = true;

								tHash_Lookup_row38.lookup(row38HashKey);

								if (!tHash_Lookup_row38.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_36 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row38 != null
									&& tHash_Lookup_row38
											.getCount(row38HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.narrower = '"
								// + row38HashKey.narrower + "'");
							} // G 071

							row38Struct row38 = null;

							row38Struct fromLookup_row38 = null;
							row38 = row38Default;

							if (tHash_Lookup_row38 != null
									&& tHash_Lookup_row38.hasNext()) { // G 099

								fromLookup_row38 = tHash_Lookup_row38.next();

							} // G 099

							if (fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_36__Struct Var = Var__tMap_36;
								Var.label = row37.code.equals(row37.broader) ? row37.label
										+ " (Preferred Term)"
										: row37.label;// ###############################
														// ###############################
														// # Output tables

								MedDRA_Level5_LLT = null;

								if (!rejectedInnerJoin_tMap_36) {

									// # Output table : 'MedDRA_Level5_LLT'
									MedDRA_Level5_LLT_tmp.C_HLEVEL = 7;
									MedDRA_Level5_LLT_tmp.C_FULLNAME = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row38.broader
											+ "\\"
											+ row39.broader
											+ "\\"
											+ row40.broader
											+ "\\"
											+ row37.broader
											+ "\\"
											+ row37.code
											+ "\\";
									MedDRA_Level5_LLT_tmp.C_NAME = Var.label;
									MedDRA_Level5_LLT_tmp.C_SYNONYM_CD = 'N';
									MedDRA_Level5_LLT_tmp.C_VISUALATTRIBUTES = "NA";
									MedDRA_Level5_LLT_tmp.C_TOTALNUM = null;
									MedDRA_Level5_LLT_tmp.C_BASECODE = "ST|MedDRA:"
											+ row37.code;
									MedDRA_Level5_LLT_tmp.C_METADATAXML = null;
									MedDRA_Level5_LLT_tmp.C_FACTTABLECOLUMN = "concept_cd";
									MedDRA_Level5_LLT_tmp.C_TABLENAME = "concept_dimension";
									MedDRA_Level5_LLT_tmp.C_COLUMNNAME = "concept_path";
									MedDRA_Level5_LLT_tmp.C_COLUMNDATATYPE = 'T';
									MedDRA_Level5_LLT_tmp.C_OPERATOR = "LIKE";
									MedDRA_Level5_LLT_tmp.C_DIMCODE = "\\i2b2\\ST\\MedDRA"
											+ "\\"
											+ row38.broader
											+ "\\"
											+ row39.broader
											+ "\\"
											+ row40.broader
											+ "\\"
											+ row37.broader
											+ "\\"
											+ row37.code
											+ "\\";
									MedDRA_Level5_LLT_tmp.C_COMMENT = null;
									MedDRA_Level5_LLT_tmp.C_TOOLTIP = Var.label;
									MedDRA_Level5_LLT_tmp.M_APPLIED_PATH = '@';
									MedDRA_Level5_LLT_tmp.UPDATE_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level5_LLT_tmp.DOWNLOAD_DATE = null;
									MedDRA_Level5_LLT_tmp.IMPORT_DATE = TalendDate
											.getCurrentDate();
									MedDRA_Level5_LLT_tmp.SOURCESYSTEM_CD = "MedDRA";
									MedDRA_Level5_LLT_tmp.VALUETYPE_CD = null;
									MedDRA_Level5_LLT_tmp.M_EXCLUSION_CD = null;
									MedDRA_Level5_LLT_tmp.C_PATH = null;
									MedDRA_Level5_LLT_tmp.C_SYMBOL = null;
									MedDRA_Level5_LLT = MedDRA_Level5_LLT_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_36 = false;

							tos_count_tMap_36++;

							/**
							 * [tMap_36 main ] stop
							 */
							// Start of branch "MedDRA_Level5_LLT"
							if (MedDRA_Level5_LLT != null) {

								/**
								 * [tUnite_5 main ] start
								 */

								currentComponent = "tUnite_5";

								// ////////

								// for output
								tHashInput_tUnite_5_row43 = new tHashInput_tUnite_5_row43Struct();

								tHashInput_tUnite_5_row43.C_HLEVEL = MedDRA_Level5_LLT.C_HLEVEL;
								tHashInput_tUnite_5_row43.C_FULLNAME = MedDRA_Level5_LLT.C_FULLNAME;
								tHashInput_tUnite_5_row43.C_NAME = MedDRA_Level5_LLT.C_NAME;
								tHashInput_tUnite_5_row43.C_SYNONYM_CD = MedDRA_Level5_LLT.C_SYNONYM_CD;
								tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES = MedDRA_Level5_LLT.C_VISUALATTRIBUTES;
								tHashInput_tUnite_5_row43.C_TOTALNUM = MedDRA_Level5_LLT.C_TOTALNUM;
								tHashInput_tUnite_5_row43.C_BASECODE = MedDRA_Level5_LLT.C_BASECODE;
								tHashInput_tUnite_5_row43.C_METADATAXML = MedDRA_Level5_LLT.C_METADATAXML;
								tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN = MedDRA_Level5_LLT.C_FACTTABLECOLUMN;
								tHashInput_tUnite_5_row43.C_TABLENAME = MedDRA_Level5_LLT.C_TABLENAME;
								tHashInput_tUnite_5_row43.C_COLUMNNAME = MedDRA_Level5_LLT.C_COLUMNNAME;
								tHashInput_tUnite_5_row43.C_COLUMNDATATYPE = MedDRA_Level5_LLT.C_COLUMNDATATYPE;
								tHashInput_tUnite_5_row43.C_OPERATOR = MedDRA_Level5_LLT.C_OPERATOR;
								tHashInput_tUnite_5_row43.C_DIMCODE = MedDRA_Level5_LLT.C_DIMCODE;
								tHashInput_tUnite_5_row43.C_COMMENT = MedDRA_Level5_LLT.C_COMMENT;
								tHashInput_tUnite_5_row43.C_TOOLTIP = MedDRA_Level5_LLT.C_TOOLTIP;
								tHashInput_tUnite_5_row43.M_APPLIED_PATH = MedDRA_Level5_LLT.M_APPLIED_PATH;
								tHashInput_tUnite_5_row43.UPDATE_DATE = MedDRA_Level5_LLT.UPDATE_DATE;
								tHashInput_tUnite_5_row43.DOWNLOAD_DATE = MedDRA_Level5_LLT.DOWNLOAD_DATE;
								tHashInput_tUnite_5_row43.IMPORT_DATE = MedDRA_Level5_LLT.IMPORT_DATE;
								tHashInput_tUnite_5_row43.SOURCESYSTEM_CD = MedDRA_Level5_LLT.SOURCESYSTEM_CD;
								tHashInput_tUnite_5_row43.VALUETYPE_CD = MedDRA_Level5_LLT.VALUETYPE_CD;
								tHashInput_tUnite_5_row43.M_EXCLUSION_CD = MedDRA_Level5_LLT.M_EXCLUSION_CD;
								tHashInput_tUnite_5_row43.C_PATH = MedDRA_Level5_LLT.C_PATH;
								tHashInput_tUnite_5_row43.C_SYMBOL = MedDRA_Level5_LLT.C_SYMBOL;

								nb_line_tUnite_5++;

								// ////////

								tos_count_tUnite_5++;

								/**
								 * [tUnite_5 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_5 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_5";

								tHashInput_tUnite_5_row43Struct oneRow_tHashOutput_tUnite_5 = new tHashInput_tUnite_5_row43Struct();

								oneRow_tHashOutput_tUnite_5.C_HLEVEL = tHashInput_tUnite_5_row43.C_HLEVEL;
								oneRow_tHashOutput_tUnite_5.C_FULLNAME = tHashInput_tUnite_5_row43.C_FULLNAME;
								oneRow_tHashOutput_tUnite_5.C_NAME = tHashInput_tUnite_5_row43.C_NAME;
								oneRow_tHashOutput_tUnite_5.C_SYNONYM_CD = tHashInput_tUnite_5_row43.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_5.C_VISUALATTRIBUTES = tHashInput_tUnite_5_row43.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_5.C_TOTALNUM = tHashInput_tUnite_5_row43.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_5.C_BASECODE = tHashInput_tUnite_5_row43.C_BASECODE;
								oneRow_tHashOutput_tUnite_5.C_METADATAXML = tHashInput_tUnite_5_row43.C_METADATAXML;
								oneRow_tHashOutput_tUnite_5.C_FACTTABLECOLUMN = tHashInput_tUnite_5_row43.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_5.C_TABLENAME = tHashInput_tUnite_5_row43.C_TABLENAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNNAME = tHashInput_tUnite_5_row43.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_5.C_COLUMNDATATYPE = tHashInput_tUnite_5_row43.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_5.C_OPERATOR = tHashInput_tUnite_5_row43.C_OPERATOR;
								oneRow_tHashOutput_tUnite_5.C_DIMCODE = tHashInput_tUnite_5_row43.C_DIMCODE;
								oneRow_tHashOutput_tUnite_5.C_COMMENT = tHashInput_tUnite_5_row43.C_COMMENT;
								oneRow_tHashOutput_tUnite_5.C_TOOLTIP = tHashInput_tUnite_5_row43.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_5.M_APPLIED_PATH = tHashInput_tUnite_5_row43.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_5.UPDATE_DATE = tHashInput_tUnite_5_row43.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_5.DOWNLOAD_DATE = tHashInput_tUnite_5_row43.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_5.IMPORT_DATE = tHashInput_tUnite_5_row43.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_5.SOURCESYSTEM_CD = tHashInput_tUnite_5_row43.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_5.VALUETYPE_CD = tHashInput_tUnite_5_row43.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_5.M_EXCLUSION_CD = tHashInput_tUnite_5_row43.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_5.C_PATH = tHashInput_tUnite_5_row43.C_PATH;
								oneRow_tHashOutput_tUnite_5.C_SYMBOL = tHashInput_tUnite_5_row43.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_5
										.put(oneRow_tHashOutput_tUnite_5);
								nb_line_tHashOutput_tUnite_5++;

								tos_count_tHashOutput_tUnite_5++;

								/**
								 * [tHashOutput_tUnite_5 main ] stop
								 */

							} // End of branch "MedDRA_Level5_LLT"

						} // End of branch "row37"

						/**
						 * [tFileInputDelimited_38 end ] start
						 */

						currentComponent = "tFileInputDelimited_38";

						nb_line_tFileInputDelimited_38++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_38 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_38 != null) {
							csvReadertFileInputDelimited_38.close();
						}
					}
					if (csvReadertFileInputDelimited_38 != null) {
						globalMap.put("tFileInputDelimited_38_NB_LINE",
								nb_line_tFileInputDelimited_38);
					}
				}

				ok_Hash.put("tFileInputDelimited_38", true);
				end_Hash.put("tFileInputDelimited_38",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_38 end ] stop
				 */

				/**
				 * [tMap_36 end ] start
				 */

				currentComponent = "tMap_36";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row40 != null) {
					tHash_Lookup_row40.endGet();
				}
				globalMap.remove("tHash_Lookup_row40");

				if (tHash_Lookup_row39 != null) {
					tHash_Lookup_row39.endGet();
				}
				globalMap.remove("tHash_Lookup_row39");

				if (tHash_Lookup_row38 != null) {
					tHash_Lookup_row38.endGet();
				}
				globalMap.remove("tHash_Lookup_row38");

				// ###############################

				ok_Hash.put("tMap_36", true);
				end_Hash.put("tMap_36", System.currentTimeMillis());

				/**
				 * [tMap_36 end ] stop
				 */

				/**
				 * [tUnite_5 end ] start
				 */

				currentComponent = "tUnite_5";

				globalMap.put("tUnite_5_NB_LINE", nb_line_tUnite_5);

				ok_Hash.put("tUnite_5", true);
				end_Hash.put("tUnite_5", System.currentTimeMillis());

				/**
				 * [tUnite_5 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_5 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_5";

				globalMap.put("tHashOutput_tUnite_5_NB_LINE",
						nb_line_tHashOutput_tUnite_5);

				ok_Hash.put("tHashOutput_tUnite_5", true);
				end_Hash.put("tHashOutput_tUnite_5", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_39"
			globalMap.remove("tHash_Lookup_row16");

			// free memory for "tMap_40"
			globalMap.remove("tHash_Lookup_row25");

			// free memory for "tMap_34"
			globalMap.remove("tHash_Lookup_row18");

			// free memory for "tMap_34"
			globalMap.remove("tHash_Lookup_row28");

			// free memory for "tMap_35"
			globalMap.remove("tHash_Lookup_row34");

			// free memory for "tMap_35"
			globalMap.remove("tHash_Lookup_row35");

			// free memory for "tMap_35"
			globalMap.remove("tHash_Lookup_row36");

			// free memory for "tMap_36"
			globalMap.remove("tHash_Lookup_row38");

			// free memory for "tMap_36"
			globalMap.remove("tHash_Lookup_row39");

			// free memory for "tMap_36"
			globalMap.remove("tHash_Lookup_row40");

		}

		globalMap.put("tFileInputDelimited_34_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String order;

		public String getOrder() {
			return this.order;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code == null) ? 0 : this.code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.code == null) {
				if (other.code != null)
					return false;
			} else if (!this.code.equals(other.code))
				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.order = this.order;
			other.code = this.code;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.code = this.code;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.order = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.order, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order=" + order);
			sb.append(",code=" + code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code, other.code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_43Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_43_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tFileInputDelimited_43 -
				// inputs:(after_tFileInputDelimited_30) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_39 - inputs:(row8,row16)
				// outputs:(MedDRA_Level1_SOC)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_43 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_43", false);
				start_Hash.put("tFileInputDelimited_43",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_43";

				int tos_count_tFileInputDelimited_43 = 0;

				int nb_line_tFileInputDelimited_43 = 0;
				int footer_tFileInputDelimited_43 = 0;
				int totalLinetFileInputDelimited_43 = 0;
				int limittFileInputDelimited_43 = -1;
				int lastLinetFileInputDelimited_43 = -1;

				char fieldSeparator_tFileInputDelimited_43[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_43 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_43[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_43 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_43 = /**
				 * Start field
				 * tFileInputDelimited_43:FILENAME
				 */
				context.rootDir + context.meddraDir + "intl_ord.asc"/**
				 * End field
				 * tFileInputDelimited_43:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_43 = null;

				try {

					String[] rowtFileInputDelimited_43 = null;
					int currentLinetFileInputDelimited_43 = 0;
					int outputLinetFileInputDelimited_43 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_43 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_43 = 0;
							if (footer_value_tFileInputDelimited_43 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_43 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_43,
									fieldSeparator_tFileInputDelimited_43[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_43 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_43)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_43[0]);
						}

						csvReadertFileInputDelimited_43
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_43[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_43[0] != '\r'))
							csvReadertFileInputDelimited_43.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_43[0]);

						csvReadertFileInputDelimited_43.setQuoteChar('"');

						csvReadertFileInputDelimited_43
								.setEscapeChar(csvReadertFileInputDelimited_43
										.getQuoteChar());

						if (footer_tFileInputDelimited_43 > 0) {
							for (totalLinetFileInputDelimited_43 = 0; totalLinetFileInputDelimited_43 < 0; totalLinetFileInputDelimited_43++) {
								csvReadertFileInputDelimited_43.readNext();
							}
							csvReadertFileInputDelimited_43
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_43.readNext()) {

								rowtFileInputDelimited_43 = csvReadertFileInputDelimited_43
										.getValues();
								if (!(rowtFileInputDelimited_43.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_43[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_43++;

								}

							}
							int lastLineTemptFileInputDelimited_43 = totalLinetFileInputDelimited_43
									- footer_tFileInputDelimited_43 < 0 ? 0
									: totalLinetFileInputDelimited_43
											- footer_tFileInputDelimited_43;
							if (lastLinetFileInputDelimited_43 > 0) {
								lastLinetFileInputDelimited_43 = lastLinetFileInputDelimited_43 < lastLineTemptFileInputDelimited_43 ? lastLinetFileInputDelimited_43
										: lastLineTemptFileInputDelimited_43;
							} else {
								lastLinetFileInputDelimited_43 = lastLineTemptFileInputDelimited_43;
							}

							csvReadertFileInputDelimited_43.close();
							if (filename_tFileInputDelimited_43 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_43 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_43,
										fieldSeparator_tFileInputDelimited_43[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_43 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_43)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_43[0]);
							}
							csvReadertFileInputDelimited_43
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_43[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_43[0] != '\r'))
								csvReadertFileInputDelimited_43
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_43[0]);

							csvReadertFileInputDelimited_43.setQuoteChar('"');

							csvReadertFileInputDelimited_43
									.setEscapeChar(csvReadertFileInputDelimited_43
											.getQuoteChar());

						}

						if (limittFileInputDelimited_43 != 0) {
							for (currentLinetFileInputDelimited_43 = 0; currentLinetFileInputDelimited_43 < 0; currentLinetFileInputDelimited_43++) {
								csvReadertFileInputDelimited_43.readNext();
							}
						}
						csvReadertFileInputDelimited_43
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_43 != 0
							&& csvReadertFileInputDelimited_43 != null
							&& csvReadertFileInputDelimited_43.readNext()) {

						rowtFileInputDelimited_43 = csvReadertFileInputDelimited_43
								.getValues();

						if (rowtFileInputDelimited_43.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_43[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_43++;

						if (lastLinetFileInputDelimited_43 > -1
								&& currentLinetFileInputDelimited_43 > lastLinetFileInputDelimited_43) {
							break;
						}
						outputLinetFileInputDelimited_43++;
						if (limittFileInputDelimited_43 > 0
								&& outputLinetFileInputDelimited_43 > limittFileInputDelimited_43) {
							break;
						}

						row16 = null;

						row16 = null;

						boolean whetherReject_tFileInputDelimited_43 = false;
						row16 = new row16Struct();
						try {

							if (rowtFileInputDelimited_43.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_43[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row16.order = null;

								row16.code = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_43 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_43 = 0;

								if (columnIndexWithD_tFileInputDelimited_43 < rowtFileInputDelimited_43.length) {

									row16.order = rowtFileInputDelimited_43[columnIndexWithD_tFileInputDelimited_43];

								} else {
									row16.order = null;
								}

								columnIndexWithD_tFileInputDelimited_43 = 1;

								if (columnIndexWithD_tFileInputDelimited_43 < rowtFileInputDelimited_43.length) {

									row16.code = rowtFileInputDelimited_43[columnIndexWithD_tFileInputDelimited_43];

								} else {
									row16.code = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_43 = true;

							System.err.println(e.getMessage());
							row16 = null;

						}

						/**
						 * [tFileInputDelimited_43 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_43 main ] start
						 */

						currentComponent = "tFileInputDelimited_43";

						tos_count_tFileInputDelimited_43++;

						/**
						 * [tFileInputDelimited_43 main ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tAdvancedHash_row16 main ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							row16Struct row16_HashRow = new row16Struct();

							row16_HashRow.order = row16.order;

							row16_HashRow.code = row16.code;

							tHash_Lookup_row16.put(row16_HashRow);

							tos_count_tAdvancedHash_row16++;

							/**
							 * [tAdvancedHash_row16 main ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_43 end ] start
						 */

						currentComponent = "tFileInputDelimited_43";

						nb_line_tFileInputDelimited_43++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_43 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_43 != null) {
							csvReadertFileInputDelimited_43.close();
						}
					}
					if (csvReadertFileInputDelimited_43 != null) {
						globalMap.put("tFileInputDelimited_43_NB_LINE",
								nb_line_tFileInputDelimited_43);
					}
				}

				ok_Hash.put("tFileInputDelimited_43", true);
				end_Hash.put("tFileInputDelimited_43",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_43 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_43_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements
			routines.system.IPersistableComparableLookupRow<row25Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row25Struct other = (row25Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row25Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row25Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_45Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_45_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();

				/**
				 * [tAdvancedHash_row25 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row25", false);
				start_Hash.put("tAdvancedHash_row25",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row25";

				int tos_count_tAdvancedHash_row25 = 0;

				// connection name:row25
				// source node:tFileInputDelimited_45 -
				// inputs:(after_tFileInputDelimited_44) outputs:(row25,row25) |
				// target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
				// linked node: tMap_40 - inputs:(row22,row25)
				// outputs:(MedDRA_Level2_HLGT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row25Struct> getLookup(matchingModeEnum_row25);

				globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);

				/**
				 * [tAdvancedHash_row25 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_45 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_45", false);
				start_Hash.put("tFileInputDelimited_45",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_45";

				int tos_count_tFileInputDelimited_45 = 0;

				int nb_line_tFileInputDelimited_45 = 0;
				int footer_tFileInputDelimited_45 = 0;
				int totalLinetFileInputDelimited_45 = 0;
				int limittFileInputDelimited_45 = -1;
				int lastLinetFileInputDelimited_45 = -1;

				char fieldSeparator_tFileInputDelimited_45[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_45 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_45[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_45 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_45 = /**
				 * Start field
				 * tFileInputDelimited_45:FILENAME
				 */
				context.rootDir + context.meddraDir + "soc_hlgt.asc"/**
				 * End field
				 * tFileInputDelimited_45:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_45 = null;

				try {

					String[] rowtFileInputDelimited_45 = null;
					int currentLinetFileInputDelimited_45 = 0;
					int outputLinetFileInputDelimited_45 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_45 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_45 = 0;
							if (footer_value_tFileInputDelimited_45 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_45 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_45,
									fieldSeparator_tFileInputDelimited_45[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_45 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_45)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_45[0]);
						}

						csvReadertFileInputDelimited_45
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_45[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_45[0] != '\r'))
							csvReadertFileInputDelimited_45.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_45[0]);

						csvReadertFileInputDelimited_45.setQuoteChar('"');

						csvReadertFileInputDelimited_45
								.setEscapeChar(csvReadertFileInputDelimited_45
										.getQuoteChar());

						if (footer_tFileInputDelimited_45 > 0) {
							for (totalLinetFileInputDelimited_45 = 0; totalLinetFileInputDelimited_45 < 0; totalLinetFileInputDelimited_45++) {
								csvReadertFileInputDelimited_45.readNext();
							}
							csvReadertFileInputDelimited_45
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_45.readNext()) {

								rowtFileInputDelimited_45 = csvReadertFileInputDelimited_45
										.getValues();
								if (!(rowtFileInputDelimited_45.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_45[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_45++;

								}

							}
							int lastLineTemptFileInputDelimited_45 = totalLinetFileInputDelimited_45
									- footer_tFileInputDelimited_45 < 0 ? 0
									: totalLinetFileInputDelimited_45
											- footer_tFileInputDelimited_45;
							if (lastLinetFileInputDelimited_45 > 0) {
								lastLinetFileInputDelimited_45 = lastLinetFileInputDelimited_45 < lastLineTemptFileInputDelimited_45 ? lastLinetFileInputDelimited_45
										: lastLineTemptFileInputDelimited_45;
							} else {
								lastLinetFileInputDelimited_45 = lastLineTemptFileInputDelimited_45;
							}

							csvReadertFileInputDelimited_45.close();
							if (filename_tFileInputDelimited_45 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_45 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_45,
										fieldSeparator_tFileInputDelimited_45[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_45 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_45)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_45[0]);
							}
							csvReadertFileInputDelimited_45
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_45[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_45[0] != '\r'))
								csvReadertFileInputDelimited_45
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_45[0]);

							csvReadertFileInputDelimited_45.setQuoteChar('"');

							csvReadertFileInputDelimited_45
									.setEscapeChar(csvReadertFileInputDelimited_45
											.getQuoteChar());

						}

						if (limittFileInputDelimited_45 != 0) {
							for (currentLinetFileInputDelimited_45 = 0; currentLinetFileInputDelimited_45 < 0; currentLinetFileInputDelimited_45++) {
								csvReadertFileInputDelimited_45.readNext();
							}
						}
						csvReadertFileInputDelimited_45
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_45 != 0
							&& csvReadertFileInputDelimited_45 != null
							&& csvReadertFileInputDelimited_45.readNext()) {

						rowtFileInputDelimited_45 = csvReadertFileInputDelimited_45
								.getValues();

						if (rowtFileInputDelimited_45.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_45[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_45++;

						if (lastLinetFileInputDelimited_45 > -1
								&& currentLinetFileInputDelimited_45 > lastLinetFileInputDelimited_45) {
							break;
						}
						outputLinetFileInputDelimited_45++;
						if (limittFileInputDelimited_45 > 0
								&& outputLinetFileInputDelimited_45 > limittFileInputDelimited_45) {
							break;
						}

						row25 = null;

						row25 = null;

						boolean whetherReject_tFileInputDelimited_45 = false;
						row25 = new row25Struct();
						try {

							if (rowtFileInputDelimited_45.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_45[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row25.broader = null;

								row25.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_45 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_45 = 0;

								if (columnIndexWithD_tFileInputDelimited_45 < rowtFileInputDelimited_45.length) {

									row25.broader = rowtFileInputDelimited_45[columnIndexWithD_tFileInputDelimited_45];

								} else {
									row25.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_45 = 1;

								if (columnIndexWithD_tFileInputDelimited_45 < rowtFileInputDelimited_45.length) {

									row25.narrower = rowtFileInputDelimited_45[columnIndexWithD_tFileInputDelimited_45];

								} else {
									row25.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_45 = true;

							System.err.println(e.getMessage());
							row25 = null;

						}

						/**
						 * [tFileInputDelimited_45 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_45 main ] start
						 */

						currentComponent = "tFileInputDelimited_45";

						tos_count_tFileInputDelimited_45++;

						/**
						 * [tFileInputDelimited_45 main ] stop
						 */
						// Start of branch "row25"
						if (row25 != null) {

							/**
							 * [tAdvancedHash_row25 main ] start
							 */

							currentComponent = "tAdvancedHash_row25";

							row25Struct row25_HashRow = new row25Struct();

							row25_HashRow.broader = row25.broader;

							row25_HashRow.narrower = row25.narrower;

							tHash_Lookup_row25.put(row25_HashRow);

							tos_count_tAdvancedHash_row25++;

							/**
							 * [tAdvancedHash_row25 main ] stop
							 */

						} // End of branch "row25"

						/**
						 * [tFileInputDelimited_45 end ] start
						 */

						currentComponent = "tFileInputDelimited_45";

						nb_line_tFileInputDelimited_45++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_45 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_45 != null) {
							csvReadertFileInputDelimited_45.close();
						}
					}
					if (csvReadertFileInputDelimited_45 != null) {
						globalMap.put("tFileInputDelimited_45_NB_LINE",
								nb_line_tFileInputDelimited_45);
					}
				}

				ok_Hash.put("tFileInputDelimited_45", true);
				end_Hash.put("tFileInputDelimited_45",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_45 end ] stop
				 */

				/**
				 * [tAdvancedHash_row25 end ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				tHash_Lookup_row25.endPut();

				ok_Hash.put("tAdvancedHash_row25", true);
				end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row25 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_45_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_42Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_42_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tFileInputDelimited_42 -
				// inputs:(after_tFileInputDelimited_36) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_34 - inputs:(row17,row18,row28)
				// outputs:(MedDRA_Level3_HLT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_42 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_42", false);
				start_Hash.put("tFileInputDelimited_42",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_42";

				int tos_count_tFileInputDelimited_42 = 0;

				int nb_line_tFileInputDelimited_42 = 0;
				int footer_tFileInputDelimited_42 = 0;
				int totalLinetFileInputDelimited_42 = 0;
				int limittFileInputDelimited_42 = -1;
				int lastLinetFileInputDelimited_42 = -1;

				char fieldSeparator_tFileInputDelimited_42[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_42 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_42[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_42 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_42 = /**
				 * Start field
				 * tFileInputDelimited_42:FILENAME
				 */
				context.rootDir + context.meddraDir + "hlgt_hlt.asc"/**
				 * End field
				 * tFileInputDelimited_42:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_42 = null;

				try {

					String[] rowtFileInputDelimited_42 = null;
					int currentLinetFileInputDelimited_42 = 0;
					int outputLinetFileInputDelimited_42 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_42 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_42 = 0;
							if (footer_value_tFileInputDelimited_42 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_42 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_42,
									fieldSeparator_tFileInputDelimited_42[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_42 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_42)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_42[0]);
						}

						csvReadertFileInputDelimited_42
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_42[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_42[0] != '\r'))
							csvReadertFileInputDelimited_42.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_42[0]);

						csvReadertFileInputDelimited_42.setQuoteChar('"');

						csvReadertFileInputDelimited_42
								.setEscapeChar(csvReadertFileInputDelimited_42
										.getQuoteChar());

						if (footer_tFileInputDelimited_42 > 0) {
							for (totalLinetFileInputDelimited_42 = 0; totalLinetFileInputDelimited_42 < 0; totalLinetFileInputDelimited_42++) {
								csvReadertFileInputDelimited_42.readNext();
							}
							csvReadertFileInputDelimited_42
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_42.readNext()) {

								rowtFileInputDelimited_42 = csvReadertFileInputDelimited_42
										.getValues();
								if (!(rowtFileInputDelimited_42.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_42[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_42++;

								}

							}
							int lastLineTemptFileInputDelimited_42 = totalLinetFileInputDelimited_42
									- footer_tFileInputDelimited_42 < 0 ? 0
									: totalLinetFileInputDelimited_42
											- footer_tFileInputDelimited_42;
							if (lastLinetFileInputDelimited_42 > 0) {
								lastLinetFileInputDelimited_42 = lastLinetFileInputDelimited_42 < lastLineTemptFileInputDelimited_42 ? lastLinetFileInputDelimited_42
										: lastLineTemptFileInputDelimited_42;
							} else {
								lastLinetFileInputDelimited_42 = lastLineTemptFileInputDelimited_42;
							}

							csvReadertFileInputDelimited_42.close();
							if (filename_tFileInputDelimited_42 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_42 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_42,
										fieldSeparator_tFileInputDelimited_42[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_42 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_42)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_42[0]);
							}
							csvReadertFileInputDelimited_42
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_42[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_42[0] != '\r'))
								csvReadertFileInputDelimited_42
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_42[0]);

							csvReadertFileInputDelimited_42.setQuoteChar('"');

							csvReadertFileInputDelimited_42
									.setEscapeChar(csvReadertFileInputDelimited_42
											.getQuoteChar());

						}

						if (limittFileInputDelimited_42 != 0) {
							for (currentLinetFileInputDelimited_42 = 0; currentLinetFileInputDelimited_42 < 0; currentLinetFileInputDelimited_42++) {
								csvReadertFileInputDelimited_42.readNext();
							}
						}
						csvReadertFileInputDelimited_42
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_42 != 0
							&& csvReadertFileInputDelimited_42 != null
							&& csvReadertFileInputDelimited_42.readNext()) {

						rowtFileInputDelimited_42 = csvReadertFileInputDelimited_42
								.getValues();

						if (rowtFileInputDelimited_42.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_42[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_42++;

						if (lastLinetFileInputDelimited_42 > -1
								&& currentLinetFileInputDelimited_42 > lastLinetFileInputDelimited_42) {
							break;
						}
						outputLinetFileInputDelimited_42++;
						if (limittFileInputDelimited_42 > 0
								&& outputLinetFileInputDelimited_42 > limittFileInputDelimited_42) {
							break;
						}

						row18 = null;

						row18 = null;

						boolean whetherReject_tFileInputDelimited_42 = false;
						row18 = new row18Struct();
						try {

							if (rowtFileInputDelimited_42.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_42[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row18.broader = null;

								row18.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_42 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_42 = 0;

								if (columnIndexWithD_tFileInputDelimited_42 < rowtFileInputDelimited_42.length) {

									row18.broader = rowtFileInputDelimited_42[columnIndexWithD_tFileInputDelimited_42];

								} else {
									row18.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_42 = 1;

								if (columnIndexWithD_tFileInputDelimited_42 < rowtFileInputDelimited_42.length) {

									row18.narrower = rowtFileInputDelimited_42[columnIndexWithD_tFileInputDelimited_42];

								} else {
									row18.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_42 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_42 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_42 main ] start
						 */

						currentComponent = "tFileInputDelimited_42";

						tos_count_tFileInputDelimited_42++;

						/**
						 * [tFileInputDelimited_42 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tAdvancedHash_row18 main ] start
							 */

							currentComponent = "tAdvancedHash_row18";

							row18Struct row18_HashRow = new row18Struct();

							row18_HashRow.broader = row18.broader;

							row18_HashRow.narrower = row18.narrower;

							tHash_Lookup_row18.put(row18_HashRow);

							tos_count_tAdvancedHash_row18++;

							/**
							 * [tAdvancedHash_row18 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_42 end ] start
						 */

						currentComponent = "tFileInputDelimited_42";

						nb_line_tFileInputDelimited_42++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_42 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_42 != null) {
							csvReadertFileInputDelimited_42.close();
						}
					}
					if (csvReadertFileInputDelimited_42 != null) {
						globalMap.put("tFileInputDelimited_42_NB_LINE",
								nb_line_tFileInputDelimited_42);
					}
				}

				ok_Hash.put("tFileInputDelimited_42", true);
				end_Hash.put("tFileInputDelimited_42",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_42 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_42_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableComparableLookupRow<row28Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_35Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_35_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tAdvancedHash_row28 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row28", false);
				start_Hash.put("tAdvancedHash_row28",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row28";

				int tos_count_tAdvancedHash_row28 = 0;

				// connection name:row28
				// source node:tFileInputDelimited_35 -
				// inputs:(after_tFileInputDelimited_36) outputs:(row28,row28) |
				// target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
				// linked node: tMap_34 - inputs:(row17,row18,row28)
				// outputs:(MedDRA_Level3_HLT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row28Struct> getLookup(matchingModeEnum_row28);

				globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);

				/**
				 * [tAdvancedHash_row28 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_35 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_35", false);
				start_Hash.put("tFileInputDelimited_35",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_35";

				int tos_count_tFileInputDelimited_35 = 0;

				int nb_line_tFileInputDelimited_35 = 0;
				int footer_tFileInputDelimited_35 = 0;
				int totalLinetFileInputDelimited_35 = 0;
				int limittFileInputDelimited_35 = -1;
				int lastLinetFileInputDelimited_35 = -1;

				char fieldSeparator_tFileInputDelimited_35[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_35 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_35[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_35 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_35 = /**
				 * Start field
				 * tFileInputDelimited_35:FILENAME
				 */
				context.rootDir + context.meddraDir + "soc_hlgt.asc"/**
				 * End field
				 * tFileInputDelimited_35:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_35 = null;

				try {

					String[] rowtFileInputDelimited_35 = null;
					int currentLinetFileInputDelimited_35 = 0;
					int outputLinetFileInputDelimited_35 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_35 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_35 = 0;
							if (footer_value_tFileInputDelimited_35 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_35 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_35,
									fieldSeparator_tFileInputDelimited_35[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_35 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_35)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_35[0]);
						}

						csvReadertFileInputDelimited_35
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_35[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_35[0] != '\r'))
							csvReadertFileInputDelimited_35.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_35[0]);

						csvReadertFileInputDelimited_35.setQuoteChar('"');

						csvReadertFileInputDelimited_35
								.setEscapeChar(csvReadertFileInputDelimited_35
										.getQuoteChar());

						if (footer_tFileInputDelimited_35 > 0) {
							for (totalLinetFileInputDelimited_35 = 0; totalLinetFileInputDelimited_35 < 0; totalLinetFileInputDelimited_35++) {
								csvReadertFileInputDelimited_35.readNext();
							}
							csvReadertFileInputDelimited_35
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_35.readNext()) {

								rowtFileInputDelimited_35 = csvReadertFileInputDelimited_35
										.getValues();
								if (!(rowtFileInputDelimited_35.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_35[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_35++;

								}

							}
							int lastLineTemptFileInputDelimited_35 = totalLinetFileInputDelimited_35
									- footer_tFileInputDelimited_35 < 0 ? 0
									: totalLinetFileInputDelimited_35
											- footer_tFileInputDelimited_35;
							if (lastLinetFileInputDelimited_35 > 0) {
								lastLinetFileInputDelimited_35 = lastLinetFileInputDelimited_35 < lastLineTemptFileInputDelimited_35 ? lastLinetFileInputDelimited_35
										: lastLineTemptFileInputDelimited_35;
							} else {
								lastLinetFileInputDelimited_35 = lastLineTemptFileInputDelimited_35;
							}

							csvReadertFileInputDelimited_35.close();
							if (filename_tFileInputDelimited_35 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_35 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_35,
										fieldSeparator_tFileInputDelimited_35[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_35 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_35)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_35[0]);
							}
							csvReadertFileInputDelimited_35
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_35[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_35[0] != '\r'))
								csvReadertFileInputDelimited_35
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_35[0]);

							csvReadertFileInputDelimited_35.setQuoteChar('"');

							csvReadertFileInputDelimited_35
									.setEscapeChar(csvReadertFileInputDelimited_35
											.getQuoteChar());

						}

						if (limittFileInputDelimited_35 != 0) {
							for (currentLinetFileInputDelimited_35 = 0; currentLinetFileInputDelimited_35 < 0; currentLinetFileInputDelimited_35++) {
								csvReadertFileInputDelimited_35.readNext();
							}
						}
						csvReadertFileInputDelimited_35
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_35 != 0
							&& csvReadertFileInputDelimited_35 != null
							&& csvReadertFileInputDelimited_35.readNext()) {

						rowtFileInputDelimited_35 = csvReadertFileInputDelimited_35
								.getValues();

						if (rowtFileInputDelimited_35.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_35[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_35++;

						if (lastLinetFileInputDelimited_35 > -1
								&& currentLinetFileInputDelimited_35 > lastLinetFileInputDelimited_35) {
							break;
						}
						outputLinetFileInputDelimited_35++;
						if (limittFileInputDelimited_35 > 0
								&& outputLinetFileInputDelimited_35 > limittFileInputDelimited_35) {
							break;
						}

						row28 = null;

						row28 = null;

						boolean whetherReject_tFileInputDelimited_35 = false;
						row28 = new row28Struct();
						try {

							if (rowtFileInputDelimited_35.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_35[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row28.broader = null;

								row28.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_35 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_35 = 0;

								if (columnIndexWithD_tFileInputDelimited_35 < rowtFileInputDelimited_35.length) {

									row28.broader = rowtFileInputDelimited_35[columnIndexWithD_tFileInputDelimited_35];

								} else {
									row28.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_35 = 1;

								if (columnIndexWithD_tFileInputDelimited_35 < rowtFileInputDelimited_35.length) {

									row28.narrower = rowtFileInputDelimited_35[columnIndexWithD_tFileInputDelimited_35];

								} else {
									row28.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_35 = true;

							System.err.println(e.getMessage());
							row28 = null;

						}

						/**
						 * [tFileInputDelimited_35 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_35 main ] start
						 */

						currentComponent = "tFileInputDelimited_35";

						tos_count_tFileInputDelimited_35++;

						/**
						 * [tFileInputDelimited_35 main ] stop
						 */
						// Start of branch "row28"
						if (row28 != null) {

							/**
							 * [tAdvancedHash_row28 main ] start
							 */

							currentComponent = "tAdvancedHash_row28";

							row28Struct row28_HashRow = new row28Struct();

							row28_HashRow.broader = row28.broader;

							row28_HashRow.narrower = row28.narrower;

							tHash_Lookup_row28.put(row28_HashRow);

							tos_count_tAdvancedHash_row28++;

							/**
							 * [tAdvancedHash_row28 main ] stop
							 */

						} // End of branch "row28"

						/**
						 * [tFileInputDelimited_35 end ] start
						 */

						currentComponent = "tFileInputDelimited_35";

						nb_line_tFileInputDelimited_35++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_35 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_35 != null) {
							csvReadertFileInputDelimited_35.close();
						}
					}
					if (csvReadertFileInputDelimited_35 != null) {
						globalMap.put("tFileInputDelimited_35_NB_LINE",
								nb_line_tFileInputDelimited_35);
					}
				}

				ok_Hash.put("tFileInputDelimited_35", true);
				end_Hash.put("tFileInputDelimited_35",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_35 end ] stop
				 */

				/**
				 * [tAdvancedHash_row28 end ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				tHash_Lookup_row28.endPut();

				ok_Hash.put("tAdvancedHash_row28", true);
				end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row28 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_35_SUBPROCESS_STATE", 1);
	}

	public static class row34Struct implements
			routines.system.IPersistableComparableLookupRow<row34Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row34Struct other = (row34Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row34Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row34Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_46Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_46_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row34Struct row34 = new row34Struct();

				/**
				 * [tAdvancedHash_row34 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row34", false);
				start_Hash.put("tAdvancedHash_row34",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row34";

				int tos_count_tAdvancedHash_row34 = 0;

				// connection name:row34
				// source node:tFileInputDelimited_46 -
				// inputs:(after_tFileInputDelimited_41) outputs:(row34,row34) |
				// target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
				// linked node: tMap_35 - inputs:(row33,row34,row35,row36)
				// outputs:(MedDRA_Level4_PT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row34Struct> getLookup(matchingModeEnum_row34);

				globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);

				/**
				 * [tAdvancedHash_row34 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_46 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_46", false);
				start_Hash.put("tFileInputDelimited_46",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_46";

				int tos_count_tFileInputDelimited_46 = 0;

				int nb_line_tFileInputDelimited_46 = 0;
				int footer_tFileInputDelimited_46 = 0;
				int totalLinetFileInputDelimited_46 = 0;
				int limittFileInputDelimited_46 = -1;
				int lastLinetFileInputDelimited_46 = -1;

				char fieldSeparator_tFileInputDelimited_46[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_46 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_46[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_46 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_46 = /**
				 * Start field
				 * tFileInputDelimited_46:FILENAME
				 */
				context.rootDir + context.meddraDir + "soc_hlgt.asc"/**
				 * End field
				 * tFileInputDelimited_46:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_46 = null;

				try {

					String[] rowtFileInputDelimited_46 = null;
					int currentLinetFileInputDelimited_46 = 0;
					int outputLinetFileInputDelimited_46 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_46 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_46 = 0;
							if (footer_value_tFileInputDelimited_46 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_46 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_46,
									fieldSeparator_tFileInputDelimited_46[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_46 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_46)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_46[0]);
						}

						csvReadertFileInputDelimited_46
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_46[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_46[0] != '\r'))
							csvReadertFileInputDelimited_46.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_46[0]);

						csvReadertFileInputDelimited_46.setQuoteChar('"');

						csvReadertFileInputDelimited_46
								.setEscapeChar(csvReadertFileInputDelimited_46
										.getQuoteChar());

						if (footer_tFileInputDelimited_46 > 0) {
							for (totalLinetFileInputDelimited_46 = 0; totalLinetFileInputDelimited_46 < 0; totalLinetFileInputDelimited_46++) {
								csvReadertFileInputDelimited_46.readNext();
							}
							csvReadertFileInputDelimited_46
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_46.readNext()) {

								rowtFileInputDelimited_46 = csvReadertFileInputDelimited_46
										.getValues();
								if (!(rowtFileInputDelimited_46.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_46[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_46++;

								}

							}
							int lastLineTemptFileInputDelimited_46 = totalLinetFileInputDelimited_46
									- footer_tFileInputDelimited_46 < 0 ? 0
									: totalLinetFileInputDelimited_46
											- footer_tFileInputDelimited_46;
							if (lastLinetFileInputDelimited_46 > 0) {
								lastLinetFileInputDelimited_46 = lastLinetFileInputDelimited_46 < lastLineTemptFileInputDelimited_46 ? lastLinetFileInputDelimited_46
										: lastLineTemptFileInputDelimited_46;
							} else {
								lastLinetFileInputDelimited_46 = lastLineTemptFileInputDelimited_46;
							}

							csvReadertFileInputDelimited_46.close();
							if (filename_tFileInputDelimited_46 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_46 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_46,
										fieldSeparator_tFileInputDelimited_46[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_46 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_46)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_46[0]);
							}
							csvReadertFileInputDelimited_46
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_46[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_46[0] != '\r'))
								csvReadertFileInputDelimited_46
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_46[0]);

							csvReadertFileInputDelimited_46.setQuoteChar('"');

							csvReadertFileInputDelimited_46
									.setEscapeChar(csvReadertFileInputDelimited_46
											.getQuoteChar());

						}

						if (limittFileInputDelimited_46 != 0) {
							for (currentLinetFileInputDelimited_46 = 0; currentLinetFileInputDelimited_46 < 0; currentLinetFileInputDelimited_46++) {
								csvReadertFileInputDelimited_46.readNext();
							}
						}
						csvReadertFileInputDelimited_46
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_46 != 0
							&& csvReadertFileInputDelimited_46 != null
							&& csvReadertFileInputDelimited_46.readNext()) {

						rowtFileInputDelimited_46 = csvReadertFileInputDelimited_46
								.getValues();

						if (rowtFileInputDelimited_46.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_46[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_46++;

						if (lastLinetFileInputDelimited_46 > -1
								&& currentLinetFileInputDelimited_46 > lastLinetFileInputDelimited_46) {
							break;
						}
						outputLinetFileInputDelimited_46++;
						if (limittFileInputDelimited_46 > 0
								&& outputLinetFileInputDelimited_46 > limittFileInputDelimited_46) {
							break;
						}

						row34 = null;

						row34 = null;

						boolean whetherReject_tFileInputDelimited_46 = false;
						row34 = new row34Struct();
						try {

							if (rowtFileInputDelimited_46.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_46[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row34.broader = null;

								row34.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_46 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_46 = 0;

								if (columnIndexWithD_tFileInputDelimited_46 < rowtFileInputDelimited_46.length) {

									row34.broader = rowtFileInputDelimited_46[columnIndexWithD_tFileInputDelimited_46];

								} else {
									row34.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_46 = 1;

								if (columnIndexWithD_tFileInputDelimited_46 < rowtFileInputDelimited_46.length) {

									row34.narrower = rowtFileInputDelimited_46[columnIndexWithD_tFileInputDelimited_46];

								} else {
									row34.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_46 = true;

							System.err.println(e.getMessage());
							row34 = null;

						}

						/**
						 * [tFileInputDelimited_46 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_46 main ] start
						 */

						currentComponent = "tFileInputDelimited_46";

						tos_count_tFileInputDelimited_46++;

						/**
						 * [tFileInputDelimited_46 main ] stop
						 */
						// Start of branch "row34"
						if (row34 != null) {

							/**
							 * [tAdvancedHash_row34 main ] start
							 */

							currentComponent = "tAdvancedHash_row34";

							row34Struct row34_HashRow = new row34Struct();

							row34_HashRow.broader = row34.broader;

							row34_HashRow.narrower = row34.narrower;

							tHash_Lookup_row34.put(row34_HashRow);

							tos_count_tAdvancedHash_row34++;

							/**
							 * [tAdvancedHash_row34 main ] stop
							 */

						} // End of branch "row34"

						/**
						 * [tFileInputDelimited_46 end ] start
						 */

						currentComponent = "tFileInputDelimited_46";

						nb_line_tFileInputDelimited_46++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_46 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_46 != null) {
							csvReadertFileInputDelimited_46.close();
						}
					}
					if (csvReadertFileInputDelimited_46 != null) {
						globalMap.put("tFileInputDelimited_46_NB_LINE",
								nb_line_tFileInputDelimited_46);
					}
				}

				ok_Hash.put("tFileInputDelimited_46", true);
				end_Hash.put("tFileInputDelimited_46",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_46 end ] stop
				 */

				/**
				 * [tAdvancedHash_row34 end ] start
				 */

				currentComponent = "tAdvancedHash_row34";

				tHash_Lookup_row34.endPut();

				ok_Hash.put("tAdvancedHash_row34", true);
				end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row34 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_46_SUBPROCESS_STATE", 1);
	}

	public static class row35Struct implements
			routines.system.IPersistableComparableLookupRow<row35Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row35Struct other = (row35Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row35Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row35Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_47Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_47_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();

				/**
				 * [tAdvancedHash_row35 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row35", false);
				start_Hash.put("tAdvancedHash_row35",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row35";

				int tos_count_tAdvancedHash_row35 = 0;

				// connection name:row35
				// source node:tFileInputDelimited_47 -
				// inputs:(after_tFileInputDelimited_41) outputs:(row35,row35) |
				// target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
				// linked node: tMap_35 - inputs:(row33,row34,row35,row36)
				// outputs:(MedDRA_Level4_PT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row35Struct> getLookup(matchingModeEnum_row35);

				globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);

				/**
				 * [tAdvancedHash_row35 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_47 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_47", false);
				start_Hash.put("tFileInputDelimited_47",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_47";

				int tos_count_tFileInputDelimited_47 = 0;

				int nb_line_tFileInputDelimited_47 = 0;
				int footer_tFileInputDelimited_47 = 0;
				int totalLinetFileInputDelimited_47 = 0;
				int limittFileInputDelimited_47 = -1;
				int lastLinetFileInputDelimited_47 = -1;

				char fieldSeparator_tFileInputDelimited_47[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_47 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_47[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_47 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_47 = /**
				 * Start field
				 * tFileInputDelimited_47:FILENAME
				 */
				context.rootDir + context.meddraDir + "hlgt_hlt.asc"/**
				 * End field
				 * tFileInputDelimited_47:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_47 = null;

				try {

					String[] rowtFileInputDelimited_47 = null;
					int currentLinetFileInputDelimited_47 = 0;
					int outputLinetFileInputDelimited_47 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_47 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_47 = 0;
							if (footer_value_tFileInputDelimited_47 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_47 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_47,
									fieldSeparator_tFileInputDelimited_47[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_47 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_47)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_47[0]);
						}

						csvReadertFileInputDelimited_47
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_47[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_47[0] != '\r'))
							csvReadertFileInputDelimited_47.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_47[0]);

						csvReadertFileInputDelimited_47.setQuoteChar('"');

						csvReadertFileInputDelimited_47
								.setEscapeChar(csvReadertFileInputDelimited_47
										.getQuoteChar());

						if (footer_tFileInputDelimited_47 > 0) {
							for (totalLinetFileInputDelimited_47 = 0; totalLinetFileInputDelimited_47 < 0; totalLinetFileInputDelimited_47++) {
								csvReadertFileInputDelimited_47.readNext();
							}
							csvReadertFileInputDelimited_47
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_47.readNext()) {

								rowtFileInputDelimited_47 = csvReadertFileInputDelimited_47
										.getValues();
								if (!(rowtFileInputDelimited_47.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_47[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_47++;

								}

							}
							int lastLineTemptFileInputDelimited_47 = totalLinetFileInputDelimited_47
									- footer_tFileInputDelimited_47 < 0 ? 0
									: totalLinetFileInputDelimited_47
											- footer_tFileInputDelimited_47;
							if (lastLinetFileInputDelimited_47 > 0) {
								lastLinetFileInputDelimited_47 = lastLinetFileInputDelimited_47 < lastLineTemptFileInputDelimited_47 ? lastLinetFileInputDelimited_47
										: lastLineTemptFileInputDelimited_47;
							} else {
								lastLinetFileInputDelimited_47 = lastLineTemptFileInputDelimited_47;
							}

							csvReadertFileInputDelimited_47.close();
							if (filename_tFileInputDelimited_47 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_47 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_47,
										fieldSeparator_tFileInputDelimited_47[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_47 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_47)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_47[0]);
							}
							csvReadertFileInputDelimited_47
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_47[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_47[0] != '\r'))
								csvReadertFileInputDelimited_47
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_47[0]);

							csvReadertFileInputDelimited_47.setQuoteChar('"');

							csvReadertFileInputDelimited_47
									.setEscapeChar(csvReadertFileInputDelimited_47
											.getQuoteChar());

						}

						if (limittFileInputDelimited_47 != 0) {
							for (currentLinetFileInputDelimited_47 = 0; currentLinetFileInputDelimited_47 < 0; currentLinetFileInputDelimited_47++) {
								csvReadertFileInputDelimited_47.readNext();
							}
						}
						csvReadertFileInputDelimited_47
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_47 != 0
							&& csvReadertFileInputDelimited_47 != null
							&& csvReadertFileInputDelimited_47.readNext()) {

						rowtFileInputDelimited_47 = csvReadertFileInputDelimited_47
								.getValues();

						if (rowtFileInputDelimited_47.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_47[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_47++;

						if (lastLinetFileInputDelimited_47 > -1
								&& currentLinetFileInputDelimited_47 > lastLinetFileInputDelimited_47) {
							break;
						}
						outputLinetFileInputDelimited_47++;
						if (limittFileInputDelimited_47 > 0
								&& outputLinetFileInputDelimited_47 > limittFileInputDelimited_47) {
							break;
						}

						row35 = null;

						row35 = null;

						boolean whetherReject_tFileInputDelimited_47 = false;
						row35 = new row35Struct();
						try {

							if (rowtFileInputDelimited_47.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_47[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row35.broader = null;

								row35.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_47 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_47 = 0;

								if (columnIndexWithD_tFileInputDelimited_47 < rowtFileInputDelimited_47.length) {

									row35.broader = rowtFileInputDelimited_47[columnIndexWithD_tFileInputDelimited_47];

								} else {
									row35.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_47 = 1;

								if (columnIndexWithD_tFileInputDelimited_47 < rowtFileInputDelimited_47.length) {

									row35.narrower = rowtFileInputDelimited_47[columnIndexWithD_tFileInputDelimited_47];

								} else {
									row35.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_47 = true;

							System.err.println(e.getMessage());
							row35 = null;

						}

						/**
						 * [tFileInputDelimited_47 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_47 main ] start
						 */

						currentComponent = "tFileInputDelimited_47";

						tos_count_tFileInputDelimited_47++;

						/**
						 * [tFileInputDelimited_47 main ] stop
						 */
						// Start of branch "row35"
						if (row35 != null) {

							/**
							 * [tAdvancedHash_row35 main ] start
							 */

							currentComponent = "tAdvancedHash_row35";

							row35Struct row35_HashRow = new row35Struct();

							row35_HashRow.broader = row35.broader;

							row35_HashRow.narrower = row35.narrower;

							tHash_Lookup_row35.put(row35_HashRow);

							tos_count_tAdvancedHash_row35++;

							/**
							 * [tAdvancedHash_row35 main ] stop
							 */

						} // End of branch "row35"

						/**
						 * [tFileInputDelimited_47 end ] start
						 */

						currentComponent = "tFileInputDelimited_47";

						nb_line_tFileInputDelimited_47++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_47 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_47 != null) {
							csvReadertFileInputDelimited_47.close();
						}
					}
					if (csvReadertFileInputDelimited_47 != null) {
						globalMap.put("tFileInputDelimited_47_NB_LINE",
								nb_line_tFileInputDelimited_47);
					}
				}

				ok_Hash.put("tFileInputDelimited_47", true);
				end_Hash.put("tFileInputDelimited_47",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_47 end ] stop
				 */

				/**
				 * [tAdvancedHash_row35 end ] start
				 */

				currentComponent = "tAdvancedHash_row35";

				tHash_Lookup_row35.endPut();

				ok_Hash.put("tAdvancedHash_row35", true);
				end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row35 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_47_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableComparableLookupRow<row36Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row36Struct other = (row36Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row36Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row36Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_40Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_40_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tAdvancedHash_row36 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row36", false);
				start_Hash.put("tAdvancedHash_row36",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row36";

				int tos_count_tAdvancedHash_row36 = 0;

				// connection name:row36
				// source node:tFileInputDelimited_40 -
				// inputs:(after_tFileInputDelimited_41) outputs:(row36,row36) |
				// target node:tAdvancedHash_row36 - inputs:(row36) outputs:()
				// linked node: tMap_35 - inputs:(row33,row34,row35,row36)
				// outputs:(MedDRA_Level4_PT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row36Struct> getLookup(matchingModeEnum_row36);

				globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);

				/**
				 * [tAdvancedHash_row36 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_40 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_40", false);
				start_Hash.put("tFileInputDelimited_40",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_40";

				int tos_count_tFileInputDelimited_40 = 0;

				int nb_line_tFileInputDelimited_40 = 0;
				int footer_tFileInputDelimited_40 = 0;
				int totalLinetFileInputDelimited_40 = 0;
				int limittFileInputDelimited_40 = -1;
				int lastLinetFileInputDelimited_40 = -1;

				char fieldSeparator_tFileInputDelimited_40[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_40 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_40[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_40 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_40 = /**
				 * Start field
				 * tFileInputDelimited_40:FILENAME
				 */
				context.rootDir + context.meddraDir + "hlt_pt.asc"/**
				 * End field
				 * tFileInputDelimited_40:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_40 = null;

				try {

					String[] rowtFileInputDelimited_40 = null;
					int currentLinetFileInputDelimited_40 = 0;
					int outputLinetFileInputDelimited_40 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_40 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_40 = 0;
							if (footer_value_tFileInputDelimited_40 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_40 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_40,
									fieldSeparator_tFileInputDelimited_40[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_40 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_40)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_40[0]);
						}

						csvReadertFileInputDelimited_40
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_40[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_40[0] != '\r'))
							csvReadertFileInputDelimited_40.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_40[0]);

						csvReadertFileInputDelimited_40.setQuoteChar('"');

						csvReadertFileInputDelimited_40
								.setEscapeChar(csvReadertFileInputDelimited_40
										.getQuoteChar());

						if (footer_tFileInputDelimited_40 > 0) {
							for (totalLinetFileInputDelimited_40 = 0; totalLinetFileInputDelimited_40 < 0; totalLinetFileInputDelimited_40++) {
								csvReadertFileInputDelimited_40.readNext();
							}
							csvReadertFileInputDelimited_40
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_40.readNext()) {

								rowtFileInputDelimited_40 = csvReadertFileInputDelimited_40
										.getValues();
								if (!(rowtFileInputDelimited_40.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_40[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_40++;

								}

							}
							int lastLineTemptFileInputDelimited_40 = totalLinetFileInputDelimited_40
									- footer_tFileInputDelimited_40 < 0 ? 0
									: totalLinetFileInputDelimited_40
											- footer_tFileInputDelimited_40;
							if (lastLinetFileInputDelimited_40 > 0) {
								lastLinetFileInputDelimited_40 = lastLinetFileInputDelimited_40 < lastLineTemptFileInputDelimited_40 ? lastLinetFileInputDelimited_40
										: lastLineTemptFileInputDelimited_40;
							} else {
								lastLinetFileInputDelimited_40 = lastLineTemptFileInputDelimited_40;
							}

							csvReadertFileInputDelimited_40.close();
							if (filename_tFileInputDelimited_40 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_40 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_40,
										fieldSeparator_tFileInputDelimited_40[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_40 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_40)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_40[0]);
							}
							csvReadertFileInputDelimited_40
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_40[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_40[0] != '\r'))
								csvReadertFileInputDelimited_40
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_40[0]);

							csvReadertFileInputDelimited_40.setQuoteChar('"');

							csvReadertFileInputDelimited_40
									.setEscapeChar(csvReadertFileInputDelimited_40
											.getQuoteChar());

						}

						if (limittFileInputDelimited_40 != 0) {
							for (currentLinetFileInputDelimited_40 = 0; currentLinetFileInputDelimited_40 < 0; currentLinetFileInputDelimited_40++) {
								csvReadertFileInputDelimited_40.readNext();
							}
						}
						csvReadertFileInputDelimited_40
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_40 != 0
							&& csvReadertFileInputDelimited_40 != null
							&& csvReadertFileInputDelimited_40.readNext()) {

						rowtFileInputDelimited_40 = csvReadertFileInputDelimited_40
								.getValues();

						if (rowtFileInputDelimited_40.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_40[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_40++;

						if (lastLinetFileInputDelimited_40 > -1
								&& currentLinetFileInputDelimited_40 > lastLinetFileInputDelimited_40) {
							break;
						}
						outputLinetFileInputDelimited_40++;
						if (limittFileInputDelimited_40 > 0
								&& outputLinetFileInputDelimited_40 > limittFileInputDelimited_40) {
							break;
						}

						row36 = null;

						row36 = null;

						boolean whetherReject_tFileInputDelimited_40 = false;
						row36 = new row36Struct();
						try {

							if (rowtFileInputDelimited_40.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_40[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row36.broader = null;

								row36.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_40 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_40 = 0;

								if (columnIndexWithD_tFileInputDelimited_40 < rowtFileInputDelimited_40.length) {

									row36.broader = rowtFileInputDelimited_40[columnIndexWithD_tFileInputDelimited_40];

								} else {
									row36.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_40 = 1;

								if (columnIndexWithD_tFileInputDelimited_40 < rowtFileInputDelimited_40.length) {

									row36.narrower = rowtFileInputDelimited_40[columnIndexWithD_tFileInputDelimited_40];

								} else {
									row36.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_40 = true;

							System.err.println(e.getMessage());
							row36 = null;

						}

						/**
						 * [tFileInputDelimited_40 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_40 main ] start
						 */

						currentComponent = "tFileInputDelimited_40";

						tos_count_tFileInputDelimited_40++;

						/**
						 * [tFileInputDelimited_40 main ] stop
						 */
						// Start of branch "row36"
						if (row36 != null) {

							/**
							 * [tAdvancedHash_row36 main ] start
							 */

							currentComponent = "tAdvancedHash_row36";

							row36Struct row36_HashRow = new row36Struct();

							row36_HashRow.broader = row36.broader;

							row36_HashRow.narrower = row36.narrower;

							tHash_Lookup_row36.put(row36_HashRow);

							tos_count_tAdvancedHash_row36++;

							/**
							 * [tAdvancedHash_row36 main ] stop
							 */

						} // End of branch "row36"

						/**
						 * [tFileInputDelimited_40 end ] start
						 */

						currentComponent = "tFileInputDelimited_40";

						nb_line_tFileInputDelimited_40++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_40 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_40 != null) {
							csvReadertFileInputDelimited_40.close();
						}
					}
					if (csvReadertFileInputDelimited_40 != null) {
						globalMap.put("tFileInputDelimited_40_NB_LINE",
								nb_line_tFileInputDelimited_40);
					}
				}

				ok_Hash.put("tFileInputDelimited_40", true);
				end_Hash.put("tFileInputDelimited_40",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_40 end ] stop
				 */

				/**
				 * [tAdvancedHash_row36 end ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				tHash_Lookup_row36.endPut();

				ok_Hash.put("tAdvancedHash_row36", true);
				end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row36 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_40_SUBPROCESS_STATE", 1);
	}

	public static class row38Struct implements
			routines.system.IPersistableComparableLookupRow<row38Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row38Struct other = (row38Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row38Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row38Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_48Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_48_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();

				/**
				 * [tAdvancedHash_row38 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row38", false);
				start_Hash.put("tAdvancedHash_row38",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row38";

				int tos_count_tAdvancedHash_row38 = 0;

				// connection name:row38
				// source node:tFileInputDelimited_48 -
				// inputs:(after_tFileInputDelimited_38) outputs:(row38,row38) |
				// target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
				// linked node: tMap_36 - inputs:(row37,row38,row39,row40)
				// outputs:(MedDRA_Level5_LLT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row38Struct> getLookup(matchingModeEnum_row38);

				globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);

				/**
				 * [tAdvancedHash_row38 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_48 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_48", false);
				start_Hash.put("tFileInputDelimited_48",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_48";

				int tos_count_tFileInputDelimited_48 = 0;

				int nb_line_tFileInputDelimited_48 = 0;
				int footer_tFileInputDelimited_48 = 0;
				int totalLinetFileInputDelimited_48 = 0;
				int limittFileInputDelimited_48 = -1;
				int lastLinetFileInputDelimited_48 = -1;

				char fieldSeparator_tFileInputDelimited_48[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_48 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_48[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_48 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_48 = /**
				 * Start field
				 * tFileInputDelimited_48:FILENAME
				 */
				context.rootDir + context.meddraDir + "soc_hlgt.asc"/**
				 * End field
				 * tFileInputDelimited_48:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_48 = null;

				try {

					String[] rowtFileInputDelimited_48 = null;
					int currentLinetFileInputDelimited_48 = 0;
					int outputLinetFileInputDelimited_48 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_48 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_48 = 0;
							if (footer_value_tFileInputDelimited_48 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_48 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_48,
									fieldSeparator_tFileInputDelimited_48[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_48 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_48)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_48[0]);
						}

						csvReadertFileInputDelimited_48
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_48[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_48[0] != '\r'))
							csvReadertFileInputDelimited_48.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_48[0]);

						csvReadertFileInputDelimited_48.setQuoteChar('"');

						csvReadertFileInputDelimited_48
								.setEscapeChar(csvReadertFileInputDelimited_48
										.getQuoteChar());

						if (footer_tFileInputDelimited_48 > 0) {
							for (totalLinetFileInputDelimited_48 = 0; totalLinetFileInputDelimited_48 < 0; totalLinetFileInputDelimited_48++) {
								csvReadertFileInputDelimited_48.readNext();
							}
							csvReadertFileInputDelimited_48
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_48.readNext()) {

								rowtFileInputDelimited_48 = csvReadertFileInputDelimited_48
										.getValues();
								if (!(rowtFileInputDelimited_48.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_48[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_48++;

								}

							}
							int lastLineTemptFileInputDelimited_48 = totalLinetFileInputDelimited_48
									- footer_tFileInputDelimited_48 < 0 ? 0
									: totalLinetFileInputDelimited_48
											- footer_tFileInputDelimited_48;
							if (lastLinetFileInputDelimited_48 > 0) {
								lastLinetFileInputDelimited_48 = lastLinetFileInputDelimited_48 < lastLineTemptFileInputDelimited_48 ? lastLinetFileInputDelimited_48
										: lastLineTemptFileInputDelimited_48;
							} else {
								lastLinetFileInputDelimited_48 = lastLineTemptFileInputDelimited_48;
							}

							csvReadertFileInputDelimited_48.close();
							if (filename_tFileInputDelimited_48 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_48 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_48,
										fieldSeparator_tFileInputDelimited_48[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_48 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_48)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_48[0]);
							}
							csvReadertFileInputDelimited_48
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_48[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_48[0] != '\r'))
								csvReadertFileInputDelimited_48
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_48[0]);

							csvReadertFileInputDelimited_48.setQuoteChar('"');

							csvReadertFileInputDelimited_48
									.setEscapeChar(csvReadertFileInputDelimited_48
											.getQuoteChar());

						}

						if (limittFileInputDelimited_48 != 0) {
							for (currentLinetFileInputDelimited_48 = 0; currentLinetFileInputDelimited_48 < 0; currentLinetFileInputDelimited_48++) {
								csvReadertFileInputDelimited_48.readNext();
							}
						}
						csvReadertFileInputDelimited_48
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_48 != 0
							&& csvReadertFileInputDelimited_48 != null
							&& csvReadertFileInputDelimited_48.readNext()) {

						rowtFileInputDelimited_48 = csvReadertFileInputDelimited_48
								.getValues();

						if (rowtFileInputDelimited_48.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_48[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_48++;

						if (lastLinetFileInputDelimited_48 > -1
								&& currentLinetFileInputDelimited_48 > lastLinetFileInputDelimited_48) {
							break;
						}
						outputLinetFileInputDelimited_48++;
						if (limittFileInputDelimited_48 > 0
								&& outputLinetFileInputDelimited_48 > limittFileInputDelimited_48) {
							break;
						}

						row38 = null;

						row38 = null;

						boolean whetherReject_tFileInputDelimited_48 = false;
						row38 = new row38Struct();
						try {

							if (rowtFileInputDelimited_48.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_48[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row38.broader = null;

								row38.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_48 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_48 = 0;

								if (columnIndexWithD_tFileInputDelimited_48 < rowtFileInputDelimited_48.length) {

									row38.broader = rowtFileInputDelimited_48[columnIndexWithD_tFileInputDelimited_48];

								} else {
									row38.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_48 = 1;

								if (columnIndexWithD_tFileInputDelimited_48 < rowtFileInputDelimited_48.length) {

									row38.narrower = rowtFileInputDelimited_48[columnIndexWithD_tFileInputDelimited_48];

								} else {
									row38.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_48 = true;

							System.err.println(e.getMessage());
							row38 = null;

						}

						/**
						 * [tFileInputDelimited_48 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_48 main ] start
						 */

						currentComponent = "tFileInputDelimited_48";

						tos_count_tFileInputDelimited_48++;

						/**
						 * [tFileInputDelimited_48 main ] stop
						 */
						// Start of branch "row38"
						if (row38 != null) {

							/**
							 * [tAdvancedHash_row38 main ] start
							 */

							currentComponent = "tAdvancedHash_row38";

							row38Struct row38_HashRow = new row38Struct();

							row38_HashRow.broader = row38.broader;

							row38_HashRow.narrower = row38.narrower;

							tHash_Lookup_row38.put(row38_HashRow);

							tos_count_tAdvancedHash_row38++;

							/**
							 * [tAdvancedHash_row38 main ] stop
							 */

						} // End of branch "row38"

						/**
						 * [tFileInputDelimited_48 end ] start
						 */

						currentComponent = "tFileInputDelimited_48";

						nb_line_tFileInputDelimited_48++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_48 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_48 != null) {
							csvReadertFileInputDelimited_48.close();
						}
					}
					if (csvReadertFileInputDelimited_48 != null) {
						globalMap.put("tFileInputDelimited_48_NB_LINE",
								nb_line_tFileInputDelimited_48);
					}
				}

				ok_Hash.put("tFileInputDelimited_48", true);
				end_Hash.put("tFileInputDelimited_48",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_48 end ] stop
				 */

				/**
				 * [tAdvancedHash_row38 end ] start
				 */

				currentComponent = "tAdvancedHash_row38";

				tHash_Lookup_row38.endPut();

				ok_Hash.put("tAdvancedHash_row38", true);
				end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row38 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_48_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements
			routines.system.IPersistableComparableLookupRow<row39Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row39Struct other = (row39Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row39Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row39Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_49Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_49_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();

				/**
				 * [tAdvancedHash_row39 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row39", false);
				start_Hash.put("tAdvancedHash_row39",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row39";

				int tos_count_tAdvancedHash_row39 = 0;

				// connection name:row39
				// source node:tFileInputDelimited_49 -
				// inputs:(after_tFileInputDelimited_38) outputs:(row39,row39) |
				// target node:tAdvancedHash_row39 - inputs:(row39) outputs:()
				// linked node: tMap_36 - inputs:(row37,row38,row39,row40)
				// outputs:(MedDRA_Level5_LLT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row39 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row39Struct> getLookup(matchingModeEnum_row39);

				globalMap.put("tHash_Lookup_row39", tHash_Lookup_row39);

				/**
				 * [tAdvancedHash_row39 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_49 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_49", false);
				start_Hash.put("tFileInputDelimited_49",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_49";

				int tos_count_tFileInputDelimited_49 = 0;

				int nb_line_tFileInputDelimited_49 = 0;
				int footer_tFileInputDelimited_49 = 0;
				int totalLinetFileInputDelimited_49 = 0;
				int limittFileInputDelimited_49 = -1;
				int lastLinetFileInputDelimited_49 = -1;

				char fieldSeparator_tFileInputDelimited_49[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_49 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_49[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_49 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_49 = /**
				 * Start field
				 * tFileInputDelimited_49:FILENAME
				 */
				context.rootDir + context.meddraDir + "hlgt_hlt.asc"/**
				 * End field
				 * tFileInputDelimited_49:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_49 = null;

				try {

					String[] rowtFileInputDelimited_49 = null;
					int currentLinetFileInputDelimited_49 = 0;
					int outputLinetFileInputDelimited_49 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_49 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_49 = 0;
							if (footer_value_tFileInputDelimited_49 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_49 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_49,
									fieldSeparator_tFileInputDelimited_49[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_49 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_49)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_49[0]);
						}

						csvReadertFileInputDelimited_49
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_49[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_49[0] != '\r'))
							csvReadertFileInputDelimited_49.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_49[0]);

						csvReadertFileInputDelimited_49.setQuoteChar('"');

						csvReadertFileInputDelimited_49
								.setEscapeChar(csvReadertFileInputDelimited_49
										.getQuoteChar());

						if (footer_tFileInputDelimited_49 > 0) {
							for (totalLinetFileInputDelimited_49 = 0; totalLinetFileInputDelimited_49 < 0; totalLinetFileInputDelimited_49++) {
								csvReadertFileInputDelimited_49.readNext();
							}
							csvReadertFileInputDelimited_49
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_49.readNext()) {

								rowtFileInputDelimited_49 = csvReadertFileInputDelimited_49
										.getValues();
								if (!(rowtFileInputDelimited_49.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_49[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_49++;

								}

							}
							int lastLineTemptFileInputDelimited_49 = totalLinetFileInputDelimited_49
									- footer_tFileInputDelimited_49 < 0 ? 0
									: totalLinetFileInputDelimited_49
											- footer_tFileInputDelimited_49;
							if (lastLinetFileInputDelimited_49 > 0) {
								lastLinetFileInputDelimited_49 = lastLinetFileInputDelimited_49 < lastLineTemptFileInputDelimited_49 ? lastLinetFileInputDelimited_49
										: lastLineTemptFileInputDelimited_49;
							} else {
								lastLinetFileInputDelimited_49 = lastLineTemptFileInputDelimited_49;
							}

							csvReadertFileInputDelimited_49.close();
							if (filename_tFileInputDelimited_49 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_49 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_49,
										fieldSeparator_tFileInputDelimited_49[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_49 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_49)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_49[0]);
							}
							csvReadertFileInputDelimited_49
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_49[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_49[0] != '\r'))
								csvReadertFileInputDelimited_49
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_49[0]);

							csvReadertFileInputDelimited_49.setQuoteChar('"');

							csvReadertFileInputDelimited_49
									.setEscapeChar(csvReadertFileInputDelimited_49
											.getQuoteChar());

						}

						if (limittFileInputDelimited_49 != 0) {
							for (currentLinetFileInputDelimited_49 = 0; currentLinetFileInputDelimited_49 < 0; currentLinetFileInputDelimited_49++) {
								csvReadertFileInputDelimited_49.readNext();
							}
						}
						csvReadertFileInputDelimited_49
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_49 != 0
							&& csvReadertFileInputDelimited_49 != null
							&& csvReadertFileInputDelimited_49.readNext()) {

						rowtFileInputDelimited_49 = csvReadertFileInputDelimited_49
								.getValues();

						if (rowtFileInputDelimited_49.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_49[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_49++;

						if (lastLinetFileInputDelimited_49 > -1
								&& currentLinetFileInputDelimited_49 > lastLinetFileInputDelimited_49) {
							break;
						}
						outputLinetFileInputDelimited_49++;
						if (limittFileInputDelimited_49 > 0
								&& outputLinetFileInputDelimited_49 > limittFileInputDelimited_49) {
							break;
						}

						row39 = null;

						row39 = null;

						boolean whetherReject_tFileInputDelimited_49 = false;
						row39 = new row39Struct();
						try {

							if (rowtFileInputDelimited_49.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_49[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row39.broader = null;

								row39.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_49 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_49 = 0;

								if (columnIndexWithD_tFileInputDelimited_49 < rowtFileInputDelimited_49.length) {

									row39.broader = rowtFileInputDelimited_49[columnIndexWithD_tFileInputDelimited_49];

								} else {
									row39.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_49 = 1;

								if (columnIndexWithD_tFileInputDelimited_49 < rowtFileInputDelimited_49.length) {

									row39.narrower = rowtFileInputDelimited_49[columnIndexWithD_tFileInputDelimited_49];

								} else {
									row39.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_49 = true;

							System.err.println(e.getMessage());
							row39 = null;

						}

						/**
						 * [tFileInputDelimited_49 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_49 main ] start
						 */

						currentComponent = "tFileInputDelimited_49";

						tos_count_tFileInputDelimited_49++;

						/**
						 * [tFileInputDelimited_49 main ] stop
						 */
						// Start of branch "row39"
						if (row39 != null) {

							/**
							 * [tAdvancedHash_row39 main ] start
							 */

							currentComponent = "tAdvancedHash_row39";

							row39Struct row39_HashRow = new row39Struct();

							row39_HashRow.broader = row39.broader;

							row39_HashRow.narrower = row39.narrower;

							tHash_Lookup_row39.put(row39_HashRow);

							tos_count_tAdvancedHash_row39++;

							/**
							 * [tAdvancedHash_row39 main ] stop
							 */

						} // End of branch "row39"

						/**
						 * [tFileInputDelimited_49 end ] start
						 */

						currentComponent = "tFileInputDelimited_49";

						nb_line_tFileInputDelimited_49++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_49 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_49 != null) {
							csvReadertFileInputDelimited_49.close();
						}
					}
					if (csvReadertFileInputDelimited_49 != null) {
						globalMap.put("tFileInputDelimited_49_NB_LINE",
								nb_line_tFileInputDelimited_49);
					}
				}

				ok_Hash.put("tFileInputDelimited_49", true);
				end_Hash.put("tFileInputDelimited_49",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_49 end ] stop
				 */

				/**
				 * [tAdvancedHash_row39 end ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				tHash_Lookup_row39.endPut();

				ok_Hash.put("tAdvancedHash_row39", true);
				end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row39 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_49_SUBPROCESS_STATE", 1);
	}

	public static class row40Struct implements
			routines.system.IPersistableComparableLookupRow<row40Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String broader;

		public String getBroader() {
			return this.broader;
		}

		public String narrower;

		public String getNarrower() {
			return this.narrower;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.narrower == null) ? 0 : this.narrower
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row40Struct other = (row40Struct) obj;

			if (this.narrower == null) {
				if (other.narrower != null)
					return false;
			} else if (!this.narrower.equals(other.narrower))
				return false;

			return true;
		}

		public void copyDataTo(row40Struct other) {

			other.broader = this.broader;
			other.narrower = this.narrower;

		}

		public void copyKeysDataTo(row40Struct other) {

			other.narrower = this.narrower;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.narrower = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.narrower, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.broader = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.broader, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("broader=" + broader);
			sb.append(",narrower=" + narrower);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.narrower, other.narrower);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_50Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_50_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row40Struct row40 = new row40Struct();

				/**
				 * [tAdvancedHash_row40 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row40", false);
				start_Hash.put("tAdvancedHash_row40",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row40";

				int tos_count_tAdvancedHash_row40 = 0;

				// connection name:row40
				// source node:tFileInputDelimited_50 -
				// inputs:(after_tFileInputDelimited_38) outputs:(row40,row40) |
				// target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
				// linked node: tMap_36 - inputs:(row37,row38,row39,row40)
				// outputs:(MedDRA_Level5_LLT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row40Struct> getLookup(matchingModeEnum_row40);

				globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);

				/**
				 * [tAdvancedHash_row40 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_50 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_50", false);
				start_Hash.put("tFileInputDelimited_50",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_50";

				int tos_count_tFileInputDelimited_50 = 0;

				int nb_line_tFileInputDelimited_50 = 0;
				int footer_tFileInputDelimited_50 = 0;
				int totalLinetFileInputDelimited_50 = 0;
				int limittFileInputDelimited_50 = -1;
				int lastLinetFileInputDelimited_50 = -1;

				char fieldSeparator_tFileInputDelimited_50[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "$").length() > 0) {
					fieldSeparator_tFileInputDelimited_50 = ((String) "$")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_50[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_50 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_50 = /**
				 * Start field
				 * tFileInputDelimited_50:FILENAME
				 */
				context.rootDir + context.meddraDir + "hlt_pt.asc"/**
				 * End field
				 * tFileInputDelimited_50:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_50 = null;

				try {

					String[] rowtFileInputDelimited_50 = null;
					int currentLinetFileInputDelimited_50 = 0;
					int outputLinetFileInputDelimited_50 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_50 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_50 = 0;
							if (footer_value_tFileInputDelimited_50 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_50 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_50,
									fieldSeparator_tFileInputDelimited_50[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_50 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_50)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_50[0]);
						}

						csvReadertFileInputDelimited_50
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_50[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_50[0] != '\r'))
							csvReadertFileInputDelimited_50.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_50[0]);

						csvReadertFileInputDelimited_50.setQuoteChar('"');

						csvReadertFileInputDelimited_50
								.setEscapeChar(csvReadertFileInputDelimited_50
										.getQuoteChar());

						if (footer_tFileInputDelimited_50 > 0) {
							for (totalLinetFileInputDelimited_50 = 0; totalLinetFileInputDelimited_50 < 0; totalLinetFileInputDelimited_50++) {
								csvReadertFileInputDelimited_50.readNext();
							}
							csvReadertFileInputDelimited_50
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_50.readNext()) {

								rowtFileInputDelimited_50 = csvReadertFileInputDelimited_50
										.getValues();
								if (!(rowtFileInputDelimited_50.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_50[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_50++;

								}

							}
							int lastLineTemptFileInputDelimited_50 = totalLinetFileInputDelimited_50
									- footer_tFileInputDelimited_50 < 0 ? 0
									: totalLinetFileInputDelimited_50
											- footer_tFileInputDelimited_50;
							if (lastLinetFileInputDelimited_50 > 0) {
								lastLinetFileInputDelimited_50 = lastLinetFileInputDelimited_50 < lastLineTemptFileInputDelimited_50 ? lastLinetFileInputDelimited_50
										: lastLineTemptFileInputDelimited_50;
							} else {
								lastLinetFileInputDelimited_50 = lastLineTemptFileInputDelimited_50;
							}

							csvReadertFileInputDelimited_50.close();
							if (filename_tFileInputDelimited_50 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_50 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_50,
										fieldSeparator_tFileInputDelimited_50[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_50 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_50)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_50[0]);
							}
							csvReadertFileInputDelimited_50
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_50[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_50[0] != '\r'))
								csvReadertFileInputDelimited_50
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_50[0]);

							csvReadertFileInputDelimited_50.setQuoteChar('"');

							csvReadertFileInputDelimited_50
									.setEscapeChar(csvReadertFileInputDelimited_50
											.getQuoteChar());

						}

						if (limittFileInputDelimited_50 != 0) {
							for (currentLinetFileInputDelimited_50 = 0; currentLinetFileInputDelimited_50 < 0; currentLinetFileInputDelimited_50++) {
								csvReadertFileInputDelimited_50.readNext();
							}
						}
						csvReadertFileInputDelimited_50
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_50 != 0
							&& csvReadertFileInputDelimited_50 != null
							&& csvReadertFileInputDelimited_50.readNext()) {

						rowtFileInputDelimited_50 = csvReadertFileInputDelimited_50
								.getValues();

						if (rowtFileInputDelimited_50.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_50[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_50++;

						if (lastLinetFileInputDelimited_50 > -1
								&& currentLinetFileInputDelimited_50 > lastLinetFileInputDelimited_50) {
							break;
						}
						outputLinetFileInputDelimited_50++;
						if (limittFileInputDelimited_50 > 0
								&& outputLinetFileInputDelimited_50 > limittFileInputDelimited_50) {
							break;
						}

						row40 = null;

						row40 = null;

						boolean whetherReject_tFileInputDelimited_50 = false;
						row40 = new row40Struct();
						try {

							if (rowtFileInputDelimited_50.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_50[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row40.broader = null;

								row40.narrower = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_50 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_50 = 0;

								if (columnIndexWithD_tFileInputDelimited_50 < rowtFileInputDelimited_50.length) {

									row40.broader = rowtFileInputDelimited_50[columnIndexWithD_tFileInputDelimited_50];

								} else {
									row40.broader = null;
								}

								columnIndexWithD_tFileInputDelimited_50 = 1;

								if (columnIndexWithD_tFileInputDelimited_50 < rowtFileInputDelimited_50.length) {

									row40.narrower = rowtFileInputDelimited_50[columnIndexWithD_tFileInputDelimited_50];

								} else {
									row40.narrower = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_50 = true;

							System.err.println(e.getMessage());
							row40 = null;

						}

						/**
						 * [tFileInputDelimited_50 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_50 main ] start
						 */

						currentComponent = "tFileInputDelimited_50";

						tos_count_tFileInputDelimited_50++;

						/**
						 * [tFileInputDelimited_50 main ] stop
						 */
						// Start of branch "row40"
						if (row40 != null) {

							/**
							 * [tAdvancedHash_row40 main ] start
							 */

							currentComponent = "tAdvancedHash_row40";

							row40Struct row40_HashRow = new row40Struct();

							row40_HashRow.broader = row40.broader;

							row40_HashRow.narrower = row40.narrower;

							tHash_Lookup_row40.put(row40_HashRow);

							tos_count_tAdvancedHash_row40++;

							/**
							 * [tAdvancedHash_row40 main ] stop
							 */

						} // End of branch "row40"

						/**
						 * [tFileInputDelimited_50 end ] start
						 */

						currentComponent = "tFileInputDelimited_50";

						nb_line_tFileInputDelimited_50++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_50 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_50 != null) {
							csvReadertFileInputDelimited_50.close();
						}
					}
					if (csvReadertFileInputDelimited_50 != null) {
						globalMap.put("tFileInputDelimited_50_NB_LINE",
								nb_line_tFileInputDelimited_50);
					}
				}

				ok_Hash.put("tFileInputDelimited_50", true);
				end_Hash.put("tFileInputDelimited_50",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_50 end ] stop
				 */

				/**
				 * [tAdvancedHash_row40 end ] start
				 */

				currentComponent = "tAdvancedHash_row40";

				tHash_Lookup_row40.endPut();

				ok_Hash.put("tAdvancedHash_row40", true);
				end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row40 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_50_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_IDRT_STDTERM.length == 0) {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_IDRT52_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_IDRT52_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_9_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_9_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_9_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_1_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_1_RunAfterStruct> {
		final static byte[] commonByteArrayLock_IDRT52_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_IDRT52_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_tUnite_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_9Process(globalMap);
				tFileInputDelimited_2Process(globalMap);

				row3Struct row3 = new row3Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tOracleOutput_1 begin ] start
				 */

				ok_Hash.put("tOracleOutput_1", false);
				start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
				currentComponent = "tOracleOutput_1";

				int tos_count_tOracleOutput_1 = 0;

				int nb_line_tOracleOutput_1 = 0;
				int nb_line_update_tOracleOutput_1 = 0;
				int nb_line_inserted_tOracleOutput_1 = 0;
				int nb_line_deleted_tOracleOutput_1 = 0;
				int nb_line_rejected_tOracleOutput_1 = 0;

				int tmp_batchUpdateCount_tOracleOutput_1 = 0;

				int deletedCount_tOracleOutput_1 = 0;
				int updatedCount_tOracleOutput_1 = 0;
				int insertedCount_tOracleOutput_1 = 0;
				int rejectedCount_tOracleOutput_1 = 0;

				boolean whetherReject_tOracleOutput_1 = false;

				java.sql.Connection conn_tOracleOutput_1 = null;

				// optional table
				String dbschema_tOracleOutput_1 = null;
				String tableName_tOracleOutput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_1) {
					conn_tOracleOutput_1 = dataSources_tOracleOutput_1.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.driver.OracleDriver");

					String url_tOracleOutput_1 = null;
					url_tOracleOutput_1 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_1 = context.DBUsername;
					String dbPwd_tOracleOutput_1 = context.DBPassword;
					dbschema_tOracleOutput_1 = context.DBSchema;

					conn_tOracleOutput_1 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_1,
									dbUser_tOracleOutput_1,
									dbPwd_tOracleOutput_1);
				}
				conn_tOracleOutput_1.setAutoCommit(false);
				int commitEvery_tOracleOutput_1 = 50000;
				int commitCounter_tOracleOutput_1 = 0;

				int count_tOracleOutput_1 = 0;

				if (dbschema_tOracleOutput_1 == null
						|| dbschema_tOracleOutput_1.trim().length() == 0) {
					tableName_tOracleOutput_1 = "I2B2";
				} else {
					tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "."
							+ "I2B2";
				}
				String insert_tOracleOutput_1 = "INSERT INTO "
						+ tableName_tOracleOutput_1
						+ " (C_HLEVEL,C_FULLNAME,C_NAME,C_SYNONYM_CD,C_VISUALATTRIBUTES,C_TOTALNUM,C_BASECODE,C_METADATAXML,C_FACTTABLECOLUMN,C_TABLENAME,C_COLUMNNAME,C_COLUMNDATATYPE,C_OPERATOR,C_DIMCODE,C_COMMENT,C_TOOLTIP,M_APPLIED_PATH,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_EXCLUSION_CD,C_PATH,C_SYMBOL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1
						.prepareStatement(insert_tOracleOutput_1);

				StringBuffer query_tOracleOutput_1 = null;

				String[] insertSQLSplits_tOracleOutput_1 = insert_tOracleOutput_1
						.split("\\?");

				/**
				 * [tOracleOutput_1 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());
				currentComponent = "tConvertType_1";

				int tos_count_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_1", false);
				start_Hash.put("tHashInput_tUnite_1",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_1";

				int tos_count_tHashInput_tUnite_1 = 0;

				int nb_line_tHashInput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row3Struct> tHashFile_tHashInput_tUnite_1 = mf_tHashInput_tUnite_1
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_1");
				if (tHashFile_tHashInput_tUnite_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_1_row3Struct> iterator_tHashInput_tUnite_1 = tHashFile_tHashInput_tUnite_1
						.iterator();
				while (iterator_tHashInput_tUnite_1.hasNext()) {
					tHashInput_tUnite_1_row3Struct next_tHashInput_tUnite_1 = iterator_tHashInput_tUnite_1
							.next();

					row3.C_HLEVEL = next_tHashInput_tUnite_1.C_HLEVEL;
					row3.C_FULLNAME = next_tHashInput_tUnite_1.C_FULLNAME;
					row3.C_NAME = next_tHashInput_tUnite_1.C_NAME;
					row3.C_SYNONYM_CD = next_tHashInput_tUnite_1.C_SYNONYM_CD;
					row3.C_VISUALATTRIBUTES = next_tHashInput_tUnite_1.C_VISUALATTRIBUTES;
					row3.C_TOTALNUM = next_tHashInput_tUnite_1.C_TOTALNUM;
					row3.C_BASECODE = next_tHashInput_tUnite_1.C_BASECODE;
					row3.C_METADATAXML = next_tHashInput_tUnite_1.C_METADATAXML;
					row3.C_FACTTABLECOLUMN = next_tHashInput_tUnite_1.C_FACTTABLECOLUMN;
					row3.C_TABLENAME = next_tHashInput_tUnite_1.C_TABLENAME;
					row3.C_COLUMNNAME = next_tHashInput_tUnite_1.C_COLUMNNAME;
					row3.C_COLUMNDATATYPE = next_tHashInput_tUnite_1.C_COLUMNDATATYPE;
					row3.C_OPERATOR = next_tHashInput_tUnite_1.C_OPERATOR;
					row3.C_DIMCODE = next_tHashInput_tUnite_1.C_DIMCODE;
					row3.C_COMMENT = next_tHashInput_tUnite_1.C_COMMENT;
					row3.C_TOOLTIP = next_tHashInput_tUnite_1.C_TOOLTIP;
					row3.M_APPLIED_PATH = next_tHashInput_tUnite_1.M_APPLIED_PATH;
					row3.UPDATE_DATE = next_tHashInput_tUnite_1.UPDATE_DATE;
					row3.DOWNLOAD_DATE = next_tHashInput_tUnite_1.DOWNLOAD_DATE;
					row3.IMPORT_DATE = next_tHashInput_tUnite_1.IMPORT_DATE;
					row3.SOURCESYSTEM_CD = next_tHashInput_tUnite_1.SOURCESYSTEM_CD;
					row3.VALUETYPE_CD = next_tHashInput_tUnite_1.VALUETYPE_CD;
					row3.M_EXCLUSION_CD = next_tHashInput_tUnite_1.M_EXCLUSION_CD;
					row3.C_PATH = next_tHashInput_tUnite_1.C_PATH;
					row3.C_SYMBOL = next_tHashInput_tUnite_1.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_1 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_1 main ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					tos_count_tHashInput_tUnite_1++;

					/**
					 * [tHashInput_tUnite_1 main ] stop
					 */

					/**
					 * [tConvertType_1 main ] start
					 */

					currentComponent = "tConvertType_1";

					row6 = new row6Struct();
					boolean bHasError_tConvertType_1 = false;
					try {
						row6.C_HLEVEL = TypeConvert
								.Integer2Integer(row3.C_HLEVEL);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_FULLNAME = TypeConvert
								.String2String(row3.C_FULLNAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_NAME = TypeConvert.String2String(row3.C_NAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_SYNONYM_CD = TypeConvert
								.Character2Character(row3.C_SYNONYM_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_VISUALATTRIBUTES = TypeConvert
								.String2String(row3.C_VISUALATTRIBUTES);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_TOTALNUM = TypeConvert
								.String2String(row3.C_TOTALNUM);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_BASECODE = TypeConvert
								.String2String(row3.C_BASECODE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_METADATAXML = TypeConvert
								.String2String(row3.C_METADATAXML);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_FACTTABLECOLUMN = TypeConvert
								.String2String(row3.C_FACTTABLECOLUMN);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_TABLENAME = TypeConvert
								.String2String(row3.C_TABLENAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_COLUMNNAME = TypeConvert
								.String2String(row3.C_COLUMNNAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_COLUMNDATATYPE = TypeConvert
								.Character2Character(row3.C_COLUMNDATATYPE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_OPERATOR = TypeConvert
								.String2String(row3.C_OPERATOR);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_DIMCODE = TypeConvert
								.String2String(row3.C_DIMCODE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_COMMENT = TypeConvert
								.String2String(row3.C_COMMENT);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_TOOLTIP = TypeConvert
								.String2String(row3.C_TOOLTIP);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.M_APPLIED_PATH = TypeConvert
								.Character2Character(row3.M_APPLIED_PATH);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.UPDATE_DATE = TypeConvert
								.Date2Date(row3.UPDATE_DATE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.DOWNLOAD_DATE = TypeConvert
								.Date2Date(row3.DOWNLOAD_DATE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.IMPORT_DATE = TypeConvert
								.Date2Date(row3.IMPORT_DATE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.SOURCESYSTEM_CD = TypeConvert
								.String2String(row3.SOURCESYSTEM_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.VALUETYPE_CD = TypeConvert
								.String2String(row3.VALUETYPE_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.M_EXCLUSION_CD = TypeConvert
								.String2String(row3.M_EXCLUSION_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_PATH = TypeConvert.String2String(row3.C_PATH);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_SYMBOL = TypeConvert
								.String2String(row3.C_SYMBOL);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					if (bHasError_tConvertType_1) {
						row6 = null;
					}

					tos_count_tConvertType_1++;

					/**
					 * [tConvertType_1 main ] stop
					 */
					// Start of branch "row6"
					if (row6 != null) {

						/**
						 * [tOracleOutput_1 main ] start
						 */

						currentComponent = "tOracleOutput_1";

						query_tOracleOutput_1 = new StringBuffer("");
						whetherReject_tOracleOutput_1 = false;
						if (row6.C_HLEVEL == null) {
							pstmt_tOracleOutput_1.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tOracleOutput_1.setInt(1, row6.C_HLEVEL);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1
								.append(insertSQLSplits_tOracleOutput_1[0])
								.append(row6.C_HLEVEL == null ? "null" : String
										.valueOf(row6.C_HLEVEL))
								.append(insertSQLSplits_tOracleOutput_1[1]);
						if (row6.C_FULLNAME == null) {
							pstmt_tOracleOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(2, row6.C_FULLNAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_FULLNAME == null ? "null" : "'"
										+ row6.C_FULLNAME + "'").append(
								insertSQLSplits_tOracleOutput_1[2]);
						if (row6.C_NAME == null) {
							pstmt_tOracleOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(3, row6.C_NAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_NAME == null ? "null" : "'"
										+ row6.C_NAME + "'").append(
								insertSQLSplits_tOracleOutput_1[3]);
						if (row6.C_SYNONYM_CD == null) {
							pstmt_tOracleOutput_1.setNull(4,
									java.sql.Types.CHAR);
						} else {
							if (row6.C_SYNONYM_CD == null) {
								pstmt_tOracleOutput_1.setNull(4,
										java.sql.Types.CHAR);
							} else if (row6.C_SYNONYM_CD == ' ') {
								pstmt_tOracleOutput_1.setString(4, "");
							} else {
								pstmt_tOracleOutput_1.setString(4,
										String.valueOf(row6.C_SYNONYM_CD));
							}
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_SYNONYM_CD == null ? "null" : "'"
										+ String.valueOf(row6.C_SYNONYM_CD)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[4]);
						if (row6.C_VISUALATTRIBUTES == null) {
							pstmt_tOracleOutput_1.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(5,
									row6.C_VISUALATTRIBUTES);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_VISUALATTRIBUTES == null ? "null" : "'"
										+ row6.C_VISUALATTRIBUTES + "'")
								.append(insertSQLSplits_tOracleOutput_1[5]);
						if (row6.C_TOTALNUM == null) {
							pstmt_tOracleOutput_1.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(6, row6.C_TOTALNUM);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_TOTALNUM == null ? "null" : "'"
										+ row6.C_TOTALNUM + "'").append(
								insertSQLSplits_tOracleOutput_1[6]);
						if (row6.C_BASECODE == null) {
							pstmt_tOracleOutput_1.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(7, row6.C_BASECODE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_BASECODE == null ? "null" : "'"
										+ row6.C_BASECODE + "'").append(
								insertSQLSplits_tOracleOutput_1[7]);
						if (row6.C_METADATAXML == null) {
							pstmt_tOracleOutput_1.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(8,
									row6.C_METADATAXML);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_METADATAXML == null ? "null" : "'"
										+ row6.C_METADATAXML + "'").append(
								insertSQLSplits_tOracleOutput_1[8]);
						if (row6.C_FACTTABLECOLUMN == null) {
							pstmt_tOracleOutput_1.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(9,
									row6.C_FACTTABLECOLUMN);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_FACTTABLECOLUMN == null ? "null" : "'"
										+ row6.C_FACTTABLECOLUMN + "'").append(
								insertSQLSplits_tOracleOutput_1[9]);
						if (row6.C_TABLENAME == null) {
							pstmt_tOracleOutput_1.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(10,
									row6.C_TABLENAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_TABLENAME == null ? "null" : "'"
										+ row6.C_TABLENAME + "'").append(
								insertSQLSplits_tOracleOutput_1[10]);
						if (row6.C_COLUMNNAME == null) {
							pstmt_tOracleOutput_1.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(11,
									row6.C_COLUMNNAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_COLUMNNAME == null ? "null" : "'"
										+ row6.C_COLUMNNAME + "'").append(
								insertSQLSplits_tOracleOutput_1[11]);
						if (row6.C_COLUMNDATATYPE == null) {
							pstmt_tOracleOutput_1.setNull(12,
									java.sql.Types.CHAR);
						} else {
							if (row6.C_COLUMNDATATYPE == null) {
								pstmt_tOracleOutput_1.setNull(12,
										java.sql.Types.CHAR);
							} else if (row6.C_COLUMNDATATYPE == ' ') {
								pstmt_tOracleOutput_1.setString(12, "");
							} else {
								pstmt_tOracleOutput_1.setString(12,
										String.valueOf(row6.C_COLUMNDATATYPE));
							}
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_COLUMNDATATYPE == null ? "null" : "'"
										+ String.valueOf(row6.C_COLUMNDATATYPE)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[12]);
						if (row6.C_OPERATOR == null) {
							pstmt_tOracleOutput_1.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1
									.setString(13, row6.C_OPERATOR);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_OPERATOR == null ? "null" : "'"
										+ row6.C_OPERATOR + "'").append(
								insertSQLSplits_tOracleOutput_1[13]);
						if (row6.C_DIMCODE == null) {
							pstmt_tOracleOutput_1.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(14, row6.C_DIMCODE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_DIMCODE == null ? "null" : "'"
										+ row6.C_DIMCODE + "'").append(
								insertSQLSplits_tOracleOutput_1[14]);
						if (row6.C_COMMENT == null) {
							pstmt_tOracleOutput_1.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(15, row6.C_COMMENT);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_COMMENT == null ? "null" : "'"
										+ row6.C_COMMENT + "'").append(
								insertSQLSplits_tOracleOutput_1[15]);
						if (row6.C_TOOLTIP == null) {
							pstmt_tOracleOutput_1.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(16, row6.C_TOOLTIP);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_TOOLTIP == null ? "null" : "'"
										+ row6.C_TOOLTIP + "'").append(
								insertSQLSplits_tOracleOutput_1[16]);
						if (row6.M_APPLIED_PATH == null) {
							pstmt_tOracleOutput_1.setNull(17,
									java.sql.Types.CHAR);
						} else {
							if (row6.M_APPLIED_PATH == null) {
								pstmt_tOracleOutput_1.setNull(17,
										java.sql.Types.CHAR);
							} else if (row6.M_APPLIED_PATH == ' ') {
								pstmt_tOracleOutput_1.setString(17, "");
							} else {
								pstmt_tOracleOutput_1.setString(17,
										String.valueOf(row6.M_APPLIED_PATH));
							}
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.M_APPLIED_PATH == null ? "null" : "'"
										+ String.valueOf(row6.M_APPLIED_PATH)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[17]);
						if (row6.UPDATE_DATE != null) {
							pstmt_tOracleOutput_1.setObject(
									18,
									new java.sql.Timestamp(row6.UPDATE_DATE
											.getTime()), java.sql.Types.DATE);
						} else {
							pstmt_tOracleOutput_1.setNull(18,
									java.sql.Types.DATE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1
								.append(row6.UPDATE_DATE == null ? "null" : "'"
										+ new java.text.SimpleDateFormat(
												"yyyy-MM-dd HH:mm:ss")
												.format(row6.UPDATE_DATE) + "'")
								.append(insertSQLSplits_tOracleOutput_1[18]);
						if (row6.DOWNLOAD_DATE != null) {
							pstmt_tOracleOutput_1.setObject(
									19,
									new java.sql.Timestamp(row6.DOWNLOAD_DATE
											.getTime()), java.sql.Types.DATE);
						} else {
							pstmt_tOracleOutput_1.setNull(19,
									java.sql.Types.DATE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.DOWNLOAD_DATE == null ? "null" : "'"
										+ new java.text.SimpleDateFormat(
												"yyyy-MM-dd HH:mm:ss")
												.format(row6.DOWNLOAD_DATE)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[19]);
						if (row6.IMPORT_DATE != null) {
							pstmt_tOracleOutput_1.setObject(
									20,
									new java.sql.Timestamp(row6.IMPORT_DATE
											.getTime()), java.sql.Types.DATE);
						} else {
							pstmt_tOracleOutput_1.setNull(20,
									java.sql.Types.DATE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1
								.append(row6.IMPORT_DATE == null ? "null" : "'"
										+ new java.text.SimpleDateFormat(
												"yyyy-MM-dd HH:mm:ss")
												.format(row6.IMPORT_DATE) + "'")
								.append(insertSQLSplits_tOracleOutput_1[20]);
						if (row6.SOURCESYSTEM_CD == null) {
							pstmt_tOracleOutput_1.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(21,
									row6.SOURCESYSTEM_CD);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.SOURCESYSTEM_CD == null ? "null" : "'"
										+ row6.SOURCESYSTEM_CD + "'").append(
								insertSQLSplits_tOracleOutput_1[21]);
						if (row6.VALUETYPE_CD == null) {
							pstmt_tOracleOutput_1.setNull(22,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(22,
									row6.VALUETYPE_CD);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.VALUETYPE_CD == null ? "null" : "'"
										+ row6.VALUETYPE_CD + "'").append(
								insertSQLSplits_tOracleOutput_1[22]);
						if (row6.M_EXCLUSION_CD == null) {
							pstmt_tOracleOutput_1.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(23,
									row6.M_EXCLUSION_CD);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.M_EXCLUSION_CD == null ? "null" : "'"
										+ row6.M_EXCLUSION_CD + "'").append(
								insertSQLSplits_tOracleOutput_1[23]);
						if (row6.C_PATH == null) {
							pstmt_tOracleOutput_1.setNull(24,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(24, row6.C_PATH);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_PATH == null ? "null" : "'"
										+ row6.C_PATH + "'").append(
								insertSQLSplits_tOracleOutput_1[24]);
						if (row6.C_SYMBOL == null) {
							pstmt_tOracleOutput_1.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(25, row6.C_SYMBOL);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_SYMBOL == null ? "null" : "'"
										+ row6.C_SYMBOL + "'").append(
								insertSQLSplits_tOracleOutput_1[25]);
						globalMap.put("tOracleOutput_1_QUERY",
								query_tOracleOutput_1.toString().trim());

						pstmt_tOracleOutput_1.addBatch();
						nb_line_tOracleOutput_1++;

						commitCounter_tOracleOutput_1++;
						if (commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {

							try {
								pstmt_tOracleOutput_1.executeBatch();
							} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

								System.out.println(e_tOracleOutput_1
										.getMessage());

							}
							tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
									.getUpdateCount();

							insertedCount_tOracleOutput_1

							+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
									: 0);

							conn_tOracleOutput_1.commit();
							commitCounter_tOracleOutput_1 = 0;
						}

						tos_count_tOracleOutput_1++;

						/**
						 * [tOracleOutput_1 main ] stop
						 */

					} // End of branch "row6"

					/**
					 * [tHashInput_tUnite_1 end ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					nb_line_tHashInput_tUnite_1++;
				}

				globalMap.put("tHashInput_tUnite_1_NB_LINE",
						nb_line_tHashInput_tUnite_1);

				ok_Hash.put("tHashInput_tUnite_1", true);
				end_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tOracleOutput_1 end ] start
				 */

				currentComponent = "tOracleOutput_1";

				try {
					if (pstmt_tOracleOutput_1 != null) {
						pstmt_tOracleOutput_1.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

					System.out.println(e_tOracleOutput_1.getMessage());

				}
				if (pstmt_tOracleOutput_1 != null) {
					tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
							.getUpdateCount();

					insertedCount_tOracleOutput_1

					+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
							: 0);
				}
				if (pstmt_tOracleOutput_1 != null) {

					pstmt_tOracleOutput_1.close();

				}

				conn_tOracleOutput_1.commit();

				conn_tOracleOutput_1.close();

				nb_line_deleted_tOracleOutput_1 = nb_line_deleted_tOracleOutput_1
						+ deletedCount_tOracleOutput_1;
				nb_line_update_tOracleOutput_1 = nb_line_update_tOracleOutput_1
						+ updatedCount_tOracleOutput_1;
				nb_line_inserted_tOracleOutput_1 = nb_line_inserted_tOracleOutput_1
						+ insertedCount_tOracleOutput_1;
				nb_line_rejected_tOracleOutput_1 = nb_line_rejected_tOracleOutput_1
						+ rejectedCount_tOracleOutput_1;

				globalMap.put("tOracleOutput_1_NB_LINE",
						nb_line_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_1);

				ok_Hash.put("tOracleOutput_1", true);
				end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				/**
				 * [tOracleOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tHashInput_tUnite_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IDRT_STDTERM IDRT_STDTERMClass = new IDRT_STDTERM();

		int exitCode = IDRT_STDTERMClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IDRT_STDTERM.class.getClassLoader()
					.getResourceAsStream(
							"idrt52/idrt_stdterm_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.icd10year = (String) context.getProperty("icd10year");
			context.csvDir = (String) context.getProperty("csvDir");
			context.basedir = (String) context.getProperty("basedir");
			context.DBHost = (String) context.getProperty("DBHost");
			context.DBInstance = (String) context.getProperty("DBInstance");
			context.DBPassword = (java.lang.String) context
					.getProperty("DBPassword");
			context.DBPort = (String) context.getProperty("DBPort");
			context.DBSchema = (String) context.getProperty("DBSchema");
			context.DBUsername = (String) context.getProperty("DBUsername");
			context.drgDir = (String) context.getProperty("drgDir");
			context.icd10Dir = (String) context.getProperty("icd10Dir");
			context.icd10Year = (String) context.getProperty("icd10Year");
			context.icdoDir = (String) context.getProperty("icdoDir");
			context.loincDir = (String) context.getProperty("loincDir");
			context.meddraDir = (String) context.getProperty("meddraDir");
			context.opsDir = (String) context.getProperty("opsDir");
			context.p21Dir = (String) context.getProperty("p21Dir");
			context.rootDir = (String) context.getProperty("rootDir");
			context.tnmDir = (String) context.getProperty("tnmDir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("icd10year")) {
				context.icd10year = (String) parentContextMap.get("icd10year");
			}
			if (parentContextMap.containsKey("csvDir")) {
				context.csvDir = (String) parentContextMap.get("csvDir");
			}
			if (parentContextMap.containsKey("basedir")) {
				context.basedir = (String) parentContextMap.get("basedir");
			}
			if (parentContextMap.containsKey("DBHost")) {
				context.DBHost = (String) parentContextMap.get("DBHost");
			}
			if (parentContextMap.containsKey("DBInstance")) {
				context.DBInstance = (String) parentContextMap
						.get("DBInstance");
			}
			if (parentContextMap.containsKey("DBPassword")) {
				context.DBPassword = (java.lang.String) parentContextMap
						.get("DBPassword");
			}
			if (parentContextMap.containsKey("DBPort")) {
				context.DBPort = (String) parentContextMap.get("DBPort");
			}
			if (parentContextMap.containsKey("DBSchema")) {
				context.DBSchema = (String) parentContextMap.get("DBSchema");
			}
			if (parentContextMap.containsKey("DBUsername")) {
				context.DBUsername = (String) parentContextMap
						.get("DBUsername");
			}
			if (parentContextMap.containsKey("drgDir")) {
				context.drgDir = (String) parentContextMap.get("drgDir");
			}
			if (parentContextMap.containsKey("icd10Dir")) {
				context.icd10Dir = (String) parentContextMap.get("icd10Dir");
			}
			if (parentContextMap.containsKey("icd10Year")) {
				context.icd10Year = (String) parentContextMap.get("icd10Year");
			}
			if (parentContextMap.containsKey("icdoDir")) {
				context.icdoDir = (String) parentContextMap.get("icdoDir");
			}
			if (parentContextMap.containsKey("loincDir")) {
				context.loincDir = (String) parentContextMap.get("loincDir");
			}
			if (parentContextMap.containsKey("meddraDir")) {
				context.meddraDir = (String) parentContextMap.get("meddraDir");
			}
			if (parentContextMap.containsKey("opsDir")) {
				context.opsDir = (String) parentContextMap.get("opsDir");
			}
			if (parentContextMap.containsKey("p21Dir")) {
				context.p21Dir = (String) parentContextMap.get("p21Dir");
			}
			if (parentContextMap.containsKey("rootDir")) {
				context.rootDir = (String) parentContextMap.get("rootDir");
			}
			if (parentContextMap.containsKey("tnmDir")) {
				context.tnmDir = (String) parentContextMap.get("tnmDir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tXSLT_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tXSLT_5) {

			e_tXSLT_5.printStackTrace();
			globalMap.put("tXSLT_5_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {

			e_tLibraryLoad_1.printStackTrace();
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tXSLT_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tXSLT_4) {

			e_tXSLT_4.printStackTrace();
			globalMap.put("tXSLT_4_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : IDRT_STDTERM");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 2216371 characters generated by Talend Open Studio for Data Integration on
 * the September 5, 2013 12:32:16 PM CEST
 ************************************************************************************************/
