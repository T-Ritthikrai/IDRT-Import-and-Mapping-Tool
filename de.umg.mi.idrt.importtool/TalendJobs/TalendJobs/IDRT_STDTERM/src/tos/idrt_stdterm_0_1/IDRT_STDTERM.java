// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.idrt_stdterm_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tLibraryLoad_1
//import java.util.List;
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: IDRT_STDTERM Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.0.r101800
 * @status 
 */
public class IDRT_STDTERM implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (icd10year != null) {

				this.setProperty("icd10year", icd10year.toString());

			}

			if (csvDir != null) {

				this.setProperty("csvDir", csvDir.toString());

			}

			if (basedir != null) {

				this.setProperty("basedir", basedir.toString());

			}

			if (DBHost != null) {

				this.setProperty("DBHost", DBHost.toString());

			}

			if (DBInstance != null) {

				this.setProperty("DBInstance", DBInstance.toString());

			}

			if (DBPassword != null) {

				this.setProperty("DBPassword", DBPassword.toString());

			}

			if (DBPort != null) {

				this.setProperty("DBPort", DBPort.toString());

			}

			if (DBSchema != null) {

				this.setProperty("DBSchema", DBSchema.toString());

			}

			if (DBUsername != null) {

				this.setProperty("DBUsername", DBUsername.toString());

			}

			if (drgDir != null) {

				this.setProperty("drgDir", drgDir.toString());

			}

			if (icd10Dir != null) {

				this.setProperty("icd10Dir", icd10Dir.toString());

			}

			if (icd10Year != null) {

				this.setProperty("icd10Year", icd10Year.toString());

			}

			if (icdoDir != null) {

				this.setProperty("icdoDir", icdoDir.toString());

			}

			if (loincDir != null) {

				this.setProperty("loincDir", loincDir.toString());

			}

			if (meddraDir != null) {

				this.setProperty("meddraDir", meddraDir.toString());

			}

			if (opsDir != null) {

				this.setProperty("opsDir", opsDir.toString());

			}

			if (p21Dir != null) {

				this.setProperty("p21Dir", p21Dir.toString());

			}

			if (rootDir != null) {

				this.setProperty("rootDir", rootDir.toString());

			}

			if (tnmDir != null) {

				this.setProperty("tnmDir", tnmDir.toString());

			}

		}

		public String icd10year;

		public String getIcd10year() {
			return this.icd10year;
		}

		public String csvDir;

		public String getCsvDir() {
			return this.csvDir;
		}

		public String basedir;

		public String getBasedir() {
			return this.basedir;
		}

		public String DBHost;

		public String getDBHost() {
			return this.DBHost;
		}

		public String DBInstance;

		public String getDBInstance() {
			return this.DBInstance;
		}

		public java.lang.String DBPassword;

		public java.lang.String getDBPassword() {
			return this.DBPassword;
		}

		public String DBPort;

		public String getDBPort() {
			return this.DBPort;
		}

		public String DBSchema;

		public String getDBSchema() {
			return this.DBSchema;
		}

		public String DBUsername;

		public String getDBUsername() {
			return this.DBUsername;
		}

		public String drgDir;

		public String getDrgDir() {
			return this.drgDir;
		}

		public String icd10Dir;

		public String getIcd10Dir() {
			return this.icd10Dir;
		}

		public String icd10Year;

		public String getIcd10Year() {
			return this.icd10Year;
		}

		public String icdoDir;

		public String getIcdoDir() {
			return this.icdoDir;
		}

		public String loincDir;

		public String getLoincDir() {
			return this.loincDir;
		}

		public String meddraDir;

		public String getMeddraDir() {
			return this.meddraDir;
		}

		public String opsDir;

		public String getOpsDir() {
			return this.opsDir;
		}

		public String p21Dir;

		public String getP21Dir() {
			return this.p21Dir;
		}

		public String rootDir;

		public String getRootDir() {
			return this.rootDir;
		}

		public String tnmDir;

		public String getTnmDir() {
			return this.tnmDir;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IDRT_STDTERM";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IDRT_STDTERM.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IDRT_STDTERM.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tOracleConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_5", System.currentTimeMillis());

		status = "failure";

		tOracleRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_3", System.currentTimeMillis());

		status = "failure";

		tOracleRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_3", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tConvertType_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tConvertType_1", System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_11", System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_4", System.currentTimeMillis());

		status = "failure";

		tOracleRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXSLT_5", System.currentTimeMillis());

		status = "failure";

		tXSLT_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXSLT_4", System.currentTimeMillis());

		status = "failure";

		tXSLT_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_20", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_tUnite_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashOutput_tUnite_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_tUnite_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHashInput_tUnite_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tXSLT_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_20_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_tUnite_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());
				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ context.DBHost + ":" + context.DBPort + ":"
						+ context.DBInstance;
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String userName_tOracleConnection_1 = context.DBUsername;
				String password_tOracleConnection_1 = context.DBPassword;

				java.sql.Connection conn_tOracleConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					conn_tOracleConnection_1 = java.sql.DriverManager
							.getConnection(url_tOracleConnection_1,
									userName_tOracleConnection_1,
									password_tOracleConnection_1);
					globalMap.put("conn_tOracleConnection_1",
							conn_tOracleConnection_1);
				}
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tOracleConnection_1", context.DBHost);
				globalMap.put("port_" + "tOracleConnection_1", context.DBPort);
				globalMap.put("dbname_" + "tOracleConnection_1",
						context.DBInstance);

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1",
						context.DBSchema);
				globalMap.put("username_" + "tOracleConnection_1",
						context.DBUsername);
				globalMap.put("password_" + "tOracleConnection_1",
						context.DBPassword);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */
				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */
				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tOracleRow_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_5 begin ] start
				 */

				ok_Hash.put("tOracleRow_5", false);
				start_Hash.put("tOracleRow_5", System.currentTimeMillis());
				currentComponent = "tOracleRow_5";

				int tos_count_tOracleRow_5 = 0;

				java.sql.Connection conn_tOracleRow_5 = null;
				conn_tOracleRow_5 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_5) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_5 = dataSources_tOracleRow_5.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_5 = conn_tOracleRow_5
						.createStatement();
				String query_tOracleRow_5 = "";
				boolean whetherReject_tOracleRow_5 = false;

				/**
				 * [tOracleRow_5 begin ] stop
				 */
				/**
				 * [tOracleRow_5 main ] start
				 */

				currentComponent = "tOracleRow_5";

				query_tOracleRow_5 = "DELETE FROM " + context.DBSchema
						+ ".I2B2 WHERE c_fullname LIKE '\\i2b2\\ST\\%'";
				;
				whetherReject_tOracleRow_5 = false;

				globalMap.put("tOracleRow_5_QUERY", query_tOracleRow_5);
				try {
					stmt_tOracleRow_5.execute(query_tOracleRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_5 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_5) {
				}

				tos_count_tOracleRow_5++;

				/**
				 * [tOracleRow_5 main ] stop
				 */
				/**
				 * [tOracleRow_5 end ] start
				 */

				currentComponent = "tOracleRow_5";

				stmt_tOracleRow_5.close();

				ok_Hash.put("tOracleRow_5", true);
				end_Hash.put("tOracleRow_5", System.currentTimeMillis());

				tOracleRow_3Process(globalMap);

				/**
				 * [tOracleRow_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_3 begin ] start
				 */

				ok_Hash.put("tOracleRow_3", false);
				start_Hash.put("tOracleRow_3", System.currentTimeMillis());
				currentComponent = "tOracleRow_3";

				int tos_count_tOracleRow_3 = 0;

				java.sql.Connection conn_tOracleRow_3 = null;
				conn_tOracleRow_3 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_3 = dataSources_tOracleRow_3.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_3 = conn_tOracleRow_3
						.createStatement();
				String query_tOracleRow_3 = "";
				boolean whetherReject_tOracleRow_3 = false;

				/**
				 * [tOracleRow_3 begin ] stop
				 */
				/**
				 * [tOracleRow_3 main ] start
				 */

				currentComponent = "tOracleRow_3";

				query_tOracleRow_3 = "DELETE FROM " + context.DBSchema
						+ ".CONCEPT_DIMENSION WHERE concept_cd LIKE 'ST|%'";
				whetherReject_tOracleRow_3 = false;

				globalMap.put("tOracleRow_3_QUERY", query_tOracleRow_3);
				try {
					stmt_tOracleRow_3.execute(query_tOracleRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_3 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_3) {
				}

				tos_count_tOracleRow_3++;

				/**
				 * [tOracleRow_3 main ] stop
				 */
				/**
				 * [tOracleRow_3 end ] start
				 */

				currentComponent = "tOracleRow_3";

				stmt_tOracleRow_3.close();

				ok_Hash.put("tOracleRow_3", true);
				end_Hash.put("tOracleRow_3", System.currentTimeMillis());

				tOracleCommit_3Process(globalMap);

				/**
				 * [tOracleRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_3 begin ] start
				 */

				ok_Hash.put("tOracleCommit_3", false);
				start_Hash.put("tOracleCommit_3", System.currentTimeMillis());
				currentComponent = "tOracleCommit_3";

				int tos_count_tOracleCommit_3 = 0;

				/**
				 * [tOracleCommit_3 begin ] stop
				 */
				/**
				 * [tOracleCommit_3 main ] start
				 */

				currentComponent = "tOracleCommit_3";

				java.sql.Connection conn_tOracleCommit_3 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_3 != null) {
						if (dataSources_tOracleCommit_3.get("") != null) {
							conn_tOracleCommit_3 = dataSources_tOracleCommit_3
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_3 != null
						&& !conn_tOracleCommit_3.isClosed()) {
					conn_tOracleCommit_3.commit();
				}

				tos_count_tOracleCommit_3++;

				/**
				 * [tOracleCommit_3 main ] stop
				 */
				/**
				 * [tOracleCommit_3 end ] start
				 */

				currentComponent = "tOracleCommit_3";

				ok_Hash.put("tOracleCommit_3", true);
				end_Hash.put("tOracleCommit_3", System.currentTimeMillis());

				/**
				 * [tOracleCommit_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tHashInput_tUnite_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleCommit_3_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_1_row3Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_1_row3Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RootSubUniteStruct implements
			routines.system.IPersistableRow<RootSubUniteStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RootSubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RootStruct implements
			routines.system.IPersistableRow<RootStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_9_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_9_RunAfterStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_9_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICDSubUniteStruct implements
			routines.system.IPersistableRow<ICDSubUniteStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICDSubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21SubUniteStruct implements
			routines.system.IPersistableRow<P21SubUniteStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21SubUniteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_9Process(globalMap);

				RootStruct Root = new RootStruct();
				RootStruct RootSubUnite = Root;

				row41Struct row41 = new row41Struct();
				row41Struct P21SubUnite = row41;

				row44Struct row44 = new row44Struct();
				row44Struct ICDSubUnite = row44;

				tHashInput_tUnite_1_row3Struct tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

				/**
				 * [tHashOutput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_1", false);
				start_Hash.put("tHashOutput_tUnite_1",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_1";

				int tos_count_tHashOutput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row3Struct> tHashFile_tHashOutput_tUnite_1 = null;
				if ((tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_1")) == null) {
					tHashFile_tHashOutput_tUnite_1 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row3Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_1.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_1",
						tHashFile_tHashOutput_tUnite_1);
				int nb_line_tHashOutput_tUnite_1 = 0;

				/**
				 * [tHashOutput_tUnite_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());
				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				System.out.println("Database connection established.");
				StatusListener.setSubStatus(5.0f,
						"Database connection established.");

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.rootDir + "i2b2_st_root.csv"/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						Root = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						Root = new RootStruct();
						try {

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								Root.C_HLEVEL = null;

								Root.C_FULLNAME = null;

								Root.C_NAME = null;

								Root.C_SYNONYM_CD = null;

								Root.C_VISUALATTRIBUTES = null;

								Root.C_TOTALNUM = null;

								Root.C_BASECODE = null;

								Root.C_METADATAXML = null;

								Root.C_FACTTABLECOLUMN = null;

								Root.C_TABLENAME = null;

								Root.C_COLUMNNAME = null;

								Root.C_COLUMNDATATYPE = null;

								Root.C_OPERATOR = null;

								Root.C_DIMCODE = null;

								Root.C_COMMENT = null;

								Root.C_TOOLTIP = null;

								Root.M_APPLIED_PATH = null;

								Root.UPDATE_DATE = null;

								Root.DOWNLOAD_DATE = null;

								Root.IMPORT_DATE = null;

								Root.SOURCESYSTEM_CD = null;

								Root.VALUETYPE_CD = null;

								Root.M_EXCLUSION_CD = null;

								Root.C_PATH = null;

								Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.C_HLEVEL = null;
									}

								} else {
									Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_FULLNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_NAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.C_SYNONYM_CD = null;
									}

								} else {
									Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_TOTALNUM = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_BASECODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_METADATAXML = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_TABLENAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_COLUMNNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.C_COLUMNDATATYPE = null;
									}

								} else {
									Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_OPERATOR = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_DIMCODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_COMMENT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_TOOLTIP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										Root.M_APPLIED_PATH = null;
									}

								} else {
									Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										Root.UPDATE_DATE = null;
									}

								} else {
									Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										Root.DOWNLOAD_DATE = null;
									}

								} else {
									Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										Root.IMPORT_DATE = null;
									}

								} else {
									Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.SOURCESYSTEM_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.VALUETYPE_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.M_EXCLUSION_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_PATH = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									Root.C_SYMBOL = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							Root = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "Root"
						if (Root != null) {

							/**
							 * [tJava_4 main ] start
							 */

							currentComponent = "tJava_4";

							RootSubUnite = Root;

							tos_count_tJava_4++;

							/**
							 * [tJava_4 main ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

							tHashInput_tUnite_1_row3.C_HLEVEL = RootSubUnite.C_HLEVEL;
							tHashInput_tUnite_1_row3.C_FULLNAME = RootSubUnite.C_FULLNAME;
							tHashInput_tUnite_1_row3.C_NAME = RootSubUnite.C_NAME;
							tHashInput_tUnite_1_row3.C_SYNONYM_CD = RootSubUnite.C_SYNONYM_CD;
							tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = RootSubUnite.C_VISUALATTRIBUTES;
							tHashInput_tUnite_1_row3.C_TOTALNUM = RootSubUnite.C_TOTALNUM;
							tHashInput_tUnite_1_row3.C_BASECODE = RootSubUnite.C_BASECODE;
							tHashInput_tUnite_1_row3.C_METADATAXML = RootSubUnite.C_METADATAXML;
							tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = RootSubUnite.C_FACTTABLECOLUMN;
							tHashInput_tUnite_1_row3.C_TABLENAME = RootSubUnite.C_TABLENAME;
							tHashInput_tUnite_1_row3.C_COLUMNNAME = RootSubUnite.C_COLUMNNAME;
							tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = RootSubUnite.C_COLUMNDATATYPE;
							tHashInput_tUnite_1_row3.C_OPERATOR = RootSubUnite.C_OPERATOR;
							tHashInput_tUnite_1_row3.C_DIMCODE = RootSubUnite.C_DIMCODE;
							tHashInput_tUnite_1_row3.C_COMMENT = RootSubUnite.C_COMMENT;
							tHashInput_tUnite_1_row3.C_TOOLTIP = RootSubUnite.C_TOOLTIP;
							tHashInput_tUnite_1_row3.M_APPLIED_PATH = RootSubUnite.M_APPLIED_PATH;
							tHashInput_tUnite_1_row3.UPDATE_DATE = RootSubUnite.UPDATE_DATE;
							tHashInput_tUnite_1_row3.DOWNLOAD_DATE = RootSubUnite.DOWNLOAD_DATE;
							tHashInput_tUnite_1_row3.IMPORT_DATE = RootSubUnite.IMPORT_DATE;
							tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = RootSubUnite.SOURCESYSTEM_CD;
							tHashInput_tUnite_1_row3.VALUETYPE_CD = RootSubUnite.VALUETYPE_CD;
							tHashInput_tUnite_1_row3.M_EXCLUSION_CD = RootSubUnite.M_EXCLUSION_CD;
							tHashInput_tUnite_1_row3.C_PATH = RootSubUnite.C_PATH;
							tHashInput_tUnite_1_row3.C_SYMBOL = RootSubUnite.C_SYMBOL;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_1 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_1";

							tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

							oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
							oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
							oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
							oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
							oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
							oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
							oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
							oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
							oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
							oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
							oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_1
									.put(oneRow_tHashOutput_tUnite_1);
							nb_line_tHashOutput_tUnite_1++;

							tos_count_tHashOutput_tUnite_1++;

							/**
							 * [tHashOutput_tUnite_1 main ] stop
							 */

						} // End of branch "Root"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("P21 import ended.");
				StatusListener.setSubStatus(10.0f, "P21 import ended.");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_9 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_9", false);
				start_Hash.put("tHashInput_tUnite_9",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_9";

				int tos_count_tHashInput_tUnite_9 = 0;

				int nb_line_tHashInput_tUnite_9 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_9 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_9_row41Struct> tHashFile_tHashInput_tUnite_9 = mf_tHashInput_tUnite_9
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_9");
				if (tHashFile_tHashInput_tUnite_9 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_9_row41Struct> iterator_tHashInput_tUnite_9 = tHashFile_tHashInput_tUnite_9
						.iterator();
				while (iterator_tHashInput_tUnite_9.hasNext()) {
					tHashInput_tUnite_9_row41Struct next_tHashInput_tUnite_9 = iterator_tHashInput_tUnite_9
							.next();

					row41.C_HLEVEL = next_tHashInput_tUnite_9.C_HLEVEL;
					row41.C_FULLNAME = next_tHashInput_tUnite_9.C_FULLNAME;
					row41.C_NAME = next_tHashInput_tUnite_9.C_NAME;
					row41.C_SYNONYM_CD = next_tHashInput_tUnite_9.C_SYNONYM_CD;
					row41.C_VISUALATTRIBUTES = next_tHashInput_tUnite_9.C_VISUALATTRIBUTES;
					row41.C_TOTALNUM = next_tHashInput_tUnite_9.C_TOTALNUM;
					row41.C_BASECODE = next_tHashInput_tUnite_9.C_BASECODE;
					row41.C_METADATAXML = next_tHashInput_tUnite_9.C_METADATAXML;
					row41.C_FACTTABLECOLUMN = next_tHashInput_tUnite_9.C_FACTTABLECOLUMN;
					row41.C_TABLENAME = next_tHashInput_tUnite_9.C_TABLENAME;
					row41.C_COLUMNNAME = next_tHashInput_tUnite_9.C_COLUMNNAME;
					row41.C_COLUMNDATATYPE = next_tHashInput_tUnite_9.C_COLUMNDATATYPE;
					row41.C_OPERATOR = next_tHashInput_tUnite_9.C_OPERATOR;
					row41.C_DIMCODE = next_tHashInput_tUnite_9.C_DIMCODE;
					row41.C_COMMENT = next_tHashInput_tUnite_9.C_COMMENT;
					row41.C_TOOLTIP = next_tHashInput_tUnite_9.C_TOOLTIP;
					row41.M_APPLIED_PATH = next_tHashInput_tUnite_9.M_APPLIED_PATH;
					row41.UPDATE_DATE = next_tHashInput_tUnite_9.UPDATE_DATE;
					row41.DOWNLOAD_DATE = next_tHashInput_tUnite_9.DOWNLOAD_DATE;
					row41.IMPORT_DATE = next_tHashInput_tUnite_9.IMPORT_DATE;
					row41.SOURCESYSTEM_CD = next_tHashInput_tUnite_9.SOURCESYSTEM_CD;
					row41.VALUETYPE_CD = next_tHashInput_tUnite_9.VALUETYPE_CD;
					row41.M_EXCLUSION_CD = next_tHashInput_tUnite_9.M_EXCLUSION_CD;
					row41.C_PATH = next_tHashInput_tUnite_9.C_PATH;
					row41.C_SYMBOL = next_tHashInput_tUnite_9.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_9 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_9 main ] start
					 */

					currentComponent = "tHashInput_tUnite_9";

					tos_count_tHashInput_tUnite_9++;

					/**
					 * [tHashInput_tUnite_9 main ] stop
					 */

					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					P21SubUnite = row41;

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = P21SubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = P21SubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = P21SubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = P21SubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = P21SubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = P21SubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = P21SubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = P21SubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = P21SubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = P21SubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = P21SubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = P21SubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = P21SubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = P21SubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = P21SubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = P21SubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = P21SubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = P21SubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = P21SubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = P21SubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = P21SubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = P21SubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = P21SubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = P21SubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = P21SubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_9 end ] start
					 */

					currentComponent = "tHashInput_tUnite_9";

					nb_line_tHashInput_tUnite_9++;
				}

				globalMap.put("tHashInput_tUnite_9_NB_LINE",
						nb_line_tHashInput_tUnite_9);

				ok_Hash.put("tHashInput_tUnite_9", true);
				end_Hash.put("tHashInput_tUnite_9", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_9 end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.out.println("ICD import ended.");
				StatusListener.setSubStatus(25.0f, "ICD import ended.");

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_10 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_10", false);
				start_Hash.put("tHashInput_tUnite_10",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_10";

				int tos_count_tHashInput_tUnite_10 = 0;

				int nb_line_tHashInput_tUnite_10 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_10 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_10_row44Struct> tHashFile_tHashInput_tUnite_10 = mf_tHashInput_tUnite_10
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_10");
				if (tHashFile_tHashInput_tUnite_10 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_10_row44Struct> iterator_tHashInput_tUnite_10 = tHashFile_tHashInput_tUnite_10
						.iterator();
				while (iterator_tHashInput_tUnite_10.hasNext()) {
					tHashInput_tUnite_10_row44Struct next_tHashInput_tUnite_10 = iterator_tHashInput_tUnite_10
							.next();

					row44.C_HLEVEL = next_tHashInput_tUnite_10.C_HLEVEL;
					row44.C_FULLNAME = next_tHashInput_tUnite_10.C_FULLNAME;
					row44.C_NAME = next_tHashInput_tUnite_10.C_NAME;
					row44.C_SYNONYM_CD = next_tHashInput_tUnite_10.C_SYNONYM_CD;
					row44.C_VISUALATTRIBUTES = next_tHashInput_tUnite_10.C_VISUALATTRIBUTES;
					row44.C_TOTALNUM = next_tHashInput_tUnite_10.C_TOTALNUM;
					row44.C_BASECODE = next_tHashInput_tUnite_10.C_BASECODE;
					row44.C_METADATAXML = next_tHashInput_tUnite_10.C_METADATAXML;
					row44.C_FACTTABLECOLUMN = next_tHashInput_tUnite_10.C_FACTTABLECOLUMN;
					row44.C_TABLENAME = next_tHashInput_tUnite_10.C_TABLENAME;
					row44.C_COLUMNNAME = next_tHashInput_tUnite_10.C_COLUMNNAME;
					row44.C_COLUMNDATATYPE = next_tHashInput_tUnite_10.C_COLUMNDATATYPE;
					row44.C_OPERATOR = next_tHashInput_tUnite_10.C_OPERATOR;
					row44.C_DIMCODE = next_tHashInput_tUnite_10.C_DIMCODE;
					row44.C_COMMENT = next_tHashInput_tUnite_10.C_COMMENT;
					row44.C_TOOLTIP = next_tHashInput_tUnite_10.C_TOOLTIP;
					row44.M_APPLIED_PATH = next_tHashInput_tUnite_10.M_APPLIED_PATH;
					row44.UPDATE_DATE = next_tHashInput_tUnite_10.UPDATE_DATE;
					row44.DOWNLOAD_DATE = next_tHashInput_tUnite_10.DOWNLOAD_DATE;
					row44.IMPORT_DATE = next_tHashInput_tUnite_10.IMPORT_DATE;
					row44.SOURCESYSTEM_CD = next_tHashInput_tUnite_10.SOURCESYSTEM_CD;
					row44.VALUETYPE_CD = next_tHashInput_tUnite_10.VALUETYPE_CD;
					row44.M_EXCLUSION_CD = next_tHashInput_tUnite_10.M_EXCLUSION_CD;
					row44.C_PATH = next_tHashInput_tUnite_10.C_PATH;
					row44.C_SYMBOL = next_tHashInput_tUnite_10.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_10 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_10 main ] start
					 */

					currentComponent = "tHashInput_tUnite_10";

					tos_count_tHashInput_tUnite_10++;

					/**
					 * [tHashInput_tUnite_10 main ] stop
					 */

					/**
					 * [tJava_5 main ] start
					 */

					currentComponent = "tJava_5";

					ICDSubUnite = row44;

					tos_count_tJava_5++;

					/**
					 * [tJava_5 main ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					// ////////

					// for output
					tHashInput_tUnite_1_row3 = new tHashInput_tUnite_1_row3Struct();

					tHashInput_tUnite_1_row3.C_HLEVEL = ICDSubUnite.C_HLEVEL;
					tHashInput_tUnite_1_row3.C_FULLNAME = ICDSubUnite.C_FULLNAME;
					tHashInput_tUnite_1_row3.C_NAME = ICDSubUnite.C_NAME;
					tHashInput_tUnite_1_row3.C_SYNONYM_CD = ICDSubUnite.C_SYNONYM_CD;
					tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES = ICDSubUnite.C_VISUALATTRIBUTES;
					tHashInput_tUnite_1_row3.C_TOTALNUM = ICDSubUnite.C_TOTALNUM;
					tHashInput_tUnite_1_row3.C_BASECODE = ICDSubUnite.C_BASECODE;
					tHashInput_tUnite_1_row3.C_METADATAXML = ICDSubUnite.C_METADATAXML;
					tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN = ICDSubUnite.C_FACTTABLECOLUMN;
					tHashInput_tUnite_1_row3.C_TABLENAME = ICDSubUnite.C_TABLENAME;
					tHashInput_tUnite_1_row3.C_COLUMNNAME = ICDSubUnite.C_COLUMNNAME;
					tHashInput_tUnite_1_row3.C_COLUMNDATATYPE = ICDSubUnite.C_COLUMNDATATYPE;
					tHashInput_tUnite_1_row3.C_OPERATOR = ICDSubUnite.C_OPERATOR;
					tHashInput_tUnite_1_row3.C_DIMCODE = ICDSubUnite.C_DIMCODE;
					tHashInput_tUnite_1_row3.C_COMMENT = ICDSubUnite.C_COMMENT;
					tHashInput_tUnite_1_row3.C_TOOLTIP = ICDSubUnite.C_TOOLTIP;
					tHashInput_tUnite_1_row3.M_APPLIED_PATH = ICDSubUnite.M_APPLIED_PATH;
					tHashInput_tUnite_1_row3.UPDATE_DATE = ICDSubUnite.UPDATE_DATE;
					tHashInput_tUnite_1_row3.DOWNLOAD_DATE = ICDSubUnite.DOWNLOAD_DATE;
					tHashInput_tUnite_1_row3.IMPORT_DATE = ICDSubUnite.IMPORT_DATE;
					tHashInput_tUnite_1_row3.SOURCESYSTEM_CD = ICDSubUnite.SOURCESYSTEM_CD;
					tHashInput_tUnite_1_row3.VALUETYPE_CD = ICDSubUnite.VALUETYPE_CD;
					tHashInput_tUnite_1_row3.M_EXCLUSION_CD = ICDSubUnite.M_EXCLUSION_CD;
					tHashInput_tUnite_1_row3.C_PATH = ICDSubUnite.C_PATH;
					tHashInput_tUnite_1_row3.C_SYMBOL = ICDSubUnite.C_SYMBOL;

					nb_line_tUnite_1++;

					// ////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_1 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_1";

					tHashInput_tUnite_1_row3Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row3Struct();

					oneRow_tHashOutput_tUnite_1.C_HLEVEL = tHashInput_tUnite_1_row3.C_HLEVEL;
					oneRow_tHashOutput_tUnite_1.C_FULLNAME = tHashInput_tUnite_1_row3.C_FULLNAME;
					oneRow_tHashOutput_tUnite_1.C_NAME = tHashInput_tUnite_1_row3.C_NAME;
					oneRow_tHashOutput_tUnite_1.C_SYNONYM_CD = tHashInput_tUnite_1_row3.C_SYNONYM_CD;
					oneRow_tHashOutput_tUnite_1.C_VISUALATTRIBUTES = tHashInput_tUnite_1_row3.C_VISUALATTRIBUTES;
					oneRow_tHashOutput_tUnite_1.C_TOTALNUM = tHashInput_tUnite_1_row3.C_TOTALNUM;
					oneRow_tHashOutput_tUnite_1.C_BASECODE = tHashInput_tUnite_1_row3.C_BASECODE;
					oneRow_tHashOutput_tUnite_1.C_METADATAXML = tHashInput_tUnite_1_row3.C_METADATAXML;
					oneRow_tHashOutput_tUnite_1.C_FACTTABLECOLUMN = tHashInput_tUnite_1_row3.C_FACTTABLECOLUMN;
					oneRow_tHashOutput_tUnite_1.C_TABLENAME = tHashInput_tUnite_1_row3.C_TABLENAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNNAME = tHashInput_tUnite_1_row3.C_COLUMNNAME;
					oneRow_tHashOutput_tUnite_1.C_COLUMNDATATYPE = tHashInput_tUnite_1_row3.C_COLUMNDATATYPE;
					oneRow_tHashOutput_tUnite_1.C_OPERATOR = tHashInput_tUnite_1_row3.C_OPERATOR;
					oneRow_tHashOutput_tUnite_1.C_DIMCODE = tHashInput_tUnite_1_row3.C_DIMCODE;
					oneRow_tHashOutput_tUnite_1.C_COMMENT = tHashInput_tUnite_1_row3.C_COMMENT;
					oneRow_tHashOutput_tUnite_1.C_TOOLTIP = tHashInput_tUnite_1_row3.C_TOOLTIP;
					oneRow_tHashOutput_tUnite_1.M_APPLIED_PATH = tHashInput_tUnite_1_row3.M_APPLIED_PATH;
					oneRow_tHashOutput_tUnite_1.UPDATE_DATE = tHashInput_tUnite_1_row3.UPDATE_DATE;
					oneRow_tHashOutput_tUnite_1.DOWNLOAD_DATE = tHashInput_tUnite_1_row3.DOWNLOAD_DATE;
					oneRow_tHashOutput_tUnite_1.IMPORT_DATE = tHashInput_tUnite_1_row3.IMPORT_DATE;
					oneRow_tHashOutput_tUnite_1.SOURCESYSTEM_CD = tHashInput_tUnite_1_row3.SOURCESYSTEM_CD;
					oneRow_tHashOutput_tUnite_1.VALUETYPE_CD = tHashInput_tUnite_1_row3.VALUETYPE_CD;
					oneRow_tHashOutput_tUnite_1.M_EXCLUSION_CD = tHashInput_tUnite_1_row3.M_EXCLUSION_CD;
					oneRow_tHashOutput_tUnite_1.C_PATH = tHashInput_tUnite_1_row3.C_PATH;
					oneRow_tHashOutput_tUnite_1.C_SYMBOL = tHashInput_tUnite_1_row3.C_SYMBOL;

					tHashFile_tHashOutput_tUnite_1
							.put(oneRow_tHashOutput_tUnite_1);
					nb_line_tHashOutput_tUnite_1++;

					tos_count_tHashOutput_tUnite_1++;

					/**
					 * [tHashOutput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_10 end ] start
					 */

					currentComponent = "tHashInput_tUnite_10";

					nb_line_tHashInput_tUnite_10++;
				}

				globalMap.put("tHashInput_tUnite_10_NB_LINE",
						nb_line_tHashInput_tUnite_10);

				ok_Hash.put("tHashInput_tUnite_10", true);
				end_Hash.put("tHashInput_tUnite_10", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_10 end ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_1 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_1";

				globalMap.put("tHashOutput_tUnite_1_NB_LINE",
						nb_line_tHashOutput_tUnite_1);

				ok_Hash.put("tHashOutput_tUnite_1", true);
				end_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());
				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				System.out.println("All terminologies imported.");
				StatusListener.setSubStatus(95.0f,
						"All terminologies imported.");

				/**
				 * [tJava_11 begin ] stop
				 */
				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */
				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tOracleCommit_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_2 begin ] start
				 */

				ok_Hash.put("tOracleCommit_2", false);
				start_Hash.put("tOracleCommit_2", System.currentTimeMillis());
				currentComponent = "tOracleCommit_2";

				int tos_count_tOracleCommit_2 = 0;

				/**
				 * [tOracleCommit_2 begin ] stop
				 */
				/**
				 * [tOracleCommit_2 main ] start
				 */

				currentComponent = "tOracleCommit_2";

				java.sql.Connection conn_tOracleCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_2 != null) {
						if (dataSources_tOracleCommit_2.get("") != null) {
							conn_tOracleCommit_2 = dataSources_tOracleCommit_2
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_2 != null
						&& !conn_tOracleCommit_2.isClosed()) {
					conn_tOracleCommit_2.commit();
				}

				tos_count_tOracleCommit_2++;

				/**
				 * [tOracleCommit_2 main ] stop
				 */
				/**
				 * [tOracleCommit_2 end ] start
				 */

				currentComponent = "tOracleCommit_2";

				ok_Hash.put("tOracleCommit_2", true);
				end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

				tOracleRow_4Process(globalMap);

				/**
				 * [tOracleCommit_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_4 begin ] start
				 */

				ok_Hash.put("tOracleRow_4", false);
				start_Hash.put("tOracleRow_4", System.currentTimeMillis());
				currentComponent = "tOracleRow_4";

				int tos_count_tOracleRow_4 = 0;

				java.sql.Connection conn_tOracleRow_4 = null;
				conn_tOracleRow_4 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_4 = dataSources_tOracleRow_4.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_4 = conn_tOracleRow_4
						.createStatement();
				String query_tOracleRow_4 = "";
				boolean whetherReject_tOracleRow_4 = false;

				/**
				 * [tOracleRow_4 begin ] stop
				 */
				/**
				 * [tOracleRow_4 main ] start
				 */

				currentComponent = "tOracleRow_4";

				query_tOracleRow_4 = "INSERT INTO "
						+ context.DBSchema
						+ ".concept_dimension         (concept_path, concept_cd, name_char, concept_blob, update_date, download_date, import_date, sourcesystem_cd, upload_id)    SELECT DISTINCT         i2b2.c_fullname       AS concept_path,         i2b2.c_basecode       AS concept_cd,         i2b2.c_name           AS name_char,         NULL                  AS concept_blob,         i2b2.update_date,         i2b2.download_date,         i2b2.import_date,         i2b2.sourcesystem_cd,         NULL                  AS upload_id    FROM "
						+ context.DBSchema
						+ ".i2b2   WHERE i2b2.c_visualattributes LIKE 'LA%'     AND i2b2.c_basecode LIKE 'ST|%'";
				whetherReject_tOracleRow_4 = false;

				globalMap.put("tOracleRow_4_QUERY", query_tOracleRow_4);
				try {
					stmt_tOracleRow_4.execute(query_tOracleRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_4 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_4) {
				}

				tos_count_tOracleRow_4++;

				/**
				 * [tOracleRow_4 main ] stop
				 */
				/**
				 * [tOracleRow_4 end ] start
				 */

				currentComponent = "tOracleRow_4";

				stmt_tOracleRow_4.close();

				ok_Hash.put("tOracleRow_4", true);
				end_Hash.put("tOracleRow_4", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleRow_4_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_1 begin ] start
				 */

				ok_Hash.put("tOracleCommit_1", false);
				start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
				currentComponent = "tOracleCommit_1";

				int tos_count_tOracleCommit_1 = 0;

				/**
				 * [tOracleCommit_1 begin ] stop
				 */
				/**
				 * [tOracleCommit_1 main ] start
				 */

				currentComponent = "tOracleCommit_1";

				java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_1 != null) {
						if (dataSources_tOracleCommit_1.get("") != null) {
							conn_tOracleCommit_1 = dataSources_tOracleCommit_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_1 != null
						&& !conn_tOracleCommit_1.isClosed()) {
					conn_tOracleCommit_1.commit();
					conn_tOracleCommit_1.close();
				}

				tos_count_tOracleCommit_1++;

				/**
				 * [tOracleCommit_1 main ] stop
				 */
				/**
				 * [tOracleCommit_1 end ] start
				 */

				currentComponent = "tOracleCommit_1";

				ok_Hash.put("tOracleCommit_1", true);
				end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				/**
				 * [tOracleCommit_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				System.out.println("STDTERM import finished.");
				StatusListener.setSubStatus(100.0f, "STDTERM import finished.");

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_5 begin ] start
				 */

				ok_Hash.put("tXSLT_5", false);
				start_Hash.put("tXSLT_5", System.currentTimeMillis());
				currentComponent = "tXSLT_5";

				int tos_count_tXSLT_5 = 0;

				/**
				 * [tXSLT_5 begin ] stop
				 */
				/**
				 * [tXSLT_5 main ] start
				 */

				currentComponent = "tXSLT_5";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_5 = new java.io.File(context.icdoDir
						+ "/icdo-leafs.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_5 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_5);
				javax.xml.transform.Transformer ttXSLT_5 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_5);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_5 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.icdoDir + "/icd-o-3-2013.xml"));
				ttXSLT_5.transform(xmlSourcetXSLT_5,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.icdoDir
										+ "/icdo-leafs.xml")));

				if ((context.icdoDir + "/icdo-leafs.xml").indexOf("/") != -1) {
					globalMap.put("tXSLT_5_OUTPUT_FILEPATH",
							(context.icdoDir + "/icdo-leafs.xml").substring(0,
									(context.icdoDir + "/icdo-leafs.xml")
											.lastIndexOf("/")));
					globalMap
							.put("tXSLT_5_OUTPUT_FILENAME",
									(context.icdoDir + "/icdo-leafs.xml")
											.substring((context.icdoDir + "/icdo-leafs.xml")
													.lastIndexOf("/") + 1));
				} else {
					globalMap.put("tXSLT_5_OUTPUT_FILEPATH", context.icdoDir
							+ "/icdo-leafs.xml");
					globalMap.put("tXSLT_5_OUTPUT_FILENAME", context.icdoDir
							+ "/icdo-leafs.xml");
				}

				tos_count_tXSLT_5++;

				/**
				 * [tXSLT_5 main ] stop
				 */
				/**
				 * [tXSLT_5 end ] start
				 */

				currentComponent = "tXSLT_5";

				ok_Hash.put("tXSLT_5", true);
				end_Hash.put("tXSLT_5", System.currentTimeMillis());

				/**
				 * [tXSLT_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tXSLT_5_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				java.net.URLClassLoader sysloader_tLibraryLoad_1 = (java.net.URLClassLoader) ClassLoader
						.getSystemClassLoader();
				java.lang.reflect.Method method_tLibraryLoad_1 = java.net.URLClassLoader.class
						.getDeclaredMethod("addURL",
								new Class[] { java.net.URL.class });
				method_tLibraryLoad_1.setAccessible(true);

				String[] libPaths_tLibraryLoad_1 = new String[] {,};
				for (String lib_tLibraryLoad_1 : libPaths_tLibraryLoad_1) {
					String separator_tLibraryLoad_1 = System
							.getProperty("path.separator");
					String[] jarFiles_tLibraryLoad_1 = lib_tLibraryLoad_1
							.split(separator_tLibraryLoad_1);
					for (String jarFile_tLibraryLoad_1 : jarFiles_tLibraryLoad_1) {
						method_tLibraryLoad_1.invoke(sysloader_tLibraryLoad_1,
								new Object[] { new java.io.File(
										jarFile_tLibraryLoad_1).toURL() });
					}
				}

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("STDTERM import started.");
				StatusListener.setSubStatus(1.0f, "STDTERM import started.");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tOracleConnection_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tXSLT_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tXSLT_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tXSLT_4 begin ] start
				 */

				ok_Hash.put("tXSLT_4", false);
				start_Hash.put("tXSLT_4", System.currentTimeMillis());
				currentComponent = "tXSLT_4";

				int tos_count_tXSLT_4 = 0;

				/**
				 * [tXSLT_4 begin ] stop
				 */
				/**
				 * [tXSLT_4 main ] start
				 */

				currentComponent = "tXSLT_4";

				System.setProperty("javax.xml.transform.TransformerFactory",
						"net.sf.saxon.TransformerFactoryImpl");

				java.io.File xsltFiletXSLT_4 = new java.io.File(context.icdoDir
						+ "/icdo-folders.xsl");
				javax.xml.transform.stream.StreamSource styleSourcetXSLT_4 = new javax.xml.transform.stream.StreamSource(
						xsltFiletXSLT_4);
				javax.xml.transform.Transformer ttXSLT_4 = javax.xml.transform.TransformerFactory
						.newInstance().newTransformer(styleSourcetXSLT_4);

				javax.xml.transform.stream.StreamSource xmlSourcetXSLT_4 = new javax.xml.transform.stream.StreamSource(
						new java.io.File(context.icdoDir + "/icd-o-3-2013.xml"));
				ttXSLT_4.transform(xmlSourcetXSLT_4,
						new javax.xml.transform.stream.StreamResult(
								new java.io.File(context.icdoDir
										+ "/icdo-folders.xml")));

				if ((context.icdoDir + "/icdo-folders.xml").indexOf("/") != -1) {
					globalMap.put("tXSLT_4_OUTPUT_FILEPATH",
							(context.icdoDir + "/icdo-folders.xml").substring(
									0, (context.icdoDir + "/icdo-folders.xml")
											.lastIndexOf("/")));
					globalMap
							.put("tXSLT_4_OUTPUT_FILENAME",
									(context.icdoDir + "/icdo-folders.xml")
											.substring((context.icdoDir + "/icdo-folders.xml")
													.lastIndexOf("/") + 1));
				} else {
					globalMap.put("tXSLT_4_OUTPUT_FILEPATH", context.icdoDir
							+ "/icdo-folders.xml");
					globalMap.put("tXSLT_4_OUTPUT_FILENAME", context.icdoDir
							+ "/icdo-folders.xml");
				}

				tos_count_tXSLT_4++;

				/**
				 * [tXSLT_4 main ] stop
				 */
				/**
				 * [tXSLT_4 end ] start
				 */

				currentComponent = "tXSLT_4";

				ok_Hash.put("tXSLT_4", true);
				end_Hash.put("tXSLT_4", System.currentTimeMillis());

				/**
				 * [tXSLT_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tXSLT_4_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_10_row44Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_10_row44Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_10_row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICD10_RootStruct implements
			routines.system.IPersistableRow<ICD10_RootStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICD10_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICD10_FolderStruct implements
			routines.system.IPersistableRow<ICD10_FolderStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICD10_FolderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ICD10_LeafStruct implements
			routines.system.IPersistableRow<ICD10_LeafStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ICD10_LeafStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public String code;

		public String getCode() {
			return this.code;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public int level;

		public int getLevel() {
			return this.level;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.code = readString(dis);

					this.label = readString(dis);

					this.path = readString(dis);

					this.level = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.path, dos);

				// int

				dos.writeInt(this.level);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code=" + code);
			sb.append(",label=" + label);
			sb.append(",path=" + path);
			sb.append(",level=" + String.valueOf(level));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				ICD10_RootStruct ICD10_Root = new ICD10_RootStruct();

				row19Struct row19 = new row19Struct();
				ICD10_FolderStruct ICD10_Folder = new ICD10_FolderStruct();

				row5Struct row5 = new row5Struct();
				ICD10_LeafStruct ICD10_Leaf = new ICD10_LeafStruct();

				tHashInput_tUnite_10_row44Struct tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

				/**
				 * [tHashOutput_tUnite_10 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_10", false);
				start_Hash.put("tHashOutput_tUnite_10",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_10";

				int tos_count_tHashOutput_tUnite_10 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_10 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_10_row44Struct> tHashFile_tHashOutput_tUnite_10 = null;
				if ((tHashFile_tHashOutput_tUnite_10 = mf_tHashOutput_tUnite_10
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_10")) == null) {
					tHashFile_tHashOutput_tUnite_10 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_10_row44Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_10.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_10",
						tHashFile_tHashOutput_tUnite_10);
				int nb_line_tHashOutput_tUnite_10 = 0;

				/**
				 * [tHashOutput_tUnite_10 begin ] stop
				 */

				/**
				 * [tUnite_10 begin ] start
				 */

				ok_Hash.put("tUnite_10", false);
				start_Hash.put("tUnite_10", System.currentTimeMillis());
				currentComponent = "tUnite_10";

				int tos_count_tUnite_10 = 0;

				int nb_line_tUnite_10 = 0;

				/**
				 * [tUnite_10 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_20", false);
				start_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_20";

				int tos_count_tFileInputDelimited_20 = 0;

				int nb_line_tFileInputDelimited_20 = 0;
				int footer_tFileInputDelimited_20 = 0;
				int totalLinetFileInputDelimited_20 = 0;
				int limittFileInputDelimited_20 = -1;
				int lastLinetFileInputDelimited_20 = -1;

				char fieldSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_20 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_20 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_20 = /**
				 * Start field
				 * tFileInputDelimited_20:FILENAME
				 */
				context.icd10Dir + "root_ICD-10-GM.csv"/**
				 * End field
				 * tFileInputDelimited_20:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_20 = null;

				try {

					String[] rowtFileInputDelimited_20 = null;
					int currentLinetFileInputDelimited_20 = 0;
					int outputLinetFileInputDelimited_20 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_20 = 0;
							if (footer_value_tFileInputDelimited_20 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_20,
									fieldSeparator_tFileInputDelimited_20[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_20)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_20[0]);
						}

						csvReadertFileInputDelimited_20
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
							csvReadertFileInputDelimited_20.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_20[0]);

						csvReadertFileInputDelimited_20.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_20
								.setEscapeChar(csvReadertFileInputDelimited_20
										.getQuoteChar());

						if (footer_tFileInputDelimited_20 > 0) {
							for (totalLinetFileInputDelimited_20 = 0; totalLinetFileInputDelimited_20 < 1; totalLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
							csvReadertFileInputDelimited_20
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_20.readNext()) {

								rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
										.getValues();
								if (!(rowtFileInputDelimited_20.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_20[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_20++;

								}

							}
							int lastLineTemptFileInputDelimited_20 = totalLinetFileInputDelimited_20
									- footer_tFileInputDelimited_20 < 0 ? 0
									: totalLinetFileInputDelimited_20
											- footer_tFileInputDelimited_20;
							if (lastLinetFileInputDelimited_20 > 0) {
								lastLinetFileInputDelimited_20 = lastLinetFileInputDelimited_20 < lastLineTemptFileInputDelimited_20 ? lastLinetFileInputDelimited_20
										: lastLineTemptFileInputDelimited_20;
							} else {
								lastLinetFileInputDelimited_20 = lastLineTemptFileInputDelimited_20;
							}

							csvReadertFileInputDelimited_20.close();
							if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_20,
										fieldSeparator_tFileInputDelimited_20[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_20)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_20[0]);
							}
							csvReadertFileInputDelimited_20
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
								csvReadertFileInputDelimited_20
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_20[0]);

							csvReadertFileInputDelimited_20.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_20
									.setEscapeChar(csvReadertFileInputDelimited_20
											.getQuoteChar());

						}

						if (limittFileInputDelimited_20 != 0) {
							for (currentLinetFileInputDelimited_20 = 0; currentLinetFileInputDelimited_20 < 1; currentLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
						}
						csvReadertFileInputDelimited_20
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_20 != 0
							&& csvReadertFileInputDelimited_20 != null
							&& csvReadertFileInputDelimited_20.readNext()) {

						rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
								.getValues();

						if (rowtFileInputDelimited_20.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_20[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_20++;

						if (lastLinetFileInputDelimited_20 > -1
								&& currentLinetFileInputDelimited_20 > lastLinetFileInputDelimited_20) {
							break;
						}
						outputLinetFileInputDelimited_20++;
						if (limittFileInputDelimited_20 > 0
								&& outputLinetFileInputDelimited_20 > limittFileInputDelimited_20) {
							break;
						}

						ICD10_Root = null;

						boolean whetherReject_tFileInputDelimited_20 = false;
						ICD10_Root = new ICD10_RootStruct();
						try {

							if (rowtFileInputDelimited_20.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_20[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								ICD10_Root.C_HLEVEL = null;

								ICD10_Root.C_FULLNAME = null;

								ICD10_Root.C_NAME = null;

								ICD10_Root.C_SYNONYM_CD = null;

								ICD10_Root.C_VISUALATTRIBUTES = null;

								ICD10_Root.C_TOTALNUM = null;

								ICD10_Root.C_BASECODE = null;

								ICD10_Root.C_METADATAXML = null;

								ICD10_Root.C_FACTTABLECOLUMN = null;

								ICD10_Root.C_TABLENAME = null;

								ICD10_Root.C_COLUMNNAME = null;

								ICD10_Root.C_COLUMNDATATYPE = null;

								ICD10_Root.C_OPERATOR = null;

								ICD10_Root.C_DIMCODE = null;

								ICD10_Root.C_COMMENT = null;

								ICD10_Root.C_TOOLTIP = null;

								ICD10_Root.M_APPLIED_PATH = null;

								ICD10_Root.UPDATE_DATE = null;

								ICD10_Root.DOWNLOAD_DATE = null;

								ICD10_Root.IMPORT_DATE = null;

								ICD10_Root.SOURCESYSTEM_CD = null;

								ICD10_Root.VALUETYPE_CD = null;

								ICD10_Root.M_EXCLUSION_CD = null;

								ICD10_Root.C_PATH = null;

								ICD10_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_20 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_20 = 0;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.C_HLEVEL = null;
									}

								} else {
									ICD10_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 1;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_FULLNAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 2;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_NAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 3;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.C_SYNONYM_CD = null;
									}

								} else {
									ICD10_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 4;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 5;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_TOTALNUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 6;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_BASECODE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 7;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_METADATAXML = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 8;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 9;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_TABLENAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 10;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_COLUMNNAME = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 11;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									ICD10_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 12;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_OPERATOR = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 13;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_DIMCODE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 14;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_COMMENT = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 15;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_TOOLTIP = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 16;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										ICD10_Root.M_APPLIED_PATH = null;
									}

								} else {
									ICD10_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 17;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICD10_Root.UPDATE_DATE = null;
									}

								} else {
									ICD10_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 18;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICD10_Root.DOWNLOAD_DATE = null;
									}

								} else {
									ICD10_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 19;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										ICD10_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										ICD10_Root.IMPORT_DATE = null;
									}

								} else {
									ICD10_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 20;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 21;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.VALUETYPE_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 22;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.M_EXCLUSION_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 23;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_PATH = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 24;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									ICD10_Root.C_SYMBOL = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									ICD10_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_20 = true;

							System.err.println(e.getMessage());
							ICD10_Root = null;

						}

						/**
						 * [tFileInputDelimited_20 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_20 main ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						tos_count_tFileInputDelimited_20++;

						/**
						 * [tFileInputDelimited_20 main ] stop
						 */
						// Start of branch "ICD10_Root"
						if (ICD10_Root != null) {

							/**
							 * [tUnite_10 main ] start
							 */

							currentComponent = "tUnite_10";

							// ////////

							// for output
							tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

							tHashInput_tUnite_10_row44.C_HLEVEL = ICD10_Root.C_HLEVEL;
							tHashInput_tUnite_10_row44.C_FULLNAME = ICD10_Root.C_FULLNAME;
							tHashInput_tUnite_10_row44.C_NAME = ICD10_Root.C_NAME;
							tHashInput_tUnite_10_row44.C_SYNONYM_CD = ICD10_Root.C_SYNONYM_CD;
							tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES = ICD10_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_10_row44.C_TOTALNUM = ICD10_Root.C_TOTALNUM;
							tHashInput_tUnite_10_row44.C_BASECODE = ICD10_Root.C_BASECODE;
							tHashInput_tUnite_10_row44.C_METADATAXML = ICD10_Root.C_METADATAXML;
							tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN = ICD10_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_10_row44.C_TABLENAME = ICD10_Root.C_TABLENAME;
							tHashInput_tUnite_10_row44.C_COLUMNNAME = ICD10_Root.C_COLUMNNAME;
							tHashInput_tUnite_10_row44.C_COLUMNDATATYPE = ICD10_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_10_row44.C_OPERATOR = ICD10_Root.C_OPERATOR;
							tHashInput_tUnite_10_row44.C_DIMCODE = ICD10_Root.C_DIMCODE;
							tHashInput_tUnite_10_row44.C_COMMENT = ICD10_Root.C_COMMENT;
							tHashInput_tUnite_10_row44.C_TOOLTIP = ICD10_Root.C_TOOLTIP;
							tHashInput_tUnite_10_row44.M_APPLIED_PATH = ICD10_Root.M_APPLIED_PATH;
							tHashInput_tUnite_10_row44.UPDATE_DATE = ICD10_Root.UPDATE_DATE;
							tHashInput_tUnite_10_row44.DOWNLOAD_DATE = ICD10_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_10_row44.IMPORT_DATE = ICD10_Root.IMPORT_DATE;
							tHashInput_tUnite_10_row44.SOURCESYSTEM_CD = ICD10_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_10_row44.VALUETYPE_CD = ICD10_Root.VALUETYPE_CD;
							tHashInput_tUnite_10_row44.M_EXCLUSION_CD = ICD10_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_10_row44.C_PATH = ICD10_Root.C_PATH;
							tHashInput_tUnite_10_row44.C_SYMBOL = ICD10_Root.C_SYMBOL;

							nb_line_tUnite_10++;

							// ////////

							tos_count_tUnite_10++;

							/**
							 * [tUnite_10 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_10 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_10";

							tHashInput_tUnite_10_row44Struct oneRow_tHashOutput_tUnite_10 = new tHashInput_tUnite_10_row44Struct();

							oneRow_tHashOutput_tUnite_10.C_HLEVEL = tHashInput_tUnite_10_row44.C_HLEVEL;
							oneRow_tHashOutput_tUnite_10.C_FULLNAME = tHashInput_tUnite_10_row44.C_FULLNAME;
							oneRow_tHashOutput_tUnite_10.C_NAME = tHashInput_tUnite_10_row44.C_NAME;
							oneRow_tHashOutput_tUnite_10.C_SYNONYM_CD = tHashInput_tUnite_10_row44.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_10.C_VISUALATTRIBUTES = tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_10.C_TOTALNUM = tHashInput_tUnite_10_row44.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_10.C_BASECODE = tHashInput_tUnite_10_row44.C_BASECODE;
							oneRow_tHashOutput_tUnite_10.C_METADATAXML = tHashInput_tUnite_10_row44.C_METADATAXML;
							oneRow_tHashOutput_tUnite_10.C_FACTTABLECOLUMN = tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_10.C_TABLENAME = tHashInput_tUnite_10_row44.C_TABLENAME;
							oneRow_tHashOutput_tUnite_10.C_COLUMNNAME = tHashInput_tUnite_10_row44.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_10.C_COLUMNDATATYPE = tHashInput_tUnite_10_row44.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_10.C_OPERATOR = tHashInput_tUnite_10_row44.C_OPERATOR;
							oneRow_tHashOutput_tUnite_10.C_DIMCODE = tHashInput_tUnite_10_row44.C_DIMCODE;
							oneRow_tHashOutput_tUnite_10.C_COMMENT = tHashInput_tUnite_10_row44.C_COMMENT;
							oneRow_tHashOutput_tUnite_10.C_TOOLTIP = tHashInput_tUnite_10_row44.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_10.M_APPLIED_PATH = tHashInput_tUnite_10_row44.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_10.UPDATE_DATE = tHashInput_tUnite_10_row44.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_10.DOWNLOAD_DATE = tHashInput_tUnite_10_row44.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_10.IMPORT_DATE = tHashInput_tUnite_10_row44.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_10.SOURCESYSTEM_CD = tHashInput_tUnite_10_row44.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_10.VALUETYPE_CD = tHashInput_tUnite_10_row44.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_10.M_EXCLUSION_CD = tHashInput_tUnite_10_row44.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_10.C_PATH = tHashInput_tUnite_10_row44.C_PATH;
							oneRow_tHashOutput_tUnite_10.C_SYMBOL = tHashInput_tUnite_10_row44.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_10
									.put(oneRow_tHashOutput_tUnite_10);
							nb_line_tHashOutput_tUnite_10++;

							tos_count_tHashOutput_tUnite_10++;

							/**
							 * [tHashOutput_tUnite_10 main ] stop
							 */

						} // End of branch "ICD10_Root"

						/**
						 * [tFileInputDelimited_20 end ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						nb_line_tFileInputDelimited_20++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_20 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_20 != null) {
							csvReadertFileInputDelimited_20.close();
						}
					}
					if (csvReadertFileInputDelimited_20 != null) {
						globalMap.put("tFileInputDelimited_20_NB_LINE",
								nb_line_tFileInputDelimited_20);
					}
				}

				ok_Hash.put("tFileInputDelimited_20", true);
				end_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_20 end ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());
				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ICD10_FolderStruct ICD10_Folder_tmp = new ICD10_FolderStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_1 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_1
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_1());
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = context.icd10Dir
							+ "icd-folders.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_1)),
								"UTF-8");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("/icd/class",
											"/icd/class"));
					x_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("code", "/icd/class"));
					xTmp0_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
					org.dom4j.XPath xTmp1_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("label", "/icd/class"));
					xTmp1_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
					org.dom4j.XPath xTmp2_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("path", "/icd/class"));
					xTmp2_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
					org.dom4j.XPath xTmp3_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("level", "/icd/class"));
					xTmp3_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;
						row19 = null;
						boolean whetherReject_tFileInputXML_1 = false;
						row19 = new row19Struct();
						try {
							Object obj0_tFileInputXML_1 = xTmp0_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row19.code = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row19.code = null;
							} else {
								row19.code = str_tFileInputXML_1;
							}
							Object obj1_tFileInputXML_1 = xTmp1_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj1_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_1 instanceof String
									|| obj1_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj1_tFileInputXML_1);
							} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row19.label = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row19.label = null;
							} else {
								row19.label = str_tFileInputXML_1;
							}
							Object obj2_tFileInputXML_1 = xTmp2_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj2_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj2_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_1 instanceof String
									|| obj2_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj2_tFileInputXML_1);
							} else if (obj2_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row19.path = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row19.path = null;
							} else {
								row19.path = str_tFileInputXML_1;
							}
							Object obj3_tFileInputXML_1 = xTmp3_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj3_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj3_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_1 instanceof String
									|| obj3_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj3_tFileInputXML_1);
							} else if (obj3_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)
									|| xml_api_tFileInputXML_1
											.isEmpty(node_tFileInputXML_1)) {
								row19.level = 0;
							} else {
								row19.level = ParserUtils
										.parseTo_int(str_tFileInputXML_1);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							row19 = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */
						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */
						// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tMap_11 main ] start
							 */

							currentComponent = "tMap_11";

							boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_11 = false;
							boolean mainRowRejected_tMap_11 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
								// ###############################
								// # Output tables

								ICD10_Folder = null;

								// # Output table : 'ICD10_Folder'
								ICD10_Folder_tmp.C_HLEVEL = row19.level - 1;
								ICD10_Folder_tmp.C_FULLNAME = row19.path;
								ICD10_Folder_tmp.C_NAME = row19.code + " - "
										+ row19.label;
								ICD10_Folder_tmp.C_SYNONYM_CD = 'N';
								ICD10_Folder_tmp.C_VISUALATTRIBUTES = "FA";
								ICD10_Folder_tmp.C_TOTALNUM = null;
								ICD10_Folder_tmp.C_BASECODE = null;
								ICD10_Folder_tmp.C_METADATAXML = null;
								ICD10_Folder_tmp.C_FACTTABLECOLUMN = "concept_cd";
								ICD10_Folder_tmp.C_TABLENAME = "concept_dimension";
								ICD10_Folder_tmp.C_COLUMNNAME = "concept_path";
								ICD10_Folder_tmp.C_COLUMNDATATYPE = 'T';
								ICD10_Folder_tmp.C_OPERATOR = "LIKE";
								ICD10_Folder_tmp.C_DIMCODE = row19.path;
								ICD10_Folder_tmp.C_COMMENT = null;
								ICD10_Folder_tmp.C_TOOLTIP = row19.label;
								ICD10_Folder_tmp.M_APPLIED_PATH = '@';
								ICD10_Folder_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								ICD10_Folder_tmp.DOWNLOAD_DATE = null;
								ICD10_Folder_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								ICD10_Folder_tmp.SOURCESYSTEM_CD = "ICD-10-GM";
								ICD10_Folder_tmp.VALUETYPE_CD = null;
								ICD10_Folder_tmp.M_EXCLUSION_CD = null;
								ICD10_Folder_tmp.C_PATH = null;
								ICD10_Folder_tmp.C_SYMBOL = null;
								ICD10_Folder = ICD10_Folder_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_11 = false;

							tos_count_tMap_11++;

							/**
							 * [tMap_11 main ] stop
							 */
							// Start of branch "ICD10_Folder"
							if (ICD10_Folder != null) {

								/**
								 * [tUnite_10 main ] start
								 */

								currentComponent = "tUnite_10";

								// ////////

								// for output
								tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

								tHashInput_tUnite_10_row44.C_HLEVEL = ICD10_Folder.C_HLEVEL;
								tHashInput_tUnite_10_row44.C_FULLNAME = ICD10_Folder.C_FULLNAME;
								tHashInput_tUnite_10_row44.C_NAME = ICD10_Folder.C_NAME;
								tHashInput_tUnite_10_row44.C_SYNONYM_CD = ICD10_Folder.C_SYNONYM_CD;
								tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES = ICD10_Folder.C_VISUALATTRIBUTES;
								tHashInput_tUnite_10_row44.C_TOTALNUM = ICD10_Folder.C_TOTALNUM;
								tHashInput_tUnite_10_row44.C_BASECODE = ICD10_Folder.C_BASECODE;
								tHashInput_tUnite_10_row44.C_METADATAXML = ICD10_Folder.C_METADATAXML;
								tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN = ICD10_Folder.C_FACTTABLECOLUMN;
								tHashInput_tUnite_10_row44.C_TABLENAME = ICD10_Folder.C_TABLENAME;
								tHashInput_tUnite_10_row44.C_COLUMNNAME = ICD10_Folder.C_COLUMNNAME;
								tHashInput_tUnite_10_row44.C_COLUMNDATATYPE = ICD10_Folder.C_COLUMNDATATYPE;
								tHashInput_tUnite_10_row44.C_OPERATOR = ICD10_Folder.C_OPERATOR;
								tHashInput_tUnite_10_row44.C_DIMCODE = ICD10_Folder.C_DIMCODE;
								tHashInput_tUnite_10_row44.C_COMMENT = ICD10_Folder.C_COMMENT;
								tHashInput_tUnite_10_row44.C_TOOLTIP = ICD10_Folder.C_TOOLTIP;
								tHashInput_tUnite_10_row44.M_APPLIED_PATH = ICD10_Folder.M_APPLIED_PATH;
								tHashInput_tUnite_10_row44.UPDATE_DATE = ICD10_Folder.UPDATE_DATE;
								tHashInput_tUnite_10_row44.DOWNLOAD_DATE = ICD10_Folder.DOWNLOAD_DATE;
								tHashInput_tUnite_10_row44.IMPORT_DATE = ICD10_Folder.IMPORT_DATE;
								tHashInput_tUnite_10_row44.SOURCESYSTEM_CD = ICD10_Folder.SOURCESYSTEM_CD;
								tHashInput_tUnite_10_row44.VALUETYPE_CD = ICD10_Folder.VALUETYPE_CD;
								tHashInput_tUnite_10_row44.M_EXCLUSION_CD = ICD10_Folder.M_EXCLUSION_CD;
								tHashInput_tUnite_10_row44.C_PATH = ICD10_Folder.C_PATH;
								tHashInput_tUnite_10_row44.C_SYMBOL = ICD10_Folder.C_SYMBOL;

								nb_line_tUnite_10++;

								// ////////

								tos_count_tUnite_10++;

								/**
								 * [tUnite_10 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_10 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_10";

								tHashInput_tUnite_10_row44Struct oneRow_tHashOutput_tUnite_10 = new tHashInput_tUnite_10_row44Struct();

								oneRow_tHashOutput_tUnite_10.C_HLEVEL = tHashInput_tUnite_10_row44.C_HLEVEL;
								oneRow_tHashOutput_tUnite_10.C_FULLNAME = tHashInput_tUnite_10_row44.C_FULLNAME;
								oneRow_tHashOutput_tUnite_10.C_NAME = tHashInput_tUnite_10_row44.C_NAME;
								oneRow_tHashOutput_tUnite_10.C_SYNONYM_CD = tHashInput_tUnite_10_row44.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_10.C_VISUALATTRIBUTES = tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_10.C_TOTALNUM = tHashInput_tUnite_10_row44.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_10.C_BASECODE = tHashInput_tUnite_10_row44.C_BASECODE;
								oneRow_tHashOutput_tUnite_10.C_METADATAXML = tHashInput_tUnite_10_row44.C_METADATAXML;
								oneRow_tHashOutput_tUnite_10.C_FACTTABLECOLUMN = tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_10.C_TABLENAME = tHashInput_tUnite_10_row44.C_TABLENAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNNAME = tHashInput_tUnite_10_row44.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNDATATYPE = tHashInput_tUnite_10_row44.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_10.C_OPERATOR = tHashInput_tUnite_10_row44.C_OPERATOR;
								oneRow_tHashOutput_tUnite_10.C_DIMCODE = tHashInput_tUnite_10_row44.C_DIMCODE;
								oneRow_tHashOutput_tUnite_10.C_COMMENT = tHashInput_tUnite_10_row44.C_COMMENT;
								oneRow_tHashOutput_tUnite_10.C_TOOLTIP = tHashInput_tUnite_10_row44.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_10.M_APPLIED_PATH = tHashInput_tUnite_10_row44.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_10.UPDATE_DATE = tHashInput_tUnite_10_row44.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_10.DOWNLOAD_DATE = tHashInput_tUnite_10_row44.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_10.IMPORT_DATE = tHashInput_tUnite_10_row44.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_10.SOURCESYSTEM_CD = tHashInput_tUnite_10_row44.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_10.VALUETYPE_CD = tHashInput_tUnite_10_row44.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_10.M_EXCLUSION_CD = tHashInput_tUnite_10_row44.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_10.C_PATH = tHashInput_tUnite_10_row44.C_PATH;
								oneRow_tHashOutput_tUnite_10.C_SYMBOL = tHashInput_tUnite_10_row44.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_10
										.put(oneRow_tHashOutput_tUnite_10);
								nb_line_tHashOutput_tUnite_10++;

								tos_count_tHashOutput_tUnite_10++;

								/**
								 * [tHashOutput_tUnite_10 main ] stop
								 */

							} // End of branch "ICD10_Folder"

						} // End of branch "row19"

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tMap_16 begin ] start
				 */

				ok_Hash.put("tMap_16", false);
				start_Hash.put("tMap_16", System.currentTimeMillis());
				currentComponent = "tMap_16";

				int tos_count_tMap_16 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_16__Struct {
				}
				Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ICD10_LeafStruct ICD10_Leaf_tmp = new ICD10_LeafStruct();
				// ###############################

				/**
				 * [tMap_16 begin ] stop
				 */

				/**
				 * [tFileInputXML_7 begin ] start
				 */

				ok_Hash.put("tFileInputXML_7", false);
				start_Hash.put("tFileInputXML_7", System.currentTimeMillis());
				currentComponent = "tFileInputXML_7";

				int tos_count_tFileInputXML_7 = 0;

				int nb_line_tFileInputXML_7 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_7 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_7 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_7 = false;
				if (os_tFileInputXML_7.indexOf("windows") > -1
						|| os_tFileInputXML_7.indexOf("nt") > -1) {
					isWindows_tFileInputXML_7 = true;
				}
				class NameSpaceTool_tFileInputXML_7 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_7 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_7 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_7
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_7());
				Object filename_tFileInputXML_7 = null;
				try {
					filename_tFileInputXML_7 = context.icd10Dir
							+ "icd-leafs.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_7 != null
						&& filename_tFileInputXML_7 instanceof String
						&& filename_tFileInputXML_7.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_7) {
						filename_tFileInputXML_7 = filename_tFileInputXML_7
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_7 = true;
				org.dom4j.Document doc_tFileInputXML_7 = null;
				java.io.Closeable toClose_tFileInputXML_7 = null;
				try {
					if (filename_tFileInputXML_7 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_7 = (java.io.InputStream) filename_tFileInputXML_7;
						toClose_tFileInputXML_7 = inputStream_tFileInputXML_7;
						doc_tFileInputXML_7 = reader_tFileInputXML_7
								.read(inputStream_tFileInputXML_7);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_7 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_7)),
								"UTF-8");
						toClose_tFileInputXML_7 = unicodeReader_tFileInputXML_7;
						org.xml.sax.InputSource in_tFileInputXML_7 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_7);
						doc_tFileInputXML_7 = reader_tFileInputXML_7
								.read(in_tFileInputXML_7);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_7 = false;
				} finally {
					if (toClose_tFileInputXML_7 != null) {
						toClose_tFileInputXML_7.close();
					}
				}
				if (isValidFile_tFileInputXML_7) {
					NameSpaceTool_tFileInputXML_7 nsTool_tFileInputXML_7 = new NameSpaceTool_tFileInputXML_7();
					nsTool_tFileInputXML_7.countNSMap(doc_tFileInputXML_7
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_7 = nsTool_tFileInputXML_7.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_7 = doc_tFileInputXML_7
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("/icd/class",
											"/icd/class"));
					x_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_7 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_7
							.selectNodes(doc_tFileInputXML_7);
					XML_API_tFileInputXML_7 xml_api_tFileInputXML_7 = new XML_API_tFileInputXML_7();
					String str_tFileInputXML_7 = "";
					org.dom4j.Node node_tFileInputXML_7 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("code", "/icd/class"));
					xTmp0_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp1_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("label", "/icd/class"));
					xTmp1_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp2_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("path", "/icd/class"));
					xTmp2_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp3_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("level", "/icd/class"));
					xTmp3_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_7 : nodeList_tFileInputXML_7) {
						nb_line_tFileInputXML_7++;
						row5 = null;
						boolean whetherReject_tFileInputXML_7 = false;
						row5 = new row5Struct();
						try {
							Object obj0_tFileInputXML_7 = xTmp0_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj0_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj0_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj0_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_7 instanceof String
									|| obj0_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj0_tFileInputXML_7);
							} else if (obj0_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row5.code = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row5.code = null;
							} else {
								row5.code = str_tFileInputXML_7;
							}
							Object obj1_tFileInputXML_7 = xTmp1_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj1_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj1_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj1_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_7 instanceof String
									|| obj1_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj1_tFileInputXML_7);
							} else if (obj1_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row5.label = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row5.label = null;
							} else {
								row5.label = str_tFileInputXML_7;
							}
							Object obj2_tFileInputXML_7 = xTmp2_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj2_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj2_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj2_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_7 instanceof String
									|| obj2_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj2_tFileInputXML_7);
							} else if (obj2_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row5.path = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row5.path = null;
							} else {
								row5.path = str_tFileInputXML_7;
							}
							Object obj3_tFileInputXML_7 = xTmp3_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj3_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj3_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj3_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_7 instanceof String
									|| obj3_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj3_tFileInputXML_7);
							} else if (obj3_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)
									|| xml_api_tFileInputXML_7
											.isEmpty(node_tFileInputXML_7)) {
								row5.level = 0;
							} else {
								row5.level = ParserUtils
										.parseTo_int(str_tFileInputXML_7);
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_7 = true;
							System.err.println(e.getMessage());
							row5 = null;
						}

						/**
						 * [tFileInputXML_7 begin ] stop
						 */
						/**
						 * [tFileInputXML_7 main ] start
						 */

						currentComponent = "tFileInputXML_7";

						tos_count_tFileInputXML_7++;

						/**
						 * [tFileInputXML_7 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_16 main ] start
							 */

							currentComponent = "tMap_16";

							boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_16 = false;
							boolean mainRowRejected_tMap_16 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
								// ###############################
								// # Output tables

								ICD10_Leaf = null;

								// # Output table : 'ICD10_Leaf'
								ICD10_Leaf_tmp.C_HLEVEL = row5.level - 1;
								ICD10_Leaf_tmp.C_FULLNAME = row5.path
										+ "Wert\\";
								ICD10_Leaf_tmp.C_NAME = row5.code + " - "
										+ row5.label + " (Wert)";
								ICD10_Leaf_tmp.C_SYNONYM_CD = 'N';
								ICD10_Leaf_tmp.C_VISUALATTRIBUTES = "LA";
								ICD10_Leaf_tmp.C_TOTALNUM = null;
								ICD10_Leaf_tmp.C_BASECODE = "ST|ICD-10-GM:"
										+ row5.code;
								ICD10_Leaf_tmp.C_METADATAXML = null;
								ICD10_Leaf_tmp.C_FACTTABLECOLUMN = "concept_cd";
								ICD10_Leaf_tmp.C_TABLENAME = "concept_dimension";
								ICD10_Leaf_tmp.C_COLUMNNAME = "concept_path";
								ICD10_Leaf_tmp.C_COLUMNDATATYPE = 'T';
								ICD10_Leaf_tmp.C_OPERATOR = "LIKE";
								ICD10_Leaf_tmp.C_DIMCODE = row5.path;
								ICD10_Leaf_tmp.C_COMMENT = null;
								ICD10_Leaf_tmp.C_TOOLTIP = row5.label;
								ICD10_Leaf_tmp.M_APPLIED_PATH = '@';
								ICD10_Leaf_tmp.UPDATE_DATE = TalendDate
										.getCurrentDate();
								ICD10_Leaf_tmp.DOWNLOAD_DATE = null;
								ICD10_Leaf_tmp.IMPORT_DATE = TalendDate
										.getCurrentDate();
								ICD10_Leaf_tmp.SOURCESYSTEM_CD = "ICD-10-GM";
								ICD10_Leaf_tmp.VALUETYPE_CD = null;
								ICD10_Leaf_tmp.M_EXCLUSION_CD = null;
								ICD10_Leaf_tmp.C_PATH = null;
								ICD10_Leaf_tmp.C_SYMBOL = null;
								ICD10_Leaf = ICD10_Leaf_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_16 = false;

							tos_count_tMap_16++;

							/**
							 * [tMap_16 main ] stop
							 */
							// Start of branch "ICD10_Leaf"
							if (ICD10_Leaf != null) {

								/**
								 * [tUnite_10 main ] start
								 */

								currentComponent = "tUnite_10";

								// ////////

								// for output
								tHashInput_tUnite_10_row44 = new tHashInput_tUnite_10_row44Struct();

								tHashInput_tUnite_10_row44.C_HLEVEL = ICD10_Leaf.C_HLEVEL;
								tHashInput_tUnite_10_row44.C_FULLNAME = ICD10_Leaf.C_FULLNAME;
								tHashInput_tUnite_10_row44.C_NAME = ICD10_Leaf.C_NAME;
								tHashInput_tUnite_10_row44.C_SYNONYM_CD = ICD10_Leaf.C_SYNONYM_CD;
								tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES = ICD10_Leaf.C_VISUALATTRIBUTES;
								tHashInput_tUnite_10_row44.C_TOTALNUM = ICD10_Leaf.C_TOTALNUM;
								tHashInput_tUnite_10_row44.C_BASECODE = ICD10_Leaf.C_BASECODE;
								tHashInput_tUnite_10_row44.C_METADATAXML = ICD10_Leaf.C_METADATAXML;
								tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN = ICD10_Leaf.C_FACTTABLECOLUMN;
								tHashInput_tUnite_10_row44.C_TABLENAME = ICD10_Leaf.C_TABLENAME;
								tHashInput_tUnite_10_row44.C_COLUMNNAME = ICD10_Leaf.C_COLUMNNAME;
								tHashInput_tUnite_10_row44.C_COLUMNDATATYPE = ICD10_Leaf.C_COLUMNDATATYPE;
								tHashInput_tUnite_10_row44.C_OPERATOR = ICD10_Leaf.C_OPERATOR;
								tHashInput_tUnite_10_row44.C_DIMCODE = ICD10_Leaf.C_DIMCODE;
								tHashInput_tUnite_10_row44.C_COMMENT = ICD10_Leaf.C_COMMENT;
								tHashInput_tUnite_10_row44.C_TOOLTIP = ICD10_Leaf.C_TOOLTIP;
								tHashInput_tUnite_10_row44.M_APPLIED_PATH = ICD10_Leaf.M_APPLIED_PATH;
								tHashInput_tUnite_10_row44.UPDATE_DATE = ICD10_Leaf.UPDATE_DATE;
								tHashInput_tUnite_10_row44.DOWNLOAD_DATE = ICD10_Leaf.DOWNLOAD_DATE;
								tHashInput_tUnite_10_row44.IMPORT_DATE = ICD10_Leaf.IMPORT_DATE;
								tHashInput_tUnite_10_row44.SOURCESYSTEM_CD = ICD10_Leaf.SOURCESYSTEM_CD;
								tHashInput_tUnite_10_row44.VALUETYPE_CD = ICD10_Leaf.VALUETYPE_CD;
								tHashInput_tUnite_10_row44.M_EXCLUSION_CD = ICD10_Leaf.M_EXCLUSION_CD;
								tHashInput_tUnite_10_row44.C_PATH = ICD10_Leaf.C_PATH;
								tHashInput_tUnite_10_row44.C_SYMBOL = ICD10_Leaf.C_SYMBOL;

								nb_line_tUnite_10++;

								// ////////

								tos_count_tUnite_10++;

								/**
								 * [tUnite_10 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_10 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_10";

								tHashInput_tUnite_10_row44Struct oneRow_tHashOutput_tUnite_10 = new tHashInput_tUnite_10_row44Struct();

								oneRow_tHashOutput_tUnite_10.C_HLEVEL = tHashInput_tUnite_10_row44.C_HLEVEL;
								oneRow_tHashOutput_tUnite_10.C_FULLNAME = tHashInput_tUnite_10_row44.C_FULLNAME;
								oneRow_tHashOutput_tUnite_10.C_NAME = tHashInput_tUnite_10_row44.C_NAME;
								oneRow_tHashOutput_tUnite_10.C_SYNONYM_CD = tHashInput_tUnite_10_row44.C_SYNONYM_CD;
								oneRow_tHashOutput_tUnite_10.C_VISUALATTRIBUTES = tHashInput_tUnite_10_row44.C_VISUALATTRIBUTES;
								oneRow_tHashOutput_tUnite_10.C_TOTALNUM = tHashInput_tUnite_10_row44.C_TOTALNUM;
								oneRow_tHashOutput_tUnite_10.C_BASECODE = tHashInput_tUnite_10_row44.C_BASECODE;
								oneRow_tHashOutput_tUnite_10.C_METADATAXML = tHashInput_tUnite_10_row44.C_METADATAXML;
								oneRow_tHashOutput_tUnite_10.C_FACTTABLECOLUMN = tHashInput_tUnite_10_row44.C_FACTTABLECOLUMN;
								oneRow_tHashOutput_tUnite_10.C_TABLENAME = tHashInput_tUnite_10_row44.C_TABLENAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNNAME = tHashInput_tUnite_10_row44.C_COLUMNNAME;
								oneRow_tHashOutput_tUnite_10.C_COLUMNDATATYPE = tHashInput_tUnite_10_row44.C_COLUMNDATATYPE;
								oneRow_tHashOutput_tUnite_10.C_OPERATOR = tHashInput_tUnite_10_row44.C_OPERATOR;
								oneRow_tHashOutput_tUnite_10.C_DIMCODE = tHashInput_tUnite_10_row44.C_DIMCODE;
								oneRow_tHashOutput_tUnite_10.C_COMMENT = tHashInput_tUnite_10_row44.C_COMMENT;
								oneRow_tHashOutput_tUnite_10.C_TOOLTIP = tHashInput_tUnite_10_row44.C_TOOLTIP;
								oneRow_tHashOutput_tUnite_10.M_APPLIED_PATH = tHashInput_tUnite_10_row44.M_APPLIED_PATH;
								oneRow_tHashOutput_tUnite_10.UPDATE_DATE = tHashInput_tUnite_10_row44.UPDATE_DATE;
								oneRow_tHashOutput_tUnite_10.DOWNLOAD_DATE = tHashInput_tUnite_10_row44.DOWNLOAD_DATE;
								oneRow_tHashOutput_tUnite_10.IMPORT_DATE = tHashInput_tUnite_10_row44.IMPORT_DATE;
								oneRow_tHashOutput_tUnite_10.SOURCESYSTEM_CD = tHashInput_tUnite_10_row44.SOURCESYSTEM_CD;
								oneRow_tHashOutput_tUnite_10.VALUETYPE_CD = tHashInput_tUnite_10_row44.VALUETYPE_CD;
								oneRow_tHashOutput_tUnite_10.M_EXCLUSION_CD = tHashInput_tUnite_10_row44.M_EXCLUSION_CD;
								oneRow_tHashOutput_tUnite_10.C_PATH = tHashInput_tUnite_10_row44.C_PATH;
								oneRow_tHashOutput_tUnite_10.C_SYMBOL = tHashInput_tUnite_10_row44.C_SYMBOL;

								tHashFile_tHashOutput_tUnite_10
										.put(oneRow_tHashOutput_tUnite_10);
								nb_line_tHashOutput_tUnite_10++;

								tos_count_tHashOutput_tUnite_10++;

								/**
								 * [tHashOutput_tUnite_10 main ] stop
								 */

							} // End of branch "ICD10_Leaf"

						} // End of branch "row5"

						/**
						 * [tFileInputXML_7 end ] start
						 */

						currentComponent = "tFileInputXML_7";

					}
				}
				globalMap.put("tFileInputXML_7_NB_LINE",
						nb_line_tFileInputXML_7);

				ok_Hash.put("tFileInputXML_7", true);
				end_Hash.put("tFileInputXML_7", System.currentTimeMillis());

				/**
				 * [tFileInputXML_7 end ] stop
				 */

				/**
				 * [tMap_16 end ] start
				 */

				currentComponent = "tMap_16";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_16", true);
				end_Hash.put("tMap_16", System.currentTimeMillis());

				/**
				 * [tMap_16 end ] stop
				 */

				/**
				 * [tUnite_10 end ] start
				 */

				currentComponent = "tUnite_10";

				globalMap.put("tUnite_10_NB_LINE", nb_line_tUnite_10);

				ok_Hash.put("tUnite_10", true);
				end_Hash.put("tUnite_10", System.currentTimeMillis());

				/**
				 * [tUnite_10 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_10 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_10";

				globalMap.put("tHashOutput_tUnite_10_NB_LINE",
						nb_line_tHashOutput_tUnite_10);

				ok_Hash.put("tHashOutput_tUnite_10", true);
				end_Hash.put("tHashOutput_tUnite_10",
						System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_9_row41Struct implements
			routines.system.IPersistableRow<tHashInput_tUnite_9_row41Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_9_row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class P21_RootStruct implements
			routines.system.IPersistableRow<P21_RootStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(P21_RootStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				P21_RootStruct P21_Root = new P21_RootStruct();

				tHashInput_tUnite_9_row41Struct tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

				/**
				 * [tHashOutput_tUnite_9 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_9", false);
				start_Hash.put("tHashOutput_tUnite_9",
						System.currentTimeMillis());
				currentComponent = "tHashOutput_tUnite_9";

				int tos_count_tHashOutput_tUnite_9 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_9 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_9_row41Struct> tHashFile_tHashOutput_tUnite_9 = null;
				if ((tHashFile_tHashOutput_tUnite_9 = mf_tHashOutput_tUnite_9
						.getResourceMap().get(
								"tHashFile_IDRT_STDTERM_" + pid
										+ "_tHashOutput_tUnite_9")) == null) {
					tHashFile_tHashOutput_tUnite_9 = new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_9_row41Struct>(
							org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL);
				}
				// use this ResourceMap instead of globalMap,so that globalMap
				// will not be too large
				mf_tHashOutput_tUnite_9.getResourceMap().put(
						"tHashFile_IDRT_STDTERM_" + pid
								+ "_tHashOutput_tUnite_9",
						tHashFile_tHashOutput_tUnite_9);
				int nb_line_tHashOutput_tUnite_9 = 0;

				/**
				 * [tHashOutput_tUnite_9 begin ] stop
				 */

				/**
				 * [tUnite_9 begin ] start
				 */

				ok_Hash.put("tUnite_9", false);
				start_Hash.put("tUnite_9", System.currentTimeMillis());
				currentComponent = "tUnite_9";

				int tos_count_tUnite_9 = 0;

				int nb_line_tUnite_9 = 0;

				/**
				 * [tUnite_9 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\r\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\r\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				context.p21Dir + "root_P21.csv"/**
				 * End field
				 * tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						P21_Root = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						P21_Root = new P21_RootStruct();
						try {

							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								P21_Root.C_HLEVEL = null;

								P21_Root.C_FULLNAME = null;

								P21_Root.C_NAME = null;

								P21_Root.C_SYNONYM_CD = null;

								P21_Root.C_VISUALATTRIBUTES = null;

								P21_Root.C_TOTALNUM = null;

								P21_Root.C_BASECODE = null;

								P21_Root.C_METADATAXML = null;

								P21_Root.C_FACTTABLECOLUMN = null;

								P21_Root.C_TABLENAME = null;

								P21_Root.C_COLUMNNAME = null;

								P21_Root.C_COLUMNDATATYPE = null;

								P21_Root.C_OPERATOR = null;

								P21_Root.C_DIMCODE = null;

								P21_Root.C_COMMENT = null;

								P21_Root.C_TOOLTIP = null;

								P21_Root.M_APPLIED_PATH = null;

								P21_Root.UPDATE_DATE = null;

								P21_Root.DOWNLOAD_DATE = null;

								P21_Root.IMPORT_DATE = null;

								P21_Root.SOURCESYSTEM_CD = null;

								P21_Root.VALUETYPE_CD = null;

								P21_Root.M_EXCLUSION_CD = null;

								P21_Root.C_PATH = null;

								P21_Root.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.C_HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.C_HLEVEL = null;
									}

								} else {
									P21_Root.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_FULLNAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_NAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.C_SYNONYM_CD = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.C_SYNONYM_CD = null;
									}

								} else {
									P21_Root.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_VISUALATTRIBUTES = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_TOTALNUM = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_BASECODE = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_METADATAXML = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_FACTTABLECOLUMN = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 9;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_TABLENAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 10;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_COLUMNNAME = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 11;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.C_COLUMNDATATYPE = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.C_COLUMNDATATYPE = null;
									}

								} else {
									P21_Root.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 12;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_OPERATOR = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 13;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_DIMCODE = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 14;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_COMMENT = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 15;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_TOOLTIP = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 16;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.M_APPLIED_PATH = ParserUtils
												.parseTo_Character(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										P21_Root.M_APPLIED_PATH = null;
									}

								} else {
									P21_Root.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 17;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										P21_Root.UPDATE_DATE = null;
									}

								} else {
									P21_Root.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 18;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										P21_Root.DOWNLOAD_DATE = null;
									}

								} else {
									P21_Root.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 19;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										P21_Root.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd HH:mm:ss");

									} else {
										P21_Root.IMPORT_DATE = null;
									}

								} else {
									P21_Root.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 20;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.SOURCESYSTEM_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 21;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.VALUETYPE_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 22;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.M_EXCLUSION_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 23;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_PATH = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 24;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									P21_Root.C_SYMBOL = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									P21_Root.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							P21_Root = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "P21_Root"
						if (P21_Root != null) {

							/**
							 * [tUnite_9 main ] start
							 */

							currentComponent = "tUnite_9";

							// ////////

							// for output
							tHashInput_tUnite_9_row41 = new tHashInput_tUnite_9_row41Struct();

							tHashInput_tUnite_9_row41.C_HLEVEL = P21_Root.C_HLEVEL;
							tHashInput_tUnite_9_row41.C_FULLNAME = P21_Root.C_FULLNAME;
							tHashInput_tUnite_9_row41.C_NAME = P21_Root.C_NAME;
							tHashInput_tUnite_9_row41.C_SYNONYM_CD = P21_Root.C_SYNONYM_CD;
							tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES = P21_Root.C_VISUALATTRIBUTES;
							tHashInput_tUnite_9_row41.C_TOTALNUM = P21_Root.C_TOTALNUM;
							tHashInput_tUnite_9_row41.C_BASECODE = P21_Root.C_BASECODE;
							tHashInput_tUnite_9_row41.C_METADATAXML = P21_Root.C_METADATAXML;
							tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN = P21_Root.C_FACTTABLECOLUMN;
							tHashInput_tUnite_9_row41.C_TABLENAME = P21_Root.C_TABLENAME;
							tHashInput_tUnite_9_row41.C_COLUMNNAME = P21_Root.C_COLUMNNAME;
							tHashInput_tUnite_9_row41.C_COLUMNDATATYPE = P21_Root.C_COLUMNDATATYPE;
							tHashInput_tUnite_9_row41.C_OPERATOR = P21_Root.C_OPERATOR;
							tHashInput_tUnite_9_row41.C_DIMCODE = P21_Root.C_DIMCODE;
							tHashInput_tUnite_9_row41.C_COMMENT = P21_Root.C_COMMENT;
							tHashInput_tUnite_9_row41.C_TOOLTIP = P21_Root.C_TOOLTIP;
							tHashInput_tUnite_9_row41.M_APPLIED_PATH = P21_Root.M_APPLIED_PATH;
							tHashInput_tUnite_9_row41.UPDATE_DATE = P21_Root.UPDATE_DATE;
							tHashInput_tUnite_9_row41.DOWNLOAD_DATE = P21_Root.DOWNLOAD_DATE;
							tHashInput_tUnite_9_row41.IMPORT_DATE = P21_Root.IMPORT_DATE;
							tHashInput_tUnite_9_row41.SOURCESYSTEM_CD = P21_Root.SOURCESYSTEM_CD;
							tHashInput_tUnite_9_row41.VALUETYPE_CD = P21_Root.VALUETYPE_CD;
							tHashInput_tUnite_9_row41.M_EXCLUSION_CD = P21_Root.M_EXCLUSION_CD;
							tHashInput_tUnite_9_row41.C_PATH = P21_Root.C_PATH;
							tHashInput_tUnite_9_row41.C_SYMBOL = P21_Root.C_SYMBOL;

							nb_line_tUnite_9++;

							// ////////

							tos_count_tUnite_9++;

							/**
							 * [tUnite_9 main ] stop
							 */

							/**
							 * [tHashOutput_tUnite_9 main ] start
							 */

							currentComponent = "tHashOutput_tUnite_9";

							tHashInput_tUnite_9_row41Struct oneRow_tHashOutput_tUnite_9 = new tHashInput_tUnite_9_row41Struct();

							oneRow_tHashOutput_tUnite_9.C_HLEVEL = tHashInput_tUnite_9_row41.C_HLEVEL;
							oneRow_tHashOutput_tUnite_9.C_FULLNAME = tHashInput_tUnite_9_row41.C_FULLNAME;
							oneRow_tHashOutput_tUnite_9.C_NAME = tHashInput_tUnite_9_row41.C_NAME;
							oneRow_tHashOutput_tUnite_9.C_SYNONYM_CD = tHashInput_tUnite_9_row41.C_SYNONYM_CD;
							oneRow_tHashOutput_tUnite_9.C_VISUALATTRIBUTES = tHashInput_tUnite_9_row41.C_VISUALATTRIBUTES;
							oneRow_tHashOutput_tUnite_9.C_TOTALNUM = tHashInput_tUnite_9_row41.C_TOTALNUM;
							oneRow_tHashOutput_tUnite_9.C_BASECODE = tHashInput_tUnite_9_row41.C_BASECODE;
							oneRow_tHashOutput_tUnite_9.C_METADATAXML = tHashInput_tUnite_9_row41.C_METADATAXML;
							oneRow_tHashOutput_tUnite_9.C_FACTTABLECOLUMN = tHashInput_tUnite_9_row41.C_FACTTABLECOLUMN;
							oneRow_tHashOutput_tUnite_9.C_TABLENAME = tHashInput_tUnite_9_row41.C_TABLENAME;
							oneRow_tHashOutput_tUnite_9.C_COLUMNNAME = tHashInput_tUnite_9_row41.C_COLUMNNAME;
							oneRow_tHashOutput_tUnite_9.C_COLUMNDATATYPE = tHashInput_tUnite_9_row41.C_COLUMNDATATYPE;
							oneRow_tHashOutput_tUnite_9.C_OPERATOR = tHashInput_tUnite_9_row41.C_OPERATOR;
							oneRow_tHashOutput_tUnite_9.C_DIMCODE = tHashInput_tUnite_9_row41.C_DIMCODE;
							oneRow_tHashOutput_tUnite_9.C_COMMENT = tHashInput_tUnite_9_row41.C_COMMENT;
							oneRow_tHashOutput_tUnite_9.C_TOOLTIP = tHashInput_tUnite_9_row41.C_TOOLTIP;
							oneRow_tHashOutput_tUnite_9.M_APPLIED_PATH = tHashInput_tUnite_9_row41.M_APPLIED_PATH;
							oneRow_tHashOutput_tUnite_9.UPDATE_DATE = tHashInput_tUnite_9_row41.UPDATE_DATE;
							oneRow_tHashOutput_tUnite_9.DOWNLOAD_DATE = tHashInput_tUnite_9_row41.DOWNLOAD_DATE;
							oneRow_tHashOutput_tUnite_9.IMPORT_DATE = tHashInput_tUnite_9_row41.IMPORT_DATE;
							oneRow_tHashOutput_tUnite_9.SOURCESYSTEM_CD = tHashInput_tUnite_9_row41.SOURCESYSTEM_CD;
							oneRow_tHashOutput_tUnite_9.VALUETYPE_CD = tHashInput_tUnite_9_row41.VALUETYPE_CD;
							oneRow_tHashOutput_tUnite_9.M_EXCLUSION_CD = tHashInput_tUnite_9_row41.M_EXCLUSION_CD;
							oneRow_tHashOutput_tUnite_9.C_PATH = tHashInput_tUnite_9_row41.C_PATH;
							oneRow_tHashOutput_tUnite_9.C_SYMBOL = tHashInput_tUnite_9_row41.C_SYMBOL;

							tHashFile_tHashOutput_tUnite_9
									.put(oneRow_tHashOutput_tUnite_9);
							nb_line_tHashOutput_tUnite_9++;

							tos_count_tHashOutput_tUnite_9++;

							/**
							 * [tHashOutput_tUnite_9 main ] stop
							 */

						} // End of branch "P21_Root"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */
				/**
				 * [tUnite_9 end ] start
				 */

				currentComponent = "tUnite_9";

				globalMap.put("tUnite_9_NB_LINE", nb_line_tUnite_9);

				ok_Hash.put("tUnite_9", true);
				end_Hash.put("tUnite_9", System.currentTimeMillis());

				/**
				 * [tUnite_9 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_9 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_9";

				globalMap.put("tHashOutput_tUnite_9_NB_LINE",
						nb_line_tHashOutput_tUnite_9);

				ok_Hash.put("tHashOutput_tUnite_9", true);
				end_Hash.put("tHashOutput_tUnite_9", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public Integer C_HLEVEL;

		public Integer getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public Character C_SYNONYM_CD;

		public Character getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public String C_TOTALNUM;

		public String getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public Character C_COLUMNDATATYPE;

		public Character getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public Character M_APPLIED_PATH;

		public Character getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_STDTERM.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_STDTERM.length == 0) {
						commonByteArray_TOS_IDRT_STDTERM = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_STDTERM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_STDTERM, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_STDTERM, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

					this.C_HLEVEL = readInteger(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_SYNONYM_CD = null;
					} else {
						this.C_SYNONYM_CD = dis.readChar();
					}

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readString(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.C_COLUMNDATATYPE = null;
					} else {
						this.C_COLUMNDATATYPE = dis.readChar();
					}

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.M_APPLIED_PATH = null;
					} else {
						this.M_APPLIED_PATH = dis.readChar();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// Character

				if (this.C_SYNONYM_CD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_SYNONYM_CD);
				}

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// String

				writeString(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// Character

				if (this.C_COLUMNDATATYPE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.C_COLUMNDATATYPE);
				}

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// Character

				if (this.M_APPLIED_PATH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.M_APPLIED_PATH);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + String.valueOf(C_SYNONYM_CD));
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + C_TOTALNUM);
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + String.valueOf(C_COLUMNDATATYPE));
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + String.valueOf(M_APPLIED_PATH));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_10_RunAfterStruct
			implements
			routines.system.IPersistableRow<tHashInput_tUnite_10_RunAfterStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_10_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_1_RunAfterStruct implements
			routines.system.IPersistableRow<tHashInput_tUnite_1_RunAfterStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_STDTERM = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_STDTERM = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_STDTERM) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_tUnite_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_20Process(globalMap);
				tFileInputDelimited_2Process(globalMap);

				row3Struct row3 = new row3Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tOracleOutput_1 begin ] start
				 */

				ok_Hash.put("tOracleOutput_1", false);
				start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
				currentComponent = "tOracleOutput_1";

				int tos_count_tOracleOutput_1 = 0;

				int nb_line_tOracleOutput_1 = 0;
				int nb_line_update_tOracleOutput_1 = 0;
				int nb_line_inserted_tOracleOutput_1 = 0;
				int nb_line_deleted_tOracleOutput_1 = 0;
				int nb_line_rejected_tOracleOutput_1 = 0;

				int tmp_batchUpdateCount_tOracleOutput_1 = 0;

				int deletedCount_tOracleOutput_1 = 0;
				int updatedCount_tOracleOutput_1 = 0;
				int insertedCount_tOracleOutput_1 = 0;
				int rejectedCount_tOracleOutput_1 = 0;

				boolean whetherReject_tOracleOutput_1 = false;

				java.sql.Connection conn_tOracleOutput_1 = null;

				// optional table
				String dbschema_tOracleOutput_1 = null;
				String tableName_tOracleOutput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_1) {
					conn_tOracleOutput_1 = dataSources_tOracleOutput_1.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.driver.OracleDriver");

					String url_tOracleOutput_1 = null;
					url_tOracleOutput_1 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_1 = context.DBUsername;
					String dbPwd_tOracleOutput_1 = context.DBPassword;
					dbschema_tOracleOutput_1 = context.DBSchema;

					conn_tOracleOutput_1 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_1,
									dbUser_tOracleOutput_1,
									dbPwd_tOracleOutput_1);
				}
				conn_tOracleOutput_1.setAutoCommit(false);
				int commitEvery_tOracleOutput_1 = 50000;
				int commitCounter_tOracleOutput_1 = 0;

				int count_tOracleOutput_1 = 0;

				if (dbschema_tOracleOutput_1 == null
						|| dbschema_tOracleOutput_1.trim().length() == 0) {
					tableName_tOracleOutput_1 = "I2B2";
				} else {
					tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "."
							+ "I2B2";
				}
				String insert_tOracleOutput_1 = "INSERT INTO "
						+ tableName_tOracleOutput_1
						+ " (C_HLEVEL,C_FULLNAME,C_NAME,C_SYNONYM_CD,C_VISUALATTRIBUTES,C_TOTALNUM,C_BASECODE,C_METADATAXML,C_FACTTABLECOLUMN,C_TABLENAME,C_COLUMNNAME,C_COLUMNDATATYPE,C_OPERATOR,C_DIMCODE,C_COMMENT,C_TOOLTIP,M_APPLIED_PATH,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_EXCLUSION_CD,C_PATH,C_SYMBOL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1
						.prepareStatement(insert_tOracleOutput_1);

				StringBuffer query_tOracleOutput_1 = null;

				String[] insertSQLSplits_tOracleOutput_1 = insert_tOracleOutput_1
						.split("\\?");

				/**
				 * [tOracleOutput_1 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());
				currentComponent = "tConvertType_1";

				int tos_count_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_1", false);
				start_Hash.put("tHashInput_tUnite_1",
						System.currentTimeMillis());
				currentComponent = "tHashInput_tUnite_1";

				int tos_count_tHashInput_tUnite_1 = 0;

				int nb_line_tHashInput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row3Struct> tHashFile_tHashInput_tUnite_1 = mf_tHashInput_tUnite_1
						.getAdvancedMemoryHashFile("tHashFile_IDRT_STDTERM_"
								+ pid + "_tHashOutput_tUnite_1");
				if (tHashFile_tHashInput_tUnite_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_1_row3Struct> iterator_tHashInput_tUnite_1 = tHashFile_tHashInput_tUnite_1
						.iterator();
				while (iterator_tHashInput_tUnite_1.hasNext()) {
					tHashInput_tUnite_1_row3Struct next_tHashInput_tUnite_1 = iterator_tHashInput_tUnite_1
							.next();

					row3.C_HLEVEL = next_tHashInput_tUnite_1.C_HLEVEL;
					row3.C_FULLNAME = next_tHashInput_tUnite_1.C_FULLNAME;
					row3.C_NAME = next_tHashInput_tUnite_1.C_NAME;
					row3.C_SYNONYM_CD = next_tHashInput_tUnite_1.C_SYNONYM_CD;
					row3.C_VISUALATTRIBUTES = next_tHashInput_tUnite_1.C_VISUALATTRIBUTES;
					row3.C_TOTALNUM = next_tHashInput_tUnite_1.C_TOTALNUM;
					row3.C_BASECODE = next_tHashInput_tUnite_1.C_BASECODE;
					row3.C_METADATAXML = next_tHashInput_tUnite_1.C_METADATAXML;
					row3.C_FACTTABLECOLUMN = next_tHashInput_tUnite_1.C_FACTTABLECOLUMN;
					row3.C_TABLENAME = next_tHashInput_tUnite_1.C_TABLENAME;
					row3.C_COLUMNNAME = next_tHashInput_tUnite_1.C_COLUMNNAME;
					row3.C_COLUMNDATATYPE = next_tHashInput_tUnite_1.C_COLUMNDATATYPE;
					row3.C_OPERATOR = next_tHashInput_tUnite_1.C_OPERATOR;
					row3.C_DIMCODE = next_tHashInput_tUnite_1.C_DIMCODE;
					row3.C_COMMENT = next_tHashInput_tUnite_1.C_COMMENT;
					row3.C_TOOLTIP = next_tHashInput_tUnite_1.C_TOOLTIP;
					row3.M_APPLIED_PATH = next_tHashInput_tUnite_1.M_APPLIED_PATH;
					row3.UPDATE_DATE = next_tHashInput_tUnite_1.UPDATE_DATE;
					row3.DOWNLOAD_DATE = next_tHashInput_tUnite_1.DOWNLOAD_DATE;
					row3.IMPORT_DATE = next_tHashInput_tUnite_1.IMPORT_DATE;
					row3.SOURCESYSTEM_CD = next_tHashInput_tUnite_1.SOURCESYSTEM_CD;
					row3.VALUETYPE_CD = next_tHashInput_tUnite_1.VALUETYPE_CD;
					row3.M_EXCLUSION_CD = next_tHashInput_tUnite_1.M_EXCLUSION_CD;
					row3.C_PATH = next_tHashInput_tUnite_1.C_PATH;
					row3.C_SYMBOL = next_tHashInput_tUnite_1.C_SYMBOL;

					/**
					 * [tHashInput_tUnite_1 begin ] stop
					 */
					/**
					 * [tHashInput_tUnite_1 main ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					tos_count_tHashInput_tUnite_1++;

					/**
					 * [tHashInput_tUnite_1 main ] stop
					 */

					/**
					 * [tConvertType_1 main ] start
					 */

					currentComponent = "tConvertType_1";

					row6 = new row6Struct();
					boolean bHasError_tConvertType_1 = false;
					try {
						row6.C_HLEVEL = TypeConvert
								.Integer2Integer(row3.C_HLEVEL);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_FULLNAME = TypeConvert
								.String2String(row3.C_FULLNAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_NAME = TypeConvert.String2String(row3.C_NAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_SYNONYM_CD = TypeConvert
								.Character2Character(row3.C_SYNONYM_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_VISUALATTRIBUTES = TypeConvert
								.String2String(row3.C_VISUALATTRIBUTES);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_TOTALNUM = TypeConvert
								.String2String(row3.C_TOTALNUM);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_BASECODE = TypeConvert
								.String2String(row3.C_BASECODE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_METADATAXML = TypeConvert
								.String2String(row3.C_METADATAXML);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_FACTTABLECOLUMN = TypeConvert
								.String2String(row3.C_FACTTABLECOLUMN);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_TABLENAME = TypeConvert
								.String2String(row3.C_TABLENAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_COLUMNNAME = TypeConvert
								.String2String(row3.C_COLUMNNAME);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_COLUMNDATATYPE = TypeConvert
								.Character2Character(row3.C_COLUMNDATATYPE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_OPERATOR = TypeConvert
								.String2String(row3.C_OPERATOR);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_DIMCODE = TypeConvert
								.String2String(row3.C_DIMCODE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_COMMENT = TypeConvert
								.String2String(row3.C_COMMENT);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_TOOLTIP = TypeConvert
								.String2String(row3.C_TOOLTIP);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.M_APPLIED_PATH = TypeConvert
								.Character2Character(row3.M_APPLIED_PATH);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.UPDATE_DATE = TypeConvert
								.Date2Date(row3.UPDATE_DATE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.DOWNLOAD_DATE = TypeConvert
								.Date2Date(row3.DOWNLOAD_DATE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.IMPORT_DATE = TypeConvert
								.Date2Date(row3.IMPORT_DATE);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.SOURCESYSTEM_CD = TypeConvert
								.String2String(row3.SOURCESYSTEM_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.VALUETYPE_CD = TypeConvert
								.String2String(row3.VALUETYPE_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.M_EXCLUSION_CD = TypeConvert
								.String2String(row3.M_EXCLUSION_CD);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_PATH = TypeConvert.String2String(row3.C_PATH);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					try {
						row6.C_SYMBOL = TypeConvert
								.String2String(row3.C_SYMBOL);
					} catch (java.lang.Exception e) {
						bHasError_tConvertType_1 = true;
						System.err.println(e.getMessage());
					}
					if (bHasError_tConvertType_1) {
						row6 = null;
					}

					tos_count_tConvertType_1++;

					/**
					 * [tConvertType_1 main ] stop
					 */
					// Start of branch "row6"
					if (row6 != null) {

						/**
						 * [tOracleOutput_1 main ] start
						 */

						currentComponent = "tOracleOutput_1";

						query_tOracleOutput_1 = new StringBuffer("");
						whetherReject_tOracleOutput_1 = false;
						if (row6.C_HLEVEL == null) {
							pstmt_tOracleOutput_1.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tOracleOutput_1.setInt(1, row6.C_HLEVEL);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1
								.append(insertSQLSplits_tOracleOutput_1[0])
								.append(row6.C_HLEVEL == null ? "null" : String
										.valueOf(row6.C_HLEVEL))
								.append(insertSQLSplits_tOracleOutput_1[1]);
						if (row6.C_FULLNAME == null) {
							pstmt_tOracleOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(2, row6.C_FULLNAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_FULLNAME == null ? "null" : "'"
										+ row6.C_FULLNAME + "'").append(
								insertSQLSplits_tOracleOutput_1[2]);
						if (row6.C_NAME == null) {
							pstmt_tOracleOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(3, row6.C_NAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_NAME == null ? "null" : "'"
										+ row6.C_NAME + "'").append(
								insertSQLSplits_tOracleOutput_1[3]);
						if (row6.C_SYNONYM_CD == null) {
							pstmt_tOracleOutput_1.setNull(4,
									java.sql.Types.CHAR);
						} else {
							if (row6.C_SYNONYM_CD == null) {
								pstmt_tOracleOutput_1.setNull(4,
										java.sql.Types.CHAR);
							} else if (row6.C_SYNONYM_CD == ' ') {
								pstmt_tOracleOutput_1.setString(4, "");
							} else {
								pstmt_tOracleOutput_1.setString(4,
										String.valueOf(row6.C_SYNONYM_CD));
							}
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_SYNONYM_CD == null ? "null" : "'"
										+ String.valueOf(row6.C_SYNONYM_CD)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[4]);
						if (row6.C_VISUALATTRIBUTES == null) {
							pstmt_tOracleOutput_1.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(5,
									row6.C_VISUALATTRIBUTES);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_VISUALATTRIBUTES == null ? "null" : "'"
										+ row6.C_VISUALATTRIBUTES + "'")
								.append(insertSQLSplits_tOracleOutput_1[5]);
						if (row6.C_TOTALNUM == null) {
							pstmt_tOracleOutput_1.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(6, row6.C_TOTALNUM);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_TOTALNUM == null ? "null" : "'"
										+ row6.C_TOTALNUM + "'").append(
								insertSQLSplits_tOracleOutput_1[6]);
						if (row6.C_BASECODE == null) {
							pstmt_tOracleOutput_1.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(7, row6.C_BASECODE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_BASECODE == null ? "null" : "'"
										+ row6.C_BASECODE + "'").append(
								insertSQLSplits_tOracleOutput_1[7]);
						if (row6.C_METADATAXML == null) {
							pstmt_tOracleOutput_1.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(8,
									row6.C_METADATAXML);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_METADATAXML == null ? "null" : "'"
										+ row6.C_METADATAXML + "'").append(
								insertSQLSplits_tOracleOutput_1[8]);
						if (row6.C_FACTTABLECOLUMN == null) {
							pstmt_tOracleOutput_1.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(9,
									row6.C_FACTTABLECOLUMN);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_FACTTABLECOLUMN == null ? "null" : "'"
										+ row6.C_FACTTABLECOLUMN + "'").append(
								insertSQLSplits_tOracleOutput_1[9]);
						if (row6.C_TABLENAME == null) {
							pstmt_tOracleOutput_1.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(10,
									row6.C_TABLENAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_TABLENAME == null ? "null" : "'"
										+ row6.C_TABLENAME + "'").append(
								insertSQLSplits_tOracleOutput_1[10]);
						if (row6.C_COLUMNNAME == null) {
							pstmt_tOracleOutput_1.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(11,
									row6.C_COLUMNNAME);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_COLUMNNAME == null ? "null" : "'"
										+ row6.C_COLUMNNAME + "'").append(
								insertSQLSplits_tOracleOutput_1[11]);
						if (row6.C_COLUMNDATATYPE == null) {
							pstmt_tOracleOutput_1.setNull(12,
									java.sql.Types.CHAR);
						} else {
							if (row6.C_COLUMNDATATYPE == null) {
								pstmt_tOracleOutput_1.setNull(12,
										java.sql.Types.CHAR);
							} else if (row6.C_COLUMNDATATYPE == ' ') {
								pstmt_tOracleOutput_1.setString(12, "");
							} else {
								pstmt_tOracleOutput_1.setString(12,
										String.valueOf(row6.C_COLUMNDATATYPE));
							}
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_COLUMNDATATYPE == null ? "null" : "'"
										+ String.valueOf(row6.C_COLUMNDATATYPE)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[12]);
						if (row6.C_OPERATOR == null) {
							pstmt_tOracleOutput_1.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1
									.setString(13, row6.C_OPERATOR);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_OPERATOR == null ? "null" : "'"
										+ row6.C_OPERATOR + "'").append(
								insertSQLSplits_tOracleOutput_1[13]);
						if (row6.C_DIMCODE == null) {
							pstmt_tOracleOutput_1.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(14, row6.C_DIMCODE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_DIMCODE == null ? "null" : "'"
										+ row6.C_DIMCODE + "'").append(
								insertSQLSplits_tOracleOutput_1[14]);
						if (row6.C_COMMENT == null) {
							pstmt_tOracleOutput_1.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(15, row6.C_COMMENT);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_COMMENT == null ? "null" : "'"
										+ row6.C_COMMENT + "'").append(
								insertSQLSplits_tOracleOutput_1[15]);
						if (row6.C_TOOLTIP == null) {
							pstmt_tOracleOutput_1.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(16, row6.C_TOOLTIP);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_TOOLTIP == null ? "null" : "'"
										+ row6.C_TOOLTIP + "'").append(
								insertSQLSplits_tOracleOutput_1[16]);
						if (row6.M_APPLIED_PATH == null) {
							pstmt_tOracleOutput_1.setNull(17,
									java.sql.Types.CHAR);
						} else {
							if (row6.M_APPLIED_PATH == null) {
								pstmt_tOracleOutput_1.setNull(17,
										java.sql.Types.CHAR);
							} else if (row6.M_APPLIED_PATH == ' ') {
								pstmt_tOracleOutput_1.setString(17, "");
							} else {
								pstmt_tOracleOutput_1.setString(17,
										String.valueOf(row6.M_APPLIED_PATH));
							}
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.M_APPLIED_PATH == null ? "null" : "'"
										+ String.valueOf(row6.M_APPLIED_PATH)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[17]);
						if (row6.UPDATE_DATE != null) {
							pstmt_tOracleOutput_1.setObject(
									18,
									new java.sql.Timestamp(row6.UPDATE_DATE
											.getTime()), java.sql.Types.DATE);
						} else {
							pstmt_tOracleOutput_1.setNull(18,
									java.sql.Types.DATE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1
								.append(row6.UPDATE_DATE == null ? "null" : "'"
										+ new java.text.SimpleDateFormat(
												"yyyy-MM-dd HH:mm:ss")
												.format(row6.UPDATE_DATE) + "'")
								.append(insertSQLSplits_tOracleOutput_1[18]);
						if (row6.DOWNLOAD_DATE != null) {
							pstmt_tOracleOutput_1.setObject(
									19,
									new java.sql.Timestamp(row6.DOWNLOAD_DATE
											.getTime()), java.sql.Types.DATE);
						} else {
							pstmt_tOracleOutput_1.setNull(19,
									java.sql.Types.DATE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.DOWNLOAD_DATE == null ? "null" : "'"
										+ new java.text.SimpleDateFormat(
												"yyyy-MM-dd HH:mm:ss")
												.format(row6.DOWNLOAD_DATE)
										+ "'").append(
								insertSQLSplits_tOracleOutput_1[19]);
						if (row6.IMPORT_DATE != null) {
							pstmt_tOracleOutput_1.setObject(
									20,
									new java.sql.Timestamp(row6.IMPORT_DATE
											.getTime()), java.sql.Types.DATE);
						} else {
							pstmt_tOracleOutput_1.setNull(20,
									java.sql.Types.DATE);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1
								.append(row6.IMPORT_DATE == null ? "null" : "'"
										+ new java.text.SimpleDateFormat(
												"yyyy-MM-dd HH:mm:ss")
												.format(row6.IMPORT_DATE) + "'")
								.append(insertSQLSplits_tOracleOutput_1[20]);
						if (row6.SOURCESYSTEM_CD == null) {
							pstmt_tOracleOutput_1.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(21,
									row6.SOURCESYSTEM_CD);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.SOURCESYSTEM_CD == null ? "null" : "'"
										+ row6.SOURCESYSTEM_CD + "'").append(
								insertSQLSplits_tOracleOutput_1[21]);
						if (row6.VALUETYPE_CD == null) {
							pstmt_tOracleOutput_1.setNull(22,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(22,
									row6.VALUETYPE_CD);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.VALUETYPE_CD == null ? "null" : "'"
										+ row6.VALUETYPE_CD + "'").append(
								insertSQLSplits_tOracleOutput_1[22]);
						if (row6.M_EXCLUSION_CD == null) {
							pstmt_tOracleOutput_1.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(23,
									row6.M_EXCLUSION_CD);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.M_EXCLUSION_CD == null ? "null" : "'"
										+ row6.M_EXCLUSION_CD + "'").append(
								insertSQLSplits_tOracleOutput_1[23]);
						if (row6.C_PATH == null) {
							pstmt_tOracleOutput_1.setNull(24,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(24, row6.C_PATH);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_PATH == null ? "null" : "'"
										+ row6.C_PATH + "'").append(
								insertSQLSplits_tOracleOutput_1[24]);
						if (row6.C_SYMBOL == null) {
							pstmt_tOracleOutput_1.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tOracleOutput_1.setString(25, row6.C_SYMBOL);
						}

						query_tOracleOutput_1 = query_tOracleOutput_1.append(
								row6.C_SYMBOL == null ? "null" : "'"
										+ row6.C_SYMBOL + "'").append(
								insertSQLSplits_tOracleOutput_1[25]);
						globalMap.put("tOracleOutput_1_QUERY",
								query_tOracleOutput_1.toString().trim());

						pstmt_tOracleOutput_1.addBatch();
						nb_line_tOracleOutput_1++;

						commitCounter_tOracleOutput_1++;
						if (commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {

							try {
								pstmt_tOracleOutput_1.executeBatch();
							} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

								System.out.println(e_tOracleOutput_1
										.getMessage());

							}
							tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
									.getUpdateCount();

							insertedCount_tOracleOutput_1

							+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
									: 0);

							conn_tOracleOutput_1.commit();
							commitCounter_tOracleOutput_1 = 0;
						}

						tos_count_tOracleOutput_1++;

						/**
						 * [tOracleOutput_1 main ] stop
						 */

					} // End of branch "row6"

					/**
					 * [tHashInput_tUnite_1 end ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					nb_line_tHashInput_tUnite_1++;
				}

				globalMap.put("tHashInput_tUnite_1_NB_LINE",
						nb_line_tHashInput_tUnite_1);

				ok_Hash.put("tHashInput_tUnite_1", true);
				end_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tOracleOutput_1 end ] start
				 */

				currentComponent = "tOracleOutput_1";

				try {
					if (pstmt_tOracleOutput_1 != null) {
						pstmt_tOracleOutput_1.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

					System.out.println(e_tOracleOutput_1.getMessage());

				}
				if (pstmt_tOracleOutput_1 != null) {
					tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
							.getUpdateCount();

					insertedCount_tOracleOutput_1

					+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
							: 0);
				}
				if (pstmt_tOracleOutput_1 != null) {

					pstmt_tOracleOutput_1.close();

				}

				conn_tOracleOutput_1.commit();

				conn_tOracleOutput_1.close();

				nb_line_deleted_tOracleOutput_1 = nb_line_deleted_tOracleOutput_1
						+ deletedCount_tOracleOutput_1;
				nb_line_update_tOracleOutput_1 = nb_line_update_tOracleOutput_1
						+ updatedCount_tOracleOutput_1;
				nb_line_inserted_tOracleOutput_1 = nb_line_inserted_tOracleOutput_1
						+ insertedCount_tOracleOutput_1;
				nb_line_rejected_tOracleOutput_1 = nb_line_rejected_tOracleOutput_1
						+ rejectedCount_tOracleOutput_1;

				globalMap.put("tOracleOutput_1_NB_LINE",
						nb_line_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_1);

				ok_Hash.put("tOracleOutput_1", true);
				end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				/**
				 * [tOracleOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tHashInput_tUnite_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IDRT_STDTERM IDRT_STDTERMClass = new IDRT_STDTERM();

		int exitCode = IDRT_STDTERMClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IDRT_STDTERM.class.getClassLoader()
					.getResourceAsStream(
							"tos/idrt_stdterm_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.icd10year = (String) context.getProperty("icd10year");
			context.csvDir = (String) context.getProperty("csvDir");
			context.basedir = (String) context.getProperty("basedir");
			context.DBHost = (String) context.getProperty("DBHost");
			context.DBInstance = (String) context.getProperty("DBInstance");
			context.DBPassword = (java.lang.String) context
					.getProperty("DBPassword");
			context.DBPort = (String) context.getProperty("DBPort");
			context.DBSchema = (String) context.getProperty("DBSchema");
			context.DBUsername = (String) context.getProperty("DBUsername");
			context.drgDir = (String) context.getProperty("drgDir");
			context.icd10Dir = (String) context.getProperty("icd10Dir");
			context.icd10Year = (String) context.getProperty("icd10Year");
			context.icdoDir = (String) context.getProperty("icdoDir");
			context.loincDir = (String) context.getProperty("loincDir");
			context.meddraDir = (String) context.getProperty("meddraDir");
			context.opsDir = (String) context.getProperty("opsDir");
			context.p21Dir = (String) context.getProperty("p21Dir");
			context.rootDir = (String) context.getProperty("rootDir");
			context.tnmDir = (String) context.getProperty("tnmDir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("icd10year")) {
				context.icd10year = (String) parentContextMap.get("icd10year");
			}
			if (parentContextMap.containsKey("csvDir")) {
				context.csvDir = (String) parentContextMap.get("csvDir");
			}
			if (parentContextMap.containsKey("basedir")) {
				context.basedir = (String) parentContextMap.get("basedir");
			}
			if (parentContextMap.containsKey("DBHost")) {
				context.DBHost = (String) parentContextMap.get("DBHost");
			}
			if (parentContextMap.containsKey("DBInstance")) {
				context.DBInstance = (String) parentContextMap
						.get("DBInstance");
			}
			if (parentContextMap.containsKey("DBPassword")) {
				context.DBPassword = (java.lang.String) parentContextMap
						.get("DBPassword");
			}
			if (parentContextMap.containsKey("DBPort")) {
				context.DBPort = (String) parentContextMap.get("DBPort");
			}
			if (parentContextMap.containsKey("DBSchema")) {
				context.DBSchema = (String) parentContextMap.get("DBSchema");
			}
			if (parentContextMap.containsKey("DBUsername")) {
				context.DBUsername = (String) parentContextMap
						.get("DBUsername");
			}
			if (parentContextMap.containsKey("drgDir")) {
				context.drgDir = (String) parentContextMap.get("drgDir");
			}
			if (parentContextMap.containsKey("icd10Dir")) {
				context.icd10Dir = (String) parentContextMap.get("icd10Dir");
			}
			if (parentContextMap.containsKey("icd10Year")) {
				context.icd10Year = (String) parentContextMap.get("icd10Year");
			}
			if (parentContextMap.containsKey("icdoDir")) {
				context.icdoDir = (String) parentContextMap.get("icdoDir");
			}
			if (parentContextMap.containsKey("loincDir")) {
				context.loincDir = (String) parentContextMap.get("loincDir");
			}
			if (parentContextMap.containsKey("meddraDir")) {
				context.meddraDir = (String) parentContextMap.get("meddraDir");
			}
			if (parentContextMap.containsKey("opsDir")) {
				context.opsDir = (String) parentContextMap.get("opsDir");
			}
			if (parentContextMap.containsKey("p21Dir")) {
				context.p21Dir = (String) parentContextMap.get("p21Dir");
			}
			if (parentContextMap.containsKey("rootDir")) {
				context.rootDir = (String) parentContextMap.get("rootDir");
			}
			if (parentContextMap.containsKey("tnmDir")) {
				context.tnmDir = (String) parentContextMap.get("tnmDir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tXSLT_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tXSLT_5) {

			e_tXSLT_5.printStackTrace();
			globalMap.put("tXSLT_5_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {

			e_tLibraryLoad_1.printStackTrace();
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

		}
		try {
			errorCode = null;
			tXSLT_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tXSLT_4) {

			e_tXSLT_4.printStackTrace();
			globalMap.put("tXSLT_4_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : IDRT_STDTERM");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 456625 characters generated by Talend Open Studio for Data Integration on the
 * October 31, 2013 11:58:51 AM CET
 ************************************************************************************************/
