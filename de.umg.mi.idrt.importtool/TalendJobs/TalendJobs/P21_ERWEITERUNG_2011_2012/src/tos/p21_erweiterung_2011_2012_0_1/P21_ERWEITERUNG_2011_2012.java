// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.p21_erweiterung_2011_2012_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: P21_ERWEITERUNG_2011_2012 Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class P21_ERWEITERUNG_2011_2012 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (p21_input != null) {

				this.setProperty("p21_input", p21_input.toString());

			}

			if (p21_output != null) {

				this.setProperty("p21_output", p21_output.toString());

			}

		}

		public String p21_input;

		public String getP21_input() {
			return this.p21_input;
		}

		public String p21_output;

		public String getP21_output() {
			return this.p21_output;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "P21_ERWEITERUNG_2011_2012";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					P21_ERWEITERUNG_2011_2012.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(P21_ERWEITERUNG_2011_2012.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_1", System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_3", System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				// System.out.println("P21 preprocessing started!");
				// System.out.println("ICD preprocessing");

				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f)
						+ "% P21 preprocessing started!");
				// ca. 1%
				StatusListener.setSubStatus(1.0f, (int) (float) (1.0f)
						+ "% ICD preprocessing");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tRunJob_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());
				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */
				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("p21_input", context.p21_input);
				parentContextMap_tRunJob_1
						.put("p21_output", context.p21_output);

				Object obj_tRunJob_1 = null;

				tos.icd_2_0_1.ICD_2 childJob_tRunJob_1 = new tos.icd_2_0_1.ICD_2();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}
				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));
				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */
				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				// System.out.println("OPS preprocessing");
				// ca. 25%
				StatusListener.setSubStatus(25.0f, (int) (float) (25.0f)
						+ "% OPS preprocessing");

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());
				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */
				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("p21_input", context.p21_input);
				parentContextMap_tRunJob_2
						.put("p21_output", context.p21_output);

				Object obj_tRunJob_2 = null;

				tos.ops_2_0_1.OPS_2 childJob_tRunJob_2 = new tos.ops_2_0_1.OPS_2();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}
				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));
				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */
				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_4Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				// System.out.println("FAB preprocessing");
				// ca. 50%
				StatusListener.setSubStatus(50.0f, (int) (float) (50.0f)
						+ "% FAB preprocessing");

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());
				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */
				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("p21_input", context.p21_input);
				parentContextMap_tRunJob_3
						.put("p21_output", context.p21_output);

				Object obj_tRunJob_3 = null;

				tos.fab_2_0_1.FAB_2 childJob_tRunJob_3 = new tos.fab_2_0_1.FAB_2();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}
				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));
				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */
				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_5Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				// System.out.println("FALL preprocessing");
				// ca. 75%
				StatusListener.setSubStatus(75.0f, (int) (float) (75.0f)
						+ "% FALL preprocessing");

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_P21_ERWEITERUNG_2011_2012 = new byte[0];
		static byte[] commonByteArray_TOS_P21_ERWEITERUNG_2011_2012 = new byte[0];

		public String IK;

		public String getIK() {
			return this.IK;
		}

		public String ENTLASSENDER_STANDORT;

		public String getENTLASSENDER_STANDORT() {
			return this.ENTLASSENDER_STANDORT;
		}

		public String ENTGELTBEREICH;

		public String getENTGELTBEREICH() {
			return this.ENTGELTBEREICH;
		}

		public String KH_INTERNES_KENNZEICHEN;

		public String getKH_INTERNES_KENNZEICHEN() {
			return this.KH_INTERNES_KENNZEICHEN;
		}

		public String IK_DER_KRANKENKASSE;

		public String getIK_DER_KRANKENKASSE() {
			return this.IK_DER_KRANKENKASSE;
		}

		public String GEBURTSJAHR;

		public String getGEBURTSJAHR() {
			return this.GEBURTSJAHR;
		}

		public String GEBURTSMONAT;

		public String getGEBURTSMONAT() {
			return this.GEBURTSMONAT;
		}

		public String GESCHLECHT;

		public String getGESCHLECHT() {
			return this.GESCHLECHT;
		}

		public String PLZ;

		public String getPLZ() {
			return this.PLZ;
		}

		public String AUFNAHMEDATUM;

		public String getAUFNAHMEDATUM() {
			return this.AUFNAHMEDATUM;
		}

		public String AUFNAHMEANLASS;

		public String getAUFNAHMEANLASS() {
			return this.AUFNAHMEANLASS;
		}

		public String AUFNAHMEGRUND;

		public String getAUFNAHMEGRUND() {
			return this.AUFNAHMEGRUND;
		}

		public String FALLZUSAMMENFUEHRUNG;

		public String getFALLZUSAMMENFUEHRUNG() {
			return this.FALLZUSAMMENFUEHRUNG;
		}

		public String FALLZUSAMMENFUEHRUNGSGRUND;

		public String getFALLZUSAMMENFUEHRUNGSGRUND() {
			return this.FALLZUSAMMENFUEHRUNGSGRUND;
		}

		public String AUFNAHMEGEWICHT;

		public String getAUFNAHMEGEWICHT() {
			return this.AUFNAHMEGEWICHT;
		}

		public String ENTLASSUNGSDATUM;

		public String getENTLASSUNGSDATUM() {
			return this.ENTLASSUNGSDATUM;
		}

		public String ENTLASSUNGSGRUND;

		public String getENTLASSUNGSGRUND() {
			return this.ENTLASSUNGSGRUND;
		}

		public String ALTER_IN_TAGEN_AM_AUFNAHMETAG;

		public String getALTER_IN_TAGEN_AM_AUFNAHMETAG() {
			return this.ALTER_IN_TAGEN_AM_AUFNAHMETAG;
		}

		public String ALTER_IN_JAHREN_AM_AUFNAHMETAG;

		public String getALTER_IN_JAHREN_AM_AUFNAHMETAG() {
			return this.ALTER_IN_JAHREN_AM_AUFNAHMETAG;
		}

		public String PATIENTENNUMMER;

		public String getPATIENTENNUMMER() {
			return this.PATIENTENNUMMER;
		}

		public String INTERKURRENTE_DIALYSEN;

		public String getINTERKURRENTE_DIALYSEN() {
			return this.INTERKURRENTE_DIALYSEN;
		}

		public String BEATMUNGSSTUNDEN;

		public String getBEATMUNGSSTUNDEN() {
			return this.BEATMUNGSSTUNDEN;
		}

		public String BEHANDLUNGSBEGINN_VORSTATIONAER;

		public String getBEHANDLUNGSBEGINN_VORSTATIONAER() {
			return this.BEHANDLUNGSBEGINN_VORSTATIONAER;
		}

		public String BEHANDLUNGSTAGE_VORSTATIONAER;

		public String getBEHANDLUNGSTAGE_VORSTATIONAER() {
			return this.BEHANDLUNGSTAGE_VORSTATIONAER;
		}

		public String BEHANDLUNGSENDE_NACHSTATIONAER;

		public String getBEHANDLUNGSENDE_NACHSTATIONAER() {
			return this.BEHANDLUNGSENDE_NACHSTATIONAER;
		}

		public String BEHANDLUNGSTAGE_NACHSTATIONAER;

		public String getBEHANDLUNGSTAGE_NACHSTATIONAER() {
			return this.BEHANDLUNGSTAGE_NACHSTATIONAER;
		}

		public String IK_VERLEGUNGS_KH;

		public String getIK_VERLEGUNGS_KH() {
			return this.IK_VERLEGUNGS_KH;
		}

		public String BELEGUNGSTAGE_AUSSERH_KHENTGG;

		public String getBELEGUNGSTAGE_AUSSERH_KHENTGG() {
			return this.BELEGUNGSTAGE_AUSSERH_KHENTGG;
		}

		public String BEURLAUBUNGSTAGE_PSY;

		public String getBEURLAUBUNGSTAGE_PSY() {
			return this.BEURLAUBUNGSTAGE_PSY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_P21_ERWEITERUNG_2011_2012.length) {
					if (length < 1024
							&& commonByteArray_TOS_P21_ERWEITERUNG_2011_2012.length == 0) {
						commonByteArray_TOS_P21_ERWEITERUNG_2011_2012 = new byte[1024];
					} else {
						commonByteArray_TOS_P21_ERWEITERUNG_2011_2012 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_P21_ERWEITERUNG_2011_2012, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_P21_ERWEITERUNG_2011_2012, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_P21_ERWEITERUNG_2011_2012) {

				try {

					int length = 0;

					this.IK = readString(dis);

					this.ENTLASSENDER_STANDORT = readString(dis);

					this.ENTGELTBEREICH = readString(dis);

					this.KH_INTERNES_KENNZEICHEN = readString(dis);

					this.IK_DER_KRANKENKASSE = readString(dis);

					this.GEBURTSJAHR = readString(dis);

					this.GEBURTSMONAT = readString(dis);

					this.GESCHLECHT = readString(dis);

					this.PLZ = readString(dis);

					this.AUFNAHMEDATUM = readString(dis);

					this.AUFNAHMEANLASS = readString(dis);

					this.AUFNAHMEGRUND = readString(dis);

					this.FALLZUSAMMENFUEHRUNG = readString(dis);

					this.FALLZUSAMMENFUEHRUNGSGRUND = readString(dis);

					this.AUFNAHMEGEWICHT = readString(dis);

					this.ENTLASSUNGSDATUM = readString(dis);

					this.ENTLASSUNGSGRUND = readString(dis);

					this.ALTER_IN_TAGEN_AM_AUFNAHMETAG = readString(dis);

					this.ALTER_IN_JAHREN_AM_AUFNAHMETAG = readString(dis);

					this.PATIENTENNUMMER = readString(dis);

					this.INTERKURRENTE_DIALYSEN = readString(dis);

					this.BEATMUNGSSTUNDEN = readString(dis);

					this.BEHANDLUNGSBEGINN_VORSTATIONAER = readString(dis);

					this.BEHANDLUNGSTAGE_VORSTATIONAER = readString(dis);

					this.BEHANDLUNGSENDE_NACHSTATIONAER = readString(dis);

					this.BEHANDLUNGSTAGE_NACHSTATIONAER = readString(dis);

					this.IK_VERLEGUNGS_KH = readString(dis);

					this.BELEGUNGSTAGE_AUSSERH_KHENTGG = readString(dis);

					this.BEURLAUBUNGSTAGE_PSY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IK, dos);

				// String

				writeString(this.ENTLASSENDER_STANDORT, dos);

				// String

				writeString(this.ENTGELTBEREICH, dos);

				// String

				writeString(this.KH_INTERNES_KENNZEICHEN, dos);

				// String

				writeString(this.IK_DER_KRANKENKASSE, dos);

				// String

				writeString(this.GEBURTSJAHR, dos);

				// String

				writeString(this.GEBURTSMONAT, dos);

				// String

				writeString(this.GESCHLECHT, dos);

				// String

				writeString(this.PLZ, dos);

				// String

				writeString(this.AUFNAHMEDATUM, dos);

				// String

				writeString(this.AUFNAHMEANLASS, dos);

				// String

				writeString(this.AUFNAHMEGRUND, dos);

				// String

				writeString(this.FALLZUSAMMENFUEHRUNG, dos);

				// String

				writeString(this.FALLZUSAMMENFUEHRUNGSGRUND, dos);

				// String

				writeString(this.AUFNAHMEGEWICHT, dos);

				// String

				writeString(this.ENTLASSUNGSDATUM, dos);

				// String

				writeString(this.ENTLASSUNGSGRUND, dos);

				// String

				writeString(this.ALTER_IN_TAGEN_AM_AUFNAHMETAG, dos);

				// String

				writeString(this.ALTER_IN_JAHREN_AM_AUFNAHMETAG, dos);

				// String

				writeString(this.PATIENTENNUMMER, dos);

				// String

				writeString(this.INTERKURRENTE_DIALYSEN, dos);

				// String

				writeString(this.BEATMUNGSSTUNDEN, dos);

				// String

				writeString(this.BEHANDLUNGSBEGINN_VORSTATIONAER, dos);

				// String

				writeString(this.BEHANDLUNGSTAGE_VORSTATIONAER, dos);

				// String

				writeString(this.BEHANDLUNGSENDE_NACHSTATIONAER, dos);

				// String

				writeString(this.BEHANDLUNGSTAGE_NACHSTATIONAER, dos);

				// String

				writeString(this.IK_VERLEGUNGS_KH, dos);

				// String

				writeString(this.BELEGUNGSTAGE_AUSSERH_KHENTGG, dos);

				// String

				writeString(this.BEURLAUBUNGSTAGE_PSY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IK=" + IK);
			sb.append(",ENTLASSENDER_STANDORT=" + ENTLASSENDER_STANDORT);
			sb.append(",ENTGELTBEREICH=" + ENTGELTBEREICH);
			sb.append(",KH_INTERNES_KENNZEICHEN=" + KH_INTERNES_KENNZEICHEN);
			sb.append(",IK_DER_KRANKENKASSE=" + IK_DER_KRANKENKASSE);
			sb.append(",GEBURTSJAHR=" + GEBURTSJAHR);
			sb.append(",GEBURTSMONAT=" + GEBURTSMONAT);
			sb.append(",GESCHLECHT=" + GESCHLECHT);
			sb.append(",PLZ=" + PLZ);
			sb.append(",AUFNAHMEDATUM=" + AUFNAHMEDATUM);
			sb.append(",AUFNAHMEANLASS=" + AUFNAHMEANLASS);
			sb.append(",AUFNAHMEGRUND=" + AUFNAHMEGRUND);
			sb.append(",FALLZUSAMMENFUEHRUNG=" + FALLZUSAMMENFUEHRUNG);
			sb.append(",FALLZUSAMMENFUEHRUNGSGRUND="
					+ FALLZUSAMMENFUEHRUNGSGRUND);
			sb.append(",AUFNAHMEGEWICHT=" + AUFNAHMEGEWICHT);
			sb.append(",ENTLASSUNGSDATUM=" + ENTLASSUNGSDATUM);
			sb.append(",ENTLASSUNGSGRUND=" + ENTLASSUNGSGRUND);
			sb.append(",ALTER_IN_TAGEN_AM_AUFNAHMETAG="
					+ ALTER_IN_TAGEN_AM_AUFNAHMETAG);
			sb.append(",ALTER_IN_JAHREN_AM_AUFNAHMETAG="
					+ ALTER_IN_JAHREN_AM_AUFNAHMETAG);
			sb.append(",PATIENTENNUMMER=" + PATIENTENNUMMER);
			sb.append(",INTERKURRENTE_DIALYSEN=" + INTERKURRENTE_DIALYSEN);
			sb.append(",BEATMUNGSSTUNDEN=" + BEATMUNGSSTUNDEN);
			sb.append(",BEHANDLUNGSBEGINN_VORSTATIONAER="
					+ BEHANDLUNGSBEGINN_VORSTATIONAER);
			sb.append(",BEHANDLUNGSTAGE_VORSTATIONAER="
					+ BEHANDLUNGSTAGE_VORSTATIONAER);
			sb.append(",BEHANDLUNGSENDE_NACHSTATIONAER="
					+ BEHANDLUNGSENDE_NACHSTATIONAER);
			sb.append(",BEHANDLUNGSTAGE_NACHSTATIONAER="
					+ BEHANDLUNGSTAGE_NACHSTATIONAER);
			sb.append(",IK_VERLEGUNGS_KH=" + IK_VERLEGUNGS_KH);
			sb.append(",BELEGUNGSTAGE_AUSSERH_KHENTGG="
					+ BELEGUNGSTAGE_AUSSERH_KHENTGG);
			sb.append(",BEURLAUBUNGSTAGE_PSY=" + BEURLAUBUNGSTAGE_PSY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.p21_output + "FALL.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											false), "ISO-8859-15"));

					if (filetFileOutputDelimited_1.length() == 0) {

						outtFileOutputDelimited_1.write("IK");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("ENTLASSENDER_STANDORT");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ENTGELTBEREICH");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("KH_INTERNES_KENNZEICHEN");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("IK_DER_KRANKENKASSE");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("GEBURTSJAHR");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("GEBURTSMONAT");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("GESCHLECHT");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("PLZ");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("AUFNAHMEDATUM");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("AUFNAHMEANLASS");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("AUFNAHMEGRUND");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("FALLZUSAMMENFUEHRUNG");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("FALLZUSAMMENFUEHRUNGSGRUND");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("AUFNAHMEGEWICHT");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ENTLASSUNGSDATUM");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ENTLASSUNGSGRUND");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("ALTER_IN_TAGEN_AM_AUFNAHMETAG");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("ALTER_IN_JAHREN_AM_AUFNAHMETAG");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("PATIENTENNUMMER");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("INTERKURRENTE_DIALYSEN");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("BEATMUNGSSTUNDEN");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("BEHANDLUNGSBEGINN_VORSTATIONAER");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("BEHANDLUNGSTAGE_VORSTATIONAER");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("BEHANDLUNGSENDE_NACHSTATIONAER");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("BEHANDLUNGSTAGE_NACHSTATIONAER");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("IK_VERLEGUNGS_KH");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("BELEGUNGSTAGE_AUSSERH_KHENTGG");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("BEURLAUBUNGSTAGE_PSY");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.flush();
					}

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					int nb_line_tFileInputDelimited_1 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
					try {

						Object filename_tFileInputDelimited_1 = context.p21_input
								+ "FALL.csv";
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
							if (footer_value_tFileInputDelimited_1 > 0
									|| random_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									context.p21_input + "FALL.csv", "UTF-8",
									";", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_1 != null
								&& fid_tFileInputDelimited_1.nextRecord()) {

							row1 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_1 = 0;

								columnIndexWithD_tFileInputDelimited_1 = 0;

								row1.IK = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 1;

								row1.ENTLASSENDER_STANDORT = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 2;

								row1.ENTGELTBEREICH = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 3;

								row1.KH_INTERNES_KENNZEICHEN = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 4;

								row1.IK_DER_KRANKENKASSE = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 5;

								row1.GEBURTSJAHR = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 6;

								row1.GEBURTSMONAT = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 7;

								row1.GESCHLECHT = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 8;

								row1.PLZ = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 9;

								row1.AUFNAHMEDATUM = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 10;

								row1.AUFNAHMEANLASS = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 11;

								row1.AUFNAHMEGRUND = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 12;

								row1.FALLZUSAMMENFUEHRUNG = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 13;

								row1.FALLZUSAMMENFUEHRUNGSGRUND = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 14;

								row1.AUFNAHMEGEWICHT = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 15;

								row1.ENTLASSUNGSDATUM = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 16;

								row1.ENTLASSUNGSGRUND = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 17;

								row1.ALTER_IN_TAGEN_AM_AUFNAHMETAG = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 18;

								row1.ALTER_IN_JAHREN_AM_AUFNAHMETAG = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 19;

								row1.PATIENTENNUMMER = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 20;

								row1.INTERKURRENTE_DIALYSEN = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 21;

								row1.BEATMUNGSSTUNDEN = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 22;

								row1.BEHANDLUNGSBEGINN_VORSTATIONAER = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 23;

								row1.BEHANDLUNGSTAGE_VORSTATIONAER = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 24;

								row1.BEHANDLUNGSENDE_NACHSTATIONAER = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 25;

								row1.BEHANDLUNGSTAGE_NACHSTATIONAER = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 26;

								row1.IK_VERLEGUNGS_KH = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 27;

								row1.BELEGUNGSTAGE_AUSSERH_KHENTGG = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 28;

								row1.BEURLAUBUNGSTAGE_PSY = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								row1 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

								if (row1.IK != null) {

									sb_tFileOutputDelimited_1.append(

									row1.IK

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.ENTLASSENDER_STANDORT != null) {

									sb_tFileOutputDelimited_1.append(

									row1.ENTLASSENDER_STANDORT

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.ENTGELTBEREICH != null) {

									sb_tFileOutputDelimited_1.append(

									row1.ENTGELTBEREICH

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.KH_INTERNES_KENNZEICHEN != null) {

									sb_tFileOutputDelimited_1.append(

									row1.KH_INTERNES_KENNZEICHEN

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.IK_DER_KRANKENKASSE != null) {

									sb_tFileOutputDelimited_1.append(

									row1.IK_DER_KRANKENKASSE

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.GEBURTSJAHR != null) {

									sb_tFileOutputDelimited_1.append(

									row1.GEBURTSJAHR

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.GEBURTSMONAT != null) {

									sb_tFileOutputDelimited_1.append(

									row1.GEBURTSMONAT

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.GESCHLECHT != null) {

									sb_tFileOutputDelimited_1.append(

									row1.GESCHLECHT

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.PLZ != null) {

									sb_tFileOutputDelimited_1.append(

									row1.PLZ

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.AUFNAHMEDATUM != null) {

									sb_tFileOutputDelimited_1.append(

									row1.AUFNAHMEDATUM

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.AUFNAHMEANLASS != null) {

									sb_tFileOutputDelimited_1.append(

									row1.AUFNAHMEANLASS

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.AUFNAHMEGRUND != null) {

									sb_tFileOutputDelimited_1.append(

									row1.AUFNAHMEGRUND

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.FALLZUSAMMENFUEHRUNG != null) {

									sb_tFileOutputDelimited_1.append(

									row1.FALLZUSAMMENFUEHRUNG

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.FALLZUSAMMENFUEHRUNGSGRUND != null) {

									sb_tFileOutputDelimited_1.append(

									row1.FALLZUSAMMENFUEHRUNGSGRUND

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.AUFNAHMEGEWICHT != null) {

									sb_tFileOutputDelimited_1.append(

									row1.AUFNAHMEGEWICHT

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.ENTLASSUNGSDATUM != null) {

									sb_tFileOutputDelimited_1.append(

									row1.ENTLASSUNGSDATUM

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.ENTLASSUNGSGRUND != null) {

									sb_tFileOutputDelimited_1.append(

									row1.ENTLASSUNGSGRUND

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.ALTER_IN_TAGEN_AM_AUFNAHMETAG != null) {

									sb_tFileOutputDelimited_1.append(

									row1.ALTER_IN_TAGEN_AM_AUFNAHMETAG

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.ALTER_IN_JAHREN_AM_AUFNAHMETAG != null) {

									sb_tFileOutputDelimited_1.append(

									row1.ALTER_IN_JAHREN_AM_AUFNAHMETAG

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.PATIENTENNUMMER != null) {

									sb_tFileOutputDelimited_1.append(

									row1.PATIENTENNUMMER

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.INTERKURRENTE_DIALYSEN != null) {

									sb_tFileOutputDelimited_1.append(

									row1.INTERKURRENTE_DIALYSEN

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.BEATMUNGSSTUNDEN != null) {

									sb_tFileOutputDelimited_1.append(

									row1.BEATMUNGSSTUNDEN

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.BEHANDLUNGSBEGINN_VORSTATIONAER != null) {

									sb_tFileOutputDelimited_1.append(

									row1.BEHANDLUNGSBEGINN_VORSTATIONAER

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.BEHANDLUNGSTAGE_VORSTATIONAER != null) {

									sb_tFileOutputDelimited_1.append(

									row1.BEHANDLUNGSTAGE_VORSTATIONAER

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.BEHANDLUNGSENDE_NACHSTATIONAER != null) {

									sb_tFileOutputDelimited_1.append(

									row1.BEHANDLUNGSENDE_NACHSTATIONAER

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.BEHANDLUNGSTAGE_NACHSTATIONAER != null) {

									sb_tFileOutputDelimited_1.append(

									row1.BEHANDLUNGSTAGE_NACHSTATIONAER

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.IK_VERLEGUNGS_KH != null) {

									sb_tFileOutputDelimited_1.append(

									row1.IK_VERLEGUNGS_KH

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.BELEGUNGSTAGE_AUSSERH_KHENTGG != null) {

									sb_tFileOutputDelimited_1.append(

									row1.BELEGUNGSTAGE_AUSSERH_KHENTGG

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);

								if (row1.BEURLAUBUNGSTAGE_PSY != null) {

									sb_tFileOutputDelimited_1.append(

									row1.BEURLAUBUNGSTAGE_PSY

									);

								}

								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;

								outtFileOutputDelimited_1
										.write(sb_tFileOutputDelimited_1
												.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
					} finally {
						if (!((Object) (context.p21_input + "FALL.csv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_1 != null) {
								fid_tFileInputDelimited_1.close();
							}
						}
						if (fid_tFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE",
									fid_tFileInputDelimited_1.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				// System.out.println("P21 preprocessing complete!");

				StatusListener.setSubStatus(100.0f, (int) (float) (100.0f)
						+ "% P21 preprocessing complete!");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final P21_ERWEITERUNG_2011_2012 P21_ERWEITERUNG_2011_2012Class = new P21_ERWEITERUNG_2011_2012();

		int exitCode = P21_ERWEITERUNG_2011_2012Class.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = P21_ERWEITERUNG_2011_2012.class
					.getClassLoader().getResourceAsStream(
							"tos/p21_erweiterung_2011_2012_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.p21_input = (String) context.getProperty("p21_input");
			context.p21_output = (String) context.getProperty("p21_output");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("p21_input")) {
				context.p21_input = (String) parentContextMap.get("p21_input");
			}
			if (parentContextMap.containsKey("p21_output")) {
				context.p21_output = (String) parentContextMap
						.get("p21_output");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {

			e_tLibraryLoad_1.printStackTrace();
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : P21_ERWEITERUNG_2011_2012");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 93624 characters generated by Talend Open Studio for Data Integration on the
 * July 30, 2014 3:48:38 PM CEST
 ************************************************************************************************/
