// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.icd_2_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: ICD_2 Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class ICD_2 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (p21_input != null) {

				this.setProperty("p21_input", p21_input.toString());

			}

			if (p21_output != null) {

				this.setProperty("p21_output", p21_output.toString());

			}

		}

		public String p21_input;

		public String getP21_input() {
			return this.p21_input;
		}

		public String p21_output;

		public String getP21_output() {
			return this.p21_output;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ICD_2";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ICD_2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ICD_2.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				new java.io.File(context.p21_output).mkdirs();
				globalMap.put("out_file_icd_2", new java.io.FileOutputStream(
						context.p21_output + "ICD.csv", false));

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_TOS_ICD_2 = new byte[0];
		static byte[] commonByteArray_TOS_ICD_2 = new byte[0];

		public String IK;

		public String getIK() {
			return this.IK;
		}

		public String ENTLASSENDER_STANDORT;

		public String getENTLASSENDER_STANDORT() {
			return this.ENTLASSENDER_STANDORT;
		}

		public String ENTGELTBEREICH;

		public String getENTGELTBEREICH() {
			return this.ENTGELTBEREICH;
		}

		public String KH_INTERNES_KENNZEICHEN;

		public String getKH_INTERNES_KENNZEICHEN() {
			return this.KH_INTERNES_KENNZEICHEN;
		}

		public String DIAGNOSEART;

		public String getDIAGNOSEART() {
			return this.DIAGNOSEART;
		}

		public String ICD_VERSION;

		public String getICD_VERSION() {
			return this.ICD_VERSION;
		}

		public String ICD_KODE;

		public String getICD_KODE() {
			return this.ICD_KODE;
		}

		public String LOKALISATION;

		public String getLOKALISATION() {
			return this.LOKALISATION;
		}

		public String DIAGNOSENSICHERHEIT;

		public String getDIAGNOSENSICHERHEIT() {
			return this.DIAGNOSENSICHERHEIT;
		}

		public String SEKUNDAER_KODE;

		public String getSEKUNDAER_KODE() {
			return this.SEKUNDAER_KODE;
		}

		public String LOKALISATION_1;

		public String getLOKALISATION_1() {
			return this.LOKALISATION_1;
		}

		public String DIAGNOSENSICHERHEIT_1;

		public String getDIAGNOSENSICHERHEIT_1() {
			return this.DIAGNOSENSICHERHEIT_1;
		}

		public String PATIENTENNR;

		public String getPATIENTENNR() {
			return this.PATIENTENNR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ICD_2.length) {
					if (length < 1024 && commonByteArray_TOS_ICD_2.length == 0) {
						commonByteArray_TOS_ICD_2 = new byte[1024];
					} else {
						commonByteArray_TOS_ICD_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ICD_2, 0, length);
				strReturn = new String(commonByteArray_TOS_ICD_2, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ICD_2) {

				try {

					int length = 0;

					this.IK = readString(dis);

					this.ENTLASSENDER_STANDORT = readString(dis);

					this.ENTGELTBEREICH = readString(dis);

					this.KH_INTERNES_KENNZEICHEN = readString(dis);

					this.DIAGNOSEART = readString(dis);

					this.ICD_VERSION = readString(dis);

					this.ICD_KODE = readString(dis);

					this.LOKALISATION = readString(dis);

					this.DIAGNOSENSICHERHEIT = readString(dis);

					this.SEKUNDAER_KODE = readString(dis);

					this.LOKALISATION_1 = readString(dis);

					this.DIAGNOSENSICHERHEIT_1 = readString(dis);

					this.PATIENTENNR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IK, dos);

				// String

				writeString(this.ENTLASSENDER_STANDORT, dos);

				// String

				writeString(this.ENTGELTBEREICH, dos);

				// String

				writeString(this.KH_INTERNES_KENNZEICHEN, dos);

				// String

				writeString(this.DIAGNOSEART, dos);

				// String

				writeString(this.ICD_VERSION, dos);

				// String

				writeString(this.ICD_KODE, dos);

				// String

				writeString(this.LOKALISATION, dos);

				// String

				writeString(this.DIAGNOSENSICHERHEIT, dos);

				// String

				writeString(this.SEKUNDAER_KODE, dos);

				// String

				writeString(this.LOKALISATION_1, dos);

				// String

				writeString(this.DIAGNOSENSICHERHEIT_1, dos);

				// String

				writeString(this.PATIENTENNR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IK=" + IK);
			sb.append(",ENTLASSENDER_STANDORT=" + ENTLASSENDER_STANDORT);
			sb.append(",ENTGELTBEREICH=" + ENTGELTBEREICH);
			sb.append(",KH_INTERNES_KENNZEICHEN=" + KH_INTERNES_KENNZEICHEN);
			sb.append(",DIAGNOSEART=" + DIAGNOSEART);
			sb.append(",ICD_VERSION=" + ICD_VERSION);
			sb.append(",ICD_KODE=" + ICD_KODE);
			sb.append(",LOKALISATION=" + LOKALISATION);
			sb.append(",DIAGNOSENSICHERHEIT=" + DIAGNOSENSICHERHEIT);
			sb.append(",SEKUNDAER_KODE=" + SEKUNDAER_KODE);
			sb.append(",LOKALISATION_1=" + LOKALISATION_1);
			sb.append(",DIAGNOSENSICHERHEIT_1=" + DIAGNOSENSICHERHEIT_1);
			sb.append(",PATIENTENNR=" + PATIENTENNR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_ICD_2 = new byte[0];
		static byte[] commonByteArray_TOS_ICD_2 = new byte[0];

		public String IK;

		public String getIK() {
			return this.IK;
		}

		public String Entlassender_Standort;

		public String getEntlassender_Standort() {
			return this.Entlassender_Standort;
		}

		public String Entgeltbereich;

		public String getEntgeltbereich() {
			return this.Entgeltbereich;
		}

		public String KH_internes_Kennzeichen;

		public String getKH_internes_Kennzeichen() {
			return this.KH_internes_Kennzeichen;
		}

		public String Diagnoseart;

		public String getDiagnoseart() {
			return this.Diagnoseart;
		}

		public String ICD_Version;

		public String getICD_Version() {
			return this.ICD_Version;
		}

		public String ICD_Kode;

		public String getICD_Kode() {
			return this.ICD_Kode;
		}

		public String Lokalisation;

		public String getLokalisation() {
			return this.Lokalisation;
		}

		public String Diagnosensicherheit;

		public String getDiagnosensicherheit() {
			return this.Diagnosensicherheit;
		}

		public String Sekundaer_Kode;

		public String getSekundaer_Kode() {
			return this.Sekundaer_Kode;
		}

		public String Lokalisation_1;

		public String getLokalisation_1() {
			return this.Lokalisation_1;
		}

		public String Diagnosensicherheit1;

		public String getDiagnosensicherheit1() {
			return this.Diagnosensicherheit1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ICD_2.length) {
					if (length < 1024 && commonByteArray_TOS_ICD_2.length == 0) {
						commonByteArray_TOS_ICD_2 = new byte[1024];
					} else {
						commonByteArray_TOS_ICD_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ICD_2, 0, length);
				strReturn = new String(commonByteArray_TOS_ICD_2, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ICD_2) {

				try {

					int length = 0;

					this.IK = readString(dis);

					this.Entlassender_Standort = readString(dis);

					this.Entgeltbereich = readString(dis);

					this.KH_internes_Kennzeichen = readString(dis);

					this.Diagnoseart = readString(dis);

					this.ICD_Version = readString(dis);

					this.ICD_Kode = readString(dis);

					this.Lokalisation = readString(dis);

					this.Diagnosensicherheit = readString(dis);

					this.Sekundaer_Kode = readString(dis);

					this.Lokalisation_1 = readString(dis);

					this.Diagnosensicherheit1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IK, dos);

				// String

				writeString(this.Entlassender_Standort, dos);

				// String

				writeString(this.Entgeltbereich, dos);

				// String

				writeString(this.KH_internes_Kennzeichen, dos);

				// String

				writeString(this.Diagnoseart, dos);

				// String

				writeString(this.ICD_Version, dos);

				// String

				writeString(this.ICD_Kode, dos);

				// String

				writeString(this.Lokalisation, dos);

				// String

				writeString(this.Diagnosensicherheit, dos);

				// String

				writeString(this.Sekundaer_Kode, dos);

				// String

				writeString(this.Lokalisation_1, dos);

				// String

				writeString(this.Diagnosensicherheit1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IK=" + IK);
			sb.append(",Entlassender_Standort=" + Entlassender_Standort);
			sb.append(",Entgeltbereich=" + Entgeltbereich);
			sb.append(",KH_internes_Kennzeichen=" + KH_internes_Kennzeichen);
			sb.append(",Diagnoseart=" + Diagnoseart);
			sb.append(",ICD_Version=" + ICD_Version);
			sb.append(",ICD_Kode=" + ICD_Kode);
			sb.append(",Lokalisation=" + Lokalisation);
			sb.append(",Diagnosensicherheit=" + Diagnosensicherheit);
			sb.append(",Sekundaer_Kode=" + Sekundaer_Kode);
			sb.append(",Lokalisation_1=" + Lokalisation_1);
			sb.append(",Diagnosensicherheit1=" + Diagnosensicherheit1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TOS_ICD_2 = new byte[0];
		static byte[] commonByteArray_TOS_ICD_2 = new byte[0];

		public String IK;

		public String getIK() {
			return this.IK;
		}

		public String Entlassender_Standort;

		public String getEntlassender_Standort() {
			return this.Entlassender_Standort;
		}

		public String Entgeltbereich;

		public String getEntgeltbereich() {
			return this.Entgeltbereich;
		}

		public String KH_internes_Kennzeichen;

		public String getKH_internes_Kennzeichen() {
			return this.KH_internes_Kennzeichen;
		}

		public String Diagnoseart;

		public String getDiagnoseart() {
			return this.Diagnoseart;
		}

		public String ICD_Version;

		public String getICD_Version() {
			return this.ICD_Version;
		}

		public String ICD_Kode;

		public String getICD_Kode() {
			return this.ICD_Kode;
		}

		public String Lokalisation;

		public String getLokalisation() {
			return this.Lokalisation;
		}

		public String Diagnosensicherheit;

		public String getDiagnosensicherheit() {
			return this.Diagnosensicherheit;
		}

		public String Sekundaer_Kode;

		public String getSekundaer_Kode() {
			return this.Sekundaer_Kode;
		}

		public String Lokalisation_1;

		public String getLokalisation_1() {
			return this.Lokalisation_1;
		}

		public String Diagnosensicherheit1;

		public String getDiagnosensicherheit1() {
			return this.Diagnosensicherheit1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ICD_2.length) {
					if (length < 1024 && commonByteArray_TOS_ICD_2.length == 0) {
						commonByteArray_TOS_ICD_2 = new byte[1024];
					} else {
						commonByteArray_TOS_ICD_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ICD_2, 0, length);
				strReturn = new String(commonByteArray_TOS_ICD_2, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ICD_2) {

				try {

					int length = 0;

					this.IK = readString(dis);

					this.Entlassender_Standort = readString(dis);

					this.Entgeltbereich = readString(dis);

					this.KH_internes_Kennzeichen = readString(dis);

					this.Diagnoseart = readString(dis);

					this.ICD_Version = readString(dis);

					this.ICD_Kode = readString(dis);

					this.Lokalisation = readString(dis);

					this.Diagnosensicherheit = readString(dis);

					this.Sekundaer_Kode = readString(dis);

					this.Lokalisation_1 = readString(dis);

					this.Diagnosensicherheit1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IK, dos);

				// String

				writeString(this.Entlassender_Standort, dos);

				// String

				writeString(this.Entgeltbereich, dos);

				// String

				writeString(this.KH_internes_Kennzeichen, dos);

				// String

				writeString(this.Diagnoseart, dos);

				// String

				writeString(this.ICD_Version, dos);

				// String

				writeString(this.ICD_Kode, dos);

				// String

				writeString(this.Lokalisation, dos);

				// String

				writeString(this.Diagnosensicherheit, dos);

				// String

				writeString(this.Sekundaer_Kode, dos);

				// String

				writeString(this.Lokalisation_1, dos);

				// String

				writeString(this.Diagnosensicherheit1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IK=" + IK);
			sb.append(",Entlassender_Standort=" + Entlassender_Standort);
			sb.append(",Entgeltbereich=" + Entgeltbereich);
			sb.append(",KH_internes_Kennzeichen=" + KH_internes_Kennzeichen);
			sb.append(",Diagnoseart=" + Diagnoseart);
			sb.append(",ICD_Version=" + ICD_Version);
			sb.append(",ICD_Kode=" + ICD_Kode);
			sb.append(",Lokalisation=" + Lokalisation);
			sb.append(",Diagnosensicherheit=" + Diagnosensicherheit);
			sb.append(",Sekundaer_Kode=" + Sekundaer_Kode);
			sb.append(",Lokalisation_1=" + Lokalisation_1);
			sb.append(",Diagnosensicherheit1=" + Diagnosensicherheit1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				out2Struct out2 = new out2Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// routines.system.Row
				java.io.OutputStreamWriter writer_tFileOutputDelimited_1 = null;
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					writer_tFileOutputDelimited_1 = new java.io.OutputStreamWriter(
							(java.io.OutputStream) globalMap
									.get("out_file_icd_2"),
							"ISO-8859-15");
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							writer_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("IK");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("ENTLASSENDER_STANDORT");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("ENTGELTBEREICH");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("KH_INTERNES_KENNZEICHEN");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("DIAGNOSEART");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("ICD_VERSION");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("ICD_KODE");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("LOKALISATION");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("DIAGNOSENSICHERHEIT");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("SEKUNDAER_KODE");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("LOKALISATION_1");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("DIAGNOSENSICHERHEIT_1");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("PATIENTENNR");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());
					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
							.get("tHash_Lookup_row2"));

					row2Struct row2HashKey = new row2Struct();
					row2Struct row2Default = new row2Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out2Struct out2_tmp = new out2Struct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					int nb_line_tFileInputDelimited_1 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
					try {

						Object filename_tFileInputDelimited_1 = context.p21_input
								+ "ICD.csv";
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
							if (footer_value_tFileInputDelimited_1 > 0
									|| random_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									context.p21_input + "ICD.csv", "UTF-8",
									";", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_1 != null
								&& fid_tFileInputDelimited_1.nextRecord()) {

							row1 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_1 = 0;

								columnIndexWithD_tFileInputDelimited_1 = 0;

								row1.IK = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 1;

								row1.Entlassender_Standort = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 2;

								row1.Entgeltbereich = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 3;

								row1.KH_internes_Kennzeichen = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 4;

								row1.Diagnoseart = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 5;

								row1.ICD_Version = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 6;

								row1.ICD_Kode = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 7;

								row1.Lokalisation = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 8;

								row1.Diagnosensicherheit = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 9;

								row1.Sekundaer_Kode = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 10;

								row1.Lokalisation_1 = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 11;

								row1.Diagnosensicherheit1 = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								row1 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row2"
								// /////////////////////////////////////////////

								boolean forceLooprow2 = false;

								row2Struct row2ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row2HashKey.KH_INTERNES_KENNZEICHEN = row1.KH_internes_Kennzeichen;

									row2HashKey.hashCodeDirty = true;

									tHash_Lookup_row2.lookup(row2HashKey);

									if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row2 != null
										&& tHash_Lookup_row2
												.getCount(row2HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.KH_INTERNES_KENNZEICHEN = '"
									// + row2HashKey.KH_INTERNES_KENNZEICHEN +
									// "'");
								} // G 071

								row2Struct row2 = null;

								row2Struct fromLookup_row2 = null;
								row2 = row2Default;

								if (tHash_Lookup_row2 != null
										&& tHash_Lookup_row2.hasNext()) { // G
																			// 099

									fromLookup_row2 = tHash_Lookup_row2.next();

								} // G 099

								if (fromLookup_row2 != null) {
									row2 = fromLookup_row2;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out2 = null;

									if (!rejectedInnerJoin_tMap_1) {

										// # Output table : 'out2'
										out2_tmp.IK = row1.IK;
										out2_tmp.ENTLASSENDER_STANDORT = row1.Entlassender_Standort;
										out2_tmp.ENTGELTBEREICH = row1.Entgeltbereich;
										out2_tmp.KH_INTERNES_KENNZEICHEN = row1.KH_internes_Kennzeichen;
										out2_tmp.DIAGNOSEART = row1.Diagnoseart;
										out2_tmp.ICD_VERSION = row1.ICD_Version;
										out2_tmp.ICD_KODE = row1.ICD_Kode;
										out2_tmp.LOKALISATION = row1.Lokalisation;
										out2_tmp.DIAGNOSENSICHERHEIT = row1.Diagnosensicherheit;
										out2_tmp.SEKUNDAER_KODE = row1.Sekundaer_Kode;
										out2_tmp.LOKALISATION_1 = row1.Lokalisation_1;
										out2_tmp.DIAGNOSENSICHERHEIT_1 = row1.Diagnosensicherheit1;
										out2_tmp.PATIENTENNR = row2.PATIENTENNUMMER;
										out2 = out2_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "out2"
								if (out2 != null) {

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

									if (out2.IK != null) {

										sb_tFileOutputDelimited_1.append(

										out2.IK

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.ENTLASSENDER_STANDORT != null) {

										sb_tFileOutputDelimited_1.append(

										out2.ENTLASSENDER_STANDORT

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.ENTGELTBEREICH != null) {

										sb_tFileOutputDelimited_1.append(

										out2.ENTGELTBEREICH

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.KH_INTERNES_KENNZEICHEN != null) {

										sb_tFileOutputDelimited_1.append(

										out2.KH_INTERNES_KENNZEICHEN

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.DIAGNOSEART != null) {

										sb_tFileOutputDelimited_1.append(

										out2.DIAGNOSEART

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.ICD_VERSION != null) {

										sb_tFileOutputDelimited_1.append(

										out2.ICD_VERSION

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.ICD_KODE != null) {

										sb_tFileOutputDelimited_1.append(

										out2.ICD_KODE

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.LOKALISATION != null) {

										sb_tFileOutputDelimited_1.append(

										out2.LOKALISATION

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.DIAGNOSENSICHERHEIT != null) {

										sb_tFileOutputDelimited_1.append(

										out2.DIAGNOSENSICHERHEIT

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.SEKUNDAER_KODE != null) {

										sb_tFileOutputDelimited_1.append(

										out2.SEKUNDAER_KODE

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.LOKALISATION_1 != null) {

										sb_tFileOutputDelimited_1.append(

										out2.LOKALISATION_1

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.DIAGNOSENSICHERHEIT_1 != null) {

										sb_tFileOutputDelimited_1.append(

										out2.DIAGNOSENSICHERHEIT_1

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);

									if (out2.PATIENTENNR != null) {

										sb_tFileOutputDelimited_1.append(

										out2.PATIENTENNR

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;

									outtFileOutputDelimited_1
											.write(sb_tFileOutputDelimited_1
													.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

								} // End of branch "out2"

							} // End of branch "row1"

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
					} finally {
						if (!((Object) (context.p21_input + "ICD.csv") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_1 != null) {
								fid_tFileInputDelimited_1.close();
							}
						}
						if (fid_tFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE",
									fid_tFileInputDelimited_1.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove("tHash_Lookup_row2");

					// ###############################

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						writer_tFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1 = null;
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				((java.io.OutputStream) globalMap.get("out_file_icd_2"))
						.close();

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_ICD_2 = new byte[0];
		static byte[] commonByteArray_TOS_ICD_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer IK;

		public Integer getIK() {
			return this.IK;
		}

		public String ENTLASSENDER_STANDORT;

		public String getENTLASSENDER_STANDORT() {
			return this.ENTLASSENDER_STANDORT;
		}

		public String ENTGELTBEREICH;

		public String getENTGELTBEREICH() {
			return this.ENTGELTBEREICH;
		}

		public String KH_INTERNES_KENNZEICHEN;

		public String getKH_INTERNES_KENNZEICHEN() {
			return this.KH_INTERNES_KENNZEICHEN;
		}

		public String IK_DER_KRANKENKASSE;

		public String getIK_DER_KRANKENKASSE() {
			return this.IK_DER_KRANKENKASSE;
		}

		public Integer GEBURTSJAHR;

		public Integer getGEBURTSJAHR() {
			return this.GEBURTSJAHR;
		}

		public String GEBURTSMONAT;

		public String getGEBURTSMONAT() {
			return this.GEBURTSMONAT;
		}

		public Character GESCHLECHT;

		public Character getGESCHLECHT() {
			return this.GESCHLECHT;
		}

		public Integer PLZ;

		public Integer getPLZ() {
			return this.PLZ;
		}

		public Long AUFNAHMEDATUM;

		public Long getAUFNAHMEDATUM() {
			return this.AUFNAHMEDATUM;
		}

		public Character AUFNAHMEANLASS;

		public Character getAUFNAHMEANLASS() {
			return this.AUFNAHMEANLASS;
		}

		public String AUFNAHMEGRUND;

		public String getAUFNAHMEGRUND() {
			return this.AUFNAHMEGRUND;
		}

		public Character FALLZUSAMMENFHRUNG;

		public Character getFALLZUSAMMENFHRUNG() {
			return this.FALLZUSAMMENFHRUNG;
		}

		public String FALLZUSAMMENFHRUNGSGRUND;

		public String getFALLZUSAMMENFHRUNGSGRUND() {
			return this.FALLZUSAMMENFHRUNGSGRUND;
		}

		public String AUFNAHMEGEWICHT;

		public String getAUFNAHMEGEWICHT() {
			return this.AUFNAHMEGEWICHT;
		}

		public Long ENTLASSUNGSDATUM;

		public Long getENTLASSUNGSDATUM() {
			return this.ENTLASSUNGSDATUM;
		}

		public String ENTLASSUNGSGRUND;

		public String getENTLASSUNGSGRUND() {
			return this.ENTLASSUNGSGRUND;
		}

		public String ALTER_IN_TAGEN_AM_AUFNAHMETAG;

		public String getALTER_IN_TAGEN_AM_AUFNAHMETAG() {
			return this.ALTER_IN_TAGEN_AM_AUFNAHMETAG;
		}

		public String ALTER_IN_JAHREN_AM_AUFNAHMETAG;

		public String getALTER_IN_JAHREN_AM_AUFNAHMETAG() {
			return this.ALTER_IN_JAHREN_AM_AUFNAHMETAG;
		}

		public String PATIENTENNUMMER;

		public String getPATIENTENNUMMER() {
			return this.PATIENTENNUMMER;
		}

		public String INTERKURRENTE_DIALYSEN;

		public String getINTERKURRENTE_DIALYSEN() {
			return this.INTERKURRENTE_DIALYSEN;
		}

		public String BEATMUNGSSTUNDEN;

		public String getBEATMUNGSSTUNDEN() {
			return this.BEATMUNGSSTUNDEN;
		}

		public String BEHANDLUNGSBEGINN_VORSTAT;

		public String getBEHANDLUNGSBEGINN_VORSTAT() {
			return this.BEHANDLUNGSBEGINN_VORSTAT;
		}

		public String BEHANDLUNGSTAGE_VORSTATIONAER;

		public String getBEHANDLUNGSTAGE_VORSTATIONAER() {
			return this.BEHANDLUNGSTAGE_VORSTATIONAER;
		}

		public String BEHANDLUNGSENDE_NACHSTATIONAER;

		public String getBEHANDLUNGSENDE_NACHSTATIONAER() {
			return this.BEHANDLUNGSENDE_NACHSTATIONAER;
		}

		public String BEHANDLUNGSTAGE_NACHSTATIONAER;

		public String getBEHANDLUNGSTAGE_NACHSTATIONAER() {
			return this.BEHANDLUNGSTAGE_NACHSTATIONAER;
		}

		public String IK_VERLEGUNGS_KH;

		public String getIK_VERLEGUNGS_KH() {
			return this.IK_VERLEGUNGS_KH;
		}

		public Integer BELEGUNGSTAGE_AUSSERH_KHENTGG;

		public Integer getBELEGUNGSTAGE_AUSSERH_KHENTGG() {
			return this.BELEGUNGSTAGE_AUSSERH_KHENTGG;
		}

		public String BEURLAUBUNGSTAGE_PSY;

		public String getBEURLAUBUNGSTAGE_PSY() {
			return this.BEURLAUBUNGSTAGE_PSY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.KH_INTERNES_KENNZEICHEN == null) ? 0
								: this.KH_INTERNES_KENNZEICHEN.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.KH_INTERNES_KENNZEICHEN == null) {
				if (other.KH_INTERNES_KENNZEICHEN != null)
					return false;
			} else if (!this.KH_INTERNES_KENNZEICHEN
					.equals(other.KH_INTERNES_KENNZEICHEN))
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.IK = this.IK;
			other.ENTLASSENDER_STANDORT = this.ENTLASSENDER_STANDORT;
			other.ENTGELTBEREICH = this.ENTGELTBEREICH;
			other.KH_INTERNES_KENNZEICHEN = this.KH_INTERNES_KENNZEICHEN;
			other.IK_DER_KRANKENKASSE = this.IK_DER_KRANKENKASSE;
			other.GEBURTSJAHR = this.GEBURTSJAHR;
			other.GEBURTSMONAT = this.GEBURTSMONAT;
			other.GESCHLECHT = this.GESCHLECHT;
			other.PLZ = this.PLZ;
			other.AUFNAHMEDATUM = this.AUFNAHMEDATUM;
			other.AUFNAHMEANLASS = this.AUFNAHMEANLASS;
			other.AUFNAHMEGRUND = this.AUFNAHMEGRUND;
			other.FALLZUSAMMENFHRUNG = this.FALLZUSAMMENFHRUNG;
			other.FALLZUSAMMENFHRUNGSGRUND = this.FALLZUSAMMENFHRUNGSGRUND;
			other.AUFNAHMEGEWICHT = this.AUFNAHMEGEWICHT;
			other.ENTLASSUNGSDATUM = this.ENTLASSUNGSDATUM;
			other.ENTLASSUNGSGRUND = this.ENTLASSUNGSGRUND;
			other.ALTER_IN_TAGEN_AM_AUFNAHMETAG = this.ALTER_IN_TAGEN_AM_AUFNAHMETAG;
			other.ALTER_IN_JAHREN_AM_AUFNAHMETAG = this.ALTER_IN_JAHREN_AM_AUFNAHMETAG;
			other.PATIENTENNUMMER = this.PATIENTENNUMMER;
			other.INTERKURRENTE_DIALYSEN = this.INTERKURRENTE_DIALYSEN;
			other.BEATMUNGSSTUNDEN = this.BEATMUNGSSTUNDEN;
			other.BEHANDLUNGSBEGINN_VORSTAT = this.BEHANDLUNGSBEGINN_VORSTAT;
			other.BEHANDLUNGSTAGE_VORSTATIONAER = this.BEHANDLUNGSTAGE_VORSTATIONAER;
			other.BEHANDLUNGSENDE_NACHSTATIONAER = this.BEHANDLUNGSENDE_NACHSTATIONAER;
			other.BEHANDLUNGSTAGE_NACHSTATIONAER = this.BEHANDLUNGSTAGE_NACHSTATIONAER;
			other.IK_VERLEGUNGS_KH = this.IK_VERLEGUNGS_KH;
			other.BELEGUNGSTAGE_AUSSERH_KHENTGG = this.BELEGUNGSTAGE_AUSSERH_KHENTGG;
			other.BEURLAUBUNGSTAGE_PSY = this.BEURLAUBUNGSTAGE_PSY;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.KH_INTERNES_KENNZEICHEN = this.KH_INTERNES_KENNZEICHEN;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ICD_2.length) {
					if (length < 1024 && commonByteArray_TOS_ICD_2.length == 0) {
						commonByteArray_TOS_ICD_2 = new byte[1024];
					} else {
						commonByteArray_TOS_ICD_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ICD_2, 0, length);
				strReturn = new String(commonByteArray_TOS_ICD_2, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ICD_2) {

				try {

					int length = 0;

					this.KH_INTERNES_KENNZEICHEN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KH_INTERNES_KENNZEICHEN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.IK = readInteger(dis, ois);

				this.ENTLASSENDER_STANDORT = readString(dis, ois);

				this.ENTGELTBEREICH = readString(dis, ois);

				this.IK_DER_KRANKENKASSE = readString(dis, ois);

				this.GEBURTSJAHR = readInteger(dis, ois);

				this.GEBURTSMONAT = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.GESCHLECHT = null;
				} else {
					this.GESCHLECHT = dis.readChar();
				}

				this.PLZ = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.AUFNAHMEDATUM = null;
				} else {
					this.AUFNAHMEDATUM = dis.readLong();
				}

				length = dis.readByte();
				if (length == -1) {
					this.AUFNAHMEANLASS = null;
				} else {
					this.AUFNAHMEANLASS = dis.readChar();
				}

				this.AUFNAHMEGRUND = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.FALLZUSAMMENFHRUNG = null;
				} else {
					this.FALLZUSAMMENFHRUNG = dis.readChar();
				}

				this.FALLZUSAMMENFHRUNGSGRUND = readString(dis, ois);

				this.AUFNAHMEGEWICHT = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ENTLASSUNGSDATUM = null;
				} else {
					this.ENTLASSUNGSDATUM = dis.readLong();
				}

				this.ENTLASSUNGSGRUND = readString(dis, ois);

				this.ALTER_IN_TAGEN_AM_AUFNAHMETAG = readString(dis, ois);

				this.ALTER_IN_JAHREN_AM_AUFNAHMETAG = readString(dis, ois);

				this.PATIENTENNUMMER = readString(dis, ois);

				this.INTERKURRENTE_DIALYSEN = readString(dis, ois);

				this.BEATMUNGSSTUNDEN = readString(dis, ois);

				this.BEHANDLUNGSBEGINN_VORSTAT = readString(dis, ois);

				this.BEHANDLUNGSTAGE_VORSTATIONAER = readString(dis, ois);

				this.BEHANDLUNGSENDE_NACHSTATIONAER = readString(dis, ois);

				this.BEHANDLUNGSTAGE_NACHSTATIONAER = readString(dis, ois);

				this.IK_VERLEGUNGS_KH = readString(dis, ois);

				this.BELEGUNGSTAGE_AUSSERH_KHENTGG = readInteger(dis, ois);

				this.BEURLAUBUNGSTAGE_PSY = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.IK, dos, oos);

				writeString(this.ENTLASSENDER_STANDORT, dos, oos);

				writeString(this.ENTGELTBEREICH, dos, oos);

				writeString(this.IK_DER_KRANKENKASSE, dos, oos);

				writeInteger(this.GEBURTSJAHR, dos, oos);

				writeString(this.GEBURTSMONAT, dos, oos);

				if (this.GESCHLECHT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.GESCHLECHT);
				}

				writeInteger(this.PLZ, dos, oos);

				if (this.AUFNAHMEDATUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.AUFNAHMEDATUM);
				}

				if (this.AUFNAHMEANLASS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.AUFNAHMEANLASS);
				}

				writeString(this.AUFNAHMEGRUND, dos, oos);

				if (this.FALLZUSAMMENFHRUNG == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.FALLZUSAMMENFHRUNG);
				}

				writeString(this.FALLZUSAMMENFHRUNGSGRUND, dos, oos);

				writeString(this.AUFNAHMEGEWICHT, dos, oos);

				if (this.ENTLASSUNGSDATUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ENTLASSUNGSDATUM);
				}

				writeString(this.ENTLASSUNGSGRUND, dos, oos);

				writeString(this.ALTER_IN_TAGEN_AM_AUFNAHMETAG, dos, oos);

				writeString(this.ALTER_IN_JAHREN_AM_AUFNAHMETAG, dos, oos);

				writeString(this.PATIENTENNUMMER, dos, oos);

				writeString(this.INTERKURRENTE_DIALYSEN, dos, oos);

				writeString(this.BEATMUNGSSTUNDEN, dos, oos);

				writeString(this.BEHANDLUNGSBEGINN_VORSTAT, dos, oos);

				writeString(this.BEHANDLUNGSTAGE_VORSTATIONAER, dos, oos);

				writeString(this.BEHANDLUNGSENDE_NACHSTATIONAER, dos, oos);

				writeString(this.BEHANDLUNGSTAGE_NACHSTATIONAER, dos, oos);

				writeString(this.IK_VERLEGUNGS_KH, dos, oos);

				writeInteger(this.BELEGUNGSTAGE_AUSSERH_KHENTGG, dos, oos);

				writeString(this.BEURLAUBUNGSTAGE_PSY, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IK=" + String.valueOf(IK));
			sb.append(",ENTLASSENDER_STANDORT=" + ENTLASSENDER_STANDORT);
			sb.append(",ENTGELTBEREICH=" + ENTGELTBEREICH);
			sb.append(",KH_INTERNES_KENNZEICHEN=" + KH_INTERNES_KENNZEICHEN);
			sb.append(",IK_DER_KRANKENKASSE=" + IK_DER_KRANKENKASSE);
			sb.append(",GEBURTSJAHR=" + String.valueOf(GEBURTSJAHR));
			sb.append(",GEBURTSMONAT=" + GEBURTSMONAT);
			sb.append(",GESCHLECHT=" + String.valueOf(GESCHLECHT));
			sb.append(",PLZ=" + String.valueOf(PLZ));
			sb.append(",AUFNAHMEDATUM=" + String.valueOf(AUFNAHMEDATUM));
			sb.append(",AUFNAHMEANLASS=" + String.valueOf(AUFNAHMEANLASS));
			sb.append(",AUFNAHMEGRUND=" + AUFNAHMEGRUND);
			sb.append(",FALLZUSAMMENFHRUNG="
					+ String.valueOf(FALLZUSAMMENFHRUNG));
			sb.append(",FALLZUSAMMENFHRUNGSGRUND=" + FALLZUSAMMENFHRUNGSGRUND);
			sb.append(",AUFNAHMEGEWICHT=" + AUFNAHMEGEWICHT);
			sb.append(",ENTLASSUNGSDATUM=" + String.valueOf(ENTLASSUNGSDATUM));
			sb.append(",ENTLASSUNGSGRUND=" + ENTLASSUNGSGRUND);
			sb.append(",ALTER_IN_TAGEN_AM_AUFNAHMETAG="
					+ ALTER_IN_TAGEN_AM_AUFNAHMETAG);
			sb.append(",ALTER_IN_JAHREN_AM_AUFNAHMETAG="
					+ ALTER_IN_JAHREN_AM_AUFNAHMETAG);
			sb.append(",PATIENTENNUMMER=" + PATIENTENNUMMER);
			sb.append(",INTERKURRENTE_DIALYSEN=" + INTERKURRENTE_DIALYSEN);
			sb.append(",BEATMUNGSSTUNDEN=" + BEATMUNGSSTUNDEN);
			sb.append(",BEHANDLUNGSBEGINN_VORSTAT=" + BEHANDLUNGSBEGINN_VORSTAT);
			sb.append(",BEHANDLUNGSTAGE_VORSTATIONAER="
					+ BEHANDLUNGSTAGE_VORSTATIONAER);
			sb.append(",BEHANDLUNGSENDE_NACHSTATIONAER="
					+ BEHANDLUNGSENDE_NACHSTATIONAER);
			sb.append(",BEHANDLUNGSTAGE_NACHSTATIONAER="
					+ BEHANDLUNGSTAGE_NACHSTATIONAER);
			sb.append(",IK_VERLEGUNGS_KH=" + IK_VERLEGUNGS_KH);
			sb.append(",BELEGUNGSTAGE_AUSSERH_KHENTGG="
					+ String.valueOf(BELEGUNGSTAGE_AUSSERH_KHENTGG));
			sb.append(",BEURLAUBUNGSTAGE_PSY=" + BEURLAUBUNGSTAGE_PSY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KH_INTERNES_KENNZEICHEN,
					other.KH_INTERNES_KENNZEICHEN);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = context.p21_input
							+ "FALL.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								context.p21_input + "FALL.csv", "UTF-8", ";",
								"\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.IK = ParserUtils.parseTo_Integer(temp);

							} else {

								row2.IK = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.ENTLASSENDER_STANDORT = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row2.ENTGELTBEREICH = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row2.KH_INTERNES_KENNZEICHEN = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row2.IK_DER_KRANKENKASSE = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.GEBURTSJAHR = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row2.GEBURTSJAHR = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row2.GEBURTSMONAT = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.GESCHLECHT = ParserUtils
										.parseTo_Character(temp);

							} else {

								row2.GESCHLECHT = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 8;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.PLZ = ParserUtils.parseTo_Integer(temp);

							} else {

								row2.PLZ = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.AUFNAHMEDATUM = ParserUtils
										.parseTo_Long(temp);

							} else {

								row2.AUFNAHMEDATUM = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 10;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.AUFNAHMEANLASS = ParserUtils
										.parseTo_Character(temp);

							} else {

								row2.AUFNAHMEANLASS = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row2.AUFNAHMEGRUND = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.FALLZUSAMMENFHRUNG = ParserUtils
										.parseTo_Character(temp);

							} else {

								row2.FALLZUSAMMENFHRUNG = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row2.FALLZUSAMMENFHRUNGSGRUND = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							row2.AUFNAHMEGEWICHT = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.ENTLASSUNGSDATUM = ParserUtils
										.parseTo_Long(temp);

							} else {

								row2.ENTLASSUNGSDATUM = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 16;

							row2.ENTLASSUNGSGRUND = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 17;

							row2.ALTER_IN_TAGEN_AM_AUFNAHMETAG = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							row2.ALTER_IN_JAHREN_AM_AUFNAHMETAG = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							row2.PATIENTENNUMMER = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 20;

							row2.INTERKURRENTE_DIALYSEN = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							row2.BEATMUNGSSTUNDEN = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							row2.BEHANDLUNGSBEGINN_VORSTAT = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							row2.BEHANDLUNGSTAGE_VORSTATIONAER = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							row2.BEHANDLUNGSENDE_NACHSTATIONAER = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 25;

							row2.BEHANDLUNGSTAGE_NACHSTATIONAER = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 26;

							row2.IK_VERLEGUNGS_KH = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 27;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row2.BELEGUNGSTAGE_AUSSERH_KHENTGG = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row2.BELEGUNGSTAGE_AUSSERH_KHENTGG = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 28;

							row2.BEURLAUBUNGSTAGE_PSY = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedHash_row2 main ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.IK = row2.IK;

							row2_HashRow.ENTLASSENDER_STANDORT = row2.ENTLASSENDER_STANDORT;

							row2_HashRow.ENTGELTBEREICH = row2.ENTGELTBEREICH;

							row2_HashRow.KH_INTERNES_KENNZEICHEN = row2.KH_INTERNES_KENNZEICHEN;

							row2_HashRow.IK_DER_KRANKENKASSE = row2.IK_DER_KRANKENKASSE;

							row2_HashRow.GEBURTSJAHR = row2.GEBURTSJAHR;

							row2_HashRow.GEBURTSMONAT = row2.GEBURTSMONAT;

							row2_HashRow.GESCHLECHT = row2.GESCHLECHT;

							row2_HashRow.PLZ = row2.PLZ;

							row2_HashRow.AUFNAHMEDATUM = row2.AUFNAHMEDATUM;

							row2_HashRow.AUFNAHMEANLASS = row2.AUFNAHMEANLASS;

							row2_HashRow.AUFNAHMEGRUND = row2.AUFNAHMEGRUND;

							row2_HashRow.FALLZUSAMMENFHRUNG = row2.FALLZUSAMMENFHRUNG;

							row2_HashRow.FALLZUSAMMENFHRUNGSGRUND = row2.FALLZUSAMMENFHRUNGSGRUND;

							row2_HashRow.AUFNAHMEGEWICHT = row2.AUFNAHMEGEWICHT;

							row2_HashRow.ENTLASSUNGSDATUM = row2.ENTLASSUNGSDATUM;

							row2_HashRow.ENTLASSUNGSGRUND = row2.ENTLASSUNGSGRUND;

							row2_HashRow.ALTER_IN_TAGEN_AM_AUFNAHMETAG = row2.ALTER_IN_TAGEN_AM_AUFNAHMETAG;

							row2_HashRow.ALTER_IN_JAHREN_AM_AUFNAHMETAG = row2.ALTER_IN_JAHREN_AM_AUFNAHMETAG;

							row2_HashRow.PATIENTENNUMMER = row2.PATIENTENNUMMER;

							row2_HashRow.INTERKURRENTE_DIALYSEN = row2.INTERKURRENTE_DIALYSEN;

							row2_HashRow.BEATMUNGSSTUNDEN = row2.BEATMUNGSSTUNDEN;

							row2_HashRow.BEHANDLUNGSBEGINN_VORSTAT = row2.BEHANDLUNGSBEGINN_VORSTAT;

							row2_HashRow.BEHANDLUNGSTAGE_VORSTATIONAER = row2.BEHANDLUNGSTAGE_VORSTATIONAER;

							row2_HashRow.BEHANDLUNGSENDE_NACHSTATIONAER = row2.BEHANDLUNGSENDE_NACHSTATIONAER;

							row2_HashRow.BEHANDLUNGSTAGE_NACHSTATIONAER = row2.BEHANDLUNGSTAGE_NACHSTATIONAER;

							row2_HashRow.IK_VERLEGUNGS_KH = row2.IK_VERLEGUNGS_KH;

							row2_HashRow.BELEGUNGSTAGE_AUSSERH_KHENTGG = row2.BELEGUNGSTAGE_AUSSERH_KHENTGG;

							row2_HashRow.BEURLAUBUNGSTAGE_PSY = row2.BEURLAUBUNGSTAGE_PSY;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedHash_row2++;

							/**
							 * [tAdvancedHash_row2 main ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (context.p21_input + "FALL.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ICD_2 ICD_2Class = new ICD_2();

		int exitCode = ICD_2Class.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ICD_2.class.getClassLoader()
					.getResourceAsStream(
							"tos/icd_2_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.p21_input = (String) context.getProperty("p21_input");
			context.p21_output = (String) context.getProperty("p21_output");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("p21_input")) {
				context.p21_input = (String) parentContextMap.get("p21_input");
			}
			if (parentContextMap.containsKey("p21_output")) {
				context.p21_output = (String) parentContextMap
						.get("p21_output");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {

			e_tJava_1.printStackTrace();
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ICD_2");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 99432 characters generated by Talend Open Studio for Data Integration on the
 * January 16, 2014 3:47:44 PM CET
 ************************************************************************************************/
