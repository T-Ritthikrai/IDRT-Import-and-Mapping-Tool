// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.idrt_delete_patients_0_1;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.enc_num_routine;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: IDRT_Delete_Patients Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class IDRT_Delete_Patients implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (DBInstance != null) {

				this.setProperty("DBInstance", DBInstance.toString());

			}

			if (DBHost != null) {

				this.setProperty("DBHost", DBHost.toString());

			}

			if (DBPort != null) {

				this.setProperty("DBPort", DBPort.toString());

			}

			if (project != null) {

				this.setProperty("project", project.toString());

			}

			if (DBPassword != null) {

				this.setProperty("DBPassword", DBPassword.toString());

			}

			if (DBSchema != null) {

				this.setProperty("DBSchema", DBSchema.toString());

			}

			if (DBUsername != null) {

				this.setProperty("DBUsername", DBUsername.toString());

			}

			if (hashSet != null) {

				this.setProperty("hashSet", hashSet.toString());

			}

		}

		public String DBInstance;

		public String getDBInstance() {
			return this.DBInstance;
		}

		public String DBHost;

		public String getDBHost() {
			return this.DBHost;
		}

		public String DBPort;

		public String getDBPort() {
			return this.DBPort;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public java.lang.String DBPassword;

		public java.lang.String getDBPassword() {
			return this.DBPassword;
		}

		public String DBSchema;

		public String getDBSchema() {
			return this.DBSchema;
		}

		public String DBUsername;

		public String getDBUsername() {
			return this.DBUsername;
		}

		public Object hashSet;

		public Object getHashSet() {
			return this.hashSet;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IDRT_Delete_Patients";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IDRT_Delete_Patients.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IDRT_Delete_Patients.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_2", System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_2", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_3", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_5", System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_4", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tForeach_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_5", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_1", System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_4", System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_obs_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_obs", System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Deleting unused patients!");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tOracleConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());
				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ context.DBHost + ":" + context.DBPort + ":"
						+ context.DBInstance;
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String userName_tOracleConnection_1 = context.DBUsername;
				String password_tOracleConnection_1 = context.DBPassword;

				java.sql.Connection conn_tOracleConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					conn_tOracleConnection_1 = java.sql.DriverManager
							.getConnection(url_tOracleConnection_1,
									userName_tOracleConnection_1,
									password_tOracleConnection_1);
					globalMap.put("conn_tOracleConnection_1",
							conn_tOracleConnection_1);
				}
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(true);
				}
				globalMap.put("host_" + "tOracleConnection_1", context.DBHost);
				globalMap.put("port_" + "tOracleConnection_1", context.DBPort);
				globalMap.put("dbname_" + "tOracleConnection_1",
						context.DBInstance);

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1",
						context.DBSchema);
				globalMap.put("username_" + "tOracleConnection_1",
						context.DBUsername);
				globalMap.put("password_" + "tOracleConnection_1",
						context.DBPassword);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */
				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */
				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk1",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tOracleInput_2Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk2",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tOracleInput_5Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk3",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tForeach_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.PATIENT_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.PATIENT_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class p_mappingStruct implements
			routines.system.IPersistableComparableLookupRow<p_mappingStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.PATIENT_NUM;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final p_mappingStruct other = (p_mappingStruct) obj;

			if (this.PATIENT_NUM != other.PATIENT_NUM)
				return false;

			return true;
		}

		public void copyDataTo(p_mappingStruct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void copyKeysDataTo(p_mappingStruct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.PATIENT_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(p_mappingStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_2Struct implements
			routines.system.IPersistableRow<after_tOracleInput_2Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.PATIENT_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tOracleInput_1Process(globalMap);

				p_mappingStruct p_mapping = new p_mappingStruct();
				out1Struct out1 = new out1Struct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tOracleRow_3 begin ] start
				 */

				ok_Hash.put("tOracleRow_3", false);
				start_Hash.put("tOracleRow_3", System.currentTimeMillis());
				currentComponent = "tOracleRow_3";

				int tos_count_tOracleRow_3 = 0;

				java.sql.Connection conn_tOracleRow_3 = null;
				conn_tOracleRow_3 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_3 = dataSources_tOracleRow_3.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_3 = conn_tOracleRow_3
						.createStatement();
				String query_tOracleRow_3 = "";
				boolean whetherReject_tOracleRow_3 = false;

				/**
				 * [tOracleRow_3 begin ] stop
				 */

				/**
				 * [tOracleRow_2 begin ] start
				 */

				ok_Hash.put("tOracleRow_2", false);
				start_Hash.put("tOracleRow_2", System.currentTimeMillis());
				currentComponent = "tOracleRow_2";

				int tos_count_tOracleRow_2 = 0;

				java.sql.Connection conn_tOracleRow_2 = null;
				conn_tOracleRow_2 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_2 = dataSources_tOracleRow_2.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2
						.createStatement();
				String query_tOracleRow_2 = "";
				boolean whetherReject_tOracleRow_2 = false;

				/**
				 * [tOracleRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<obsStruct> tHash_Lookup_obs = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<obsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<obsStruct>) globalMap
						.get("tHash_Lookup_obs"));

				obsStruct obsHashKey = new obsStruct();
				obsStruct obsDefault = new obsStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tOracleInput_2 begin ] start
				 */

				ok_Hash.put("tOracleInput_2", false);
				start_Hash.put("tOracleInput_2", System.currentTimeMillis());
				currentComponent = "tOracleInput_2";

				int tos_count_tOracleInput_2 = 0;

				int nb_line_tOracleInput_2 = 0;
				java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleInput_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_2 = dataSources_tOracleInput_2.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_1",
					// conn_tOracleInput_2);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_2)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_2)
							.setSessionTimeZone(sessionTimezone_tOracleInput_2);
				}

				java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2
						.createStatement();

				String dbquery_tOracleInput_2 = "SELECT Patient_num FROM "
						+ context.DBSchema + ".patient_dimension";

				globalMap.put("tOracleInput_2_QUERY", dbquery_tOracleInput_2);

				java.sql.ResultSet rs_tOracleInput_2 = stmt_tOracleInput_2
						.executeQuery(dbquery_tOracleInput_2);
				java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2
						.getMetaData();
				int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2
						.getColumnCount();

				String tmpContent_tOracleInput_2 = null;
				int column_index_tOracleInput_2 = 1;
				while (rs_tOracleInput_2.next()) {
					nb_line_tOracleInput_2++;

					column_index_tOracleInput_2 = 1;

					if (colQtyInRs_tOracleInput_2 < column_index_tOracleInput_2) {
						p_mapping.PATIENT_NUM = 0;
					} else {

						if (rs_tOracleInput_2
								.getObject(column_index_tOracleInput_2) != null) {
							p_mapping.PATIENT_NUM = rs_tOracleInput_2
									.getInt(column_index_tOracleInput_2);
						} else {

							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tOracleInput_2 begin ] stop
					 */
					/**
					 * [tOracleInput_2 main ] start
					 */

					currentComponent = "tOracleInput_2";

					tos_count_tOracleInput_2++;

					/**
					 * [tOracleInput_2 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "obs"
					// /////////////////////////////////////////////

					boolean forceLoopobs = false;

					obsStruct obsObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						Object exprKeyValue_obs__PATIENT_NUM = p_mapping.PATIENT_NUM;
						if (exprKeyValue_obs__PATIENT_NUM == null) {
							hasCasePrimitiveKeyWithNull_tMap_1 = true;
						} else {
							obsHashKey.PATIENT_NUM = (int) (Integer) exprKeyValue_obs__PATIENT_NUM;
						}

						obsHashKey.hashCodeDirty = true;

						if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

							tHash_Lookup_obs.lookup(obsHashKey);

						} // G_TM_M_091

						if (hasCasePrimitiveKeyWithNull_tMap_1
								|| !tHash_Lookup_obs.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_1 = true;

							forceLoopobs = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLoopobs = true;
					} // G 21

					obsStruct obs = null;

					while ((tHash_Lookup_obs != null && tHash_Lookup_obs
							.hasNext()) || forceLoopobs) { // G_TM_M_043

						// CALL close loop of lookup 'obs'

						obsStruct fromLookup_obs = null;
						obs = obsDefault;

						if (!forceLoopobs) { // G 46

							fromLookup_obs = tHash_Lookup_obs.next();

							if (fromLookup_obs != null) {
								obs = fromLookup_obs;
							}

						} // G 46

						forceLoopobs = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							if (!rejectedInnerJoin_tMap_1) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'out1'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_1) {
								out1_tmp.PATIENT_NUM = p_mapping.PATIENT_NUM;
								out1 = out1_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tOracleRow_2 main ] start
							 */

							currentComponent = "tOracleRow_2";

							row1 = null;

							query_tOracleRow_2 = "DELETE FROM "
									+ context.DBSchema
									+ ".patient_mapping WHERE patient_num="
									+ out1.PATIENT_NUM;
							whetherReject_tOracleRow_2 = false;

							globalMap.put("tOracleRow_2_QUERY",
									query_tOracleRow_2);
							try {
								stmt_tOracleRow_2.execute(query_tOracleRow_2);

							} catch (java.lang.Exception e) {
								whetherReject_tOracleRow_2 = true;
								throw (e);
							}

							if (!whetherReject_tOracleRow_2) {
								row1 = new row1Struct();
								row1.PATIENT_NUM = out1.PATIENT_NUM;
							}

							tos_count_tOracleRow_2++;

							/**
							 * [tOracleRow_2 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tOracleRow_3 main ] start
								 */

								currentComponent = "tOracleRow_3";

								query_tOracleRow_3 = "DELETE FROM "
										+ context.DBSchema
										+ ".patient_dimension WHERE patient_num="
										+ row1.PATIENT_NUM;
								whetherReject_tOracleRow_3 = false;

								globalMap.put("tOracleRow_3_QUERY",
										query_tOracleRow_3);
								try {
									stmt_tOracleRow_3
											.execute(query_tOracleRow_3);

								} catch (java.lang.Exception e) {
									whetherReject_tOracleRow_3 = true;
									throw (e);
								}

								if (!whetherReject_tOracleRow_3) {
								}

								tos_count_tOracleRow_3++;

								/**
								 * [tOracleRow_3 main ] stop
								 */

							} // End of branch "row1"

						} // End of branch "out1"

					} // close loop of lookup 'obs' // G_TM_M_043

					/**
					 * [tOracleInput_2 end ] start
					 */

					currentComponent = "tOracleInput_2";

				}
				stmt_tOracleInput_2.close();

				globalMap.put("tOracleInput_2_NB_LINE", nb_line_tOracleInput_2);

				ok_Hash.put("tOracleInput_2", true);
				end_Hash.put("tOracleInput_2", System.currentTimeMillis());

				/**
				 * [tOracleInput_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_obs != null) {
					tHash_Lookup_obs.endGet();
				}
				globalMap.remove("tHash_Lookup_obs");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tOracleRow_2 end ] start
				 */

				currentComponent = "tOracleRow_2";

				stmt_tOracleRow_2.close();

				ok_Hash.put("tOracleRow_2", true);
				end_Hash.put("tOracleRow_2", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleRow_2 end ] stop
				 */

				/**
				 * [tOracleRow_3 end ] start
				 */

				currentComponent = "tOracleRow_3";

				stmt_tOracleRow_3.close();

				ok_Hash.put("tOracleRow_3", true);
				end_Hash.put("tOracleRow_3", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_obs");

		}

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_1 begin ] start
				 */

				ok_Hash.put("tOracleCommit_1", false);
				start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
				currentComponent = "tOracleCommit_1";

				int tos_count_tOracleCommit_1 = 0;

				/**
				 * [tOracleCommit_1 begin ] stop
				 */
				/**
				 * [tOracleCommit_1 main ] start
				 */

				currentComponent = "tOracleCommit_1";

				java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_1 != null) {
						if (dataSources_tOracleCommit_1.get("") != null) {
							conn_tOracleCommit_1 = dataSources_tOracleCommit_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_1 != null
						&& !conn_tOracleCommit_1.isClosed()) {
					conn_tOracleCommit_1.commit();
				}

				tos_count_tOracleCommit_1++;

				/**
				 * [tOracleCommit_1 main ] stop
				 */
				/**
				 * [tOracleCommit_1 end ] start
				 */

				currentComponent = "tOracleCommit_1";

				ok_Hash.put("tOracleCommit_1", true);
				end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				/**
				 * [tOracleCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("ERROR!");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_5Struct implements
			routines.system.IPersistableRow<after_tOracleInput_5Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tOracleInput_4Process(globalMap);

				row3Struct row3 = new row3Struct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();

				/**
				 * [tOracleRow_4 begin ] start
				 */

				ok_Hash.put("tOracleRow_4", false);
				start_Hash.put("tOracleRow_4", System.currentTimeMillis());
				currentComponent = "tOracleRow_4";

				int tos_count_tOracleRow_4 = 0;

				java.sql.Connection conn_tOracleRow_4 = null;
				conn_tOracleRow_4 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_4 = dataSources_tOracleRow_4.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_4 = conn_tOracleRow_4
						.createStatement();
				String query_tOracleRow_4 = "";
				boolean whetherReject_tOracleRow_4 = false;

				/**
				 * [tOracleRow_4 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tOracleInput_5 begin ] start
				 */

				ok_Hash.put("tOracleInput_5", false);
				start_Hash.put("tOracleInput_5", System.currentTimeMillis());
				currentComponent = "tOracleInput_5";

				int tos_count_tOracleInput_5 = 0;

				int nb_line_tOracleInput_5 = 0;
				java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleInput_5) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_5 = dataSources_tOracleInput_5.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_1",
					// conn_tOracleInput_5);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_5)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_5)
							.setSessionTimeZone(sessionTimezone_tOracleInput_5);
				}

				java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5
						.createStatement();

				String dbquery_tOracleInput_5 = "SELECT ENCOUNTER_NUM FROM "
						+ context.DBSchema + ".encounter_mapping";

				globalMap.put("tOracleInput_5_QUERY", dbquery_tOracleInput_5);

				java.sql.ResultSet rs_tOracleInput_5 = stmt_tOracleInput_5
						.executeQuery(dbquery_tOracleInput_5);
				java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5
						.getMetaData();
				int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5
						.getColumnCount();

				String tmpContent_tOracleInput_5 = null;
				int column_index_tOracleInput_5 = 1;
				while (rs_tOracleInput_5.next()) {
					nb_line_tOracleInput_5++;

					column_index_tOracleInput_5 = 1;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						row3.ENCOUNTER_NUM = 0;
					} else {

						if (rs_tOracleInput_5
								.getObject(column_index_tOracleInput_5) != null) {
							row3.ENCOUNTER_NUM = rs_tOracleInput_5
									.getInt(column_index_tOracleInput_5);
						} else {

							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tOracleInput_5 begin ] stop
					 */
					/**
					 * [tOracleInput_5 main ] start
					 */

					currentComponent = "tOracleInput_5";

					tos_count_tOracleInput_5++;

					/**
					 * [tOracleInput_5 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row2"
					// /////////////////////////////////////////////

					boolean forceLooprow2 = false;

					row2Struct row2ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_2 = false;

						Object exprKeyValue_row2__ENCOUNTER_NUM = row3.ENCOUNTER_NUM;
						if (exprKeyValue_row2__ENCOUNTER_NUM == null) {
							hasCasePrimitiveKeyWithNull_tMap_2 = true;
						} else {
							row2HashKey.ENCOUNTER_NUM = (int) (Integer) exprKeyValue_row2__ENCOUNTER_NUM;
						}

						row2HashKey.hashCodeDirty = true;

						if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_091

						if (hasCasePrimitiveKeyWithNull_tMap_2
								|| !tHash_Lookup_row2.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_2 = true;

							forceLooprow2 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow2 = true;
					} // G 21

					row2Struct row2 = null;

					while ((tHash_Lookup_row2 != null && tHash_Lookup_row2
							.hasNext()) || forceLooprow2) { // G_TM_M_043

						// CALL close loop of lookup 'row2'

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (!forceLooprow2) { // G 46

							fromLookup_row2 = tHash_Lookup_row2.next();

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

						} // G 46

						forceLooprow2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							copyOfout1 = null;

							if (!rejectedInnerJoin_tMap_2) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'copyOfout1'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_2) {
								copyOfout1_tmp.ENCOUNTER_NUM = row3.ENCOUNTER_NUM;
								copyOfout1 = copyOfout1_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "copyOfout1"
						if (copyOfout1 != null) {

							/**
							 * [tOracleRow_4 main ] start
							 */

							currentComponent = "tOracleRow_4";

							query_tOracleRow_4 = "DELETE FROM "
									+ context.DBSchema
									+ ".encounter_mapping WHERE encounter_num="
									+ copyOfout1.ENCOUNTER_NUM;
							whetherReject_tOracleRow_4 = false;

							globalMap.put("tOracleRow_4_QUERY",
									query_tOracleRow_4);
							try {
								stmt_tOracleRow_4.execute(query_tOracleRow_4);

							} catch (java.lang.Exception e) {
								whetherReject_tOracleRow_4 = true;
								throw (e);
							}

							if (!whetherReject_tOracleRow_4) {
							}

							tos_count_tOracleRow_4++;

							/**
							 * [tOracleRow_4 main ] stop
							 */

						} // End of branch "copyOfout1"

					} // close loop of lookup 'row2' // G_TM_M_043

					/**
					 * [tOracleInput_5 end ] start
					 */

					currentComponent = "tOracleInput_5";

				}
				stmt_tOracleInput_5.close();

				globalMap.put("tOracleInput_5_NB_LINE", nb_line_tOracleInput_5);

				ok_Hash.put("tOracleInput_5", true);
				end_Hash.put("tOracleInput_5", System.currentTimeMillis());

				/**
				 * [tOracleInput_5 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tOracleRow_4 end ] start
				 */

				currentComponent = "tOracleRow_4";

				stmt_tOracleRow_4.close();

				ok_Hash.put("tOracleRow_4", true);
				end_Hash.put("tOracleRow_4", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row2");

		}

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tForeach_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tForeach_1 begin ] start
				 */

				int NB_ITERATE_tJava_3 = 0; // for statistics

				ok_Hash.put("tForeach_1", false);
				start_Hash.put("tForeach_1", System.currentTimeMillis());
				currentComponent = "tForeach_1";

				int tos_count_tForeach_1 = 0;

				Object[] values_tForeach_1 = new Object[] {
						"CREATE TABLE " + context.DBSchema
								+ ".t_i2b2 AS (SELECT * FROM "
								+ context.DBSchema + ".i2b2)",
						"CREATE TABLE "
								+ context.DBSchema
								+ ".t_totalnum AS SELECT i2b.c_tablename,i2b.c_fullname,COUNT(DISTINCT obs.patient_num) AS c_totalnum FROM "
								+ context.DBSchema
								+ ".observation_fact  obs JOIN "
								+ context.DBSchema
								+ ".concept_dimension con ON obs.concept_cd   =    con.concept_cd  JOIN "
								+ context.DBSchema
								+ ".i2b2 i2b ON con.concept_path LIKE i2b.c_fullname || '%' GROUP BY i2b.c_tablename,i2b.c_fullname",
						"INSERT INTO "
								+ context.DBSchema
								+ ".t_totalnum (c_tablename, c_fullname, c_totalnum) SELECT i2b.c_tablename, i2b.c_fullname, COUNT(DISTINCT obs.patient_num) AS c_totalnum FROM "
								+ context.DBSchema
								+ ".observation_fact   obs  JOIN "
								+ context.DBSchema
								+ ".modifier_dimension con ON obs.modifier_cd   =    con.modifier_cd  JOIN "
								+ context.DBSchema
								+ ".i2b2               i2b ON con.modifier_path LIKE i2b.c_fullname || '%' GROUP BY i2b.c_tablename,i2b.c_fullname",
						"TRUNCATE TABLE " + context.DBSchema + ".i2b2",
						"INSERT INTO "
								+ context.DBSchema
								+ ".i2b2 (c_hlevel, c_fullname, c_name, c_synonym_cd, c_visualattributes, c_totalnum, c_basecode, c_metadataxml, c_facttablecolumn, c_tablename, c_columnname, c_columndatatype, c_operator, c_dimcode, c_comment, c_tooltip, m_applied_path, update_date, download_date, import_date, sourcesystem_cd, valuetype_cd, m_exclusion_cd, c_path, c_symbol) SELECT i2b.c_hlevel, i2b.c_fullname, i2b.c_name, i2b.c_synonym_cd, i2b.c_visualattributes, NVL(tnm.c_totalnum, 0), i2b.c_basecode, i2b.c_metadataxml, i2b.c_facttablecolumn, i2b.c_tablename, i2b.c_columnname, i2b.c_columndatatype, i2b.c_operator, i2b.c_dimcode, i2b.c_comment, i2b.c_tooltip, i2b.m_applied_path, i2b.update_date, i2b.download_date, i2b.import_date, i2b.sourcesystem_cd, i2b.valuetype_cd, i2b.m_exclusion_cd, i2b.c_path, i2b.c_symbol  FROM    "
								+ context.DBSchema
								+ ".t_i2b2     i2b  LEFT JOIN "
								+ context.DBSchema
								+ ".t_totalnum tnm ON i2b.c_tablename = tnm.c_tablename AND i2b.c_fullname = tnm.c_fullname",
						"DROP TABLE " + context.DBSchema + ".t_totalnum",
						"DROP TABLE " + context.DBSchema + ".t_i2b2", };

				for (Object tmp_tForeach_1 : values_tForeach_1) {
					globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

					/**
					 * [tForeach_1 begin ] stop
					 */
					/**
					 * [tForeach_1 main ] start
					 */

					currentComponent = "tForeach_1";

					tos_count_tForeach_1++;

					/**
					 * [tForeach_1 main ] stop
					 */
					NB_ITERATE_tJava_3++;
					iterateLoop++;

					/**
					 * [tOracleRow_5 begin ] start
					 */

					ok_Hash.put("tOracleRow_5", false);
					start_Hash.put("tOracleRow_5", System.currentTimeMillis());
					currentComponent = "tOracleRow_5";

					int tos_count_tOracleRow_5 = 0;

					java.sql.Connection conn_tOracleRow_5 = null;
					conn_tOracleRow_5 = (java.sql.Connection) globalMap
							.get("conn_tOracleConnection_1");
					if (null == conn_tOracleRow_5) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tOracleRow_5 = dataSources_tOracleRow_5.get("")
								.getConnection();
					}

					java.sql.Statement stmt_tOracleRow_5 = conn_tOracleRow_5
							.createStatement();
					String query_tOracleRow_5 = "";
					boolean whetherReject_tOracleRow_5 = false;

					/**
					 * [tOracleRow_5 begin ] stop
					 */

					/**
					 * [tJava_3 begin ] start
					 */

					ok_Hash.put("tJava_3", false);
					start_Hash.put("tJava_3", System.currentTimeMillis());
					currentComponent = "tJava_3";

					int tos_count_tJava_3 = 0;

					System.out.println(((String) globalMap
							.get("tForeach_1_CURRENT_VALUE")));

					/**
					 * [tJava_3 begin ] stop
					 */
					/**
					 * [tJava_3 main ] start
					 */

					currentComponent = "tJava_3";

					tos_count_tJava_3++;

					/**
					 * [tJava_3 main ] stop
					 */

					/**
					 * [tOracleRow_5 main ] start
					 */

					currentComponent = "tOracleRow_5";

					query_tOracleRow_5 = ((String) globalMap
							.get("tForeach_1_CURRENT_VALUE"));
					whetherReject_tOracleRow_5 = false;

					globalMap.put("tOracleRow_5_QUERY", query_tOracleRow_5);
					try {
						stmt_tOracleRow_5.execute(query_tOracleRow_5);

					} catch (java.lang.Exception e) {
						whetherReject_tOracleRow_5 = true;
						System.err.print(e.getMessage());
					}

					if (!whetherReject_tOracleRow_5) {
					}

					tos_count_tOracleRow_5++;

					/**
					 * [tOracleRow_5 main ] stop
					 */

					/**
					 * [tJava_3 end ] start
					 */

					currentComponent = "tJava_3";

					ok_Hash.put("tJava_3", true);
					end_Hash.put("tJava_3", System.currentTimeMillis());

					/**
					 * [tJava_3 end ] stop
					 */

					/**
					 * [tOracleRow_5 end ] start
					 */

					currentComponent = "tOracleRow_5";

					stmt_tOracleRow_5.close();

					ok_Hash.put("tOracleRow_5", true);
					end_Hash.put("tOracleRow_5", System.currentTimeMillis());

					tOracleCommit_1Process(globalMap);

					/**
					 * [tOracleRow_5 end ] stop
					 */

					/**
					 * [tForeach_1 end ] start
					 */

					currentComponent = "tForeach_1";

				}

				ok_Hash.put("tForeach_1", true);
				end_Hash.put("tForeach_1", System.currentTimeMillis());

				/**
				 * [tForeach_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tForeach_1_SUBPROCESS_STATE", 1);
	}

	public static class obsStruct implements
			routines.system.IPersistableComparableLookupRow<obsStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.PATIENT_NUM;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final obsStruct other = (obsStruct) obj;

			if (this.PATIENT_NUM != other.PATIENT_NUM)
				return false;

			return true;
		}

		public void copyDataTo(obsStruct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void copyKeysDataTo(obsStruct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.PATIENT_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(obsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				obsStruct obs = new obsStruct();

				/**
				 * [tAdvancedHash_obs begin ] start
				 */

				ok_Hash.put("tAdvancedHash_obs", false);
				start_Hash.put("tAdvancedHash_obs", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_obs";

				int tos_count_tAdvancedHash_obs = 0;

				// connection name:obs
				// source node:tOracleInput_1 - inputs:(after_tOracleInput_2)
				// outputs:(obs,obs) | target node:tAdvancedHash_obs -
				// inputs:(obs) outputs:()
				// linked node: tMap_1 - inputs:(p_mapping,obs) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_obs = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<obsStruct> tHash_Lookup_obs = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<obsStruct> getLookup(matchingModeEnum_obs);

				globalMap.put("tHash_Lookup_obs", tHash_Lookup_obs);

				/**
				 * [tAdvancedHash_obs begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());
				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_1 = dataSources_tOracleInput_1.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_1",
					// conn_tOracleInput_1);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.setSessionTimeZone(sessionTimezone_tOracleInput_1);
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "SELECT Patient_num FROM "
						+ context.DBSchema + ".observation_fact";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = stmt_tOracleInput_1
						.executeQuery(dbquery_tOracleInput_1);
				java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
						.getMetaData();
				int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
						.getColumnCount();

				String tmpContent_tOracleInput_1 = null;
				int column_index_tOracleInput_1 = 1;
				while (rs_tOracleInput_1.next()) {
					nb_line_tOracleInput_1++;

					column_index_tOracleInput_1 = 1;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						obs.PATIENT_NUM = 0;
					} else {

						if (rs_tOracleInput_1
								.getObject(column_index_tOracleInput_1) != null) {
							obs.PATIENT_NUM = rs_tOracleInput_1
									.getInt(column_index_tOracleInput_1);
						} else {

							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tOracleInput_1 begin ] stop
					 */
					/**
					 * [tOracleInput_1 main ] start
					 */

					currentComponent = "tOracleInput_1";

					tos_count_tOracleInput_1++;

					/**
					 * [tOracleInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_obs main ] start
					 */

					currentComponent = "tAdvancedHash_obs";

					obsStruct obs_HashRow = new obsStruct();

					obs_HashRow.PATIENT_NUM = obs.PATIENT_NUM;

					tHash_Lookup_obs.put(obs_HashRow);

					tos_count_tAdvancedHash_obs++;

					/**
					 * [tAdvancedHash_obs main ] stop
					 */

					/**
					 * [tOracleInput_1 end ] start
					 */

					currentComponent = "tOracleInput_1";

				}
				stmt_tOracleInput_1.close();

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_obs end ] start
				 */

				currentComponent = "tAdvancedHash_obs";

				tHash_Lookup_obs.endPut();

				ok_Hash.put("tAdvancedHash_obs", true);
				end_Hash.put("tAdvancedHash_obs", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_obs end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_Delete_Patients = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_Delete_Patients = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ENCOUNTER_NUM;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ENCOUNTER_NUM != other.ENCOUNTER_NUM)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_Delete_Patients) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_NUM,
					other.ENCOUNTER_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tOracleInput_4 - inputs:(after_tOracleInput_5)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_2 - inputs:(row3,row2) outputs:(copyOfout1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tOracleInput_4 begin ] start
				 */

				ok_Hash.put("tOracleInput_4", false);
				start_Hash.put("tOracleInput_4", System.currentTimeMillis());
				currentComponent = "tOracleInput_4";

				int tos_count_tOracleInput_4 = 0;

				int nb_line_tOracleInput_4 = 0;
				java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleInput_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_4 = dataSources_tOracleInput_4.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_1",
					// conn_tOracleInput_4);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_4)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_4)
							.setSessionTimeZone(sessionTimezone_tOracleInput_4);
				}

				java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4
						.createStatement();

				String dbquery_tOracleInput_4 = "SELECT ENCOUNTER_NUM FROM "
						+ context.DBSchema + ".observation_fact";

				globalMap.put("tOracleInput_4_QUERY", dbquery_tOracleInput_4);

				java.sql.ResultSet rs_tOracleInput_4 = stmt_tOracleInput_4
						.executeQuery(dbquery_tOracleInput_4);
				java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4
						.getMetaData();
				int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4
						.getColumnCount();

				String tmpContent_tOracleInput_4 = null;
				int column_index_tOracleInput_4 = 1;
				while (rs_tOracleInput_4.next()) {
					nb_line_tOracleInput_4++;

					column_index_tOracleInput_4 = 1;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						row2.ENCOUNTER_NUM = 0;
					} else {

						if (rs_tOracleInput_4
								.getObject(column_index_tOracleInput_4) != null) {
							row2.ENCOUNTER_NUM = rs_tOracleInput_4
									.getInt(column_index_tOracleInput_4);
						} else {

							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tOracleInput_4 begin ] stop
					 */
					/**
					 * [tOracleInput_4 main ] start
					 */

					currentComponent = "tOracleInput_4";

					tos_count_tOracleInput_4++;

					/**
					 * [tOracleInput_4 main ] stop
					 */

					/**
					 * [tAdvancedHash_row2 main ] start
					 */

					currentComponent = "tAdvancedHash_row2";

					row2Struct row2_HashRow = new row2Struct();

					row2_HashRow.ENCOUNTER_NUM = row2.ENCOUNTER_NUM;

					tHash_Lookup_row2.put(row2_HashRow);

					tos_count_tAdvancedHash_row2++;

					/**
					 * [tAdvancedHash_row2 main ] stop
					 */

					/**
					 * [tOracleInput_4 end ] start
					 */

					currentComponent = "tOracleInput_4";

				}
				stmt_tOracleInput_4.close();

				globalMap.put("tOracleInput_4_NB_LINE", nb_line_tOracleInput_4);

				ok_Hash.put("tOracleInput_4", true);
				end_Hash.put("tOracleInput_4", System.currentTimeMillis());

				/**
				 * [tOracleInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IDRT_Delete_Patients IDRT_Delete_PatientsClass = new IDRT_Delete_Patients();

		int exitCode = IDRT_Delete_PatientsClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IDRT_Delete_Patients.class
					.getClassLoader().getResourceAsStream(
							"tos/idrt_delete_patients_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.DBInstance = (String) context.getProperty("DBInstance");
			context.DBHost = (String) context.getProperty("DBHost");
			context.DBPort = (String) context.getProperty("DBPort");
			context.project = (String) context.getProperty("project");
			context.DBPassword = (java.lang.String) context
					.getProperty("DBPassword");
			context.DBSchema = (String) context.getProperty("DBSchema");
			context.DBUsername = (String) context.getProperty("DBUsername");
			context.hashSet = (Object) context.getProperty("hashSet");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("DBInstance")) {
				context.DBInstance = (String) parentContextMap
						.get("DBInstance");
			}
			if (parentContextMap.containsKey("DBHost")) {
				context.DBHost = (String) parentContextMap.get("DBHost");
			}
			if (parentContextMap.containsKey("DBPort")) {
				context.DBPort = (String) parentContextMap.get("DBPort");
			}
			if (parentContextMap.containsKey("project")) {
				context.project = (String) parentContextMap.get("project");
			}
			if (parentContextMap.containsKey("DBPassword")) {
				context.DBPassword = (java.lang.String) parentContextMap
						.get("DBPassword");
			}
			if (parentContextMap.containsKey("DBSchema")) {
				context.DBSchema = (String) parentContextMap.get("DBSchema");
			}
			if (parentContextMap.containsKey("DBUsername")) {
				context.DBUsername = (String) parentContextMap
						.get("DBUsername");
			}
			if (parentContextMap.containsKey("hashSet")) {
				context.hashSet = (Object) parentContextMap.get("hashSet");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {

			e_tJava_1.printStackTrace();
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : IDRT_Delete_Patients");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 112975 characters generated by Talend Open Studio for Data Integration on the
 * January 3, 2014 10:35:30 AM CET
 ************************************************************************************************/
