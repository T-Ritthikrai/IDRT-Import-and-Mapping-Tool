// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.idrt_transformation_0_5;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.IDRTHelper;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.enc_num_routine;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: IDRT_TRANSFORMATION Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class IDRT_TRANSFORMATION implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (t_mapping_path != null) {

				this.setProperty("t_mapping_path", t_mapping_path.toString());

			}

			if (DBHost != null) {

				this.setProperty("DBHost", DBHost.toString());

			}

			if (DBInstance != null) {

				this.setProperty("DBInstance", DBInstance.toString());

			}

			if (DBPassword != null) {

				this.setProperty("DBPassword", DBPassword.toString());

			}

			if (DBPort != null) {

				this.setProperty("DBPort", DBPort.toString());

			}

			if (DBSchema != null) {

				this.setProperty("DBSchema", DBSchema.toString());

			}

			if (DBUsername != null) {

				this.setProperty("DBUsername", DBUsername.toString());

			}

		}

		public String t_mapping_path;

		public String getT_mapping_path() {
			return this.t_mapping_path;
		}

		public String DBHost;

		public String getDBHost() {
			return this.DBHost;
		}

		public String DBInstance;

		public String getDBInstance() {
			return this.DBInstance;
		}

		public java.lang.String DBPassword;

		public java.lang.String getDBPassword() {
			return this.DBPassword;
		}

		public String DBPort;

		public String getDBPort() {
			return this.DBPort;
		}

		public String DBSchema;

		public String getDBSchema() {
			return this.DBSchema;
		}

		public String DBUsername;

		public String getDBUsername() {
			return this.DBUsername;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.5";
	private final String jobName = "IDRT_TRANSFORMATION";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IDRT_TRANSFORMATION.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IDRT_TRANSFORMATION.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_16", System.currentTimeMillis());

		status = "failure";

		tOracleRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tOracleRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_17", System.currentTimeMillis());

		status = "failure";

		tOracleRow_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tOracleRow_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_1", System.currentTimeMillis());

		status = "failure";

		tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_14", System.currentTimeMillis());

		status = "failure";

		tOracleRow_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_5", System.currentTimeMillis());

		status = "failure";

		tOracleRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_6", System.currentTimeMillis());

		status = "failure";

		tOracleRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_8", System.currentTimeMillis());

		status = "failure";

		tOracleRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_11", System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_10", System.currentTimeMillis());

		status = "failure";

		tOracleRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_12", System.currentTimeMillis());

		status = "failure";

		tOracleRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_13", System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_2", System.currentTimeMillis());

		status = "failure";

		tOracleRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_15", System.currentTimeMillis());

		status = "failure";

		tOracleRow_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_14", System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Transformation job started!");
				System.out.println("Connect to DB ...");

				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f)
						+ "% Transformation job started!");
				// ca. 1%
				StatusListener.setSubStatus(1.0f, (int) (float) (1.0f)
						+ "% Connect to DB");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tOracleConnection_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());
				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ context.DBHost + ":" + context.DBPort + ":"
						+ context.DBInstance;
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String userName_tOracleConnection_1 = context.DBUsername;
				String password_tOracleConnection_1 = context.DBPassword;

				java.sql.Connection conn_tOracleConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					conn_tOracleConnection_1 = java.sql.DriverManager
							.getConnection(url_tOracleConnection_1,
									userName_tOracleConnection_1,
									password_tOracleConnection_1);
					globalMap.put("conn_tOracleConnection_1",
							conn_tOracleConnection_1);
				}
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(true);
				}
				globalMap.put("host_" + "tOracleConnection_1", context.DBHost);
				globalMap.put("port_" + "tOracleConnection_1", context.DBPort);
				globalMap.put("dbname_" + "tOracleConnection_1",
						context.DBInstance);

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1",
						context.DBSchema);
				globalMap.put("username_" + "tOracleConnection_1",
						context.DBUsername);
				globalMap.put("password_" + "tOracleConnection_1",
						context.DBPassword);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */
				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */
				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				tJava_2Process(globalMap);
				tOracleRow_16Process(globalMap);

				/**
				 * [tOracleConnection_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("Drop temporary tables ...");
				// ca. 3%
				StatusListener.setSubStatus(3.0f, (int) (float) (3.0f)
						+ "% Drop temporary tables");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_TRANSFORMATION = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_TRANSFORMATION.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_TRANSFORMATION.length == 0) {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_TRANSFORMATION, 0,
						length);
				strReturn = new String(commonByteArray_TOS_IDRT_TRANSFORMATION,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_TRANSFORMATION) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleRow_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				// System.out.println("...");

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tOracleRow_16 begin ] start
				 */

				ok_Hash.put("tOracleRow_16", false);
				start_Hash.put("tOracleRow_16", System.currentTimeMillis());
				currentComponent = "tOracleRow_16";

				int tos_count_tOracleRow_16 = 0;

				java.sql.Connection conn_tOracleRow_16 = null;
				conn_tOracleRow_16 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_16) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_16 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_16 = dataSources_tOracleRow_16.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_16 = conn_tOracleRow_16
						.createStatement();
				String query_tOracleRow_16 = "";
				boolean whetherReject_tOracleRow_16 = false;

				/**
				 * [tOracleRow_16 begin ] stop
				 */
				/**
				 * [tOracleRow_16 main ] start
				 */

				currentComponent = "tOracleRow_16";

				row2 = null;

				query_tOracleRow_16 = " DROP TABLE " + context.DBSchema
						+ ".TMP_I2B2";
				whetherReject_tOracleRow_16 = false;

				globalMap.put("tOracleRow_16_QUERY", query_tOracleRow_16);
				try {
					stmt_tOracleRow_16.execute(query_tOracleRow_16);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_16 = true;
					row2 = new row2Struct();
					row2.errorMessage = e.getMessage() + " - Line: "
							+ tos_count_tOracleRow_16;
				}

				if (!whetherReject_tOracleRow_16) {
				}

				tos_count_tOracleRow_16++;

				/**
				 * [tOracleRow_16 main ] stop
				 */
				// Start of branch "row2"
				if (row2 != null) {

					/**
					 * [tJava_3 main ] start
					 */

					currentComponent = "tJava_3";

					tos_count_tJava_3++;

					/**
					 * [tJava_3 main ] stop
					 */

				} // End of branch "row2"

				/**
				 * [tOracleRow_16 end ] start
				 */

				currentComponent = "tOracleRow_16";

				stmt_tOracleRow_16.close();

				ok_Hash.put("tOracleRow_16", true);
				end_Hash.put("tOracleRow_16", System.currentTimeMillis());

				tOracleRow_17Process(globalMap);

				/**
				 * [tOracleRow_16 end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_16_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_TRANSFORMATION = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_TRANSFORMATION.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_TRANSFORMATION.length == 0) {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_TRANSFORMATION, 0,
						length);
				strReturn = new String(commonByteArray_TOS_IDRT_TRANSFORMATION,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_TRANSFORMATION) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleRow_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				// System.out.println("...");

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tOracleRow_17 begin ] start
				 */

				ok_Hash.put("tOracleRow_17", false);
				start_Hash.put("tOracleRow_17", System.currentTimeMillis());
				currentComponent = "tOracleRow_17";

				int tos_count_tOracleRow_17 = 0;

				java.sql.Connection conn_tOracleRow_17 = null;
				conn_tOracleRow_17 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_17) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_17 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_17 = dataSources_tOracleRow_17.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_17 = conn_tOracleRow_17
						.createStatement();
				String query_tOracleRow_17 = "";
				boolean whetherReject_tOracleRow_17 = false;

				/**
				 * [tOracleRow_17 begin ] stop
				 */
				/**
				 * [tOracleRow_17 main ] start
				 */

				currentComponent = "tOracleRow_17";

				row3 = null;

				query_tOracleRow_17 = " DROP TABLE  " + context.DBSchema
						+ ".T_MAPPING";
				whetherReject_tOracleRow_17 = false;

				globalMap.put("tOracleRow_17_QUERY", query_tOracleRow_17);
				try {
					stmt_tOracleRow_17.execute(query_tOracleRow_17);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_17 = true;
					row3 = new row3Struct();
					row3.errorMessage = e.getMessage() + " - Line: "
							+ tos_count_tOracleRow_17;
				}

				if (!whetherReject_tOracleRow_17) {
				}

				tos_count_tOracleRow_17++;

				/**
				 * [tOracleRow_17 main ] stop
				 */
				// Start of branch "row3"
				if (row3 != null) {

					/**
					 * [tJava_4 main ] start
					 */

					currentComponent = "tJava_4";

					tos_count_tJava_4++;

					/**
					 * [tJava_4 main ] stop
					 */

				} // End of branch "row3"

				/**
				 * [tOracleRow_17 end ] start
				 */

				currentComponent = "tOracleRow_17";

				stmt_tOracleRow_17.close();

				ok_Hash.put("tOracleRow_17", true);
				end_Hash.put("tOracleRow_17", System.currentTimeMillis());

				tJava_5Process(globalMap);
				tOracleRow_1Process(globalMap);

				/**
				 * [tOracleRow_17 end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_17_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.out.println("Create table tmp_i2b2 ...");
				// ca. 7%
				StatusListener.setSubStatus(7.0f, (int) (float) (7.0f)
						+ "% Create temporary tables");

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_1 begin ] start
				 */

				ok_Hash.put("tOracleRow_1", false);
				start_Hash.put("tOracleRow_1", System.currentTimeMillis());
				currentComponent = "tOracleRow_1";

				int tos_count_tOracleRow_1 = 0;

				java.sql.Connection conn_tOracleRow_1 = null;
				conn_tOracleRow_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_1 = dataSources_tOracleRow_1.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1
						.createStatement();
				String query_tOracleRow_1 = "";
				boolean whetherReject_tOracleRow_1 = false;

				/**
				 * [tOracleRow_1 begin ] stop
				 */
				/**
				 * [tOracleRow_1 main ] start
				 */

				currentComponent = "tOracleRow_1";

				query_tOracleRow_1 = "  CREATE TABLE  "
						+ context.DBSchema
						+ ".TMP_I2B2 (  	C_HLEVEL  NUMBER(22,0) NOT NULL ENABLE,   	C_FULLNAME VARCHAR2(3500 BYTE) NOT NULL ENABLE,   	C_NAME VARCHAR2(2000 BYTE) NOT NULL ENABLE,   	C_SYNONYM_CD CHAR(1 BYTE) NOT NULL ENABLE,   	C_VISUALATTRIBUTES CHAR(3 BYTE) NOT NULL ENABLE,   	C_TOTALNUM NUMBER(22,0),   	C_BASECODE VARCHAR2(3500 BYTE),   	C_METADATAXML CLOB,   	C_FACTTABLECOLUMN VARCHAR2(50 BYTE) NOT NULL ENABLE,   	C_TABLENAME VARCHAR2(50 BYTE) NOT NULL ENABLE,   	C_COLUMNNAME VARCHAR2(50 BYTE) NOT NULL ENABLE,   	C_COLUMNDATATYPE VARCHAR2(50 BYTE) NOT NULL ENABLE,   	C_OPERATOR VARCHAR2(10 BYTE) NOT NULL ENABLE,   	C_DIMCODE VARCHAR2(3500 BYTE) NOT NULL ENABLE,   	C_COMMENT CLOB,   	C_TOOLTIP VARCHAR2(900 BYTE),   	M_APPLIED_PATH VARCHAR2(700 BYTE) NOT NULL ENABLE,   	UPDATE_DATE DATE NOT NULL ENABLE,   	DOWNLOAD_DATE DATE,   	IMPORT_DATE DATE,   	SOURCESYSTEM_CD VARCHAR2(50 BYTE),   	VALUETYPE_CD VARCHAR2(50 BYTE),   	M_EXCLUSION_CD VARCHAR2(25 BYTE),   	C_PATH VARCHAR2(700 BYTE),   	C_SYMBOL VARCHAR2(50 BYTE)     )   ";
				whetherReject_tOracleRow_1 = false;

				globalMap.put("tOracleRow_1_QUERY", query_tOracleRow_1);
				try {
					stmt_tOracleRow_1.execute(query_tOracleRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_1 = true;
					throw (e);
				}

				if (!whetherReject_tOracleRow_1) {
				}

				tos_count_tOracleRow_1++;

				/**
				 * [tOracleRow_1 main ] stop
				 */
				/**
				 * [tOracleRow_1 end ] start
				 */

				currentComponent = "tOracleRow_1";

				stmt_tOracleRow_1.close();

				ok_Hash.put("tOracleRow_1", true);
				end_Hash.put("tOracleRow_1", System.currentTimeMillis());

				tJava_6Process(globalMap);
				tOracleRow_14Process(globalMap);

				/**
				 * [tOracleRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				System.out.println("Create table t_mapping ...");

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_14 begin ] start
				 */

				ok_Hash.put("tOracleRow_14", false);
				start_Hash.put("tOracleRow_14", System.currentTimeMillis());
				currentComponent = "tOracleRow_14";

				int tos_count_tOracleRow_14 = 0;

				java.sql.Connection conn_tOracleRow_14 = null;
				conn_tOracleRow_14 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_14) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_14 = dataSources_tOracleRow_14.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_14 = conn_tOracleRow_14
						.createStatement();
				String query_tOracleRow_14 = "";
				boolean whetherReject_tOracleRow_14 = false;

				/**
				 * [tOracleRow_14 begin ] stop
				 */
				/**
				 * [tOracleRow_14 main ] start
				 */

				currentComponent = "tOracleRow_14";

				query_tOracleRow_14 = "  CREATE TABLE  "
						+ context.DBSchema
						+ ".T_MAPPING     ( FACT_PATH VARCHAR2(500 CHAR),   	 TERM_PATH VARCHAR2(500 CHAR),   	 APPEND_LEVEL NUMBER,   	 TRM_LEVEL NUMBER     )";
				whetherReject_tOracleRow_14 = false;

				globalMap.put("tOracleRow_14_QUERY", query_tOracleRow_14);
				try {
					stmt_tOracleRow_14.execute(query_tOracleRow_14);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_14 = true;
					throw (e);
				}

				if (!whetherReject_tOracleRow_14) {
				}

				tos_count_tOracleRow_14++;

				/**
				 * [tOracleRow_14 main ] stop
				 */
				/**
				 * [tOracleRow_14 end ] start
				 */

				currentComponent = "tOracleRow_14";

				stmt_tOracleRow_14.close();

				ok_Hash.put("tOracleRow_14", true);
				end_Hash.put("tOracleRow_14", System.currentTimeMillis());

				tJava_7Process(globalMap);
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tOracleRow_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_14_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				System.out.println("Insert values into table t_mapping ...");
				// ca. 10%
				StatusListener.setSubStatus(10.0f, (int) (float) (10.0f)
						+ "% Insert values into table t_mapping");

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class T_MAPPINGStruct implements
			routines.system.IPersistableRow<T_MAPPINGStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_TRANSFORMATION = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[0];

		public String FACT_PATH;

		public String getFACT_PATH() {
			return this.FACT_PATH;
		}

		public String TERM_PATH;

		public String getTERM_PATH() {
			return this.TERM_PATH;
		}

		public Integer APPEND_LEVEL;

		public Integer getAPPEND_LEVEL() {
			return this.APPEND_LEVEL;
		}

		public Integer TRM_LEVEL;

		public Integer getTRM_LEVEL() {
			return this.TRM_LEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_TRANSFORMATION.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_TRANSFORMATION.length == 0) {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_TRANSFORMATION, 0,
						length);
				strReturn = new String(commonByteArray_TOS_IDRT_TRANSFORMATION,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_TRANSFORMATION) {

				try {

					int length = 0;

					this.FACT_PATH = readString(dis);

					this.TERM_PATH = readString(dis);

					this.APPEND_LEVEL = readInteger(dis);

					this.TRM_LEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FACT_PATH, dos);

				// String

				writeString(this.TERM_PATH, dos);

				// Integer

				writeInteger(this.APPEND_LEVEL, dos);

				// Integer

				writeInteger(this.TRM_LEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FACT_PATH=" + FACT_PATH);
			sb.append(",TERM_PATH=" + TERM_PATH);
			sb.append(",APPEND_LEVEL=" + String.valueOf(APPEND_LEVEL));
			sb.append(",TRM_LEVEL=" + String.valueOf(TRM_LEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(T_MAPPINGStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_TRANSFORMATION = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[0];

		public String FACT_PATH;

		public String getFACT_PATH() {
			return this.FACT_PATH;
		}

		public String TERM_PATH;

		public String getTERM_PATH() {
			return this.TERM_PATH;
		}

		public Integer APPEND_LEVEL;

		public Integer getAPPEND_LEVEL() {
			return this.APPEND_LEVEL;
		}

		public Integer TRM_LEVEL;

		public Integer getTRM_LEVEL() {
			return this.TRM_LEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_TRANSFORMATION.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_TRANSFORMATION.length == 0) {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_TRANSFORMATION = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_TRANSFORMATION, 0,
						length);
				strReturn = new String(commonByteArray_TOS_IDRT_TRANSFORMATION,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_TRANSFORMATION) {

				try {

					int length = 0;

					this.FACT_PATH = readString(dis);

					this.TERM_PATH = readString(dis);

					this.APPEND_LEVEL = readInteger(dis);

					this.TRM_LEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FACT_PATH, dos);

				// String

				writeString(this.TERM_PATH, dos);

				// Integer

				writeInteger(this.APPEND_LEVEL, dos);

				// Integer

				writeInteger(this.TRM_LEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FACT_PATH=" + FACT_PATH);
			sb.append(",TERM_PATH=" + TERM_PATH);
			sb.append(",APPEND_LEVEL=" + String.valueOf(APPEND_LEVEL));
			sb.append(",TRM_LEVEL=" + String.valueOf(TRM_LEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				T_MAPPINGStruct T_MAPPING = new T_MAPPINGStruct();

				/**
				 * [tOracleOutput_1 begin ] start
				 */

				ok_Hash.put("tOracleOutput_1", false);
				start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
				currentComponent = "tOracleOutput_1";

				int tos_count_tOracleOutput_1 = 0;

				int nb_line_tOracleOutput_1 = 0;
				int nb_line_update_tOracleOutput_1 = 0;
				int nb_line_inserted_tOracleOutput_1 = 0;
				int nb_line_deleted_tOracleOutput_1 = 0;
				int nb_line_rejected_tOracleOutput_1 = 0;

				int tmp_batchUpdateCount_tOracleOutput_1 = 0;

				int deletedCount_tOracleOutput_1 = 0;
				int updatedCount_tOracleOutput_1 = 0;
				int insertedCount_tOracleOutput_1 = 0;
				int rejectedCount_tOracleOutput_1 = 0;

				boolean whetherReject_tOracleOutput_1 = false;

				java.sql.Connection conn_tOracleOutput_1 = null;

				// optional table
				String dbschema_tOracleOutput_1 = null;
				String tableName_tOracleOutput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_1) {
					conn_tOracleOutput_1 = dataSources_tOracleOutput_1.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_1 = null;
					url_tOracleOutput_1 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_1 = context.DBUsername;
					String dbPwd_tOracleOutput_1 = context.DBPassword;
					dbschema_tOracleOutput_1 = context.DBSchema;

					conn_tOracleOutput_1 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_1,
									dbUser_tOracleOutput_1,
									dbPwd_tOracleOutput_1);
				}
				conn_tOracleOutput_1.setAutoCommit(false);
				int commitEvery_tOracleOutput_1 = 10000;
				int commitCounter_tOracleOutput_1 = 0;
				int batchSize_tOracleOutput_1 = 10000;
				int batchSizeCounter_tOracleOutput_1 = 0;

				int count_tOracleOutput_1 = 0;

				if (dbschema_tOracleOutput_1 == null
						|| dbschema_tOracleOutput_1.trim().length() == 0) {
					tableName_tOracleOutput_1 = "T_MAPPING".toUpperCase();
				} else {
					tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "."
							+ "T_MAPPING".toUpperCase();
				}
				java.sql.Statement stmtTruncCount_tOracleOutput_1 = conn_tOracleOutput_1
						.createStatement();
				java.sql.ResultSet rsTruncCount_tOracleOutput_1 = stmtTruncCount_tOracleOutput_1
						.executeQuery("SELECT COUNT(1) FROM "
								+ tableName_tOracleOutput_1 + "");
				java.sql.Statement stmtTrunc_tOracleOutput_1 = conn_tOracleOutput_1
						.createStatement();
				stmtTrunc_tOracleOutput_1.executeUpdate("TRUNCATE TABLE "
						+ tableName_tOracleOutput_1 + "");
				while (rsTruncCount_tOracleOutput_1.next()) {
					deletedCount_tOracleOutput_1 += rsTruncCount_tOracleOutput_1
							.getInt(1);
				}
				rsTruncCount_tOracleOutput_1.close();
				stmtTruncCount_tOracleOutput_1.close();
				stmtTrunc_tOracleOutput_1.close();
				String insert_tOracleOutput_1 = "INSERT INTO "
						+ tableName_tOracleOutput_1
						+ " (FACT_PATH,TERM_PATH,APPEND_LEVEL,TRM_LEVEL) VALUES (?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1
						.prepareStatement(insert_tOracleOutput_1);

				/**
				 * [tOracleOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				T_MAPPINGStruct T_MAPPING_tmp = new T_MAPPINGStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.t_mapping_path;
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.t_mapping_path, "ISO-8859-15", ";",
								"\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						throw e;

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.FACT_PATH = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.TERM_PATH = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								row1.APPEND_LEVEL = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row1.APPEND_LEVEL = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								row1.TRM_LEVEL = ParserUtils
										.parseTo_Integer(temp);

							} else {

								row1.TRM_LEVEL = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								T_MAPPING = null;

								// # Output table : 'T_MAPPING'
								T_MAPPING_tmp.FACT_PATH = row1.FACT_PATH;
								T_MAPPING_tmp.TERM_PATH = row1.TERM_PATH;
								T_MAPPING_tmp.APPEND_LEVEL = row1.APPEND_LEVEL;
								T_MAPPING_tmp.TRM_LEVEL = row1.TRM_LEVEL;
								T_MAPPING = T_MAPPING_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "T_MAPPING"
							if (T_MAPPING != null) {

								/**
								 * [tOracleOutput_1 main ] start
								 */

								currentComponent = "tOracleOutput_1";

								whetherReject_tOracleOutput_1 = false;
								if (T_MAPPING.FACT_PATH == null) {
									pstmt_tOracleOutput_1.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(1,
											T_MAPPING.FACT_PATH);
								}

								if (T_MAPPING.TERM_PATH == null) {
									pstmt_tOracleOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(2,
											T_MAPPING.TERM_PATH);
								}

								if (T_MAPPING.APPEND_LEVEL == null) {
									pstmt_tOracleOutput_1.setNull(3,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tOracleOutput_1.setInt(3,
											T_MAPPING.APPEND_LEVEL);
								}

								if (T_MAPPING.TRM_LEVEL == null) {
									pstmt_tOracleOutput_1.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tOracleOutput_1.setInt(4,
											T_MAPPING.TRM_LEVEL);
								}

								pstmt_tOracleOutput_1.addBatch();
								nb_line_tOracleOutput_1++;

								batchSizeCounter_tOracleOutput_1++;

								if (!whetherReject_tOracleOutput_1) {
								}
								if (batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
									try {
										pstmt_tOracleOutput_1.executeBatch();
									} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

										throw (e_tOracleOutput_1);

									}
									tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
											.getUpdateCount();

									insertedCount_tOracleOutput_1

									+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
											: 0);
									batchSizeCounter_tOracleOutput_1 = 0;
								}

								commitCounter_tOracleOutput_1++;
								if (commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {

									try {
										pstmt_tOracleOutput_1.executeBatch();
									} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

										throw (e_tOracleOutput_1);

									}
									tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
											.getUpdateCount();

									insertedCount_tOracleOutput_1

									+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
											: 0);

									conn_tOracleOutput_1.commit();
									commitCounter_tOracleOutput_1 = 0;
								}

								tos_count_tOracleOutput_1++;

								/**
								 * [tOracleOutput_1 main ] stop
								 */

							} // End of branch "T_MAPPING"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.t_mapping_path) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tOracleOutput_1 end ] start
				 */

				currentComponent = "tOracleOutput_1";

				try {
					if (pstmt_tOracleOutput_1 != null) {
						pstmt_tOracleOutput_1.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

					throw (e_tOracleOutput_1);

				}
				if (pstmt_tOracleOutput_1 != null) {
					tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
							.getUpdateCount();

					insertedCount_tOracleOutput_1

					+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
							: 0);
				}
				if (pstmt_tOracleOutput_1 != null) {

					pstmt_tOracleOutput_1.close();

				}

				conn_tOracleOutput_1.commit();

				conn_tOracleOutput_1.close();

				nb_line_deleted_tOracleOutput_1 = nb_line_deleted_tOracleOutput_1
						+ deletedCount_tOracleOutput_1;
				nb_line_update_tOracleOutput_1 = nb_line_update_tOracleOutput_1
						+ updatedCount_tOracleOutput_1;
				nb_line_inserted_tOracleOutput_1 = nb_line_inserted_tOracleOutput_1
						+ insertedCount_tOracleOutput_1;
				nb_line_rejected_tOracleOutput_1 = nb_line_rejected_tOracleOutput_1
						+ rejectedCount_tOracleOutput_1;

				globalMap.put("tOracleOutput_1_NB_LINE",
						nb_line_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_1);

				ok_Hash.put("tOracleOutput_1", true);
				end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				tJava_8Process(globalMap);
				tOracleRow_5Process(globalMap);

				/**
				 * [tOracleOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				System.out
						.println("Transform and copy into table tmp_i2b2 ...");
				System.out.println("Please wait!It can take some time!");
				// ca. 15%
				StatusListener.setSubStatus(15.0f, (int) (float) (15.0f)
						+ "% Transform and copy values into table tmp_i2b2");
				StatusListener.setSubStatus(16.0f, (int) (float) (16.0f)
						+ "% Please wait!It can take some time!");

				/**
				 * [tJava_8 begin ] stop
				 */
				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */
				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_5 begin ] start
				 */

				ok_Hash.put("tOracleRow_5", false);
				start_Hash.put("tOracleRow_5", System.currentTimeMillis());
				currentComponent = "tOracleRow_5";

				int tos_count_tOracleRow_5 = 0;

				java.sql.Connection conn_tOracleRow_5 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleRow_5) {
					conn_tOracleRow_5 = dataSources_tOracleRow_5.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleRow_5 = "jdbc:oracle:thin:@"
							+ context.DBHost + ":" + context.DBPort + ":"
							+ context.DBInstance;

					String dbUser_tOracleRow_5 = context.DBUsername;
					String dbPwd_tOracleRow_5 = context.DBPassword;
					conn_tOracleRow_5 = java.sql.DriverManager.getConnection(
							url_tOracleRow_5, dbUser_tOracleRow_5,
							dbPwd_tOracleRow_5);
				}

				if (conn_tOracleRow_5.getAutoCommit()) {
					conn_tOracleRow_5.setAutoCommit(false);
				}
				int commitEvery_tOracleRow_5 = 10000;
				int commitCounter_tOracleRow_5 = 0;

				java.sql.Statement stmt_tOracleRow_5 = conn_tOracleRow_5
						.createStatement();
				String query_tOracleRow_5 = "";
				boolean whetherReject_tOracleRow_5 = false;

				/**
				 * [tOracleRow_5 begin ] stop
				 */
				/**
				 * [tOracleRow_5 main ] start
				 */

				currentComponent = "tOracleRow_5";

				query_tOracleRow_5 = "INSERT INTO  "
						+ context.DBSchema
						+ ".TMP_I2B2 (   SELECT     C_HLEVEL,     C_FULLNAME,     C_NAME,     C_SYNONYM_CD,     C_VISUALATTRIBUTES,     C_TOTALNUM,     C_BASECODE,     to_char(C_METADATAXML)  as C_METADATAXML,     C_FACTTABLECOLUMN,     C_TABLENAME,     C_COLUMNNAME,     C_COLUMNDATATYPE,     C_OPERATOR,     C_DIMCODE,     to_char(C_COMMENT) as C_COMMENT,     C_TOOLTIP,     M_APPLIED_PATH,     UPDATE_DATE,     DOWNLOAD_DATE,     IMPORT_DATE,     SOURCESYSTEM_CD,     VALUETYPE_CD,     M_EXCLUSION_CD,     C_PATH,     C_SYMBOL  FROM  "
						+ context.DBSchema
						+ ".I2B2  where C_HLEVEL < 4 and C_FULLNAME not like '\\i2b2\\ST%'    UNION    SELECT         trm.C_HLEVEL+tmp.APPEND_LEVEL as C_HLEVEL,        SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS c_fullname,        trm.c_name AS C_NAME,        fak.C_SYNONYM_CD,         trm.c_visualattributes as C_VISUALATTRIBUTES,         fak.C_TOTALNUM,         fak.c_basecode as C_BASECODE,        to_char(fak.C_METADATAXML)  as C_METADATAXML,          fak.C_FACTTABLECOLUMN,         fak.C_TABLENAME,         fak.C_COLUMNNAME,         fak.C_COLUMNDATATYPE,         fak.C_OPERATOR,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_DIMCODE,         to_char(fak.C_COMMENT) as C_COMMENT,         trm.C_TOOLTIP,         fak.M_APPLIED_PATH,         fak.UPDATE_DATE,         fak.DOWNLOAD_DATE,         fak.IMPORT_DATE,         fak.SOURCESYSTEM_CD,         fak.VALUETYPE_CD,         fak.M_EXCLUSION_CD,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_PATH,         fak.C_SYMBOL      FROM   "
						+ context.DBSchema
						+ ".i2b2      fak    JOIN  "
						+ context.DBSchema
						+ ".t_mapping tmp ON fak.c_fullname LIKE tmp.fact_path    JOIN   "
						+ context.DBSchema
						+ ".i2b2      trm ON trm.c_fullname LIKE tmp.term_path || '%'    WHERE trm.c_visualattributes NOT LIKE 'LA%' AND trm.C_HLEVEL >= tmp.TRM_LEVEL    UNION    SELECT        trm.C_HLEVEL+tmp.APPEND_LEVEL as C_HLEVEL,        SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS c_fullname,        trm.c_name AS C_NAME,          fak.C_SYNONYM_CD,         trm.c_visualattributes as C_VISUALATTRIBUTES,         fak.C_TOTALNUM,         cnd.concept_cd as C_BASECODE,        to_char(fak.C_METADATAXML)  as C_METADATAXML,            fak.C_FACTTABLECOLUMN,         fak.C_TABLENAME,         fak.C_COLUMNNAME,         fak.C_COLUMNDATATYPE,         fak.C_OPERATOR,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_DIMCODE,         to_char(fak.C_COMMENT) as C_COMMENT,         trm.C_TOOLTIP,         fak.M_APPLIED_PATH,         fak.UPDATE_DATE,         fak.DOWNLOAD_DATE,         fak.IMPORT_DATE,         fak.SOURCESYSTEM_CD,         fak.VALUETYPE_CD,         fak.M_EXCLUSION_CD,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_PATH,         fak.C_SYMBOL     FROM   "
						+ context.DBSchema
						+ ".i2b2      fak    JOIN   "
						+ context.DBSchema
						+ ".t_mapping tmp ON fak.c_fullname LIKE tmp.fact_path || '%'    JOIN   "
						+ context.DBSchema
						+ ".i2b2      trm ON trm.c_fullname LIKE tmp.term_path || '%'      JOIN   "
						+ context.DBSchema
						+ ".concept_dimension cnd ON fak.c_fullname = cnd.concept_path  WHERE fak.c_name = SUBSTR(trm.c_basecode,INSTR(trm.c_basecode,':')+1)    AND trm.c_visualattributes LIKE 'LA%' AND fak.c_visualattributes LIKE 'LA%'    UNION    SELECT        trm.C_HLEVEL+tmp.APPEND_LEVEL as C_HLEVEL,        SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS c_fullname,        trm.c_name AS C_NAME,          fak.C_SYNONYM_CD,         trm.c_visualattributes as C_VISUALATTRIBUTES,         fak.C_TOTALNUM,         cnd.concept_cd as C_BASECODE,        to_char(fak.C_METADATAXML)  as C_METADATAXML,            fak.C_FACTTABLECOLUMN,         fak.C_TABLENAME,         fak.C_COLUMNNAME,         fak.C_COLUMNDATATYPE,         fak.C_OPERATOR,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_DIMCODE,         to_char(fak.C_COMMENT) as C_COMMENT,         trm.C_TOOLTIP,         fak.M_APPLIED_PATH,         fak.UPDATE_DATE,         fak.DOWNLOAD_DATE,         fak.IMPORT_DATE,         fak.SOURCESYSTEM_CD,         fak.VALUETYPE_CD,         fak.M_EXCLUSION_CD,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_PATH,         fak.C_SYMBOL     FROM   "
						+ context.DBSchema
						+ ".i2b2      fak    JOIN   "
						+ context.DBSchema
						+ ".t_mapping tmp ON fak.c_fullname LIKE tmp.fact_path || '%'    JOIN   "
						+ context.DBSchema
						+ ".i2b2      trm ON trm.c_fullname LIKE tmp.term_path || '%'      JOIN   "
						+ context.DBSchema
						+ ".concept_dimension cnd ON fak.c_fullname = cnd.concept_path  WHERE  fak.c_name = replace(replace(SUBSTR(trm.c_basecode,INSTR(trm.c_basecode,':')+1),'-',''),'.','')   AND trm.c_visualattributes LIKE 'LA%' AND fak.c_visualattributes LIKE 'LA%' AND tmp.fact_path LIKE '\\i2b2\\PD\\OPS\\OPS_KODE\\%'    UNION    SELECT        trm.C_HLEVEL+tmp.APPEND_LEVEL as C_HLEVEL,        SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS c_fullname,        trm.c_name AS C_NAME,          fak.C_SYNONYM_CD,         trm.c_visualattributes as C_VISUALATTRIBUTES,         fak.C_TOTALNUM,         cnd.concept_cd as C_BASECODE,         to_char(fak.C_METADATAXML)  as C_METADATAXML,           fak.C_FACTTABLECOLUMN,         fak.C_TABLENAME,         fak.C_COLUMNNAME,         fak.C_COLUMNDATATYPE,         fak.C_OPERATOR,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_DIMCODE,         to_char(fak.C_COMMENT) as C_COMMENT,         trm.C_TOOLTIP,         fak.M_APPLIED_PATH,         fak.UPDATE_DATE,         fak.DOWNLOAD_DATE,         fak.IMPORT_DATE,         fak.SOURCESYSTEM_CD,         fak.VALUETYPE_CD,         fak.M_EXCLUSION_CD,         SUBSTR(fak.c_fullname, 1, LENGTH(tmp.fact_path)) || SUBSTR(trm.c_fullname,        LENGTH(tmp.term_path)+1) AS C_PATH,         fak.C_SYMBOL     FROM   "
						+ context.DBSchema
						+ ".i2b2      fak    JOIN   "
						+ context.DBSchema
						+ ".t_mapping tmp ON fak.c_fullname LIKE tmp.fact_path || '%'    JOIN   "
						+ context.DBSchema
						+ ".i2b2      trm ON trm.c_fullname LIKE tmp.term_path || '%'      JOIN   "
						+ context.DBSchema
						+ ".concept_dimension cnd ON fak.c_fullname = cnd.concept_path  WHERE  SUBSTR(fak.c_name,INSTR(fak.c_name,':')+3) = SUBSTR(trm.c_basecode,INSTR(trm.c_basecode,':')+1)    AND trm.c_visualattributes LIKE 'LA%' AND fak.c_visualattributes LIKE 'LA%'  AND tmp.fact_path LIKE '\\i2b2\\PD\\FAB\\FAB\\%'    UNION      SELECT    fak.C_HLEVEL,     fak.C_FULLNAME,     fak.C_NAME,     fak.C_SYNONYM_CD,     fak.C_VISUALATTRIBUTES,     fak.C_TOTALNUM,     fak.C_BASECODE,     to_char(fak.C_METADATAXML)  as C_METADATAXML,        fak.C_FACTTABLECOLUMN,     fak.C_TABLENAME,     fak.C_COLUMNNAME,     fak.C_COLUMNDATATYPE,     fak.C_OPERATOR,     fak.C_DIMCODE,     to_char(fak.C_COMMENT) as C_COMMENT,     fak.C_TOOLTIP,     fak.M_APPLIED_PATH,     fak.UPDATE_DATE,     fak.DOWNLOAD_DATE,     fak.IMPORT_DATE,     fak.SOURCESYSTEM_CD,     fak.VALUETYPE_CD,     fak.M_EXCLUSION_CD,     fak.C_PATH,     fak.C_SYMBOL    FROM   "
						+ context.DBSchema
						+ ".i2b2  fak    where fak.c_hlevel > 3 and fak.c_fullname not like '\\i2b2\\ST%' AND fak.c_visualattributes NOT LIKE 'LA%'    and fak.c_fullname not in      (SELECT  fak2.C_FULLNAME        FROM   "
						+ context.DBSchema
						+ ".i2b2      fak2       JOIN   "
						+ context.DBSchema
						+ ".t_mapping tmp2 ON fak2.c_fullname LIKE tmp2.fact_path || '%')  	   UNION    SELECT    fak.C_HLEVEL,     fak.C_FULLNAME,     fak.C_NAME,     fak.C_SYNONYM_CD,     fak.C_VISUALATTRIBUTES,     fak.C_TOTALNUM,     cnd.concept_cd as C_BASECODE,     to_char(fak.C_METADATAXML)  as C_METADATAXML,        fak.C_FACTTABLECOLUMN,     fak.C_TABLENAME,     fak.C_COLUMNNAME,     fak.C_COLUMNDATATYPE,     fak.C_OPERATOR,     fak.C_DIMCODE,     to_char(fak.C_COMMENT) as C_COMMENT,     fak.C_TOOLTIP,     fak.M_APPLIED_PATH,     fak.UPDATE_DATE,     fak.DOWNLOAD_DATE,     fak.IMPORT_DATE,     fak.SOURCESYSTEM_CD,     fak.VALUETYPE_CD,     fak.M_EXCLUSION_CD,     fak.C_PATH,     fak.C_SYMBOL    FROM   "
						+ context.DBSchema
						+ ".i2b2  fak    JOIN   "
						+ context.DBSchema
						+ ".concept_dimension cnd ON fak.c_fullname = cnd.concept_path    where fak.c_hlevel > 3 and fak.c_fullname not like '\\i2b2\\ST%' AND fak.c_visualattributes LIKE 'LA%'    and fak.c_fullname not in      (SELECT  fak2.C_FULLNAME        FROM   "
						+ context.DBSchema
						+ ".i2b2      fak2       JOIN   "
						+ context.DBSchema
						+ ".t_mapping tmp2 ON fak2.c_fullname LIKE tmp2.fact_path || '%')  )  ";
				whetherReject_tOracleRow_5 = false;

				globalMap.put("tOracleRow_5_QUERY", query_tOracleRow_5);
				try {
					stmt_tOracleRow_5.execute(query_tOracleRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_5 = true;
					throw (e);
				}

				if (!whetherReject_tOracleRow_5) {
				}
				commitCounter_tOracleRow_5++;
				if (commitEvery_tOracleRow_5 <= commitCounter_tOracleRow_5) {

					conn_tOracleRow_5.commit();

					commitCounter_tOracleRow_5 = 0;

				}

				tos_count_tOracleRow_5++;

				/**
				 * [tOracleRow_5 main ] stop
				 */
				/**
				 * [tOracleRow_5 end ] start
				 */

				currentComponent = "tOracleRow_5";

				stmt_tOracleRow_5.close();
				if (commitEvery_tOracleRow_5 > commitCounter_tOracleRow_5) {

					conn_tOracleRow_5.commit();

					commitCounter_tOracleRow_5 = 0;

				}

				conn_tOracleRow_5.close();

				ok_Hash.put("tOracleRow_5", true);
				end_Hash.put("tOracleRow_5", System.currentTimeMillis());

				tOracleCommit_2Process(globalMap);

				/**
				 * [tOracleRow_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_5_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_2 begin ] start
				 */

				ok_Hash.put("tOracleCommit_2", false);
				start_Hash.put("tOracleCommit_2", System.currentTimeMillis());
				currentComponent = "tOracleCommit_2";

				int tos_count_tOracleCommit_2 = 0;

				/**
				 * [tOracleCommit_2 begin ] stop
				 */
				/**
				 * [tOracleCommit_2 main ] start
				 */

				currentComponent = "tOracleCommit_2";

				java.sql.Connection conn_tOracleCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_2 != null) {
						if (dataSources_tOracleCommit_2.get("") != null) {
							conn_tOracleCommit_2 = dataSources_tOracleCommit_2
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_2 != null
						&& !conn_tOracleCommit_2.isClosed()) {
					conn_tOracleCommit_2.commit();
				}

				tos_count_tOracleCommit_2++;

				/**
				 * [tOracleCommit_2 main ] stop
				 */
				/**
				 * [tOracleCommit_2 end ] start
				 */

				currentComponent = "tOracleCommit_2";

				ok_Hash.put("tOracleCommit_2", true);
				end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

				tJava_9Process(globalMap);
				tOracleRow_6Process(globalMap);

				/**
				 * [tOracleCommit_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				System.out.println("Truncate table i2b2 ...");
				// ca. 70%
				StatusListener.setSubStatus(70.0f, (int) (float) (70.0f)
						+ "% Truncate table i2b2");

				/**
				 * [tJava_9 begin ] stop
				 */
				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */
				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_6 begin ] start
				 */

				ok_Hash.put("tOracleRow_6", false);
				start_Hash.put("tOracleRow_6", System.currentTimeMillis());
				currentComponent = "tOracleRow_6";

				int tos_count_tOracleRow_6 = 0;

				java.sql.Connection conn_tOracleRow_6 = null;
				conn_tOracleRow_6 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_6) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_6 = dataSources_tOracleRow_6.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_6 = conn_tOracleRow_6
						.createStatement();
				String query_tOracleRow_6 = "";
				boolean whetherReject_tOracleRow_6 = false;

				/**
				 * [tOracleRow_6 begin ] stop
				 */
				/**
				 * [tOracleRow_6 main ] start
				 */

				currentComponent = "tOracleRow_6";

				query_tOracleRow_6 = "TRUNCATE TABLE  " + context.DBSchema
						+ ".I2B2";
				whetherReject_tOracleRow_6 = false;

				globalMap.put("tOracleRow_6_QUERY", query_tOracleRow_6);
				try {
					stmt_tOracleRow_6.execute(query_tOracleRow_6);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_6 = true;
					throw (e);
				}

				if (!whetherReject_tOracleRow_6) {
				}

				tos_count_tOracleRow_6++;

				/**
				 * [tOracleRow_6 main ] stop
				 */
				/**
				 * [tOracleRow_6 end ] start
				 */

				currentComponent = "tOracleRow_6";

				stmt_tOracleRow_6.close();

				ok_Hash.put("tOracleRow_6", true);
				end_Hash.put("tOracleRow_6", System.currentTimeMillis());

				tJava_10Process(globalMap);
				tOracleRow_8Process(globalMap);

				/**
				 * [tOracleRow_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				System.out.println("Truncate table concept_dimension ...");
				// ca. 72%
				StatusListener.setSubStatus(72.0f, (int) (float) (72.0f)
						+ "% Truncate table concept_dimension");

				/**
				 * [tJava_10 begin ] stop
				 */
				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */
				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_8 begin ] start
				 */

				ok_Hash.put("tOracleRow_8", false);
				start_Hash.put("tOracleRow_8", System.currentTimeMillis());
				currentComponent = "tOracleRow_8";

				int tos_count_tOracleRow_8 = 0;

				java.sql.Connection conn_tOracleRow_8 = null;
				conn_tOracleRow_8 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_8) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_8 = dataSources_tOracleRow_8.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_8 = conn_tOracleRow_8
						.createStatement();
				String query_tOracleRow_8 = "";
				boolean whetherReject_tOracleRow_8 = false;

				/**
				 * [tOracleRow_8 begin ] stop
				 */
				/**
				 * [tOracleRow_8 main ] start
				 */

				currentComponent = "tOracleRow_8";

				query_tOracleRow_8 = "TRUNCATE TABLE  " + context.DBSchema
						+ ".CONCEPT_DIMENSION";
				whetherReject_tOracleRow_8 = false;

				globalMap.put("tOracleRow_8_QUERY", query_tOracleRow_8);
				try {
					stmt_tOracleRow_8.execute(query_tOracleRow_8);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_8 = true;
					throw (e);
				}

				if (!whetherReject_tOracleRow_8) {
				}

				tos_count_tOracleRow_8++;

				/**
				 * [tOracleRow_8 main ] stop
				 */
				/**
				 * [tOracleRow_8 end ] start
				 */

				currentComponent = "tOracleRow_8";

				stmt_tOracleRow_8.close();

				ok_Hash.put("tOracleRow_8", true);
				end_Hash.put("tOracleRow_8", System.currentTimeMillis());

				tJava_11Process(globalMap);
				tOracleRow_10Process(globalMap);

				/**
				 * [tOracleRow_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());
				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				System.out
						.println("Copy transformed values into table i2b2 ...");
				// ca. 74%
				StatusListener.setSubStatus(74.0f, (int) (float) (74.0f)
						+ "% Copy transformed values into table i2b2");

				/**
				 * [tJava_11 begin ] stop
				 */
				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */
				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_10 begin ] start
				 */

				ok_Hash.put("tOracleRow_10", false);
				start_Hash.put("tOracleRow_10", System.currentTimeMillis());
				currentComponent = "tOracleRow_10";

				int tos_count_tOracleRow_10 = 0;

				java.sql.Connection conn_tOracleRow_10 = null;
				conn_tOracleRow_10 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_10) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_10 = dataSources_tOracleRow_10.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_10 = conn_tOracleRow_10
						.createStatement();
				String query_tOracleRow_10 = "";
				boolean whetherReject_tOracleRow_10 = false;

				/**
				 * [tOracleRow_10 begin ] stop
				 */
				/**
				 * [tOracleRow_10 main ] start
				 */

				currentComponent = "tOracleRow_10";

				query_tOracleRow_10 = "INSERT INTO   " + context.DBSchema
						+ ".I2B2   SELECT * FROM   " + context.DBSchema
						+ ".TMP_I2B2  ";
				whetherReject_tOracleRow_10 = false;

				globalMap.put("tOracleRow_10_QUERY", query_tOracleRow_10);
				try {
					stmt_tOracleRow_10.execute(query_tOracleRow_10);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_10 = true;
					throw (e);
				}

				if (!whetherReject_tOracleRow_10) {
				}

				tos_count_tOracleRow_10++;

				/**
				 * [tOracleRow_10 main ] stop
				 */
				/**
				 * [tOracleRow_10 end ] start
				 */

				currentComponent = "tOracleRow_10";

				stmt_tOracleRow_10.close();

				ok_Hash.put("tOracleRow_10", true);
				end_Hash.put("tOracleRow_10", System.currentTimeMillis());

				tJava_12Process(globalMap);
				tOracleRow_12Process(globalMap);

				/**
				 * [tOracleRow_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				System.out
						.println("Generate values for table concept_dimension ...");
				// ca. 85%
				StatusListener.setSubStatus(85.0f, (int) (float) (85.0f)
						+ "% Generate values for table concept_dimension");

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_12 begin ] start
				 */

				ok_Hash.put("tOracleRow_12", false);
				start_Hash.put("tOracleRow_12", System.currentTimeMillis());
				currentComponent = "tOracleRow_12";

				int tos_count_tOracleRow_12 = 0;

				java.sql.Connection conn_tOracleRow_12 = null;
				conn_tOracleRow_12 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_12) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_12 = dataSources_tOracleRow_12.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_12 = conn_tOracleRow_12
						.createStatement();
				String query_tOracleRow_12 = "";
				boolean whetherReject_tOracleRow_12 = false;

				/**
				 * [tOracleRow_12 begin ] stop
				 */
				/**
				 * [tOracleRow_12 main ] start
				 */

				currentComponent = "tOracleRow_12";

				query_tOracleRow_12 = "INSERT INTO  "
						+ context.DBSchema
						+ ".CONCEPT_DIMENSION (CONCEPT_CD, CONCEPT_PATH, NAME_CHAR, CONCEPT_BLOB, UPDATE_DATE, DOWNLOAD_DATE, IMPORT_DATE, SOURCESYSTEM_CD, UPLOAD_ID)   SELECT DISTINCT C_BASECODE, C_FULLNAME, C_NAME, null, null, null, null, null, null FROM   "
						+ context.DBSchema
						+ ".I2B2   WHERE C_VISUALATTRIBUTES LIKE 'LA%'";
				whetherReject_tOracleRow_12 = false;

				globalMap.put("tOracleRow_12_QUERY", query_tOracleRow_12);
				try {
					stmt_tOracleRow_12.execute(query_tOracleRow_12);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_12 = true;
					throw (e);
				}

				if (!whetherReject_tOracleRow_12) {
				}

				tos_count_tOracleRow_12++;

				/**
				 * [tOracleRow_12 main ] stop
				 */
				/**
				 * [tOracleRow_12 end ] start
				 */

				currentComponent = "tOracleRow_12";

				stmt_tOracleRow_12.close();

				ok_Hash.put("tOracleRow_12", true);
				end_Hash.put("tOracleRow_12", System.currentTimeMillis());

				tJava_13Process(globalMap);
				tOracleRow_2Process(globalMap);

				/**
				 * [tOracleRow_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());
				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				System.out.println("Drop temporary tables ...");
				// ca. 95%
				StatusListener.setSubStatus(95.0f, (int) (float) (95.0f)
						+ "% Drop temporary tables");

				/**
				 * [tJava_13 begin ] stop
				 */
				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */
				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_2 begin ] start
				 */

				ok_Hash.put("tOracleRow_2", false);
				start_Hash.put("tOracleRow_2", System.currentTimeMillis());
				currentComponent = "tOracleRow_2";

				int tos_count_tOracleRow_2 = 0;

				java.sql.Connection conn_tOracleRow_2 = null;
				conn_tOracleRow_2 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_2 = dataSources_tOracleRow_2.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2
						.createStatement();
				String query_tOracleRow_2 = "";
				boolean whetherReject_tOracleRow_2 = false;

				/**
				 * [tOracleRow_2 begin ] stop
				 */
				/**
				 * [tOracleRow_2 main ] start
				 */

				currentComponent = "tOracleRow_2";

				query_tOracleRow_2 = " DROP TABLE   " + context.DBSchema
						+ ".TMP_I2B2";
				whetherReject_tOracleRow_2 = false;

				globalMap.put("tOracleRow_2_QUERY", query_tOracleRow_2);
				try {
					stmt_tOracleRow_2.execute(query_tOracleRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_2 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_2) {
				}

				tos_count_tOracleRow_2++;

				/**
				 * [tOracleRow_2 main ] stop
				 */
				/**
				 * [tOracleRow_2 end ] start
				 */

				currentComponent = "tOracleRow_2";

				stmt_tOracleRow_2.close();

				ok_Hash.put("tOracleRow_2", true);
				end_Hash.put("tOracleRow_2", System.currentTimeMillis());

				tOracleRow_15Process(globalMap);

				/**
				 * [tOracleRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_15 begin ] start
				 */

				ok_Hash.put("tOracleRow_15", false);
				start_Hash.put("tOracleRow_15", System.currentTimeMillis());
				currentComponent = "tOracleRow_15";

				int tos_count_tOracleRow_15 = 0;

				java.sql.Connection conn_tOracleRow_15 = null;
				conn_tOracleRow_15 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleRow_15) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_15 = dataSources_tOracleRow_15.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_15 = conn_tOracleRow_15
						.createStatement();
				String query_tOracleRow_15 = "";
				boolean whetherReject_tOracleRow_15 = false;

				/**
				 * [tOracleRow_15 begin ] stop
				 */
				/**
				 * [tOracleRow_15 main ] start
				 */

				currentComponent = "tOracleRow_15";

				query_tOracleRow_15 = " DROP TABLE  " + context.DBSchema
						+ ".T_MAPPING";
				whetherReject_tOracleRow_15 = false;

				globalMap.put("tOracleRow_15_QUERY", query_tOracleRow_15);
				try {
					stmt_tOracleRow_15.execute(query_tOracleRow_15);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_15 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tOracleRow_15) {
				}

				tos_count_tOracleRow_15++;

				/**
				 * [tOracleRow_15 main ] stop
				 */
				/**
				 * [tOracleRow_15 end ] start
				 */

				currentComponent = "tOracleRow_15";

				stmt_tOracleRow_15.close();

				ok_Hash.put("tOracleRow_15", true);
				end_Hash.put("tOracleRow_15", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleRow_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_15_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_1 begin ] start
				 */

				ok_Hash.put("tOracleCommit_1", false);
				start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
				currentComponent = "tOracleCommit_1";

				int tos_count_tOracleCommit_1 = 0;

				/**
				 * [tOracleCommit_1 begin ] stop
				 */
				/**
				 * [tOracleCommit_1 main ] start
				 */

				currentComponent = "tOracleCommit_1";

				java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_1 != null) {
						if (dataSources_tOracleCommit_1.get("") != null) {
							conn_tOracleCommit_1 = dataSources_tOracleCommit_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_1 != null
						&& !conn_tOracleCommit_1.isClosed()) {
					conn_tOracleCommit_1.commit();
					conn_tOracleCommit_1.close();
				}

				tos_count_tOracleCommit_1++;

				/**
				 * [tOracleCommit_1 main ] stop
				 */
				/**
				 * [tOracleCommit_1 end ] start
				 */

				currentComponent = "tOracleCommit_1";

				ok_Hash.put("tOracleCommit_1", true);
				end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				tJava_14Process(globalMap);

				/**
				 * [tOracleCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());
				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				System.out.println("Transformation job complete!");

				StatusListener.setSubStatus(100.0f, (int) (float) (100.0f)
						+ "% Transformation job complete!");

				/**
				 * [tJava_14 begin ] stop
				 */
				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */
				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				/**
				 * [tJava_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IDRT_TRANSFORMATION IDRT_TRANSFORMATIONClass = new IDRT_TRANSFORMATION();

		int exitCode = IDRT_TRANSFORMATIONClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IDRT_TRANSFORMATION.class
					.getClassLoader().getResourceAsStream(
							"tos/idrt_transformation_0_5/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.t_mapping_path = (String) context
					.getProperty("t_mapping_path");
			context.DBHost = (String) context.getProperty("DBHost");
			context.DBInstance = (String) context.getProperty("DBInstance");
			context.DBPassword = (java.lang.String) context
					.getProperty("DBPassword");
			context.DBPort = (String) context.getProperty("DBPort");
			context.DBSchema = (String) context.getProperty("DBSchema");
			context.DBUsername = (String) context.getProperty("DBUsername");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("t_mapping_path")) {
				context.t_mapping_path = (String) parentContextMap
						.get("t_mapping_path");
			}
			if (parentContextMap.containsKey("DBHost")) {
				context.DBHost = (String) parentContextMap.get("DBHost");
			}
			if (parentContextMap.containsKey("DBInstance")) {
				context.DBInstance = (String) parentContextMap
						.get("DBInstance");
			}
			if (parentContextMap.containsKey("DBPassword")) {
				context.DBPassword = (java.lang.String) parentContextMap
						.get("DBPassword");
			}
			if (parentContextMap.containsKey("DBPort")) {
				context.DBPort = (String) parentContextMap.get("DBPort");
			}
			if (parentContextMap.containsKey("DBSchema")) {
				context.DBSchema = (String) parentContextMap.get("DBSchema");
			}
			if (parentContextMap.containsKey("DBUsername")) {
				context.DBUsername = (String) parentContextMap
						.get("DBUsername");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {

			e_tLibraryLoad_1.printStackTrace();
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : IDRT_TRANSFORMATION");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 144029 characters generated by Talend Open Studio for Data Integration on the
 * May 25, 2014 7:32:18 PM CEST
 ************************************************************************************************/
