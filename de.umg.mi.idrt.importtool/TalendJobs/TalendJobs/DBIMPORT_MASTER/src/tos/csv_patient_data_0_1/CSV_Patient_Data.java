// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.csv_patient_data_0_1;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.IDRTHelper;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.enc_num_routine;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: CSV_Patient_Data Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class CSV_Patient_Data implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (config != null) {

				this.setProperty("config", config.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (fileName != null) {

				this.setProperty("fileName", fileName.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (output != null) {

				this.setProperty("output", output.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (csvOutputRows != null) {

				this.setProperty("csvOutputRows", csvOutputRows.toString());

			}

			if (ontOutputRows != null) {

				this.setProperty("ontOutputRows", ontOutputRows.toString());

			}

			if (csvOutputMod != null) {

				this.setProperty("csvOutputMod", csvOutputMod.toString());

			}

			if (ontOutputMod != null) {

				this.setProperty("ontOutputMod", ontOutputMod.toString());

			}

			if (csvOutputCurrent != null) {

				this.setProperty("csvOutputCurrent",
						csvOutputCurrent.toString());

			}

			if (ontOutputCurrent != null) {

				this.setProperty("ontOutputCurrent",
						ontOutputCurrent.toString());

			}

		}

		public String config;

		public String getConfig() {
			return this.config;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String output;

		public String getOutput() {
			return this.output;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public Integer csvOutputRows;

		public Integer getCsvOutputRows() {
			return this.csvOutputRows;
		}

		public Integer ontOutputRows;

		public Integer getOntOutputRows() {
			return this.ontOutputRows;
		}

		public Integer csvOutputMod;

		public Integer getCsvOutputMod() {
			return this.csvOutputMod;
		}

		public Integer ontOutputMod;

		public Integer getOntOutputMod() {
			return this.ontOutputMod;
		}

		public Integer csvOutputCurrent;

		public Integer getCsvOutputCurrent() {
			return this.csvOutputCurrent;
		}

		public Integer ontOutputCurrent;

		public Integer getOntOutputCurrent() {
			return this.ontOutputCurrent;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "CSV_Patient_Data";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					CSV_Patient_Data.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(CSV_Patient_Data.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tCreateTemporaryFile_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_5", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_1", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_2", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_3", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_4", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_fromOnt_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_fromOnt", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_UniqOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3_UniqOut", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_UniqIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3_UniqIn", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_5 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_5", false);
				start_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_5";

				int tos_count_tCreateTemporaryFile_5 = 0;

				java.io.File dir_tCreateTemporaryFile_5 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_5.mkdirs();
				String name_tCreateTemporaryFile_5 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_5 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_5 = new java.io.File(
						dir_tCreateTemporaryFile_5, name_tCreateTemporaryFile_5
								+ "." + suffix_tCreateTemporaryFile_5);
				if (file_tCreateTemporaryFile_5.createNewFile()) {
					file_tCreateTemporaryFile_5.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_5_FILEPATH",
						file_tCreateTemporaryFile_5.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_5 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				tos_count_tCreateTemporaryFile_5++;

				/**
				 * [tCreateTemporaryFile_5 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				ok_Hash.put("tCreateTemporaryFile_5", true);
				end_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLibraryLoad_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterID;

		public String getEncounterID() {
			return this.EncounterID;
		}

		public java.util.Date ImportDate;

		public java.util.Date getImportDate() {
			return this.ImportDate;
		}

		public java.util.Date UpdateDate;

		public java.util.Date getUpdateDate() {
			return this.UpdateDate;
		}

		public java.util.Date DownloadDate;

		public java.util.Date getDownloadDate() {
			return this.DownloadDate;
		}

		public String Item;

		public String getItem() {
			return this.Item;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String NiceName;

		public String getNiceName() {
			return this.NiceName;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String uniqueID;

		public String getUniqueID() {
			return this.uniqueID;
		}

		public String BirthDay;

		public String getBirthDay() {
			return this.BirthDay;
		}

		public String DeathDay;

		public String getDeathDay() {
			return this.DeathDay;
		}

		public java.util.Date StartDate;

		public java.util.Date getStartDate() {
			return this.StartDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public String SourceSystem;

		public String getSourceSystem() {
			return this.SourceSystem;
		}

		public String instanceNum;

		public String getInstanceNum() {
			return this.instanceNum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterID = readString(dis);

					this.ImportDate = readDate(dis);

					this.UpdateDate = readDate(dis);

					this.DownloadDate = readDate(dis);

					this.Item = readString(dis);

					this.Value = readString(dis);

					this.NiceName = readString(dis);

					this.DataType = readString(dis);

					this.uniqueID = readString(dis);

					this.BirthDay = readString(dis);

					this.DeathDay = readString(dis);

					this.StartDate = readDate(dis);

					this.EndDate = readDate(dis);

					this.SourceSystem = readString(dis);

					this.instanceNum = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterID, dos);

				// java.util.Date

				writeDate(this.ImportDate, dos);

				// java.util.Date

				writeDate(this.UpdateDate, dos);

				// java.util.Date

				writeDate(this.DownloadDate, dos);

				// String

				writeString(this.Item, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.NiceName, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.uniqueID, dos);

				// String

				writeString(this.BirthDay, dos);

				// String

				writeString(this.DeathDay, dos);

				// java.util.Date

				writeDate(this.StartDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// String

				writeString(this.SourceSystem, dos);

				// String

				writeString(this.instanceNum, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterID=" + EncounterID);
			sb.append(",ImportDate=" + String.valueOf(ImportDate));
			sb.append(",UpdateDate=" + String.valueOf(UpdateDate));
			sb.append(",DownloadDate=" + String.valueOf(DownloadDate));
			sb.append(",Item=" + Item);
			sb.append(",Value=" + Value);
			sb.append(",NiceName=" + NiceName);
			sb.append(",DataType=" + DataType);
			sb.append(",uniqueID=" + uniqueID);
			sb.append(",BirthDay=" + BirthDay);
			sb.append(",DeathDay=" + DeathDay);
			sb.append(",StartDate=" + String.valueOf(StartDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",SourceSystem=" + SourceSystem);
			sb.append(",instanceNum=" + instanceNum);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());
				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				context.folderMain + context.folderOutput + context.output/**
				 * End
				 * field tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
										.getValues();
								if (!(rowtFileInputDelimited_5.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_5[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						if (rowtFileInputDelimited_5.length == 1
								&& ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						row3 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row3 = new row3Struct();
						try {

							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row3.PatientID = null;

								row3.EncounterID = null;

								row3.ImportDate = null;

								row3.UpdateDate = null;

								row3.DownloadDate = null;

								row3.Item = null;

								row3.Value = null;

								row3.NiceName = null;

								row3.DataType = null;

								row3.uniqueID = null;

								row3.BirthDay = null;

								row3.DeathDay = null;

								row3.StartDate = null;

								row3.EndDate = null;

								row3.SourceSystem = null;

								row3.instanceNum = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.PatientID = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.PatientID = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.EncounterID = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.EncounterID = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row3.ImportDate = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd.MM.yyyy");

									} else {
										row3.ImportDate = null;
									}

								} else {
									row3.ImportDate = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row3.UpdateDate = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd.MM.yyyy");

									} else {
										row3.UpdateDate = null;
									}

								} else {
									row3.UpdateDate = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row3.DownloadDate = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd.MM.yyyy");

									} else {
										row3.DownloadDate = null;
									}

								} else {
									row3.DownloadDate = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 5;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.Item = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.Item = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 6;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.Value = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.Value = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 7;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.NiceName = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.NiceName = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 8;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.DataType = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 9;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.uniqueID = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.uniqueID = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 10;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.BirthDay = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.BirthDay = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 11;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.DeathDay = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.DeathDay = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 12;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row3.StartDate = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd.MM.yyyy");

									} else {
										row3.StartDate = null;
									}

								} else {
									row3.StartDate = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 13;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row3.EndDate = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd.MM.yyyy");

									} else {
										row3.EndDate = null;
									}

								} else {
									row3.EndDate = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 14;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.SourceSystem = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.SourceSystem = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 15;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row3.instanceNum = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row3.instanceNum = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							context.csvOutputRows++;

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				if (context.csvOutputRows / 100 > 0)
					context.csvOutputMod = context.csvOutputRows / 100;

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_1 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_1", false);
				start_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_1";

				int tos_count_tCreateTemporaryFile_1 = 0;

				java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_1.mkdirs();
				String name_tCreateTemporaryFile_1 = "talend1_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_1 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_1 = new java.io.File(
						dir_tCreateTemporaryFile_1, name_tCreateTemporaryFile_1
								+ "." + suffix_tCreateTemporaryFile_1);
				if (file_tCreateTemporaryFile_1.createNewFile()) {
					file_tCreateTemporaryFile_1.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_1_FILEPATH",
						file_tCreateTemporaryFile_1.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_1 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				tos_count_tCreateTemporaryFile_1++;

				/**
				 * [tCreateTemporaryFile_1 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				ok_Hash.put("tCreateTemporaryFile_1", true);
				end_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_2 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_2", false);
				start_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_2";

				int tos_count_tCreateTemporaryFile_2 = 0;

				java.io.File dir_tCreateTemporaryFile_2 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_2.mkdirs();
				String name_tCreateTemporaryFile_2 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_2 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_2 = new java.io.File(
						dir_tCreateTemporaryFile_2, name_tCreateTemporaryFile_2
								+ "." + suffix_tCreateTemporaryFile_2);
				if (file_tCreateTemporaryFile_2.createNewFile()) {
					file_tCreateTemporaryFile_2.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_2_FILEPATH",
						file_tCreateTemporaryFile_2.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_2 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				tos_count_tCreateTemporaryFile_2++;

				/**
				 * [tCreateTemporaryFile_2 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				ok_Hash.put("tCreateTemporaryFile_2", true);
				end_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_3 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_3", false);
				start_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_3";

				int tos_count_tCreateTemporaryFile_3 = 0;

				java.io.File dir_tCreateTemporaryFile_3 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_3.mkdirs();
				String name_tCreateTemporaryFile_3 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_3 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_3 = new java.io.File(
						dir_tCreateTemporaryFile_3, name_tCreateTemporaryFile_3
								+ "." + suffix_tCreateTemporaryFile_3);
				if (file_tCreateTemporaryFile_3.createNewFile()) {
					file_tCreateTemporaryFile_3.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_3_FILEPATH",
						file_tCreateTemporaryFile_3.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_3 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				tos_count_tCreateTemporaryFile_3++;

				/**
				 * [tCreateTemporaryFile_3 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				ok_Hash.put("tCreateTemporaryFile_3", true);
				end_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_4 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_4", false);
				start_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_4";

				int tos_count_tCreateTemporaryFile_4 = 0;

				java.io.File dir_tCreateTemporaryFile_4 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_4.mkdirs();
				String name_tCreateTemporaryFile_4 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_4 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_4 = new java.io.File(
						dir_tCreateTemporaryFile_4, name_tCreateTemporaryFile_4
								+ "." + suffix_tCreateTemporaryFile_4);
				if (file_tCreateTemporaryFile_4.createNewFile()) {
					file_tCreateTemporaryFile_4.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_4_FILEPATH",
						file_tCreateTemporaryFile_4.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_4 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				tos_count_tCreateTemporaryFile_4++;

				/**
				 * [tCreateTemporaryFile_4 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				ok_Hash.put("tCreateTemporaryFile_4", true);
				end_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				enc_num_routine.createMap();
				context.ontOutputRows = 0;
				System.out.println("csvOutputRow: " + context.csvOutputRows);
				System.out.println("context.csvOutputMod = "
						+ context.csvOutputMod);

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asddStruct implements
			routines.system.IPersistableRow<asddStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterID;

		public String getEncounterID() {
			return this.EncounterID;
		}

		public java.util.Date ImportDate;

		public java.util.Date getImportDate() {
			return this.ImportDate;
		}

		public java.util.Date UpdateDate;

		public java.util.Date getUpdateDate() {
			return this.UpdateDate;
		}

		public java.util.Date DownloadDate;

		public java.util.Date getDownloadDate() {
			return this.DownloadDate;
		}

		public String Item;

		public String getItem() {
			return this.Item;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String NiceName;

		public String getNiceName() {
			return this.NiceName;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String uniqueID;

		public String getUniqueID() {
			return this.uniqueID;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public java.util.Date StartDate;

		public java.util.Date getStartDate() {
			return this.StartDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public String SourceSystem;

		public String getSourceSystem() {
			return this.SourceSystem;
		}

		public String instanceNum;

		public String getInstanceNum() {
			return this.instanceNum;
		}

		public String modifierType;

		public String getModifierType() {
			return this.modifierType;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterID = readString(dis);

					this.ImportDate = readDate(dis);

					this.UpdateDate = readDate(dis);

					this.DownloadDate = readDate(dis);

					this.Item = readString(dis);

					this.Value = readString(dis);

					this.NiceName = readString(dis);

					this.DataType = readString(dis);

					this.uniqueID = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.StartDate = readDate(dis);

					this.EndDate = readDate(dis);

					this.SourceSystem = readString(dis);

					this.instanceNum = readString(dis);

					this.modifierType = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterID, dos);

				// java.util.Date

				writeDate(this.ImportDate, dos);

				// java.util.Date

				writeDate(this.UpdateDate, dos);

				// java.util.Date

				writeDate(this.DownloadDate, dos);

				// String

				writeString(this.Item, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.NiceName, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.uniqueID, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// java.util.Date

				writeDate(this.StartDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// String

				writeString(this.SourceSystem, dos);

				// String

				writeString(this.instanceNum, dos);

				// String

				writeString(this.modifierType, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterID=" + EncounterID);
			sb.append(",ImportDate=" + String.valueOf(ImportDate));
			sb.append(",UpdateDate=" + String.valueOf(UpdateDate));
			sb.append(",DownloadDate=" + String.valueOf(DownloadDate));
			sb.append(",Item=" + Item);
			sb.append(",Value=" + Value);
			sb.append(",NiceName=" + NiceName);
			sb.append(",DataType=" + DataType);
			sb.append(",uniqueID=" + uniqueID);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",StartDate=" + String.valueOf(StartDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",SourceSystem=" + SourceSystem);
			sb.append(",instanceNum=" + instanceNum);
			sb.append(",modifierType=" + modifierType);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toDataStruct implements
			routines.system.IPersistableRow<toDataStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String modifierType;

		public String getModifierType() {
			return this.modifierType;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.modifierType = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.modifierType, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",modifierType=" + modifierType);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_ontStruct implements
			routines.system.IPersistableRow<to_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_ont_xmlStruct implements
			routines.system.IPersistableRow<to_ont_xmlStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_ont_xmlStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_ont_dateStruct implements
			routines.system.IPersistableRow<to_ont_dateStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_ont_dateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterID;

		public String getEncounterID() {
			return this.EncounterID;
		}

		public java.util.Date ImportDate;

		public java.util.Date getImportDate() {
			return this.ImportDate;
		}

		public java.util.Date UpdateDate;

		public java.util.Date getUpdateDate() {
			return this.UpdateDate;
		}

		public java.util.Date DownloadDate;

		public java.util.Date getDownloadDate() {
			return this.DownloadDate;
		}

		public String Item;

		public String getItem() {
			return this.Item;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String NiceName;

		public String getNiceName() {
			return this.NiceName;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String uniqueID;

		public String getUniqueID() {
			return this.uniqueID;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public java.util.Date StartDate;

		public java.util.Date getStartDate() {
			return this.StartDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public String SourceSystem;

		public String getSourceSystem() {
			return this.SourceSystem;
		}

		public String instanceNum;

		public String getInstanceNum() {
			return this.instanceNum;
		}

		public String modifierType;

		public String getModifierType() {
			return this.modifierType;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterID = readString(dis);

					this.ImportDate = readDate(dis);

					this.UpdateDate = readDate(dis);

					this.DownloadDate = readDate(dis);

					this.Item = readString(dis);

					this.Value = readString(dis);

					this.NiceName = readString(dis);

					this.DataType = readString(dis);

					this.uniqueID = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.StartDate = readDate(dis);

					this.EndDate = readDate(dis);

					this.SourceSystem = readString(dis);

					this.instanceNum = readString(dis);

					this.modifierType = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterID, dos);

				// java.util.Date

				writeDate(this.ImportDate, dos);

				// java.util.Date

				writeDate(this.UpdateDate, dos);

				// java.util.Date

				writeDate(this.DownloadDate, dos);

				// String

				writeString(this.Item, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.NiceName, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.uniqueID, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// java.util.Date

				writeDate(this.StartDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// String

				writeString(this.SourceSystem, dos);

				// String

				writeString(this.instanceNum, dos);

				// String

				writeString(this.modifierType, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterID=" + EncounterID);
			sb.append(",ImportDate=" + String.valueOf(ImportDate));
			sb.append(",UpdateDate=" + String.valueOf(UpdateDate));
			sb.append(",DownloadDate=" + String.valueOf(DownloadDate));
			sb.append(",Item=" + Item);
			sb.append(",Value=" + Value);
			sb.append(",NiceName=" + NiceName);
			sb.append(",DataType=" + DataType);
			sb.append(",uniqueID=" + uniqueID);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",StartDate=" + String.valueOf(StartDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",SourceSystem=" + SourceSystem);
			sb.append(",instanceNum=" + instanceNum);
			sb.append(",modifierType=" + modifierType);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromPatientStruct implements
			routines.system.IPersistableRow<fromPatientStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterID;

		public String getEncounterID() {
			return this.EncounterID;
		}

		public java.util.Date ImportDate;

		public java.util.Date getImportDate() {
			return this.ImportDate;
		}

		public java.util.Date UpdateDate;

		public java.util.Date getUpdateDate() {
			return this.UpdateDate;
		}

		public java.util.Date DownloadDate;

		public java.util.Date getDownloadDate() {
			return this.DownloadDate;
		}

		public String Item;

		public String getItem() {
			return this.Item;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String NiceName;

		public String getNiceName() {
			return this.NiceName;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String uniqueID;

		public String getUniqueID() {
			return this.uniqueID;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public java.util.Date StartDate;

		public java.util.Date getStartDate() {
			return this.StartDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public String SourceSystem;

		public String getSourceSystem() {
			return this.SourceSystem;
		}

		public String instanceNum;

		public String getInstanceNum() {
			return this.instanceNum;
		}

		public String modifierType;

		public String getModifierType() {
			return this.modifierType;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterID = readString(dis);

					this.ImportDate = readDate(dis);

					this.UpdateDate = readDate(dis);

					this.DownloadDate = readDate(dis);

					this.Item = readString(dis);

					this.Value = readString(dis);

					this.NiceName = readString(dis);

					this.DataType = readString(dis);

					this.uniqueID = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.StartDate = readDate(dis);

					this.EndDate = readDate(dis);

					this.SourceSystem = readString(dis);

					this.instanceNum = readString(dis);

					this.modifierType = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterID, dos);

				// java.util.Date

				writeDate(this.ImportDate, dos);

				// java.util.Date

				writeDate(this.UpdateDate, dos);

				// java.util.Date

				writeDate(this.DownloadDate, dos);

				// String

				writeString(this.Item, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.NiceName, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.uniqueID, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// java.util.Date

				writeDate(this.StartDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// String

				writeString(this.SourceSystem, dos);

				// String

				writeString(this.instanceNum, dos);

				// String

				writeString(this.modifierType, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterID=" + EncounterID);
			sb.append(",ImportDate=" + String.valueOf(ImportDate));
			sb.append(",UpdateDate=" + String.valueOf(UpdateDate));
			sb.append(",DownloadDate=" + String.valueOf(DownloadDate));
			sb.append(",Item=" + Item);
			sb.append(",Value=" + Value);
			sb.append(",NiceName=" + NiceName);
			sb.append(",DataType=" + DataType);
			sb.append(",uniqueID=" + uniqueID);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",StartDate=" + String.valueOf(StartDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",SourceSystem=" + SourceSystem);
			sb.append(",instanceNum=" + instanceNum);
			sb.append(",modifierType=" + modifierType);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromPatientStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdStruct implements
			routines.system.IPersistableRow<asdStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterID;

		public String getEncounterID() {
			return this.EncounterID;
		}

		public java.util.Date ImportDate;

		public java.util.Date getImportDate() {
			return this.ImportDate;
		}

		public java.util.Date UpdateDate;

		public java.util.Date getUpdateDate() {
			return this.UpdateDate;
		}

		public java.util.Date DownloadDate;

		public java.util.Date getDownloadDate() {
			return this.DownloadDate;
		}

		public String Item;

		public String getItem() {
			return this.Item;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String NiceName;

		public String getNiceName() {
			return this.NiceName;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String uniqueID;

		public String getUniqueID() {
			return this.uniqueID;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public java.util.Date StartDate;

		public java.util.Date getStartDate() {
			return this.StartDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public String SourceSystem;

		public String getSourceSystem() {
			return this.SourceSystem;
		}

		public String instanceNum;

		public String getInstanceNum() {
			return this.instanceNum;
		}

		public String modifierType;

		public String getModifierType() {
			return this.modifierType;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterID = readString(dis);

					this.ImportDate = readDate(dis);

					this.UpdateDate = readDate(dis);

					this.DownloadDate = readDate(dis);

					this.Item = readString(dis);

					this.Value = readString(dis);

					this.NiceName = readString(dis);

					this.DataType = readString(dis);

					this.uniqueID = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.StartDate = readDate(dis);

					this.EndDate = readDate(dis);

					this.SourceSystem = readString(dis);

					this.instanceNum = readString(dis);

					this.modifierType = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterID, dos);

				// java.util.Date

				writeDate(this.ImportDate, dos);

				// java.util.Date

				writeDate(this.UpdateDate, dos);

				// java.util.Date

				writeDate(this.DownloadDate, dos);

				// String

				writeString(this.Item, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.NiceName, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.uniqueID, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// java.util.Date

				writeDate(this.StartDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// String

				writeString(this.SourceSystem, dos);

				// String

				writeString(this.instanceNum, dos);

				// String

				writeString(this.modifierType, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterID=" + EncounterID);
			sb.append(",ImportDate=" + String.valueOf(ImportDate));
			sb.append(",UpdateDate=" + String.valueOf(UpdateDate));
			sb.append(",DownloadDate=" + String.valueOf(DownloadDate));
			sb.append(",Item=" + Item);
			sb.append(",Value=" + Value);
			sb.append(",NiceName=" + NiceName);
			sb.append(",DataType=" + DataType);
			sb.append(",uniqueID=" + uniqueID);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",StartDate=" + String.valueOf(StartDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",SourceSystem=" + SourceSystem);
			sb.append(",instanceNum=" + instanceNum);
			sb.append(",modifierType=" + modifierType);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromOutputStruct implements
			routines.system.IPersistableRow<fromOutputStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterID;

		public String getEncounterID() {
			return this.EncounterID;
		}

		public java.util.Date ImportDate;

		public java.util.Date getImportDate() {
			return this.ImportDate;
		}

		public java.util.Date UpdateDate;

		public java.util.Date getUpdateDate() {
			return this.UpdateDate;
		}

		public java.util.Date DownloadDate;

		public java.util.Date getDownloadDate() {
			return this.DownloadDate;
		}

		public String Item;

		public String getItem() {
			return this.Item;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String NiceName;

		public String getNiceName() {
			return this.NiceName;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String uniqueID;

		public String getUniqueID() {
			return this.uniqueID;
		}

		public String BirthDay;

		public String getBirthDay() {
			return this.BirthDay;
		}

		public String DeathDay;

		public String getDeathDay() {
			return this.DeathDay;
		}

		public java.util.Date StartDate;

		public java.util.Date getStartDate() {
			return this.StartDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public String SourceSystem;

		public String getSourceSystem() {
			return this.SourceSystem;
		}

		public String instanceNum;

		public String getInstanceNum() {
			return this.instanceNum;
		}

		public String modifierType;

		public String getModifierType() {
			return this.modifierType;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterID = readString(dis);

					this.ImportDate = readDate(dis);

					this.UpdateDate = readDate(dis);

					this.DownloadDate = readDate(dis);

					this.Item = readString(dis);

					this.Value = readString(dis);

					this.NiceName = readString(dis);

					this.DataType = readString(dis);

					this.uniqueID = readString(dis);

					this.BirthDay = readString(dis);

					this.DeathDay = readString(dis);

					this.StartDate = readDate(dis);

					this.EndDate = readDate(dis);

					this.SourceSystem = readString(dis);

					this.instanceNum = readString(dis);

					this.modifierType = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterID, dos);

				// java.util.Date

				writeDate(this.ImportDate, dos);

				// java.util.Date

				writeDate(this.UpdateDate, dos);

				// java.util.Date

				writeDate(this.DownloadDate, dos);

				// String

				writeString(this.Item, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.NiceName, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.uniqueID, dos);

				// String

				writeString(this.BirthDay, dos);

				// String

				writeString(this.DeathDay, dos);

				// java.util.Date

				writeDate(this.StartDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// String

				writeString(this.SourceSystem, dos);

				// String

				writeString(this.instanceNum, dos);

				// String

				writeString(this.modifierType, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterID=" + EncounterID);
			sb.append(",ImportDate=" + String.valueOf(ImportDate));
			sb.append(",UpdateDate=" + String.valueOf(UpdateDate));
			sb.append(",DownloadDate=" + String.valueOf(DownloadDate));
			sb.append(",Item=" + Item);
			sb.append(",Value=" + Value);
			sb.append(",NiceName=" + NiceName);
			sb.append(",DataType=" + DataType);
			sb.append(",uniqueID=" + uniqueID);
			sb.append(",BirthDay=" + BirthDay);
			sb.append(",DeathDay=" + DeathDay);
			sb.append(",StartDate=" + String.valueOf(StartDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",SourceSystem=" + SourceSystem);
			sb.append(",instanceNum=" + instanceNum);
			sb.append(",modifierType=" + modifierType);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterID;

		public String getEncounterID() {
			return this.EncounterID;
		}

		public java.util.Date ImportDate;

		public java.util.Date getImportDate() {
			return this.ImportDate;
		}

		public java.util.Date UpdateDate;

		public java.util.Date getUpdateDate() {
			return this.UpdateDate;
		}

		public java.util.Date DownloadDate;

		public java.util.Date getDownloadDate() {
			return this.DownloadDate;
		}

		public String Item;

		public String getItem() {
			return this.Item;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String NiceName;

		public String getNiceName() {
			return this.NiceName;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String uniqueID;

		public String getUniqueID() {
			return this.uniqueID;
		}

		public String BirthDay;

		public String getBirthDay() {
			return this.BirthDay;
		}

		public String DeathDay;

		public String getDeathDay() {
			return this.DeathDay;
		}

		public java.util.Date StartDate;

		public java.util.Date getStartDate() {
			return this.StartDate;
		}

		public java.util.Date EndDate;

		public java.util.Date getEndDate() {
			return this.EndDate;
		}

		public String SourceSystem;

		public String getSourceSystem() {
			return this.SourceSystem;
		}

		public String instanceNum;

		public String getInstanceNum() {
			return this.instanceNum;
		}

		public String modifierType;

		public String getModifierType() {
			return this.modifierType;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterID = readString(dis);

					this.ImportDate = readDate(dis);

					this.UpdateDate = readDate(dis);

					this.DownloadDate = readDate(dis);

					this.Item = readString(dis);

					this.Value = readString(dis);

					this.NiceName = readString(dis);

					this.DataType = readString(dis);

					this.uniqueID = readString(dis);

					this.BirthDay = readString(dis);

					this.DeathDay = readString(dis);

					this.StartDate = readDate(dis);

					this.EndDate = readDate(dis);

					this.SourceSystem = readString(dis);

					this.instanceNum = readString(dis);

					this.modifierType = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterID, dos);

				// java.util.Date

				writeDate(this.ImportDate, dos);

				// java.util.Date

				writeDate(this.UpdateDate, dos);

				// java.util.Date

				writeDate(this.DownloadDate, dos);

				// String

				writeString(this.Item, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.NiceName, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.uniqueID, dos);

				// String

				writeString(this.BirthDay, dos);

				// String

				writeString(this.DeathDay, dos);

				// java.util.Date

				writeDate(this.StartDate, dos);

				// java.util.Date

				writeDate(this.EndDate, dos);

				// String

				writeString(this.SourceSystem, dos);

				// String

				writeString(this.instanceNum, dos);

				// String

				writeString(this.modifierType, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterID=" + EncounterID);
			sb.append(",ImportDate=" + String.valueOf(ImportDate));
			sb.append(",UpdateDate=" + String.valueOf(UpdateDate));
			sb.append(",DownloadDate=" + String.valueOf(DownloadDate));
			sb.append(",Item=" + Item);
			sb.append(",Value=" + Value);
			sb.append(",NiceName=" + NiceName);
			sb.append(",DataType=" + DataType);
			sb.append(",uniqueID=" + uniqueID);
			sb.append(",BirthDay=" + BirthDay);
			sb.append(",DeathDay=" + DeathDay);
			sb.append(",StartDate=" + String.valueOf(StartDate));
			sb.append(",EndDate=" + String.valueOf(EndDate));
			sb.append(",SourceSystem=" + SourceSystem);
			sb.append(",instanceNum=" + instanceNum);
			sb.append(",modifierType=" + modifierType);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				fromOutputStruct fromOutput = new fromOutputStruct();
				asdStruct asd = new asdStruct();
				fromPatientStruct fromPatient = new fromPatientStruct();
				toDataStruct toData = new toDataStruct();
				to_ontStruct to_ont = new to_ontStruct();
				row5Struct row5 = new row5Struct();
				to_ont_xmlStruct to_ont_xml = new to_ont_xmlStruct();
				row4Struct row4 = new row4Struct();
				to_ont_dateStruct to_ont_date = new to_ont_dateStruct();
				row8Struct row8 = new row8Struct();
				out1Struct out1 = new out1Struct();
				row14Struct row14 = new row14Struct();
				asddStruct asdd = new asddStruct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.folderMain + context.folderOutput + "data.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}

				String[] headColutFileOutputDelimited_1 = new String[19];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
				try {
					CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_1,
													true), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_1
							.setSeparator(csvSettings_tFileOutputDelimited_1
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_1
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_1.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_1
										.getRowDelim());
					}

					if (filetFileOutputDelimited_1.length() == 0) {

						headColutFileOutputDelimited_1[0] = "itemID";

						headColutFileOutputDelimited_1[1] = "Value";

						headColutFileOutputDelimited_1[2] = "VisitID";

						headColutFileOutputDelimited_1[3] = "FormID";

						headColutFileOutputDelimited_1[4] = "SubjectKey";

						headColutFileOutputDelimited_1[5] = "Path";

						headColutFileOutputDelimited_1[6] = "PathID";

						headColutFileOutputDelimited_1[7] = "DataType";

						headColutFileOutputDelimited_1[8] = "Update_Date";

						headColutFileOutputDelimited_1[9] = "Import_Date";

						headColutFileOutputDelimited_1[10] = "Download_Date";

						headColutFileOutputDelimited_1[11] = "StudyEventRepeatKey";

						headColutFileOutputDelimited_1[12] = "itemGroupRepeatKey";

						headColutFileOutputDelimited_1[13] = "startDate";

						headColutFileOutputDelimited_1[14] = "endDate";

						headColutFileOutputDelimited_1[15] = "source";

						headColutFileOutputDelimited_1[16] = "modifierType";

						headColutFileOutputDelimited_1[17] = "sic";

						headColutFileOutputDelimited_1[18] = "m_applied_path";

						CsvWritertFileOutputDelimited_1
								.writeNext(headColutFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1.flush();

					}

					CsvWritertFileOutputDelimited_1
							.setEscapeChar(csvSettings_tFileOutputDelimited_1
									.getEscapeChar());
					CsvWritertFileOutputDelimited_1
							.setQuoteChar(csvSettings_tFileOutputDelimited_1
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_1
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_3", false);
					start_Hash.put("tFileOutputDelimited_3",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_3";

					int tos_count_tFileOutputDelimited_3 = 0;

					String fileName_tFileOutputDelimited_3 = "";
					fileName_tFileOutputDelimited_3 = (new java.io.File(
							((String) globalMap
									.get("tCreateTemporaryFile_3_FILEPATH"))))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_3 = null;
					String extension_tFileOutputDelimited_3 = null;
					String directory_tFileOutputDelimited_3 = null;
					if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
							extension_tFileOutputDelimited_3 = "";
						} else {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(0,
											fileName_tFileOutputDelimited_3
													.lastIndexOf("."));
							extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(fileName_tFileOutputDelimited_3
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(0,
											fileName_tFileOutputDelimited_3
													.lastIndexOf("."));
							extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
									.substring(fileName_tFileOutputDelimited_3
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
							extension_tFileOutputDelimited_3 = "";
						}
						directory_tFileOutputDelimited_3 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_3 = true;
					java.io.File filetFileOutputDelimited_3 = new java.io.File(
							fileName_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME",
							fileName_tFileOutputDelimited_3);
					if (filetFileOutputDelimited_3.exists()) {
						isFileGenerated_tFileOutputDelimited_3 = false;
					}

					String[] headColutFileOutputDelimited_3 = new String[13];
					class CSVBasicSet_tFileOutputDelimited_3 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_3[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_3 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator("\t");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_3[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_3 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_3[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_3[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_3 = 0;
					int splitEvery_tFileOutputDelimited_3 = 1000;
					int splitedFileNo_tFileOutputDelimited_3 = 0;
					int currentRow_tFileOutputDelimited_3 = 0;

					CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
					csvSettings_tFileOutputDelimited_3.setFieldSeparator("\t");
					csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_3
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_3 != null
							&& directory_tFileOutputDelimited_3.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
								directory_tFileOutputDelimited_3);
						if (!dir_tFileOutputDelimited_3.exists()) {
							dir_tFileOutputDelimited_3.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;
					try {
						CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_3,
														true), "ISO-8859-15")));
						CsvWritertFileOutputDelimited_3
								.setSeparator(csvSettings_tFileOutputDelimited_3
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_3
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_3
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_3
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_3.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_3
											.getRowDelim());
						}

						CsvWritertFileOutputDelimited_3
								.setEscapeChar(csvSettings_tFileOutputDelimited_3
										.getEscapeChar());
						CsvWritertFileOutputDelimited_3
								.setQuoteChar(csvSettings_tFileOutputDelimited_3
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_3
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_3 begin ] stop
						 */

						/**
						 * [tJavaRow_4 begin ] start
						 */

						ok_Hash.put("tJavaRow_4", false);
						start_Hash
								.put("tJavaRow_4", System.currentTimeMillis());
						currentComponent = "tJavaRow_4";

						int tos_count_tJavaRow_4 = 0;

						int nb_line_tJavaRow_4 = 0;

						/**
						 * [tJavaRow_4 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_2", false);
						start_Hash.put("tFileOutputDelimited_2",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_2";

						int tos_count_tFileOutputDelimited_2 = 0;

						String fileName_tFileOutputDelimited_2 = "";
						fileName_tFileOutputDelimited_2 = (new java.io.File(
								((String) globalMap
										.get("tCreateTemporaryFile_2_FILEPATH"))))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_2 = null;
						String extension_tFileOutputDelimited_2 = null;
						String directory_tFileOutputDelimited_2 = null;
						if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_2
									.lastIndexOf(".") < fileName_tFileOutputDelimited_2
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
								extension_tFileOutputDelimited_2 = "";
							} else {
								fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
										.substring(0,
												fileName_tFileOutputDelimited_2
														.lastIndexOf("."));
								extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
										.substring(fileName_tFileOutputDelimited_2
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_2
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
										.substring(0,
												fileName_tFileOutputDelimited_2
														.lastIndexOf("."));
								extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
										.substring(fileName_tFileOutputDelimited_2
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
								extension_tFileOutputDelimited_2 = "";
							}
							directory_tFileOutputDelimited_2 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_2 = true;
						java.io.File filetFileOutputDelimited_2 = new java.io.File(
								fileName_tFileOutputDelimited_2);
						globalMap.put("tFileOutputDelimited_2_FILE_NAME",
								fileName_tFileOutputDelimited_2);
						if (filetFileOutputDelimited_2.exists()) {
							isFileGenerated_tFileOutputDelimited_2 = false;
						}

						String[] headColutFileOutputDelimited_2 = new String[13];
						class CSVBasicSet_tFileOutputDelimited_2 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_2[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_2 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator("\t");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_2[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_2 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_2[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_2[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_2 = 0;
						int splitEvery_tFileOutputDelimited_2 = 1000;
						int splitedFileNo_tFileOutputDelimited_2 = 0;
						int currentRow_tFileOutputDelimited_2 = 0;

						CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
						csvSettings_tFileOutputDelimited_2
								.setFieldSeparator("\t");
						csvSettings_tFileOutputDelimited_2
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_2
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_2 != null
								&& directory_tFileOutputDelimited_2.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
									directory_tFileOutputDelimited_2);
							if (!dir_tFileOutputDelimited_2.exists()) {
								dir_tFileOutputDelimited_2.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
						try {
							CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_2,
															true),
													"ISO-8859-15")));
							CsvWritertFileOutputDelimited_2
									.setSeparator(csvSettings_tFileOutputDelimited_2
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_2
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_2
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_2
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_2.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_2
												.getRowDelim());
							}

							CsvWritertFileOutputDelimited_2
									.setEscapeChar(csvSettings_tFileOutputDelimited_2
											.getEscapeChar());
							CsvWritertFileOutputDelimited_2
									.setQuoteChar(csvSettings_tFileOutputDelimited_2
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_2
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_2 begin ] stop
							 */

							/**
							 * [tJavaRow_3 begin ] start
							 */

							ok_Hash.put("tJavaRow_3", false);
							start_Hash.put("tJavaRow_3",
									System.currentTimeMillis());
							currentComponent = "tJavaRow_3";

							int tos_count_tJavaRow_3 = 0;

							int nb_line_tJavaRow_3 = 0;

							/**
							 * [tJavaRow_3 begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_6 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_6", false);
							start_Hash.put("tFileOutputDelimited_6",
									System.currentTimeMillis());
							currentComponent = "tFileOutputDelimited_6";

							int tos_count_tFileOutputDelimited_6 = 0;

							String fileName_tFileOutputDelimited_6 = "";
							fileName_tFileOutputDelimited_6 = (new java.io.File(
									((String) globalMap
											.get("tCreateTemporaryFile_5_FILEPATH"))))
									.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_6 = null;
							String extension_tFileOutputDelimited_6 = null;
							String directory_tFileOutputDelimited_6 = null;
							if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_6
										.lastIndexOf(".") < fileName_tFileOutputDelimited_6
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
									extension_tFileOutputDelimited_6 = "";
								} else {
									fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
											.substring(0,
													fileName_tFileOutputDelimited_6
															.lastIndexOf("."));
									extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
											.substring(fileName_tFileOutputDelimited_6
													.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
										.substring(0,
												fileName_tFileOutputDelimited_6
														.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_6
										.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
											.substring(0,
													fileName_tFileOutputDelimited_6
															.lastIndexOf("."));
									extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
											.substring(fileName_tFileOutputDelimited_6
													.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
									extension_tFileOutputDelimited_6 = "";
								}
								directory_tFileOutputDelimited_6 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_6 = true;
							java.io.File filetFileOutputDelimited_6 = new java.io.File(
									fileName_tFileOutputDelimited_6);
							globalMap.put("tFileOutputDelimited_6_FILE_NAME",
									fileName_tFileOutputDelimited_6);
							if (filetFileOutputDelimited_6.exists()) {
								isFileGenerated_tFileOutputDelimited_6 = false;
							}

							String[] headColutFileOutputDelimited_6 = new String[13];
							class CSVBasicSet_tFileOutputDelimited_6 {
								private char field_Delim;
								private char row_Delim;
								private char escape;
								private char textEnclosure;
								private boolean useCRLFRecordDelimiter;

								public boolean isUseCRLFRecordDelimiter() {
									return useCRLFRecordDelimiter;
								}

								public void setFieldSeparator(String fieldSep)
										throws IllegalArgumentException {
									char field_Delim_tFileOutputDelimited_6[] = null;

									// support passing value (property: Field
									// Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (fieldSep.length() > 0) {
										field_Delim_tFileOutputDelimited_6 = fieldSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Field Separator must be assigned a char.");
									}
									this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
								}

								public char getFieldDelim() {
									if (this.field_Delim == 0) {
										setFieldSeparator("\t");
									}
									return this.field_Delim;
								}

								public void setRowSeparator(String rowSep) {
									if ("\r\n".equals(rowSep)) {
										useCRLFRecordDelimiter = true;
										return;
									}
									char row_DelimtFileOutputDelimited_6[] = null;

									// support passing value (property: Row
									// Separator) by 'context.rs' or
									// 'globalMap.get("rs")'.
									if (rowSep.length() > 0) {
										row_DelimtFileOutputDelimited_6 = rowSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Row Separator must be assigned a char.");
									}
									this.row_Delim = row_DelimtFileOutputDelimited_6[0];
								}

								public char getRowDelim() {
									if (this.row_Delim == 0) {
										setRowSeparator("\n");
									}
									return this.row_Delim;
								}

								public void setEscapeAndTextEnclosure(
										String strEscape,
										String strTextEnclosure)
										throws IllegalArgumentException {
									if (strEscape.length() <= 0) {
										throw new IllegalArgumentException(
												"Escape Char must be assigned a char.");
									}

									if ("".equals(strTextEnclosure))
										strTextEnclosure = "\0";
									char textEnclosure_tFileOutputDelimited_6[] = null;

									if (strTextEnclosure.length() > 0) {
										textEnclosure_tFileOutputDelimited_6 = strTextEnclosure
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Text Enclosure must be assigned a char.");
									}

									this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

									if (("\\").equals(strEscape)) {
										this.escape = '\\';
									} else if (strEscape
											.equals(strTextEnclosure)) {
										this.escape = this.textEnclosure;
									} else {
										// the default escape mode is double
										// escape
										this.escape = this.textEnclosure;
									}

								}

								public char getEscapeChar() {
									return (char) this.escape;
								}

								public char getTextEnclosure() {
									return this.textEnclosure;
								}
							}

							int nb_line_tFileOutputDelimited_6 = 0;
							int splitEvery_tFileOutputDelimited_6 = 1000;
							int splitedFileNo_tFileOutputDelimited_6 = 0;
							int currentRow_tFileOutputDelimited_6 = 0;

							CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
							csvSettings_tFileOutputDelimited_6
									.setFieldSeparator("\t");
							csvSettings_tFileOutputDelimited_6
									.setRowSeparator("\n");
							csvSettings_tFileOutputDelimited_6
									.setEscapeAndTextEnclosure("\"", "\"");
							// create directory only if not exists
							if (directory_tFileOutputDelimited_6 != null
									&& directory_tFileOutputDelimited_6.trim()
											.length() != 0) {
								java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
										directory_tFileOutputDelimited_6);
								if (!dir_tFileOutputDelimited_6.exists()) {
									dir_tFileOutputDelimited_6.mkdirs();
								}
							}
							com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;
							try {
								CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(
										new java.io.BufferedWriter(
												new java.io.OutputStreamWriter(
														new java.io.FileOutputStream(
																fileName_tFileOutputDelimited_6,
																true),
														"ISO-8859-15")));
								CsvWritertFileOutputDelimited_6
										.setSeparator(csvSettings_tFileOutputDelimited_6
												.getFieldDelim());

								if (!csvSettings_tFileOutputDelimited_6
										.isUseCRLFRecordDelimiter()
										&& csvSettings_tFileOutputDelimited_6
												.getRowDelim() != '\r'
										&& csvSettings_tFileOutputDelimited_6
												.getRowDelim() != '\n') {
									CsvWritertFileOutputDelimited_6
											.setLineEnd(""
													+ csvSettings_tFileOutputDelimited_6
															.getRowDelim());
								}

								CsvWritertFileOutputDelimited_6
										.setEscapeChar(csvSettings_tFileOutputDelimited_6
												.getEscapeChar());
								CsvWritertFileOutputDelimited_6
										.setQuoteChar(csvSettings_tFileOutputDelimited_6
												.getTextEnclosure());
								CsvWritertFileOutputDelimited_6
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

								/**
								 * [tFileOutputDelimited_6 begin ] stop
								 */

								/**
								 * [tJavaRow_7 begin ] start
								 */

								ok_Hash.put("tJavaRow_7", false);
								start_Hash.put("tJavaRow_7",
										System.currentTimeMillis());
								currentComponent = "tJavaRow_7";

								int tos_count_tJavaRow_7 = 0;

								int nb_line_tJavaRow_7 = 0;

								/**
								 * [tJavaRow_7 begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_7 begin ] start
								 */

								ok_Hash.put("tFileOutputDelimited_7", false);
								start_Hash.put("tFileOutputDelimited_7",
										System.currentTimeMillis());
								currentComponent = "tFileOutputDelimited_7";

								int tos_count_tFileOutputDelimited_7 = 0;

								String fileName_tFileOutputDelimited_7 = "";
								fileName_tFileOutputDelimited_7 = (new java.io.File(
										((String) globalMap
												.get("tCreateTemporaryFile_5_FILEPATH"))))
										.getAbsolutePath().replace("\\", "/");
								String fullName_tFileOutputDelimited_7 = null;
								String extension_tFileOutputDelimited_7 = null;
								String directory_tFileOutputDelimited_7 = null;
								if ((fileName_tFileOutputDelimited_7
										.indexOf("/") != -1)) {
									if (fileName_tFileOutputDelimited_7
											.lastIndexOf(".") < fileName_tFileOutputDelimited_7
											.lastIndexOf("/")) {
										fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
										extension_tFileOutputDelimited_7 = "";
									} else {
										fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
												.substring(
														0,
														fileName_tFileOutputDelimited_7
																.lastIndexOf("."));
										extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
												.substring(fileName_tFileOutputDelimited_7
														.lastIndexOf("."));
									}
									directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
											.substring(0,
													fileName_tFileOutputDelimited_7
															.lastIndexOf("/"));
								} else {
									if (fileName_tFileOutputDelimited_7
											.lastIndexOf(".") != -1) {
										fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
												.substring(
														0,
														fileName_tFileOutputDelimited_7
																.lastIndexOf("."));
										extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
												.substring(fileName_tFileOutputDelimited_7
														.lastIndexOf("."));
									} else {
										fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
										extension_tFileOutputDelimited_7 = "";
									}
									directory_tFileOutputDelimited_7 = "";
								}
								boolean isFileGenerated_tFileOutputDelimited_7 = true;
								java.io.File filetFileOutputDelimited_7 = new java.io.File(
										fileName_tFileOutputDelimited_7);
								globalMap.put(
										"tFileOutputDelimited_7_FILE_NAME",
										fileName_tFileOutputDelimited_7);
								if (filetFileOutputDelimited_7.exists()) {
									isFileGenerated_tFileOutputDelimited_7 = false;
								}

								String[] headColutFileOutputDelimited_7 = new String[13];
								class CSVBasicSet_tFileOutputDelimited_7 {
									private char field_Delim;
									private char row_Delim;
									private char escape;
									private char textEnclosure;
									private boolean useCRLFRecordDelimiter;

									public boolean isUseCRLFRecordDelimiter() {
										return useCRLFRecordDelimiter;
									}

									public void setFieldSeparator(
											String fieldSep)
											throws IllegalArgumentException {
										char field_Delim_tFileOutputDelimited_7[] = null;

										// support passing value (property:
										// Field Separator) by 'context.fs' or
										// 'globalMap.get("fs")'.
										if (fieldSep.length() > 0) {
											field_Delim_tFileOutputDelimited_7 = fieldSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Field Separator must be assigned a char.");
										}
										this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
									}

									public char getFieldDelim() {
										if (this.field_Delim == 0) {
											setFieldSeparator("\t");
										}
										return this.field_Delim;
									}

									public void setRowSeparator(String rowSep) {
										if ("\r\n".equals(rowSep)) {
											useCRLFRecordDelimiter = true;
											return;
										}
										char row_DelimtFileOutputDelimited_7[] = null;

										// support passing value (property: Row
										// Separator) by 'context.rs' or
										// 'globalMap.get("rs")'.
										if (rowSep.length() > 0) {
											row_DelimtFileOutputDelimited_7 = rowSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Row Separator must be assigned a char.");
										}
										this.row_Delim = row_DelimtFileOutputDelimited_7[0];
									}

									public char getRowDelim() {
										if (this.row_Delim == 0) {
											setRowSeparator("\n");
										}
										return this.row_Delim;
									}

									public void setEscapeAndTextEnclosure(
											String strEscape,
											String strTextEnclosure)
											throws IllegalArgumentException {
										if (strEscape.length() <= 0) {
											throw new IllegalArgumentException(
													"Escape Char must be assigned a char.");
										}

										if ("".equals(strTextEnclosure))
											strTextEnclosure = "\0";
										char textEnclosure_tFileOutputDelimited_7[] = null;

										if (strTextEnclosure.length() > 0) {
											textEnclosure_tFileOutputDelimited_7 = strTextEnclosure
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Text Enclosure must be assigned a char.");
										}

										this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

										if (("\\").equals(strEscape)) {
											this.escape = '\\';
										} else if (strEscape
												.equals(strTextEnclosure)) {
											this.escape = this.textEnclosure;
										} else {
											// the default escape mode is double
											// escape
											this.escape = this.textEnclosure;
										}

									}

									public char getEscapeChar() {
										return (char) this.escape;
									}

									public char getTextEnclosure() {
										return this.textEnclosure;
									}
								}

								int nb_line_tFileOutputDelimited_7 = 0;
								int splitEvery_tFileOutputDelimited_7 = 1000;
								int splitedFileNo_tFileOutputDelimited_7 = 0;
								int currentRow_tFileOutputDelimited_7 = 0;

								CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
								csvSettings_tFileOutputDelimited_7
										.setFieldSeparator("\t");
								csvSettings_tFileOutputDelimited_7
										.setRowSeparator("\n");
								csvSettings_tFileOutputDelimited_7
										.setEscapeAndTextEnclosure("\"", "\"");
								// create directory only if not exists
								if (directory_tFileOutputDelimited_7 != null
										&& directory_tFileOutputDelimited_7
												.trim().length() != 0) {
									java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
											directory_tFileOutputDelimited_7);
									if (!dir_tFileOutputDelimited_7.exists()) {
										dir_tFileOutputDelimited_7.mkdirs();
									}
								}
								com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;
								try {
									CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(
											new java.io.BufferedWriter(
													new java.io.OutputStreamWriter(
															new java.io.FileOutputStream(
																	fileName_tFileOutputDelimited_7,
																	true),
															"ISO-8859-15")));
									CsvWritertFileOutputDelimited_7
											.setSeparator(csvSettings_tFileOutputDelimited_7
													.getFieldDelim());

									if (!csvSettings_tFileOutputDelimited_7
											.isUseCRLFRecordDelimiter()
											&& csvSettings_tFileOutputDelimited_7
													.getRowDelim() != '\r'
											&& csvSettings_tFileOutputDelimited_7
													.getRowDelim() != '\n') {
										CsvWritertFileOutputDelimited_7
												.setLineEnd(""
														+ csvSettings_tFileOutputDelimited_7
																.getRowDelim());
									}

									CsvWritertFileOutputDelimited_7
											.setEscapeChar(csvSettings_tFileOutputDelimited_7
													.getEscapeChar());
									CsvWritertFileOutputDelimited_7
											.setQuoteChar(csvSettings_tFileOutputDelimited_7
													.getTextEnclosure());
									CsvWritertFileOutputDelimited_7
											.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

									/**
									 * [tFileOutputDelimited_7 begin ] stop
									 */

									/**
									 * [tJavaRow_9 begin ] start
									 */

									ok_Hash.put("tJavaRow_9", false);
									start_Hash.put("tJavaRow_9",
											System.currentTimeMillis());
									currentComponent = "tJavaRow_9";

									int tos_count_tJavaRow_9 = 0;

									int nb_line_tJavaRow_9 = 0;

									/**
									 * [tJavaRow_9 begin ] stop
									 */

									/**
									 * [tMap_3 begin ] start
									 */

									ok_Hash.put("tMap_3", false);
									start_Hash.put("tMap_3",
											System.currentTimeMillis());
									currentComponent = "tMap_3";

									int tos_count_tMap_3 = 0;

									// ###############################
									// # Lookup's keys initialization
									// ###############################

									// ###############################
									// # Vars initialization
									class Var__tMap_3__Struct {
									}
									Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
									// ###############################

									// ###############################
									// # Outputs initialization
									asddStruct asdd_tmp = new asddStruct();
									// ###############################

									/**
									 * [tMap_3 begin ] stop
									 */

									/**
									 * [tUniqRow_2 begin ] start
									 */

									ok_Hash.put("tUniqRow_2", false);
									start_Hash.put("tUniqRow_2",
											System.currentTimeMillis());
									currentComponent = "tUniqRow_2";

									int tos_count_tUniqRow_2 = 0;

									class KeyStruct_tUniqRow_2 {

										private static final int DEFAULT_HASHCODE = 1;
										private static final int PRIME = 31;
										private int hashCode = DEFAULT_HASHCODE;
										public boolean hashCodeDirty = true;

										String PatientID;
										String sic;

										@Override
										public int hashCode() {
											if (this.hashCodeDirty) {
												final int prime = PRIME;
												int result = DEFAULT_HASHCODE;

												result = prime
														* result
														+ ((this.PatientID == null) ? 0
																: this.PatientID
																		.hashCode());

												result = prime
														* result
														+ ((this.sic == null) ? 0
																: this.sic
																		.hashCode());

												this.hashCode = result;
												this.hashCodeDirty = false;
											}
											return this.hashCode;
										}

										@Override
										public boolean equals(Object obj) {
											if (this == obj)
												return true;
											if (obj == null)
												return false;
											if (getClass() != obj.getClass())
												return false;
											final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

											if (this.PatientID == null) {
												if (other.PatientID != null)
													return false;
											} else if (!this.PatientID
													.equals(other.PatientID))
												return false;

											if (this.sic == null) {
												if (other.sic != null)
													return false;
											} else if (!this.sic
													.equals(other.sic))
												return false;

											return true;
										}

									}

									int nb_uniques_tUniqRow_2 = 0;
									int nb_duplicates_tUniqRow_2 = 0;
									KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
									java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

									/**
									 * [tUniqRow_2 begin ] stop
									 */

									/**
									 * [tMap_2 begin ] start
									 */

									ok_Hash.put("tMap_2", false);
									start_Hash.put("tMap_2",
											System.currentTimeMillis());
									currentComponent = "tMap_2";

									int tos_count_tMap_2 = 0;

									// ###############################
									// # Lookup's keys initialization
									// ###############################

									// ###############################
									// # Vars initialization
									class Var__tMap_2__Struct {
										boolean var1;
										boolean var3;
										boolean var2;
									}
									Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
									// ###############################

									// ###############################
									// # Outputs initialization
									toDataStruct toData_tmp = new toDataStruct();
									to_ontStruct to_ont_tmp = new to_ontStruct();
									to_ont_xmlStruct to_ont_xml_tmp = new to_ont_xmlStruct();
									to_ont_dateStruct to_ont_date_tmp = new to_ont_dateStruct();
									out1Struct out1_tmp = new out1Struct();
									// ###############################

									/**
									 * [tMap_2 begin ] stop
									 */

									/**
									 * [tJavaRow_1 begin ] start
									 */

									ok_Hash.put("tJavaRow_1", false);
									start_Hash.put("tJavaRow_1",
											System.currentTimeMillis());
									currentComponent = "tJavaRow_1";

									int tos_count_tJavaRow_1 = 0;

									int nb_line_tJavaRow_1 = 0;

									/**
									 * [tJavaRow_1 begin ] stop
									 */

									/**
									 * [tMap_4 begin ] start
									 */

									ok_Hash.put("tMap_4", false);
									start_Hash.put("tMap_4",
											System.currentTimeMillis());
									currentComponent = "tMap_4";

									int tos_count_tMap_4 = 0;

									// ###############################
									// # Lookup's keys initialization

									org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct> tHash_Lookup_fromOnt = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct>) globalMap
											.get("tHash_Lookup_fromOnt"));

									fromOntStruct fromOntHashKey = new fromOntStruct();
									fromOntStruct fromOntDefault = new fromOntStruct();
									// ###############################

									// ###############################
									// # Vars initialization
									class Var__tMap_4__Struct {
									}
									Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
									// ###############################

									// ###############################
									// # Outputs initialization
									asdStruct asd_tmp = new asdStruct();
									// ###############################

									/**
									 * [tMap_4 begin ] stop
									 */

									/**
									 * [tFileInputDelimited_1 begin ] start
									 */

									ok_Hash.put("tFileInputDelimited_1", false);
									start_Hash.put("tFileInputDelimited_1",
											System.currentTimeMillis());
									currentComponent = "tFileInputDelimited_1";

									int tos_count_tFileInputDelimited_1 = 0;

									int nb_line_tFileInputDelimited_1 = 0;
									int footer_tFileInputDelimited_1 = 0;
									int totalLinetFileInputDelimited_1 = 0;
									int limittFileInputDelimited_1 = -1;
									int lastLinetFileInputDelimited_1 = -1;

									char fieldSeparator_tFileInputDelimited_1[] = null;

									// support passing value (property: Field
									// Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (((String) "\t").length() > 0) {
										fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Field Separator must be assigned a char.");
									}

									char rowSeparator_tFileInputDelimited_1[] = null;

									// support passing value (property: Row
									// Separator) by 'context.rs' or
									// 'globalMap.get("rs")'.
									if (((String) "\n").length() > 0) {
										rowSeparator_tFileInputDelimited_1 = ((String) "\n")
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Row Separator must be assigned a char.");
									}

									Object filename_tFileInputDelimited_1 = /**
									 * 
									 * Start field
									 * tFileInputDelimited_1:FILENAME
									 */
									context.folderMain + context.folderOutput
											+ context.output/**
									 * End field
									 * tFileInputDelimited_1:FILENAME
									 */
									;
									com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

									try {

										String[] rowtFileInputDelimited_1 = null;
										int currentLinetFileInputDelimited_1 = 0;
										int outputLinetFileInputDelimited_1 = 0;
										try {// TD110 begin
											if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

												int footer_value_tFileInputDelimited_1 = 0;
												if (footer_value_tFileInputDelimited_1 > 0) {
													throw new java.lang.Exception(
															"When the input source is a stream,footer shouldn't be bigger than 0.");
												}

												csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
														(java.io.InputStream) filename_tFileInputDelimited_1,
														fieldSeparator_tFileInputDelimited_1[0],
														"ISO-8859-15");
											} else {
												csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
														new java.io.BufferedReader(
																new java.io.InputStreamReader(
																		new java.io.FileInputStream(
																				String.valueOf(filename_tFileInputDelimited_1)),
																		"ISO-8859-15")),
														fieldSeparator_tFileInputDelimited_1[0]);
											}

											csvReadertFileInputDelimited_1
													.setTrimWhitespace(false);
											if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
													&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
												csvReadertFileInputDelimited_1
														.setLineEnd(""
																+ rowSeparator_tFileInputDelimited_1[0]);

											csvReadertFileInputDelimited_1
													.setQuoteChar('\"');

											// ?????doesn't work for other
											// escapeChar
											// the default escape mode is double
											// escape
											csvReadertFileInputDelimited_1
													.setEscapeChar(csvReadertFileInputDelimited_1
															.getQuoteChar());

											if (footer_tFileInputDelimited_1 > 0) {
												for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
													csvReadertFileInputDelimited_1
															.readNext();
												}
												csvReadertFileInputDelimited_1
														.setSkipEmptyRecords(true);
												while (csvReadertFileInputDelimited_1
														.readNext()) {

													rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
															.getValues();
													if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
															.equals(rowtFileInputDelimited_1[0]))) {// empty
																									// line
																									// when
																									// row
																									// separator
																									// is
																									// '\n'

														totalLinetFileInputDelimited_1++;

													}

												}
												int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
														- footer_tFileInputDelimited_1 < 0 ? 0
														: totalLinetFileInputDelimited_1
																- footer_tFileInputDelimited_1;
												if (lastLinetFileInputDelimited_1 > 0) {
													lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
															: lastLineTemptFileInputDelimited_1;
												} else {
													lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
												}

												csvReadertFileInputDelimited_1
														.close();
												if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
													csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
															(java.io.InputStream) filename_tFileInputDelimited_1,
															fieldSeparator_tFileInputDelimited_1[0],
															"ISO-8859-15");
												} else {
													csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
															new java.io.BufferedReader(
																	new java.io.InputStreamReader(
																			new java.io.FileInputStream(
																					String.valueOf(filename_tFileInputDelimited_1)),
																			"ISO-8859-15")),
															fieldSeparator_tFileInputDelimited_1[0]);
												}
												csvReadertFileInputDelimited_1
														.setTrimWhitespace(false);
												if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
														&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
													csvReadertFileInputDelimited_1
															.setLineEnd(""
																	+ rowSeparator_tFileInputDelimited_1[0]);

												csvReadertFileInputDelimited_1
														.setQuoteChar('\"');

												// ?????doesn't work for other
												// escapeChar
												// the default escape mode is
												// double escape
												csvReadertFileInputDelimited_1
														.setEscapeChar(csvReadertFileInputDelimited_1
																.getQuoteChar());

											}

											if (limittFileInputDelimited_1 != 0) {
												for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
													csvReadertFileInputDelimited_1
															.readNext();
												}
											}
											csvReadertFileInputDelimited_1
													.setSkipEmptyRecords(true);

										} catch (java.lang.Exception e) {

											throw e;

										}// TD110 end

										while (limittFileInputDelimited_1 != 0
												&& csvReadertFileInputDelimited_1 != null
												&& csvReadertFileInputDelimited_1
														.readNext()) {

											rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
													.getValues();

											if (rowtFileInputDelimited_1.length == 1
													&& ("\015")
															.equals(rowtFileInputDelimited_1[0])) {// empty
																									// line
																									// when
																									// row
																									// separator
																									// is
																									// '\n'
												continue;
											}

											currentLinetFileInputDelimited_1++;

											if (lastLinetFileInputDelimited_1 > -1
													&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
												break;
											}
											outputLinetFileInputDelimited_1++;
											if (limittFileInputDelimited_1 > 0
													&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
												break;
											}

											fromOutput = null;

											boolean whetherReject_tFileInputDelimited_1 = false;
											fromOutput = new fromOutputStruct();
											try {

												if (rowtFileInputDelimited_1.length == 1
														&& ("\015")
																.equals(rowtFileInputDelimited_1[0])) {// empty
																										// line
																										// when
																										// row
																										// separator
																										// is
																										// '\n'

													fromOutput.PatientID = null;

													fromOutput.EncounterID = null;

													fromOutput.ImportDate = null;

													fromOutput.UpdateDate = null;

													fromOutput.DownloadDate = null;

													fromOutput.Item = null;

													fromOutput.Value = null;

													fromOutput.NiceName = null;

													fromOutput.DataType = null;

													fromOutput.uniqueID = null;

													fromOutput.BirthDay = null;

													fromOutput.DeathDay = null;

													fromOutput.StartDate = null;

													fromOutput.EndDate = null;

													fromOutput.SourceSystem = null;

													fromOutput.instanceNum = null;

													fromOutput.modifierType = null;

													fromOutput.sic = null;

												} else {

													int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																									// Index

													columnIndexWithD_tFileInputDelimited_1 = 0;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.PatientID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.PatientID = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 1;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.EncounterID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.EncounterID = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 2;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
																.length() > 0) {

															fromOutput.ImportDate = ParserUtils
																	.parseTo_Date(
																			rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																			"dd.MM.yyyy");

														} else {
															fromOutput.ImportDate = null;
														}

													} else {
														fromOutput.ImportDate = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 3;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
																.length() > 0) {

															fromOutput.UpdateDate = ParserUtils
																	.parseTo_Date(
																			rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																			"dd.MM.yyyy");

														} else {
															fromOutput.UpdateDate = null;
														}

													} else {
														fromOutput.UpdateDate = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 4;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
																.length() > 0) {

															fromOutput.DownloadDate = ParserUtils
																	.parseTo_Date(
																			rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																			"dd.MM.yyyy");

														} else {
															fromOutput.DownloadDate = null;
														}

													} else {
														fromOutput.DownloadDate = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 5;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.Item = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.Item = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 6;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.Value = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.Value = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 7;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.NiceName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.NiceName = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 8;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.DataType = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.DataType = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 9;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.uniqueID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.uniqueID = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 10;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.BirthDay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.BirthDay = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 11;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.DeathDay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.DeathDay = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 12;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
																.length() > 0) {

															fromOutput.StartDate = ParserUtils
																	.parseTo_Date(
																			rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																			"dd.MM.yyyy");

														} else {
															fromOutput.StartDate = null;
														}

													} else {
														fromOutput.StartDate = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 13;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
																.length() > 0) {

															fromOutput.EndDate = ParserUtils
																	.parseTo_Date(
																			rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																			"dd.MM.yyyy");

														} else {
															fromOutput.EndDate = null;
														}

													} else {
														fromOutput.EndDate = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 14;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.SourceSystem = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.SourceSystem = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 15;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.instanceNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.instanceNum = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 16;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.modifierType = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.modifierType = null;
													}

													columnIndexWithD_tFileInputDelimited_1 = 17;

													if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

														fromOutput.sic = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

													} else {
														fromOutput.sic = null;
													}

												}

											} catch (java.lang.Exception e) {
												whetherReject_tFileInputDelimited_1 = true;

												throw (e);

											}

											/**
											 * [tFileInputDelimited_1 begin ]
											 * stop
											 */
											/**
											 * [tFileInputDelimited_1 main ]
											 * start
											 */

											currentComponent = "tFileInputDelimited_1";

											tos_count_tFileInputDelimited_1++;

											/**
											 * [tFileInputDelimited_1 main ]
											 * stop
											 */
											// Start of branch "fromOutput"
											if (fromOutput != null) {

												/**
												 * [tMap_4 main ] start
												 */

												currentComponent = "tMap_4";

												boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_4 = false;
												boolean mainRowRejected_tMap_4 = false;

												// /////////////////////////////////////////////
												// Starting Lookup Table
												// "fromOnt"
												// /////////////////////////////////////////////

												boolean forceLoopfromOnt = false;

												fromOntStruct fromOntObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_4 = false;

													fromOntHashKey.PathID = fromOutput.uniqueID
															+ "|"
															+ fromOutput.Item;

													fromOntHashKey.hashCodeDirty = true;

													tHash_Lookup_fromOnt
															.lookup(fromOntHashKey);

												} // G_TM_M_020

												if (tHash_Lookup_fromOnt != null
														&& tHash_Lookup_fromOnt
																.getCount(fromOntHashKey) > 1) { // G
																									// 071

													// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'fromOnt' and it contains more one result from keys :  fromOnt.PathID = '"
													// + fromOntHashKey.PathID +
													// "'");
												} // G 071

												fromOntStruct fromOnt = null;

												fromOntStruct fromLookup_fromOnt = null;
												fromOnt = fromOntDefault;

												if (tHash_Lookup_fromOnt != null
														&& tHash_Lookup_fromOnt
																.hasNext()) { // G
																				// 099

													fromLookup_fromOnt = tHash_Lookup_fromOnt
															.next();

												} // G 099

												if (fromLookup_fromOnt != null) {
													fromOnt = fromLookup_fromOnt;
												}

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
													// ###############################
													// # Output tables

													asd = null;

													// # Output table : 'asd'
													asd_tmp.PatientID = fromOutput.PatientID;
													asd_tmp.EncounterID = fromOutput.EncounterID;
													asd_tmp.ImportDate = fromOutput.ImportDate;
													asd_tmp.UpdateDate = fromOutput.UpdateDate;
													asd_tmp.DownloadDate = fromOutput.DownloadDate;
													asd_tmp.Item = fromOutput.Item;
													asd_tmp.Value = fromOutput.Value;
													asd_tmp.NiceName = fromOutput.NiceName;
													asd_tmp.DataType = fromOutput.DataType;
													asd_tmp.uniqueID = fromOutput.uniqueID;
													asd_tmp.Path = fromOnt.Path;
													asd_tmp.PathID = fromOnt.PathID;
													asd_tmp.StartDate = fromOutput.StartDate;
													asd_tmp.EndDate = fromOutput.EndDate;
													asd_tmp.SourceSystem = fromOutput.SourceSystem;
													asd_tmp.instanceNum = fromOutput.instanceNum;
													asd_tmp.modifierType = fromOutput.modifierType;
													asd_tmp.sic = fromOutput.sic;
													asd_tmp.m_applied_path = fromOnt.m_applied_path;
													asd = asd_tmp;
													// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_4 = false;

												tos_count_tMap_4++;

												/**
												 * [tMap_4 main ] stop
												 */
												// Start of branch "asd"
												if (asd != null) {

													/**
													 * [tJavaRow_1 main ] start
													 */

													currentComponent = "tJavaRow_1";

													// Code generated according
													// to input schema and
													// output schema
													context.csvOutputCurrent++;
													if (context.csvOutputCurrent
															% context.csvOutputMod == 0) {
														StatusListener
																.setSubStatus(
																		(float) context.csvOutputCurrent
																				/ context.csvOutputRows
																				* 100,
																		(int) ((float) context.csvOutputCurrent
																				/ context.csvOutputRows * 100)
																				+ "% - Observations");
													}

													fromPatient.PatientID = asd.PatientID;
													fromPatient.EncounterID = asd.EncounterID;
													fromPatient.ImportDate = asd.ImportDate;
													fromPatient.UpdateDate = asd.UpdateDate;
													fromPatient.DownloadDate = asd.DownloadDate;
													fromPatient.Item = asd.Item;
													fromPatient.Value = asd.Value;
													fromPatient.NiceName = asd.NiceName;
													fromPatient.SourceSystem = asd.SourceSystem;
													fromPatient.uniqueID = asd.uniqueID;

													fromPatient.PathID = asd.PathID;

													if (asd.DataType == null) {
														asd.DataType = "string";
													}

													// if (asd.itemCode ==
													// null){
													if (asd.DataType
															.toLowerCase()
															.trim()
															.equals("string")) {
														String hash = asd.Path
																+ asd.Value;
														fromPatient.Path = asd.Path
																+ hash.hashCode()
																+ "\\";
														if (asd.Value.length() < 20) {
															fromPatient.Path = asd.Path
																	+ asd.Value
																	+ "\\";
														}

													} else if (asd.DataType
															.toLowerCase()
															.trim()
															.equals("float"))
														fromPatient.Path = asd.Path
																+ "xml\\";
													else if (asd.DataType
															.toLowerCase()
															.trim()
															.equals("integer"))
														fromPatient.Path = asd.Path
																+ "xml\\";
													else if (asd.DataType
															.toLowerCase()
															.trim()
															.equals("date")
															|| asd.DataType
																	.toLowerCase()
																	.trim()
																	.equals("partialDate"))
														fromPatient.Path = asd.Path
																+ "date\\";
													else {
														String hash = asd.Path
																+ asd.Value;
														// fromPatient.Path =
														// asd.Path+hash.hashCode()
														// +"\\";
														fromPatient.Path = asd.Path
																+ asd.Value
																+ "\\";
													}

													fromPatient.DataType = asd.DataType;
													fromPatient.StartDate = asd.StartDate;
													fromPatient.EndDate = asd.EndDate;
													fromPatient.instanceNum = asd.instanceNum;

													fromPatient.sic = asd.sic;
													fromPatient.m_applied_path = asd.m_applied_path;

													nb_line_tJavaRow_1++;

													tos_count_tJavaRow_1++;

													/**
													 * [tJavaRow_1 main ] stop
													 */

													/**
													 * [tMap_2 main ] start
													 */

													currentComponent = "tMap_2";

													boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_2 = false;
													boolean mainRowRejected_tMap_2 = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_2__Struct Var = Var__tMap_2;
														Var.var1 = fromPatient.DataType
																.toLowerCase()
																.equals("float");
														Var.var3 = fromPatient.DataType
																.toLowerCase()
																.equals("date");
														Var.var2 = fromPatient.DataType
																.toLowerCase()
																.equals("integer");// ###############################
														// ###############################
														// # Output tables

														toData = null;
														to_ont = null;
														to_ont_xml = null;
														to_ont_date = null;
														out1 = null;

														// # Output table :
														// 'toData'
														toData_tmp.itemID = fromPatient.Item;
														toData_tmp.Value = fromPatient.Value
																.replace(";",
																		",");
														toData_tmp.VisitID = "";
														toData_tmp.FormID = "";
														toData_tmp.SubjectKey = ""
																+ fromPatient.PatientID;
														toData_tmp.Path = fromPatient.Path;
														toData_tmp.PathID = fromPatient.PathID;
														toData_tmp.DataType = fromPatient.DataType;
														toData_tmp.Update_Date = fromPatient.UpdateDate;
														toData_tmp.Import_Date = fromPatient.ImportDate;
														toData_tmp.Download_Date = fromPatient.DownloadDate;
														toData_tmp.StudyEventRepeatKey = fromPatient.EncounterID;
														toData_tmp.itemGroupRepeatKey = fromPatient.instanceNum;
														toData_tmp.startDate = fromPatient.StartDate;
														toData_tmp.endDate = fromPatient.EndDate;
														toData_tmp.source = fromPatient.SourceSystem;
														toData_tmp.modifierType = fromPatient.modifierType;
														toData_tmp.sic = fromPatient.sic;
														toData_tmp.m_applied_path = fromPatient.m_applied_path;
														toData = toData_tmp;

														// # Output table :
														// 'to_ont'
														// # Filter conditions
														if (

														!(Var.var2 || Var.var1 || Var.var3)

														) {
															to_ont_tmp.HLEVEL = fromPatient.m_applied_path
																	.equals("@") ? 4
																	: 3;
															to_ont_tmp.Name = fromPatient.Value
																	.replace(
																			";",
																			",");
															to_ont_tmp.Path = fromPatient.Path;
															to_ont_tmp.DataType = fromPatient.DataType;
															to_ont_tmp.Update_Date = fromPatient.UpdateDate;
															to_ont_tmp.Import_Date = fromPatient.ImportDate;
															to_ont_tmp.Download_Date = fromPatient.DownloadDate;
															to_ont_tmp.PathID = fromPatient.PathID;
															to_ont_tmp.visual = fromPatient.m_applied_path
																	.equals("@") ? "LA"
																	: "RA";
															to_ont_tmp.codeList = "";
															to_ont_tmp.source = "";
															to_ont_tmp.xml = "";
															to_ont_tmp.m_applied_path = fromPatient.m_applied_path;
															to_ont = to_ont_tmp;
														} // closing
															// filter/reject

														// # Output table :
														// 'to_ont_xml'
														// # Filter conditions
														if (

														(Var.var1 || Var.var2)

														) {
															to_ont_xml_tmp.HLEVEL = fromPatient.m_applied_path
																	.equals("@") ? 4
																	: 3;
															to_ont_xml_tmp.Name = fromPatient.Item
																	+ " (Numerical Query)";
															to_ont_xml_tmp.Path = fromPatient.Path;
															to_ont_xml_tmp.DataType = fromPatient.DataType;
															to_ont_xml_tmp.Update_Date = fromPatient.UpdateDate;
															to_ont_xml_tmp.Import_Date = fromPatient.ImportDate;
															to_ont_xml_tmp.Download_Date = fromPatient.DownloadDate;
															to_ont_xml_tmp.PathID = fromPatient.PathID;
															to_ont_xml_tmp.visual = fromPatient.m_applied_path
																	.equals("@") ? "LA"
																	: "RA";
															to_ont_xml_tmp.codeList = "";
															to_ont_xml_tmp.source = "";
															to_ont_xml_tmp.xml = "xml";
															to_ont_xml_tmp.m_applied_path = fromPatient.m_applied_path;
															to_ont_xml = to_ont_xml_tmp;
														} // closing
															// filter/reject

														// # Output table :
														// 'to_ont_date'
														// # Filter conditions
														if (

														Var.var3

														) {
															to_ont_date_tmp.HLEVEL = fromPatient.m_applied_path
																	.equals("@") ? 4
																	: 3;
															to_ont_date_tmp.Name = fromPatient.Item
																	+ " (Date)";
															to_ont_date_tmp.Path = fromPatient.Path;
															to_ont_date_tmp.DataType = fromPatient.DataType;
															to_ont_date_tmp.Update_Date = fromPatient.UpdateDate;
															to_ont_date_tmp.Import_Date = fromPatient.ImportDate;
															to_ont_date_tmp.Download_Date = fromPatient.DownloadDate;
															to_ont_date_tmp.PathID = fromPatient.PathID;
															to_ont_date_tmp.visual = fromPatient.m_applied_path
																	.equals("@") ? "LA"
																	: "RA";
															to_ont_date_tmp.codeList = "";
															to_ont_date_tmp.source = "";
															to_ont_date_tmp.xml = "date";
															to_ont_date_tmp.m_applied_path = fromPatient.m_applied_path;
															to_ont_date = to_ont_date_tmp;
														} // closing
															// filter/reject

														// # Output table :
														// 'out1'
														out1_tmp.PatientID = fromPatient.PatientID;
														out1_tmp.EncounterID = fromPatient.EncounterID;
														out1_tmp.ImportDate = fromPatient.ImportDate;
														out1_tmp.UpdateDate = fromPatient.UpdateDate;
														out1_tmp.DownloadDate = fromPatient.DownloadDate;
														out1_tmp.Item = fromPatient.Item;
														out1_tmp.Value = fromPatient.Value;
														out1_tmp.NiceName = fromPatient.NiceName;
														out1_tmp.DataType = fromPatient.DataType;
														out1_tmp.uniqueID = fromPatient.uniqueID;
														out1_tmp.Path = fromPatient.Path;
														out1_tmp.PathID = fromPatient.PathID;
														out1_tmp.StartDate = fromPatient.StartDate;
														out1_tmp.EndDate = fromPatient.EndDate;
														out1_tmp.SourceSystem = fromPatient.SourceSystem;
														out1_tmp.instanceNum = fromPatient.instanceNum;
														out1_tmp.modifierType = fromPatient.modifierType;
														out1_tmp.sic = fromPatient.sic;
														out1_tmp.m_applied_path = fromPatient.m_applied_path;
														out1 = out1_tmp;
														// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_2 = false;

													tos_count_tMap_2++;

													/**
													 * [tMap_2 main ] stop
													 */
													// Start of branch "toData"
													if (toData != null) {

														/**
														 * [
														 * tFileOutputDelimited_1
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_1";

														String[] rowtFileOutputDelimited_1 = new String[19];

														rowtFileOutputDelimited_1[0] = toData.itemID == null ? ""
																: toData.itemID;

														rowtFileOutputDelimited_1[1] = toData.Value == null ? ""
																: toData.Value;

														rowtFileOutputDelimited_1[2] = toData.VisitID == null ? ""
																: toData.VisitID;

														rowtFileOutputDelimited_1[3] = toData.FormID == null ? ""
																: toData.FormID;

														rowtFileOutputDelimited_1[4] = toData.SubjectKey == null ? ""
																: toData.SubjectKey;

														rowtFileOutputDelimited_1[5] = toData.Path == null ? ""
																: toData.Path;

														rowtFileOutputDelimited_1[6] = toData.PathID == null ? ""
																: toData.PathID;

														rowtFileOutputDelimited_1[7] = toData.DataType == null ? ""
																: toData.DataType;

														rowtFileOutputDelimited_1[8] = toData.Update_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				toData.Update_Date,
																				"yyyy-MM-dd");

														rowtFileOutputDelimited_1[9] = toData.Import_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				toData.Import_Date,
																				"yyyy-MM-dd");

														rowtFileOutputDelimited_1[10] = toData.Download_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				toData.Download_Date,
																				"yyyy-MM-dd");

														rowtFileOutputDelimited_1[11] = toData.StudyEventRepeatKey == null ? ""
																: toData.StudyEventRepeatKey;

														rowtFileOutputDelimited_1[12] = toData.itemGroupRepeatKey == null ? ""
																: toData.itemGroupRepeatKey;

														rowtFileOutputDelimited_1[13] = toData.startDate == null ? ""
																: FormatterUtils
																		.format_Date(
																				toData.startDate,
																				"yyyy-MM-dd");

														rowtFileOutputDelimited_1[14] = toData.endDate == null ? ""
																: FormatterUtils
																		.format_Date(
																				toData.endDate,
																				"yyyy-MM-dd");

														rowtFileOutputDelimited_1[15] = toData.source == null ? ""
																: toData.source;

														rowtFileOutputDelimited_1[16] = toData.modifierType == null ? ""
																: toData.modifierType;

														rowtFileOutputDelimited_1[17] = toData.sic == null ? ""
																: toData.sic;

														rowtFileOutputDelimited_1[18] = toData.m_applied_path == null ? ""
																: toData.m_applied_path;

														nb_line_tFileOutputDelimited_1++;
														CsvWritertFileOutputDelimited_1
																.writeNext(rowtFileOutputDelimited_1);

														if (nb_line_tFileOutputDelimited_1 % 50000 == 0) {

															CsvWritertFileOutputDelimited_1
																	.flush();

														}

														tos_count_tFileOutputDelimited_1++;

														/**
														 * [
														 * tFileOutputDelimited_1
														 * main ] stop
														 */

													} // End of branch "toData"

													// Start of branch "to_ont"
													if (to_ont != null) {

														/**
														 * [tJavaRow_4 main ]
														 * start
														 */

														currentComponent = "tJavaRow_4";

														// Code generated
														// according to input
														// schema and output
														// schema
														context.ontOutputRows++;
														row5.HLEVEL = to_ont.HLEVEL;
														row5.Name = to_ont.Name;
														row5.Path = to_ont.Path;
														row5.DataType = to_ont.DataType;
														row5.Update_Date = to_ont.Update_Date;
														row5.Import_Date = to_ont.Import_Date;
														row5.Download_Date = to_ont.Download_Date;
														row5.PathID = to_ont.PathID;
														row5.visual = to_ont.visual;
														row5.codeList = to_ont.codeList;
														row5.source = to_ont.source;
														row5.xml = to_ont.xml;
														row5.m_applied_path = to_ont.m_applied_path;

														nb_line_tJavaRow_4++;

														tos_count_tJavaRow_4++;

														/**
														 * [tJavaRow_4 main ]
														 * stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_3
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_3";

														String[] rowtFileOutputDelimited_3 = new String[13];

														rowtFileOutputDelimited_3[0] = row5.HLEVEL == null ? ""
																: String.valueOf(row5.HLEVEL);

														rowtFileOutputDelimited_3[1] = row5.Name == null ? ""
																: row5.Name;

														rowtFileOutputDelimited_3[2] = row5.Path == null ? ""
																: row5.Path;

														rowtFileOutputDelimited_3[3] = row5.DataType == null ? ""
																: row5.DataType;

														rowtFileOutputDelimited_3[4] = row5.Update_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row5.Update_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_3[5] = row5.Import_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row5.Import_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_3[6] = row5.Download_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row5.Download_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_3[7] = row5.PathID == null ? ""
																: row5.PathID;

														rowtFileOutputDelimited_3[8] = row5.visual == null ? ""
																: row5.visual;

														rowtFileOutputDelimited_3[9] = row5.codeList == null ? ""
																: row5.codeList;

														rowtFileOutputDelimited_3[10] = row5.source == null ? ""
																: row5.source;

														rowtFileOutputDelimited_3[11] = row5.xml == null ? ""
																: row5.xml;

														rowtFileOutputDelimited_3[12] = row5.m_applied_path == null ? ""
																: row5.m_applied_path;

														nb_line_tFileOutputDelimited_3++;
														CsvWritertFileOutputDelimited_3
																.writeNext(rowtFileOutputDelimited_3);

														if (nb_line_tFileOutputDelimited_3 % 50000 == 0) {

															CsvWritertFileOutputDelimited_3
																	.flush();

														}

														tos_count_tFileOutputDelimited_3++;

														/**
														 * [
														 * tFileOutputDelimited_3
														 * main ] stop
														 */

													} // End of branch "to_ont"

													// Start of branch
													// "to_ont_xml"
													if (to_ont_xml != null) {

														/**
														 * [tJavaRow_3 main ]
														 * start
														 */

														currentComponent = "tJavaRow_3";

														// Code generated
														// according to input
														// schema and output
														// schema
														context.ontOutputRows++;
														row4.HLEVEL = to_ont_xml.HLEVEL;
														row4.Name = to_ont_xml.Name;
														row4.Path = to_ont_xml.Path;
														row4.DataType = to_ont_xml.DataType;
														row4.Update_Date = to_ont_xml.Update_Date;
														row4.Import_Date = to_ont_xml.Import_Date;
														row4.Download_Date = to_ont_xml.Download_Date;
														row4.PathID = to_ont_xml.PathID;
														row4.visual = to_ont_xml.visual;
														row4.codeList = to_ont_xml.codeList;
														row4.source = to_ont_xml.source;
														row4.xml = to_ont_xml.xml;
														row4.m_applied_path = to_ont_xml.m_applied_path;

														nb_line_tJavaRow_3++;

														tos_count_tJavaRow_3++;

														/**
														 * [tJavaRow_3 main ]
														 * stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_2
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_2";

														String[] rowtFileOutputDelimited_2 = new String[13];

														rowtFileOutputDelimited_2[0] = row4.HLEVEL == null ? ""
																: String.valueOf(row4.HLEVEL);

														rowtFileOutputDelimited_2[1] = row4.Name == null ? ""
																: row4.Name;

														rowtFileOutputDelimited_2[2] = row4.Path == null ? ""
																: row4.Path;

														rowtFileOutputDelimited_2[3] = row4.DataType == null ? ""
																: row4.DataType;

														rowtFileOutputDelimited_2[4] = row4.Update_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row4.Update_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_2[5] = row4.Import_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row4.Import_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_2[6] = row4.Download_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row4.Download_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_2[7] = row4.PathID == null ? ""
																: row4.PathID;

														rowtFileOutputDelimited_2[8] = row4.visual == null ? ""
																: row4.visual;

														rowtFileOutputDelimited_2[9] = row4.codeList == null ? ""
																: row4.codeList;

														rowtFileOutputDelimited_2[10] = row4.source == null ? ""
																: row4.source;

														rowtFileOutputDelimited_2[11] = row4.xml == null ? ""
																: row4.xml;

														rowtFileOutputDelimited_2[12] = row4.m_applied_path == null ? ""
																: row4.m_applied_path;

														nb_line_tFileOutputDelimited_2++;
														CsvWritertFileOutputDelimited_2
																.writeNext(rowtFileOutputDelimited_2);

														if (nb_line_tFileOutputDelimited_2 % 50000 == 0) {

															CsvWritertFileOutputDelimited_2
																	.flush();

														}

														tos_count_tFileOutputDelimited_2++;

														/**
														 * [
														 * tFileOutputDelimited_2
														 * main ] stop
														 */

													} // End of branch
														// "to_ont_xml"

													// Start of branch
													// "to_ont_date"
													if (to_ont_date != null) {

														/**
														 * [tJavaRow_7 main ]
														 * start
														 */

														currentComponent = "tJavaRow_7";

														// Code generated
														// according to input
														// schema and output
														// schema
														context.ontOutputRows++;
														row8.HLEVEL = to_ont_date.HLEVEL;
														row8.Name = to_ont_date.Name;
														row8.Path = to_ont_date.Path;
														row8.DataType = to_ont_date.DataType;
														row8.Update_Date = to_ont_date.Update_Date;
														row8.Import_Date = to_ont_date.Import_Date;
														row8.Download_Date = to_ont_date.Download_Date;
														row8.PathID = to_ont_date.PathID;
														row8.visual = to_ont_date.visual;
														row8.codeList = to_ont_date.codeList;
														row8.source = to_ont_date.source;
														row8.xml = to_ont_date.xml;
														row8.m_applied_path = to_ont_date.m_applied_path;

														nb_line_tJavaRow_7++;

														tos_count_tJavaRow_7++;

														/**
														 * [tJavaRow_7 main ]
														 * stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_6
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_6";

														String[] rowtFileOutputDelimited_6 = new String[13];

														rowtFileOutputDelimited_6[0] = row8.HLEVEL == null ? ""
																: String.valueOf(row8.HLEVEL);

														rowtFileOutputDelimited_6[1] = row8.Name == null ? ""
																: row8.Name;

														rowtFileOutputDelimited_6[2] = row8.Path == null ? ""
																: row8.Path;

														rowtFileOutputDelimited_6[3] = row8.DataType == null ? ""
																: row8.DataType;

														rowtFileOutputDelimited_6[4] = row8.Update_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row8.Update_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_6[5] = row8.Import_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row8.Import_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_6[6] = row8.Download_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row8.Download_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_6[7] = row8.PathID == null ? ""
																: row8.PathID;

														rowtFileOutputDelimited_6[8] = row8.visual == null ? ""
																: row8.visual;

														rowtFileOutputDelimited_6[9] = row8.codeList == null ? ""
																: row8.codeList;

														rowtFileOutputDelimited_6[10] = row8.source == null ? ""
																: row8.source;

														rowtFileOutputDelimited_6[11] = row8.xml == null ? ""
																: row8.xml;

														rowtFileOutputDelimited_6[12] = row8.m_applied_path == null ? ""
																: row8.m_applied_path;

														nb_line_tFileOutputDelimited_6++;
														CsvWritertFileOutputDelimited_6
																.writeNext(rowtFileOutputDelimited_6);

														if (nb_line_tFileOutputDelimited_6 % 50000 == 0) {

															CsvWritertFileOutputDelimited_6
																	.flush();

														}

														tos_count_tFileOutputDelimited_6++;

														/**
														 * [
														 * tFileOutputDelimited_6
														 * main ] stop
														 */

													} // End of branch
														// "to_ont_date"

													// Start of branch "out1"
													if (out1 != null) {

														/**
														 * [tUniqRow_2 main ]
														 * start
														 */

														currentComponent = "tUniqRow_2";

														row14 = null;
														if (out1.PatientID == null) {
															finder_tUniqRow_2.PatientID = null;
														} else {
															finder_tUniqRow_2.PatientID = out1.PatientID
																	.toLowerCase();
														}
														if (out1.sic == null) {
															finder_tUniqRow_2.sic = null;
														} else {
															finder_tUniqRow_2.sic = out1.sic
																	.toLowerCase();
														}
														finder_tUniqRow_2.hashCodeDirty = true;
														if (!keystUniqRow_2
																.contains(finder_tUniqRow_2)) {
															KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

															if (out1.PatientID == null) {
																new_tUniqRow_2.PatientID = null;
															} else {
																new_tUniqRow_2.PatientID = out1.PatientID
																		.toLowerCase();
															}
															if (out1.sic == null) {
																new_tUniqRow_2.sic = null;
															} else {
																new_tUniqRow_2.sic = out1.sic
																		.toLowerCase();
															}

															keystUniqRow_2
																	.add(new_tUniqRow_2);
															if (row14 == null) {
																row14 = new row14Struct();
															}
															row14.PatientID = out1.PatientID;
															row14.EncounterID = out1.EncounterID;
															row14.ImportDate = out1.ImportDate;
															row14.UpdateDate = out1.UpdateDate;
															row14.DownloadDate = out1.DownloadDate;
															row14.Item = out1.Item;
															row14.Value = out1.Value;
															row14.NiceName = out1.NiceName;
															row14.DataType = out1.DataType;
															row14.uniqueID = out1.uniqueID;
															row14.Path = out1.Path;
															row14.PathID = out1.PathID;
															row14.StartDate = out1.StartDate;
															row14.EndDate = out1.EndDate;
															row14.SourceSystem = out1.SourceSystem;
															row14.instanceNum = out1.instanceNum;
															row14.modifierType = out1.modifierType;
															row14.sic = out1.sic;
															row14.m_applied_path = out1.m_applied_path;
															nb_uniques_tUniqRow_2++;
														} else {
															nb_duplicates_tUniqRow_2++;
														}

														tos_count_tUniqRow_2++;

														/**
														 * [tUniqRow_2 main ]
														 * stop
														 */
														// Start of branch
														// "row14"
														if (row14 != null) {

															/**
															 * [tMap_3 main ]
															 * start
															 */

															currentComponent = "tMap_3";

															boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

															// ###############################
															// # Input tables
															// (lookups)
															boolean rejectedInnerJoin_tMap_3 = false;
															boolean mainRowRejected_tMap_3 = false;

															// ###############################
															{ // start of Var
																// scope

																// ###############################
																// # Vars tables

																Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
																// ###############################
																// # Output
																// tables

																asdd = null;

																// # Output
																// table :
																// 'asdd'
																asdd_tmp.HLEVEL = 2;
																asdd_tmp.Name = row14.sic;
																asdd_tmp.Path = "\\i2b2\\OBJECTID\\"
																		+ row14.sic;
																asdd_tmp.DataType = "String";
																asdd_tmp.Update_Date = row14.UpdateDate;
																asdd_tmp.Import_Date = row14.ImportDate;
																asdd_tmp.Download_Date = row14.DownloadDate;
																asdd_tmp.PathID = "";
																asdd_tmp.visual = "RH";
																asdd_tmp.codeList = "";
																asdd_tmp.source = "";
																asdd_tmp.xml = "";
																asdd_tmp.m_applied_path = row14.m_applied_path;
																asdd = asdd_tmp;
																// ###############################

															} // end of Var
																// scope

															rejectedInnerJoin_tMap_3 = false;

															tos_count_tMap_3++;

															/**
															 * [tMap_3 main ]
															 * stop
															 */
															// Start of branch
															// "asdd"
															if (asdd != null) {

																/**
																 * [tJavaRow_9
																 * main ] start
																 */

																currentComponent = "tJavaRow_9";

																// Code
																// generated
																// according to
																// input schema
																// and output
																// schema
																context.ontOutputRows++;
																row13.HLEVEL = asdd.HLEVEL;
																row13.Name = asdd.Name;
																row13.Path = asdd.Path;
																row13.DataType = asdd.DataType;
																row13.Update_Date = asdd.Update_Date;
																row13.Import_Date = asdd.Import_Date;
																row13.Download_Date = asdd.Download_Date;
																row13.PathID = asdd.PathID;
																row13.visual = asdd.visual;
																row13.codeList = asdd.codeList;
																row13.source = asdd.source;
																row13.xml = asdd.xml;
																row13.m_applied_path = asdd.m_applied_path;

																nb_line_tJavaRow_9++;

																tos_count_tJavaRow_9++;

																/**
																 * [tJavaRow_9
																 * main ] stop
																 */

																/**
																 * [
																 * tFileOutputDelimited_7
																 * main ] start
																 */

																currentComponent = "tFileOutputDelimited_7";

																String[] rowtFileOutputDelimited_7 = new String[13];

																rowtFileOutputDelimited_7[0] = row13.HLEVEL == null ? ""
																		: String.valueOf(row13.HLEVEL);

																rowtFileOutputDelimited_7[1] = row13.Name == null ? ""
																		: row13.Name;

																rowtFileOutputDelimited_7[2] = row13.Path == null ? ""
																		: row13.Path;

																rowtFileOutputDelimited_7[3] = row13.DataType == null ? ""
																		: row13.DataType;

																rowtFileOutputDelimited_7[4] = row13.Update_Date == null ? ""
																		: FormatterUtils
																				.format_Date(
																						row13.Update_Date,
																						"dd-MM-yyyy");

																rowtFileOutputDelimited_7[5] = row13.Import_Date == null ? ""
																		: FormatterUtils
																				.format_Date(
																						row13.Import_Date,
																						"dd-MM-yyyy");

																rowtFileOutputDelimited_7[6] = row13.Download_Date == null ? ""
																		: FormatterUtils
																				.format_Date(
																						row13.Download_Date,
																						"dd-MM-yyyy");

																rowtFileOutputDelimited_7[7] = row13.PathID == null ? ""
																		: row13.PathID;

																rowtFileOutputDelimited_7[8] = row13.visual == null ? ""
																		: row13.visual;

																rowtFileOutputDelimited_7[9] = row13.codeList == null ? ""
																		: row13.codeList;

																rowtFileOutputDelimited_7[10] = row13.source == null ? ""
																		: row13.source;

																rowtFileOutputDelimited_7[11] = row13.xml == null ? ""
																		: row13.xml;

																rowtFileOutputDelimited_7[12] = row13.m_applied_path == null ? ""
																		: row13.m_applied_path;

																nb_line_tFileOutputDelimited_7++;
																CsvWritertFileOutputDelimited_7
																		.writeNext(rowtFileOutputDelimited_7);

																if (nb_line_tFileOutputDelimited_7 % 50000 == 0) {

																	CsvWritertFileOutputDelimited_7
																			.flush();

																}

																tos_count_tFileOutputDelimited_7++;

																/**
																 * [
																 * tFileOutputDelimited_7
																 * main ] stop
																 */

															} // End of branch
																// "asdd"

														} // End of branch
															// "row14"

													} // End of branch "out1"

												} // End of branch "asd"

											} // End of branch "fromOutput"

											/**
											 * [tFileInputDelimited_1 end ]
											 * start
											 */

											currentComponent = "tFileInputDelimited_1";

											nb_line_tFileInputDelimited_1++;
										}

									} finally {
										if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
											if (csvReadertFileInputDelimited_1 != null) {
												csvReadertFileInputDelimited_1
														.close();
											}
										}
										if (csvReadertFileInputDelimited_1 != null) {
											globalMap
													.put("tFileInputDelimited_1_NB_LINE",
															nb_line_tFileInputDelimited_1);
										}
									}

									ok_Hash.put("tFileInputDelimited_1", true);
									end_Hash.put("tFileInputDelimited_1",
											System.currentTimeMillis());

									/**
									 * [tFileInputDelimited_1 end ] stop
									 */

									/**
									 * [tMap_4 end ] start
									 */

									currentComponent = "tMap_4";

									// ###############################
									// # Lookup hashes releasing
									if (tHash_Lookup_fromOnt != null) {
										tHash_Lookup_fromOnt.endGet();
									}
									globalMap.remove("tHash_Lookup_fromOnt");

									// ###############################

									ok_Hash.put("tMap_4", true);
									end_Hash.put("tMap_4",
											System.currentTimeMillis());

									/**
									 * [tMap_4 end ] stop
									 */

									/**
									 * [tJavaRow_1 end ] start
									 */

									currentComponent = "tJavaRow_1";

									globalMap.put("tJavaRow_1_NB_LINE",
											nb_line_tJavaRow_1);

									ok_Hash.put("tJavaRow_1", true);
									end_Hash.put("tJavaRow_1",
											System.currentTimeMillis());

									/**
									 * [tJavaRow_1 end ] stop
									 */

									/**
									 * [tMap_2 end ] start
									 */

									currentComponent = "tMap_2";

									// ###############################
									// # Lookup hashes releasing
									// ###############################

									ok_Hash.put("tMap_2", true);
									end_Hash.put("tMap_2",
											System.currentTimeMillis());

									/**
									 * [tMap_2 end ] stop
									 */

									/**
									 * [tUniqRow_2 end ] start
									 */

									currentComponent = "tUniqRow_2";

									globalMap.put("tUniqRow_2_NB_UNIQUES",
											nb_uniques_tUniqRow_2);
									globalMap.put("tUniqRow_2_NB_DUPLICATES",
											nb_duplicates_tUniqRow_2);

									ok_Hash.put("tUniqRow_2", true);
									end_Hash.put("tUniqRow_2",
											System.currentTimeMillis());

									/**
									 * [tUniqRow_2 end ] stop
									 */

									/**
									 * [tMap_3 end ] start
									 */

									currentComponent = "tMap_3";

									// ###############################
									// # Lookup hashes releasing
									// ###############################

									ok_Hash.put("tMap_3", true);
									end_Hash.put("tMap_3",
											System.currentTimeMillis());

									/**
									 * [tMap_3 end ] stop
									 */

									/**
									 * [tJavaRow_9 end ] start
									 */

									currentComponent = "tJavaRow_9";

									globalMap.put("tJavaRow_9_NB_LINE",
											nb_line_tJavaRow_9);

									ok_Hash.put("tJavaRow_9", true);
									end_Hash.put("tJavaRow_9",
											System.currentTimeMillis());

									/**
									 * [tJavaRow_9 end ] stop
									 */

									/**
									 * [tFileOutputDelimited_7 end ] start
									 */

									currentComponent = "tFileOutputDelimited_7";

								} finally {

									if (CsvWritertFileOutputDelimited_7 != null) {
										CsvWritertFileOutputDelimited_7.close();
									}
									globalMap.put(
											"tFileOutputDelimited_7_NB_LINE",
											nb_line_tFileOutputDelimited_7);
								} // finally

								ok_Hash.put("tFileOutputDelimited_7", true);
								end_Hash.put("tFileOutputDelimited_7",
										System.currentTimeMillis());

								/**
								 * [tFileOutputDelimited_7 end ] stop
								 */

								/**
								 * [tJavaRow_7 end ] start
								 */

								currentComponent = "tJavaRow_7";

								globalMap.put("tJavaRow_7_NB_LINE",
										nb_line_tJavaRow_7);

								ok_Hash.put("tJavaRow_7", true);
								end_Hash.put("tJavaRow_7",
										System.currentTimeMillis());

								/**
								 * [tJavaRow_7 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_6 end ] start
								 */

								currentComponent = "tFileOutputDelimited_6";

							} finally {

								if (CsvWritertFileOutputDelimited_6 != null) {
									CsvWritertFileOutputDelimited_6.close();
								}
								globalMap.put("tFileOutputDelimited_6_NB_LINE",
										nb_line_tFileOutputDelimited_6);
							} // finally

							ok_Hash.put("tFileOutputDelimited_6", true);
							end_Hash.put("tFileOutputDelimited_6",
									System.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_6 end ] stop
							 */

							/**
							 * [tJavaRow_3 end ] start
							 */

							currentComponent = "tJavaRow_3";

							globalMap.put("tJavaRow_3_NB_LINE",
									nb_line_tJavaRow_3);

							ok_Hash.put("tJavaRow_3", true);
							end_Hash.put("tJavaRow_3",
									System.currentTimeMillis());

							/**
							 * [tJavaRow_3 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 end ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

						} finally {

							if (CsvWritertFileOutputDelimited_2 != null) {
								CsvWritertFileOutputDelimited_2.close();
							}
							globalMap.put("tFileOutputDelimited_2_NB_LINE",
									nb_line_tFileOutputDelimited_2);
						} // finally

						ok_Hash.put("tFileOutputDelimited_2", true);
						end_Hash.put("tFileOutputDelimited_2",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_2 end ] stop
						 */

						/**
						 * [tJavaRow_4 end ] start
						 */

						currentComponent = "tJavaRow_4";

						globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

						ok_Hash.put("tJavaRow_4", true);
						end_Hash.put("tJavaRow_4", System.currentTimeMillis());

						/**
						 * [tJavaRow_4 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

					} finally {

						if (CsvWritertFileOutputDelimited_3 != null) {
							CsvWritertFileOutputDelimited_3.close();
						}
						globalMap.put("tFileOutputDelimited_3_NB_LINE",
								nb_line_tFileOutputDelimited_3);
					} // finally

					ok_Hash.put("tFileOutputDelimited_3", true);
					end_Hash.put("tFileOutputDelimited_3",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_3 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_fromOnt");

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				if (context.ontOutputRows / 100 > 0)
					context.ontOutputMod = context.ontOutputRows / 100;

				System.out.println("ontOutputRows " + context.ontOutputRows);
				System.out.println("ontOutputMod " + context.ontOutputMod);

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				row10Struct row10 = new row10Struct();

				row12Struct row12 = new row12Struct();

				row2Struct row2 = new row2Struct();
				row7Struct row7 = new row7Struct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tUniqRow_3_UniqOut begin ] start
				 */

				ok_Hash.put("tUniqRow_3_UniqOut", false);
				start_Hash
						.put("tUniqRow_3_UniqOut", System.currentTimeMillis());
				currentComponent = "tUniqRow_3_UniqOut";

				int tos_count_tUniqRow_3_UniqOut = 0;

				// ////////////////////////
				int nb_tUniqRow_3 = 0;

				int bufferSize_tUniqRow_3 = 500000;

				class rowStruct_tUniqRow_3 extends row7Struct {

					int id_tUniqRow_3;

					@Override
					public void readData(ObjectInputStream dis) {
						super.readData(dis);
						try {
							this.id_tUniqRow_3 = dis.readInt();
						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					@Override
					public String toString() {
						return "{" + super.toString() + "\t" + id_tUniqRow_3
								+ "}";
					}

					@Override
					public void writeData(ObjectOutputStream dos) {
						super.writeData(dos);
						try {
							// Integer
							dos.writeInt(this.id_tUniqRow_3);

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean duplicateTo(rowStruct_tUniqRow_3 other) {

						if (this.Path == null) {
							if (other.Path != null) {
								return false;
							}
						} else {
							if (other.Path == null) {
								return false;
							} else {
								if (!this.Path.equalsIgnoreCase(other.Path)) {
									return false;
								}
							}
						}

						return true;
					}

				}

				// comparator for first sort
				class Comparator_1_tUniqRow_3 implements
						Comparator<rowStruct_tUniqRow_3> {

					public int compare(rowStruct_tUniqRow_3 arg0,
							rowStruct_tUniqRow_3 arg1) {
						int compare = 0;
						if (arg0.Path == null) {
							if (arg1.Path != null) {
								return -1;
							}
						} else {
							if (arg1.Path == null) {
								return 1;
							} else {
								compare = arg0.Path
										.compareToIgnoreCase(arg1.Path);
								if (compare != 0) {
									return compare;
								}
							}
						}

						return arg0.id_tUniqRow_3 - arg1.id_tUniqRow_3;
					}

				}

				int bufferSize_1_tUniqRow_3 = bufferSize_tUniqRow_3;

				rowStruct_tUniqRow_3[] buffer_1_tUniqRow_3 = new rowStruct_tUniqRow_3[bufferSize_1_tUniqRow_3];

				for (int i_tUniqRow_3 = 0; i_tUniqRow_3 < buffer_1_tUniqRow_3.length; i_tUniqRow_3++) {
					buffer_1_tUniqRow_3[i_tUniqRow_3] = new rowStruct_tUniqRow_3();
				}

				int rowsInBuffer_1_tUniqRow_3 = 0;

				Comparator<rowStruct_tUniqRow_3> comparator_1_tUniqRow_3 = new Comparator_1_tUniqRow_3();

				java.util.ArrayList<java.io.File> files_1_tUniqRow_3 = new java.util.ArrayList<java.io.File>();

				String workDirectory_tUniqRow_3 = context.folderMain
						+ context.folderTmp;

				/**
				 * [tUniqRow_3_UniqOut begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());
				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());
				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_2_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 0; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 0; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row6 = new row6Struct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.HLEVEL = null;

								row6.Name = null;

								row6.Path = null;

								row6.DataType = null;

								row6.Update_Date = null;

								row6.Import_Date = null;

								row6.Download_Date = null;

								row6.PathID = null;

								row6.visual = null;

								row6.codeList = null;

								row6.source = null;

								row6.xml = null;

								row6.m_applied_path = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row6.HLEVEL = null;
									}

								} else {
									row6.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.Name = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.Path = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.DataType = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy");

									} else {
										row6.Update_Date = null;
									}

								} else {
									row6.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy");

									} else {
										row6.Import_Date = null;
									}

								} else {
									row6.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy");

									} else {
										row6.Download_Date = null;
									}

								} else {
									row6.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.PathID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.visual = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.codeList = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.codeList = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.source = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.source = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.xml = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.m_applied_path = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.m_applied_path = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row2 = new row2Struct();

							row2.HLEVEL = row6.HLEVEL;
							row2.Name = row6.Name;
							row2.Path = row6.Path;
							row2.DataType = row6.DataType;
							row2.Update_Date = row6.Update_Date;
							row2.Import_Date = row6.Import_Date;
							row2.Download_Date = row6.Download_Date;
							row2.PathID = row6.PathID;
							row2.visual = row6.visual;
							row2.codeList = row6.codeList;
							row2.source = row6.source;
							row2.xml = row6.xml;
							row2.m_applied_path = row6.m_applied_path;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tJavaRow_5 main ] start
							 */

							currentComponent = "tJavaRow_5";

							// Code generated according to input schema and
							// output schema
							context.ontOutputCurrent++;
							if (context.ontOutputCurrent % context.ontOutputMod == 0) {
								StatusListener.setSubStatus(
										(float) context.ontOutputCurrent
												/ context.ontOutputRows * 100,
										(int) ((float) context.ontOutputCurrent
												/ context.ontOutputRows * 100)
												+ "% - Ontology");
							}
							row7.HLEVEL = row2.HLEVEL;
							row7.Name = row2.Name;
							row7.Path = row2.Path;
							row7.DataType = row2.DataType;
							row7.Update_Date = row2.Update_Date;
							row7.Import_Date = row2.Import_Date;
							row7.Download_Date = row2.Download_Date;
							row7.PathID = row2.PathID;
							row7.visual = row2.visual;
							row7.codeList = row2.codeList;
							row7.source = row2.source;
							row7.xml = row2.xml;
							row7.m_applied_path = row2.m_applied_path;

							nb_line_tJavaRow_5++;

							tos_count_tJavaRow_5++;

							/**
							 * [tJavaRow_5 main ] stop
							 */

							/**
							 * [tUniqRow_3_UniqOut main ] start
							 */

							currentComponent = "tUniqRow_3_UniqOut";

							if (rowsInBuffer_1_tUniqRow_3 >= bufferSize_1_tUniqRow_3) {// buffer
																						// is
																						// full
																						// do
																						// sort
																						// and

								java.util.Arrays.<rowStruct_tUniqRow_3> sort(
										buffer_1_tUniqRow_3, 0,
										bufferSize_1_tUniqRow_3,
										comparator_1_tUniqRow_3);

								java.io.File file_tUniqRow_3 = new java.io.File(
										workDirectory_tUniqRow_3
												+ "/tUniqRow_3_TEMP_"
												+ files_1_tUniqRow_3.size());

								file_tUniqRow_3.deleteOnExit();

								java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
										new java.io.BufferedOutputStream(
												new java.io.FileOutputStream(
														file_tUniqRow_3)));

								for (int i_tUniqRow_3 = 0; i_tUniqRow_3 < bufferSize_1_tUniqRow_3; i_tUniqRow_3++) {
									buffer_1_tUniqRow_3[i_tUniqRow_3]
											.writeData(rw);
								}

								rw.close();

								files_1_tUniqRow_3.add(file_tUniqRow_3);

								rowsInBuffer_1_tUniqRow_3 = 0;
							}
							rowStruct_tUniqRow_3 row_tUniqRow_3 = buffer_1_tUniqRow_3[rowsInBuffer_1_tUniqRow_3++];
							row_tUniqRow_3.id_tUniqRow_3 = ++nb_tUniqRow_3;
							row_tUniqRow_3.HLEVEL = row7.HLEVEL;

							row_tUniqRow_3.Name = row7.Name;

							row_tUniqRow_3.Path = row7.Path;

							row_tUniqRow_3.DataType = row7.DataType;

							row_tUniqRow_3.Update_Date = row7.Update_Date;

							row_tUniqRow_3.Import_Date = row7.Import_Date;

							row_tUniqRow_3.Download_Date = row7.Download_Date;

							row_tUniqRow_3.PathID = row7.PathID;

							row_tUniqRow_3.visual = row7.visual;

							row_tUniqRow_3.codeList = row7.codeList;

							row_tUniqRow_3.source = row7.source;

							row_tUniqRow_3.xml = row7.xml;

							row_tUniqRow_3.m_applied_path = row7.m_applied_path;

							tos_count_tUniqRow_3_UniqOut++;

							/**
							 * [tUniqRow_3_UniqOut main ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */
				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 0; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 0; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row10 = new row10Struct();
						try {

							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.HLEVEL = null;

								row10.Name = null;

								row10.Path = null;

								row10.DataType = null;

								row10.Update_Date = null;

								row10.Import_Date = null;

								row10.Download_Date = null;

								row10.PathID = null;

								row10.visual = null;

								row10.codeList = null;

								row10.source = null;

								row10.xml = null;

								row10.m_applied_path = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row10.HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										row10.HLEVEL = null;
									}

								} else {
									row10.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.Name = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.Path = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.DataType = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row10.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										row10.Update_Date = null;
									}

								} else {
									row10.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row10.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										row10.Import_Date = null;
									}

								} else {
									row10.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										row10.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										row10.Download_Date = null;
									}

								} else {
									row10.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.PathID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.visual = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.codeList = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.codeList = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.source = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.source = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 11;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.xml = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 12;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row10.m_applied_path = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row10.m_applied_path = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row2 = new row2Struct();

							row2.HLEVEL = row10.HLEVEL;
							row2.Name = row10.Name;
							row2.Path = row10.Path;
							row2.DataType = row10.DataType;
							row2.Update_Date = row10.Update_Date;
							row2.Import_Date = row10.Import_Date;
							row2.Download_Date = row10.Download_Date;
							row2.PathID = row10.PathID;
							row2.visual = row10.visual;
							row2.codeList = row10.codeList;
							row2.source = row10.source;
							row2.xml = row10.xml;
							row2.m_applied_path = row10.m_applied_path;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tJavaRow_5 main ] start
							 */

							currentComponent = "tJavaRow_5";

							// Code generated according to input schema and
							// output schema
							context.ontOutputCurrent++;
							if (context.ontOutputCurrent % context.ontOutputMod == 0) {
								StatusListener.setSubStatus(
										(float) context.ontOutputCurrent
												/ context.ontOutputRows * 100,
										(int) ((float) context.ontOutputCurrent
												/ context.ontOutputRows * 100)
												+ "% - Ontology");
							}
							row7.HLEVEL = row2.HLEVEL;
							row7.Name = row2.Name;
							row7.Path = row2.Path;
							row7.DataType = row2.DataType;
							row7.Update_Date = row2.Update_Date;
							row7.Import_Date = row2.Import_Date;
							row7.Download_Date = row2.Download_Date;
							row7.PathID = row2.PathID;
							row7.visual = row2.visual;
							row7.codeList = row2.codeList;
							row7.source = row2.source;
							row7.xml = row2.xml;
							row7.m_applied_path = row2.m_applied_path;

							nb_line_tJavaRow_5++;

							tos_count_tJavaRow_5++;

							/**
							 * [tJavaRow_5 main ] stop
							 */

							/**
							 * [tUniqRow_3_UniqOut main ] start
							 */

							currentComponent = "tUniqRow_3_UniqOut";

							if (rowsInBuffer_1_tUniqRow_3 >= bufferSize_1_tUniqRow_3) {// buffer
																						// is
																						// full
																						// do
																						// sort
																						// and

								java.util.Arrays.<rowStruct_tUniqRow_3> sort(
										buffer_1_tUniqRow_3, 0,
										bufferSize_1_tUniqRow_3,
										comparator_1_tUniqRow_3);

								java.io.File file_tUniqRow_3 = new java.io.File(
										workDirectory_tUniqRow_3
												+ "/tUniqRow_3_TEMP_"
												+ files_1_tUniqRow_3.size());

								file_tUniqRow_3.deleteOnExit();

								java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
										new java.io.BufferedOutputStream(
												new java.io.FileOutputStream(
														file_tUniqRow_3)));

								for (int i_tUniqRow_3 = 0; i_tUniqRow_3 < bufferSize_1_tUniqRow_3; i_tUniqRow_3++) {
									buffer_1_tUniqRow_3[i_tUniqRow_3]
											.writeData(rw);
								}

								rw.close();

								files_1_tUniqRow_3.add(file_tUniqRow_3);

								rowsInBuffer_1_tUniqRow_3 = 0;
							}
							rowStruct_tUniqRow_3 row_tUniqRow_3 = buffer_1_tUniqRow_3[rowsInBuffer_1_tUniqRow_3++];
							row_tUniqRow_3.id_tUniqRow_3 = ++nb_tUniqRow_3;
							row_tUniqRow_3.HLEVEL = row7.HLEVEL;

							row_tUniqRow_3.Name = row7.Name;

							row_tUniqRow_3.Path = row7.Path;

							row_tUniqRow_3.DataType = row7.DataType;

							row_tUniqRow_3.Update_Date = row7.Update_Date;

							row_tUniqRow_3.Import_Date = row7.Import_Date;

							row_tUniqRow_3.Download_Date = row7.Download_Date;

							row_tUniqRow_3.PathID = row7.PathID;

							row_tUniqRow_3.visual = row7.visual;

							row_tUniqRow_3.codeList = row7.codeList;

							row_tUniqRow_3.source = row7.source;

							row_tUniqRow_3.xml = row7.xml;

							row_tUniqRow_3.m_applied_path = row7.m_applied_path;

							tos_count_tUniqRow_3_UniqOut++;

							/**
							 * [tUniqRow_3_UniqOut main ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */
				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_5_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 0; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 0; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row12 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row12 = new row12Struct();
						try {

							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row12.HLEVEL = null;

								row12.Name = null;

								row12.Path = null;

								row12.DataType = null;

								row12.Update_Date = null;

								row12.Import_Date = null;

								row12.Download_Date = null;

								row12.PathID = null;

								row12.visual = null;

								row12.codeList = null;

								row12.source = null;

								row12.xml = null;

								row12.m_applied_path = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row12.HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row12.HLEVEL = null;
									}

								} else {
									row12.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.Name = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.Path = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.DataType = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row12.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row12.Update_Date = null;
									}

								} else {
									row12.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row12.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row12.Import_Date = null;
									}

								} else {
									row12.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row12.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row12.Download_Date = null;
									}

								} else {
									row12.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.PathID = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.visual = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.codeList = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.codeList = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.source = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.source = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 11;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.xml = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 12;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row12.m_applied_path = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row12.m_applied_path = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row2 = new row2Struct();

							row2.HLEVEL = row12.HLEVEL;
							row2.Name = row12.Name;
							row2.Path = row12.Path;
							row2.DataType = row12.DataType;
							row2.Update_Date = row12.Update_Date;
							row2.Import_Date = row12.Import_Date;
							row2.Download_Date = row12.Download_Date;
							row2.PathID = row12.PathID;
							row2.visual = row12.visual;
							row2.codeList = row12.codeList;
							row2.source = row12.source;
							row2.xml = row12.xml;
							row2.m_applied_path = row12.m_applied_path;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tJavaRow_5 main ] start
							 */

							currentComponent = "tJavaRow_5";

							// Code generated according to input schema and
							// output schema
							context.ontOutputCurrent++;
							if (context.ontOutputCurrent % context.ontOutputMod == 0) {
								StatusListener.setSubStatus(
										(float) context.ontOutputCurrent
												/ context.ontOutputRows * 100,
										(int) ((float) context.ontOutputCurrent
												/ context.ontOutputRows * 100)
												+ "% - Ontology");
							}
							row7.HLEVEL = row2.HLEVEL;
							row7.Name = row2.Name;
							row7.Path = row2.Path;
							row7.DataType = row2.DataType;
							row7.Update_Date = row2.Update_Date;
							row7.Import_Date = row2.Import_Date;
							row7.Download_Date = row2.Download_Date;
							row7.PathID = row2.PathID;
							row7.visual = row2.visual;
							row7.codeList = row2.codeList;
							row7.source = row2.source;
							row7.xml = row2.xml;
							row7.m_applied_path = row2.m_applied_path;

							nb_line_tJavaRow_5++;

							tos_count_tJavaRow_5++;

							/**
							 * [tJavaRow_5 main ] stop
							 */

							/**
							 * [tUniqRow_3_UniqOut main ] start
							 */

							currentComponent = "tUniqRow_3_UniqOut";

							if (rowsInBuffer_1_tUniqRow_3 >= bufferSize_1_tUniqRow_3) {// buffer
																						// is
																						// full
																						// do
																						// sort
																						// and

								java.util.Arrays.<rowStruct_tUniqRow_3> sort(
										buffer_1_tUniqRow_3, 0,
										bufferSize_1_tUniqRow_3,
										comparator_1_tUniqRow_3);

								java.io.File file_tUniqRow_3 = new java.io.File(
										workDirectory_tUniqRow_3
												+ "/tUniqRow_3_TEMP_"
												+ files_1_tUniqRow_3.size());

								file_tUniqRow_3.deleteOnExit();

								java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
										new java.io.BufferedOutputStream(
												new java.io.FileOutputStream(
														file_tUniqRow_3)));

								for (int i_tUniqRow_3 = 0; i_tUniqRow_3 < bufferSize_1_tUniqRow_3; i_tUniqRow_3++) {
									buffer_1_tUniqRow_3[i_tUniqRow_3]
											.writeData(rw);
								}

								rw.close();

								files_1_tUniqRow_3.add(file_tUniqRow_3);

								rowsInBuffer_1_tUniqRow_3 = 0;
							}
							rowStruct_tUniqRow_3 row_tUniqRow_3 = buffer_1_tUniqRow_3[rowsInBuffer_1_tUniqRow_3++];
							row_tUniqRow_3.id_tUniqRow_3 = ++nb_tUniqRow_3;
							row_tUniqRow_3.HLEVEL = row7.HLEVEL;

							row_tUniqRow_3.Name = row7.Name;

							row_tUniqRow_3.Path = row7.Path;

							row_tUniqRow_3.DataType = row7.DataType;

							row_tUniqRow_3.Update_Date = row7.Update_Date;

							row_tUniqRow_3.Import_Date = row7.Import_Date;

							row_tUniqRow_3.Download_Date = row7.Download_Date;

							row_tUniqRow_3.PathID = row7.PathID;

							row_tUniqRow_3.visual = row7.visual;

							row_tUniqRow_3.codeList = row7.codeList;

							row_tUniqRow_3.source = row7.source;

							row_tUniqRow_3.xml = row7.xml;

							row_tUniqRow_3.m_applied_path = row7.m_applied_path;

							tos_count_tUniqRow_3_UniqOut++;

							/**
							 * [tUniqRow_3_UniqOut main ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */
				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tUniqRow_3_UniqOut end ] start
				 */

				currentComponent = "tUniqRow_3_UniqOut";

				if (rowsInBuffer_1_tUniqRow_3 > 0) {
					java.util.Arrays.<rowStruct_tUniqRow_3> sort(
							buffer_1_tUniqRow_3, 0, rowsInBuffer_1_tUniqRow_3,
							comparator_1_tUniqRow_3);

					java.io.File file_tUniqRow_3 = new java.io.File(
							workDirectory_tUniqRow_3 + "/tUniqRow_3_TEMP_"
									+ files_1_tUniqRow_3.size());

					file_tUniqRow_3.deleteOnExit();

					java.io.ObjectOutputStream rw_tUniqRow_3 = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tUniqRow_3)));
					for (int i = 0; i < rowsInBuffer_1_tUniqRow_3; i++) {
						buffer_1_tUniqRow_3[i].writeData(rw_tUniqRow_3);
					}

					rw_tUniqRow_3.close();

					files_1_tUniqRow_3.add(file_tUniqRow_3);

					rowsInBuffer_1_tUniqRow_3 = 0;
				}
				buffer_1_tUniqRow_3 = null;

				// ////////////////////////////////////
				class FileRowIterator_tUniqRow_3 implements
						java.util.Iterator<rowStruct_tUniqRow_3> {

					boolean isEndOfFile = false;

					rowStruct_tUniqRow_3[] buffer;

					ObjectInputStream ois;

					java.io.BufferedInputStream bis;

					rowStruct_tUniqRow_3 tempRow;

					int count = 0;

					int index = 0;

					public FileRowIterator_tUniqRow_3(java.io.File file,
							int bufferSize) throws IOException {
						isEndOfFile = false;
						tempRow = null;
						bis = new java.io.BufferedInputStream(
								new java.io.FileInputStream(file));
						ois = new java.io.ObjectInputStream(bis);
						buffer = new rowStruct_tUniqRow_3[bufferSize];
					}

					private void load() {
						count = 0;
						index = 0;
						try {
							if (tempRow != null) {
								buffer[count++] = tempRow;
								tempRow = null;
							}
							while (!isEndOfFile && count < buffer.length) {
								buffer[count] = new rowStruct_tUniqRow_3();
								buffer[count].readData(ois);
								count++;
							}
							if (!isEndOfFile && count >= buffer.length
									&& bis.available() == 0) {
								tempRow = new rowStruct_tUniqRow_3();
								tempRow.readData(ois);
							}
						} catch (java.lang.Exception e) {
							if (e.getCause() instanceof java.io.EOFException) {
								this.isEndOfFile = true; // the EOFException
								tempRow = null;
							} else {
								throw new RuntimeException(e);
							}
						}
					}

					public boolean hasNext() {
						return index < count || !isEndOfFile;
					}

					public rowStruct_tUniqRow_3 next() {
						if (index >= count) {
							load();
						}

						return buffer[index++];
					}

					public void remove() {
						throw new UnsupportedOperationException();
					}

					public void close() throws IOException {
						if (ois != null) {
							ois.close();
							ois = null;
						}
					}
				}

				ok_Hash.put("tUniqRow_3_UniqOut", true);
				end_Hash.put("tUniqRow_3_UniqOut", System.currentTimeMillis());

				/**
				 * [tUniqRow_3_UniqOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.folderMain + context.folderOutput + "ont.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);
				if (filetFileOutputDelimited_5.exists()) {
					isFileGenerated_tFileOutputDelimited_5 = false;
				}

				String[] headColutFileOutputDelimited_5 = new String[13];
				class CSVBasicSet_tFileOutputDelimited_5 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_5[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_5 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_5[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_5 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_5[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_5[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
				csvSettings_tFileOutputDelimited_5.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_5.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;
				try {
					CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_5,
													true), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_5
							.setSeparator(csvSettings_tFileOutputDelimited_5
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_5
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_5.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_5
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_5
							.setEscapeChar(csvSettings_tFileOutputDelimited_5
									.getEscapeChar());
					CsvWritertFileOutputDelimited_5
							.setQuoteChar(csvSettings_tFileOutputDelimited_5
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_5
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_5 begin ] stop
					 */

					/**
					 * [tUniqRow_3_UniqIn begin ] start
					 */

					ok_Hash.put("tUniqRow_3_UniqIn", false);
					start_Hash.put("tUniqRow_3_UniqIn",
							System.currentTimeMillis());
					currentComponent = "tUniqRow_3_UniqIn";

					int tos_count_tUniqRow_3_UniqIn = 0;
					int bufferSizePerFile_tUniqRow_3 = 10000;

					java.util.List<FileRowIterator_tUniqRow_3> rowFileList_1_tUniqRow_3 = new java.util.ArrayList<FileRowIterator_tUniqRow_3>();
					java.util.List<rowStruct_tUniqRow_3> rowList_1_tUniqRow_3 = new java.util.ArrayList<rowStruct_tUniqRow_3>();

					for (java.io.File file : files_1_tUniqRow_3) {
						FileRowIterator_tUniqRow_3 fri = new FileRowIterator_tUniqRow_3(
								file, bufferSizePerFile_tUniqRow_3);
						rowFileList_1_tUniqRow_3.add(fri);
						rowList_1_tUniqRow_3.add(fri.next());
					}

					// comparator for second sort
					class Comparator_2_tUniqRow_3 implements
							Comparator<rowStruct_tUniqRow_3> {

						public int compare(rowStruct_tUniqRow_3 arg0,
								rowStruct_tUniqRow_3 arg1) {
							return arg0.id_tUniqRow_3 - arg1.id_tUniqRow_3;
						}

					}

					// For second sort init begin
					int bufferSize_2_tUniqRow_3 = bufferSize_tUniqRow_3;
					rowStruct_tUniqRow_3[] buffer_2_tUniqRow_3 = new rowStruct_tUniqRow_3[bufferSize_1_tUniqRow_3];
					int rowsInBuffer_2_tUniqRow_3 = 0;
					Comparator<rowStruct_tUniqRow_3> comparator_2_tUniqRow_3 = new Comparator_2_tUniqRow_3();

					java.util.ArrayList<java.io.File> files_2_tUniqRow_3 = new java.util.ArrayList<java.io.File>();
					// For second sort init end

					while (rowList_1_tUniqRow_3.size() > 0) {
						int minIndex_tUniqRow_3 = 0;
						if (rowList_1_tUniqRow_3.size() > 1) {
							for (int i = 1; i < rowList_1_tUniqRow_3.size(); i++) {
								if (comparator_1_tUniqRow_3.compare(
										rowList_1_tUniqRow_3
												.get(minIndex_tUniqRow_3),
										rowList_1_tUniqRow_3.get(i)) > 0) {
									minIndex_tUniqRow_3 = i;
								}
							}
						}

						// /////////////
						if (rowsInBuffer_2_tUniqRow_3 >= bufferSize_2_tUniqRow_3) {// buffer
																					// is
																					// full
																					// do
																					// sort
																					// and

							java.util.Arrays.<rowStruct_tUniqRow_3> sort(
									buffer_2_tUniqRow_3, 0,
									bufferSize_2_tUniqRow_3,
									comparator_2_tUniqRow_3);
							java.io.File file = new java.io.File(
									workDirectory_tUniqRow_3
											+ "/tUniqRow_3_TEMP_uniq_"
											+ files_2_tUniqRow_3.size());
							file.deleteOnExit();
							java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
									new java.io.BufferedOutputStream(
											new java.io.FileOutputStream(file)));
							for (int i = 0; i < bufferSize_2_tUniqRow_3; i++) {
								buffer_2_tUniqRow_3[i].writeData(rw);
							}
							rw.close();

							files_2_tUniqRow_3.add(file);

							rowsInBuffer_2_tUniqRow_3 = 0;
						}
						rowStruct_tUniqRow_3 minItem = rowList_1_tUniqRow_3
								.get(minIndex_tUniqRow_3);
						buffer_2_tUniqRow_3[rowsInBuffer_2_tUniqRow_3++] = minItem;
						FileRowIterator_tUniqRow_3 fri = rowFileList_1_tUniqRow_3
								.get(minIndex_tUniqRow_3);
						if (fri.hasNext()) {
							rowList_1_tUniqRow_3.set(minIndex_tUniqRow_3,
									fri.next());
						} else {
							fri.close();
							rowFileList_1_tUniqRow_3
									.remove(minIndex_tUniqRow_3);
							rowList_1_tUniqRow_3.remove(minIndex_tUniqRow_3);
						}

						// skip duplicates....begin-->this case is suitable for
						// no duplicate connection
						for (int i = 0; i < rowList_1_tUniqRow_3.size();) {
							if (rowList_1_tUniqRow_3.get(i)
									.duplicateTo(minItem)) {
								rowStruct_tUniqRow_3 noDuplicateItem = null;
								FileRowIterator_tUniqRow_3 fri2 = rowFileList_1_tUniqRow_3
										.get(i);
								while (fri2.hasNext()) {
									rowStruct_tUniqRow_3 current = fri2.next();
									if (!minItem.duplicateTo(current)) {
										noDuplicateItem = current;
										break;
									}
								}
								if (noDuplicateItem == null) {
									fri2.close();
									rowFileList_1_tUniqRow_3.remove(i);
									rowList_1_tUniqRow_3.remove(i);
								} else {
									rowList_1_tUniqRow_3
											.set(i, noDuplicateItem);
									i++;
								}
							} else {
								i++;
							}
						}
						// skip duplicates....end
					}

					if (rowsInBuffer_2_tUniqRow_3 > 0) {

						java.util.Arrays.<rowStruct_tUniqRow_3> sort(
								buffer_2_tUniqRow_3, 0,
								rowsInBuffer_2_tUniqRow_3,
								comparator_2_tUniqRow_3);

						java.io.File file = new java.io.File(
								workDirectory_tUniqRow_3
										+ "/tUniqRow_3_TEMP_uniq_"
										+ files_2_tUniqRow_3.size());

						file.deleteOnExit();

						java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
								new java.io.BufferedOutputStream(
										new java.io.FileOutputStream(file)));

						for (int i = 0; i < rowsInBuffer_2_tUniqRow_3; i++) {
							buffer_2_tUniqRow_3[i].writeData(rw);
						}

						rw.close();

						files_2_tUniqRow_3.add(file);

						rowsInBuffer_2_tUniqRow_3 = 0;
					}
					buffer_2_tUniqRow_3 = null;
					java.util.List<FileRowIterator_tUniqRow_3> rowFileList_2_tUniqRow_3 = new java.util.ArrayList<FileRowIterator_tUniqRow_3>();
					java.util.List<rowStruct_tUniqRow_3> rowList_2_tUniqRow_3 = new java.util.ArrayList<rowStruct_tUniqRow_3>();

					for (java.io.File file : files_2_tUniqRow_3) {
						FileRowIterator_tUniqRow_3 fri = new FileRowIterator_tUniqRow_3(
								file, bufferSizePerFile_tUniqRow_3);
						rowFileList_2_tUniqRow_3.add(fri);
						rowList_2_tUniqRow_3.add(fri.next());
					}

					int nb_uniq_tUniqRow_3 = 0;
					while (rowList_2_tUniqRow_3.size() > 0) {
						int minIndex_tUniqRow_3 = 0;
						if (rowList_2_tUniqRow_3.size() > 1) {
							for (int i = 1; i < rowList_2_tUniqRow_3.size(); i++) {
								if (comparator_2_tUniqRow_3.compare(
										rowList_2_tUniqRow_3
												.get(minIndex_tUniqRow_3),
										rowList_2_tUniqRow_3.get(i)) > 0) {
									minIndex_tUniqRow_3 = i;
								}
							}
						}

						// /////////////

						rowStruct_tUniqRow_3 current = rowList_2_tUniqRow_3
								.get(minIndex_tUniqRow_3);

						// ////////////
						FileRowIterator_tUniqRow_3 fri = rowFileList_2_tUniqRow_3
								.get(minIndex_tUniqRow_3);
						if (fri.hasNext()) {
							rowList_2_tUniqRow_3.set(minIndex_tUniqRow_3,
									fri.next());
						} else {
							fri.close();
							rowFileList_2_tUniqRow_3
									.remove(minIndex_tUniqRow_3);
							rowList_2_tUniqRow_3.remove(minIndex_tUniqRow_3);
						}
						row1.HLEVEL = current.HLEVEL;

						row1.Name = current.Name;

						row1.Path = current.Path;

						row1.DataType = current.DataType;

						row1.Update_Date = current.Update_Date;

						row1.Import_Date = current.Import_Date;

						row1.Download_Date = current.Download_Date;

						row1.PathID = current.PathID;

						row1.visual = current.visual;

						row1.codeList = current.codeList;

						row1.source = current.source;

						row1.xml = current.xml;

						row1.m_applied_path = current.m_applied_path;

						nb_uniq_tUniqRow_3++;

						/**
						 * [tUniqRow_3_UniqIn begin ] stop
						 */
						/**
						 * [tUniqRow_3_UniqIn main ] start
						 */

						currentComponent = "tUniqRow_3_UniqIn";

						tos_count_tUniqRow_3_UniqIn++;

						/**
						 * [tUniqRow_3_UniqIn main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tFileOutputDelimited_5 main ] start
							 */

							currentComponent = "tFileOutputDelimited_5";

							String[] rowtFileOutputDelimited_5 = new String[13];

							rowtFileOutputDelimited_5[0] = row1.HLEVEL == null ? ""
									: String.valueOf(row1.HLEVEL);

							rowtFileOutputDelimited_5[1] = row1.Name == null ? ""
									: row1.Name;

							rowtFileOutputDelimited_5[2] = row1.Path == null ? ""
									: row1.Path;

							rowtFileOutputDelimited_5[3] = row1.DataType == null ? ""
									: row1.DataType;

							rowtFileOutputDelimited_5[4] = row1.Update_Date == null ? ""
									: FormatterUtils.format_Date(
											row1.Update_Date, "yyyy-MM-dd");

							rowtFileOutputDelimited_5[5] = row1.Import_Date == null ? ""
									: FormatterUtils.format_Date(
											row1.Import_Date, "yyyy-MM-dd");

							rowtFileOutputDelimited_5[6] = row1.Download_Date == null ? ""
									: FormatterUtils.format_Date(
											row1.Download_Date, "yyyy-MM-dd");

							rowtFileOutputDelimited_5[7] = row1.PathID == null ? ""
									: row1.PathID;

							rowtFileOutputDelimited_5[8] = row1.visual == null ? ""
									: row1.visual;

							rowtFileOutputDelimited_5[9] = row1.codeList == null ? ""
									: row1.codeList;

							rowtFileOutputDelimited_5[10] = row1.source == null ? ""
									: row1.source;

							rowtFileOutputDelimited_5[11] = row1.xml == null ? ""
									: row1.xml;

							rowtFileOutputDelimited_5[12] = row1.m_applied_path == null ? ""
									: row1.m_applied_path;

							nb_line_tFileOutputDelimited_5++;
							CsvWritertFileOutputDelimited_5
									.writeNext(rowtFileOutputDelimited_5);

							tos_count_tFileOutputDelimited_5++;

							/**
							 * [tFileOutputDelimited_5 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tUniqRow_3_UniqIn end ] start
						 */

						currentComponent = "tUniqRow_3_UniqIn";

					}
					globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniq_tUniqRow_3);
					globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_tUniqRow_3
							- nb_uniq_tUniqRow_3);

					ok_Hash.put("tUniqRow_3_UniqIn", true);
					end_Hash.put("tUniqRow_3_UniqIn",
							System.currentTimeMillis());

					/**
					 * [tUniqRow_3_UniqIn end ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

				} finally {

					if (CsvWritertFileOutputDelimited_5 != null) {
						CsvWritertFileOutputDelimited_5.close();
					}
					globalMap.put("tFileOutputDelimited_5_NB_LINE",
							nb_line_tFileOutputDelimited_5);
				} // finally

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class fromOntStruct implements
			routines.system.IPersistableComparableLookupRow<fromOntStruct> {
		final static byte[] commonByteArrayLock_TOS_CSV_Patient_Data = new byte[0];
		static byte[] commonByteArray_TOS_CSV_Patient_Data = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String HLEVEL;

		public String getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.PathID == null) ? 0 : this.PathID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fromOntStruct other = (fromOntStruct) obj;

			if (this.PathID == null) {
				if (other.PathID != null)
					return false;
			} else if (!this.PathID.equals(other.PathID))
				return false;

			return true;
		}

		public void copyDataTo(fromOntStruct other) {

			other.HLEVEL = this.HLEVEL;
			other.Name = this.Name;
			other.Path = this.Path;
			other.DataType = this.DataType;
			other.Update_Date = this.Update_Date;
			other.Import_Date = this.Import_Date;
			other.Download_Date = this.Download_Date;
			other.PathID = this.PathID;
			other.visual = this.visual;
			other.itemCode = this.itemCode;
			other.source = this.source;
			other.xml = this.xml;
			other.m_applied_path = this.m_applied_path;

		}

		public void copyKeysDataTo(fromOntStruct other) {

			other.PathID = this.PathID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_CSV_Patient_Data.length) {
					if (length < 1024
							&& commonByteArray_TOS_CSV_Patient_Data.length == 0) {
						commonByteArray_TOS_CSV_Patient_Data = new byte[1024];
					} else {
						commonByteArray_TOS_CSV_Patient_Data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_CSV_Patient_Data, 0, length);
				strReturn = new String(commonByteArray_TOS_CSV_Patient_Data, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_CSV_Patient_Data) {

				try {

					int length = 0;

					this.PathID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PathID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.HLEVEL = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.Path = readString(dis, ois);

				this.DataType = readString(dis, ois);

				this.Update_Date = readDate(dis, ois);

				this.Import_Date = readDate(dis, ois);

				this.Download_Date = readDate(dis, ois);

				this.visual = readString(dis, ois);

				this.itemCode = readString(dis, ois);

				this.source = readString(dis, ois);

				this.xml = readString(dis, ois);

				this.m_applied_path = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.HLEVEL, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.Path, dos, oos);

				writeString(this.DataType, dos, oos);

				writeDate(this.Update_Date, dos, oos);

				writeDate(this.Import_Date, dos, oos);

				writeDate(this.Download_Date, dos, oos);

				writeString(this.visual, dos, oos);

				writeString(this.itemCode, dos, oos);

				writeString(this.source, dos, oos);

				writeString(this.xml, dos, oos);

				writeString(this.m_applied_path, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + HLEVEL);
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",itemCode=" + itemCode);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromOntStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PathID, other.PathID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				fromOntStruct fromOnt = new fromOntStruct();

				/**
				 * [tAdvancedHash_fromOnt begin ] start
				 */

				ok_Hash.put("tAdvancedHash_fromOnt", false);
				start_Hash.put("tAdvancedHash_fromOnt",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_fromOnt";

				int tos_count_tAdvancedHash_fromOnt = 0;

				// connection name:fromOnt
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1)
				// outputs:(fromOnt,fromOnt) | target node:tAdvancedHash_fromOnt
				// - inputs:(fromOnt) outputs:()
				// linked node: tMap_4 - inputs:(fromOutput,fromOnt)
				// outputs:(asd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fromOnt = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct> tHash_Lookup_fromOnt = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<fromOntStruct> getLookup(matchingModeEnum_fromOnt);

				globalMap.put("tHash_Lookup_fromOnt", tHash_Lookup_fromOnt);

				/**
				 * [tAdvancedHash_fromOnt begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.folderMain + context.folderOutput + "ont.csv"/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						fromOnt = null;

						fromOnt = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						fromOnt = new fromOntStruct();
						try {

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								fromOnt.HLEVEL = null;

								fromOnt.Name = null;

								fromOnt.Path = null;

								fromOnt.DataType = null;

								fromOnt.Update_Date = null;

								fromOnt.Import_Date = null;

								fromOnt.Download_Date = null;

								fromOnt.PathID = null;

								fromOnt.visual = null;

								fromOnt.itemCode = null;

								fromOnt.source = null;

								fromOnt.xml = null;

								fromOnt.m_applied_path = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.HLEVEL = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.Path = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.DataType = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										fromOnt.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										fromOnt.Update_Date = null;
									}

								} else {
									fromOnt.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										fromOnt.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										fromOnt.Import_Date = null;
									}

								} else {
									fromOnt.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										fromOnt.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										fromOnt.Download_Date = null;
									}

								} else {
									fromOnt.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.PathID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.visual = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.itemCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.itemCode = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.source = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.source = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.xml = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									fromOnt.m_applied_path = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									fromOnt.m_applied_path = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "fromOnt"
						if (fromOnt != null) {

							/**
							 * [tAdvancedHash_fromOnt main ] start
							 */

							currentComponent = "tAdvancedHash_fromOnt";

							fromOntStruct fromOnt_HashRow = new fromOntStruct();

							fromOnt_HashRow.HLEVEL = fromOnt.HLEVEL;

							fromOnt_HashRow.Name = fromOnt.Name;

							fromOnt_HashRow.Path = fromOnt.Path;

							fromOnt_HashRow.DataType = fromOnt.DataType;

							fromOnt_HashRow.Update_Date = fromOnt.Update_Date;

							fromOnt_HashRow.Import_Date = fromOnt.Import_Date;

							fromOnt_HashRow.Download_Date = fromOnt.Download_Date;

							fromOnt_HashRow.PathID = fromOnt.PathID;

							fromOnt_HashRow.visual = fromOnt.visual;

							fromOnt_HashRow.itemCode = fromOnt.itemCode;

							fromOnt_HashRow.source = fromOnt.source;

							fromOnt_HashRow.xml = fromOnt.xml;

							fromOnt_HashRow.m_applied_path = fromOnt.m_applied_path;

							tHash_Lookup_fromOnt.put(fromOnt_HashRow);

							tos_count_tAdvancedHash_fromOnt++;

							/**
							 * [tAdvancedHash_fromOnt main ] stop
							 */

						} // End of branch "fromOnt"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_fromOnt end ] start
				 */

				currentComponent = "tAdvancedHash_fromOnt";

				tHash_Lookup_fromOnt.endPut();

				ok_Hash.put("tAdvancedHash_fromOnt", true);
				end_Hash.put("tAdvancedHash_fromOnt",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_fromOnt end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final CSV_Patient_Data CSV_Patient_DataClass = new CSV_Patient_Data();

		int exitCode = CSV_Patient_DataClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = CSV_Patient_Data.class
					.getClassLoader().getResourceAsStream(
							"tos/csv_patient_data_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.config = (String) context.getProperty("config");
			context.currentFile = (String) context.getProperty("currentFile");
			context.fileName = (String) context.getProperty("fileName");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.output = (String) context.getProperty("output");
			context.folderTmp = (String) context.getProperty("folderTmp");
			try {
				context.csvOutputRows = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("csvOutputRows"));
			} catch (NumberFormatException e) {
				context.csvOutputRows = null;
			}
			try {
				context.ontOutputRows = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ontOutputRows"));
			} catch (NumberFormatException e) {
				context.ontOutputRows = null;
			}
			try {
				context.csvOutputMod = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("csvOutputMod"));
			} catch (NumberFormatException e) {
				context.csvOutputMod = null;
			}
			try {
				context.ontOutputMod = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ontOutputMod"));
			} catch (NumberFormatException e) {
				context.ontOutputMod = null;
			}
			try {
				context.csvOutputCurrent = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("csvOutputCurrent"));
			} catch (NumberFormatException e) {
				context.csvOutputCurrent = null;
			}
			try {
				context.ontOutputCurrent = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("ontOutputCurrent"));
			} catch (NumberFormatException e) {
				context.ontOutputCurrent = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("config")) {
				context.config = (String) parentContextMap.get("config");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("fileName")) {
				context.fileName = (String) parentContextMap.get("fileName");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("output")) {
				context.output = (String) parentContextMap.get("output");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("csvOutputRows")) {
				context.csvOutputRows = (Integer) parentContextMap
						.get("csvOutputRows");
			}
			if (parentContextMap.containsKey("ontOutputRows")) {
				context.ontOutputRows = (Integer) parentContextMap
						.get("ontOutputRows");
			}
			if (parentContextMap.containsKey("csvOutputMod")) {
				context.csvOutputMod = (Integer) parentContextMap
						.get("csvOutputMod");
			}
			if (parentContextMap.containsKey("ontOutputMod")) {
				context.ontOutputMod = (Integer) parentContextMap
						.get("ontOutputMod");
			}
			if (parentContextMap.containsKey("csvOutputCurrent")) {
				context.csvOutputCurrent = (Integer) parentContextMap
						.get("csvOutputCurrent");
			}
			if (parentContextMap.containsKey("ontOutputCurrent")) {
				context.ontOutputCurrent = (Integer) parentContextMap
						.get("ontOutputCurrent");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tCreateTemporaryFile_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tCreateTemporaryFile_5) {

			e_tCreateTemporaryFile_5.printStackTrace();
			globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : CSV_Patient_Data");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 469886 characters generated by Talend Open Studio for Data Integration on the
 * January 20, 2014 11:23:18 AM CET
 ************************************************************************************************/
