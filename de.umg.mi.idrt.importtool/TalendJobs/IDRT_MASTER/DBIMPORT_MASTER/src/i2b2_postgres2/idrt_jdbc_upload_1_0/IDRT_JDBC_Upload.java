// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.idrt_jdbc_upload_1_0;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_12
//import java.util.List;

//the import part of tJavaRow_21
//import java.util.List;

//the import part of tJava_21
//import java.util.List;

//the import part of tJavaRow_14
//import java.util.List;

//the import part of tJavaRow_16
//import java.util.List;

//the import part of tJava_23
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_19
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJavaRow_18
//import java.util.List;

//the import part of tJava_18
//import java.util.List;

//the import part of tJavaRow_13
//import java.util.List;

//the import part of tJavaRow_15
//import java.util.List;

//the import part of tJava_22
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_11
//import java.util.List;

//the import part of tJavaRow_20
//import java.util.List;

//the import part of tJava_20
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_17
//import java.util.List;

//the import part of tJava_24
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_25
//import java.util.List;

//the import part of tJava_17
//import java.util.List;

//the import part of tJava_16
//import java.util.List;

//the import part of tJava_19
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_26
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

@SuppressWarnings("unused")
/**
 * Job: IDRT_JDBC_Upload Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class IDRT_JDBC_Upload implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (patientDataFolder != null) {

				this.setProperty("patientDataFolder",
						patientDataFolder.toString());

			}

			if (counter != null) {

				this.setProperty("counter", counter.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (currentTable != null) {

				this.setProperty("currentTable", currentTable.toString());

			}

			if (bio_experiment_id != null) {

				this.setProperty("bio_experiment_id",
						bio_experiment_id.toString());

			}

			if (fileName != null) {

				this.setProperty("fileName", fileName.toString());

			}

			if (coding != null) {

				this.setProperty("coding", coding.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_StagingI2B2_WHType != null) {

				this.setProperty("DB_StagingI2B2_WHType",
						DB_StagingI2B2_WHType.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

		}

		public String patientDataFolder;

		public String getPatientDataFolder() {
			return this.patientDataFolder;
		}

		public Integer counter;

		public Integer getCounter() {
			return this.counter;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String currentTable;

		public String getCurrentTable() {
			return this.currentTable;
		}

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		public String coding;

		public String getCoding() {
			return this.coding;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_StagingI2B2_WHType;

		public String getDB_StagingI2B2_WHType() {
			return this.DB_StagingI2B2_WHType;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "IDRT_JDBC_Upload";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IDRT_JDBC_Upload.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IDRT_JDBC_Upload.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_10Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_14Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_13Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_16Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_15Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDie_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row48_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row38_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row43_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row46_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row40_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_21_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_23_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_18_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_22_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_20_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_24_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_25_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row49Struct implements
			routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				result = prime
						* result
						+ ((this.PATIENT_IDE_SOURCE == null) ? 0
								: this.PATIENT_IDE_SOURCE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row49Struct other = (row49Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			if (this.PATIENT_IDE_SOURCE == null) {
				if (other.PATIENT_IDE_SOURCE != null)
					return false;

			} else if (!this.PATIENT_IDE_SOURCE
					.equals(other.PATIENT_IDE_SOURCE))

				return false;

			return true;
		}

		public void copyDataTo(row49Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row49Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATIENT_IDE_SOURCE,
					other.PATIENT_IDE_SOURCE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				result = prime
						* result
						+ ((this.PATIENT_IDE_SOURCE == null) ? 0
								: this.PATIENT_IDE_SOURCE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			if (this.PATIENT_IDE_SOURCE == null) {
				if (other.PATIENT_IDE_SOURCE != null)
					return false;

			} else if (!this.PATIENT_IDE_SOURCE
					.equals(other.PATIENT_IDE_SOURCE))

				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATIENT_IDE_SOURCE,
					other.PATIENT_IDE_SOURCE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out17Struct implements
			routines.system.IPersistableRow<out17Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out18Struct implements
			routines.system.IPersistableRow<out18Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row50Struct implements
			routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_6Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_6Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_12Process(globalMap);

				row6Struct row6 = new row6Struct();
				row50Struct row50 = new row50Struct();
				row1Struct row1 = new row1Struct();
				out17Struct out17 = new out17Struct();
				row31Struct row31 = new row31Struct();
				out18Struct out18 = new out18Struct();
				row49Struct row49 = new row49Struct();

				/**
				 * [tJavaRow_12 begin ] start
				 */

				ok_Hash.put("tJavaRow_12", false);
				start_Hash.put("tJavaRow_12", System.currentTimeMillis());

				currentComponent = "tJavaRow_12";

				int tos_count_tJavaRow_12 = 0;

				int nb_line_tJavaRow_12 = 0;

				/**
				 * [tJavaRow_12 begin ] stop
				 */

				/**
				 * [tJDBCOutput_3 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_3", false);
				start_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_3";

				int tos_count_tJDBCOutput_3 = 0;

				int nb_line_tJDBCOutput_3 = 0;
				int nb_line_update_tJDBCOutput_3 = 0;
				int nb_line_inserted_tJDBCOutput_3 = 0;
				int nb_line_deleted_tJDBCOutput_3 = 0;
				int nb_line_rejected_tJDBCOutput_3 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_3 = 0;

				int deletedCount_tJDBCOutput_3 = 0;
				int updatedCount_tJDBCOutput_3 = 0;
				int insertedCount_tJDBCOutput_3 = 0;
				int rejectedCount_tJDBCOutput_3 = 0;

				boolean whetherReject_tJDBCOutput_3 = false;

				java.sql.Connection connection_tJDBCOutput_3 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_3 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_3 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_3 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_3,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_3);

				resourceMap.put("conn_tJDBCOutput_3", connection_tJDBCOutput_3);
				connection_tJDBCOutput_3.setAutoCommit(false);
				int commitEvery_tJDBCOutput_3 = 500000;
				int commitCounter_tJDBCOutput_3 = 0;
				int batchSize_tJDBCOutput_3 = 250000;
				int batchSizeCounter_tJDBCOutput_3 = 0;

				String insert_tJDBCOutput_3 = "INSERT INTO "
						+ context.currentTable
						+ " (PATIENT_IDE,PATIENT_IDE_SOURCE,PATIENT_NUM,PATIENT_IDE_STATUS,UPLOAD_DATE,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement(insert_tJDBCOutput_3);

				/**
				 * [tJDBCOutput_3 begin ] stop
				 */

				/**
				 * [tJavaRow_21 begin ] start
				 */

				ok_Hash.put("tJavaRow_21", false);
				start_Hash.put("tJavaRow_21", System.currentTimeMillis());

				currentComponent = "tJavaRow_21";

				int tos_count_tJavaRow_21 = 0;

				int nb_line_tJavaRow_21 = 0;

				/**
				 * [tJavaRow_21 begin ] stop
				 */

				/**
				 * [tJDBCOutput_21 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_21", false);
				start_Hash.put("tJDBCOutput_21", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_21";

				int tos_count_tJDBCOutput_21 = 0;

				int updateKeyCount_tJDBCOutput_21 = 2;
				if (updateKeyCount_tJDBCOutput_21 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_21 = 0;
				int nb_line_update_tJDBCOutput_21 = 0;
				int nb_line_inserted_tJDBCOutput_21 = 0;
				int nb_line_deleted_tJDBCOutput_21 = 0;
				int nb_line_rejected_tJDBCOutput_21 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_21 = 0;

				int deletedCount_tJDBCOutput_21 = 0;
				int updatedCount_tJDBCOutput_21 = 0;
				int insertedCount_tJDBCOutput_21 = 0;
				int rejectedCount_tJDBCOutput_21 = 0;

				boolean whetherReject_tJDBCOutput_21 = false;

				java.sql.Connection connection_tJDBCOutput_21 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_21 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_21 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_21 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_21,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_21);

				resourceMap.put("conn_tJDBCOutput_21",
						connection_tJDBCOutput_21);
				connection_tJDBCOutput_21.setAutoCommit(false);
				int commitEvery_tJDBCOutput_21 = 500000;
				int commitCounter_tJDBCOutput_21 = 0;
				int batchSize_tJDBCOutput_21 = 250000;
				int batchSizeCounter_tJDBCOutput_21 = 0;

				String update_tJDBCOutput_21 = "UPDATE "
						+ context.currentTable
						+ " SET PATIENT_NUM = ?,PATIENT_IDE_STATUS = ?,UPLOAD_DATE = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE PATIENT_IDE = ? AND PATIENT_IDE_SOURCE = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_21 = connection_tJDBCOutput_21
						.prepareStatement(update_tJDBCOutput_21);

				/**
				 * [tJDBCOutput_21 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				int tos_count_tMap_15 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) globalMap
						.get("tHash_Lookup_row48"));

				row48Struct row48HashKey = new row48Struct();
				row48Struct row48Default = new row48Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out17Struct out17_tmp = new out17Struct();
				out18Struct out18_tmp = new out18Struct();
				// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tUniqRow_7 begin ] start
				 */

				ok_Hash.put("tUniqRow_7", false);
				start_Hash.put("tUniqRow_7", System.currentTimeMillis());

				currentComponent = "tUniqRow_7";

				int tos_count_tUniqRow_7 = 0;

				class KeyStruct_tUniqRow_7 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String PATIENT_IDE;
					String PATIENT_IDE_SOURCE;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.PATIENT_IDE == null) ? 0
											: this.PATIENT_IDE.hashCode());

							result = prime
									* result
									+ ((this.PATIENT_IDE_SOURCE == null) ? 0
											: this.PATIENT_IDE_SOURCE
													.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;

						if (this.PATIENT_IDE == null) {
							if (other.PATIENT_IDE != null)
								return false;

						} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

							return false;

						if (this.PATIENT_IDE_SOURCE == null) {
							if (other.PATIENT_IDE_SOURCE != null)
								return false;

						} else if (!this.PATIENT_IDE_SOURCE
								.equals(other.PATIENT_IDE_SOURCE))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_7 = 0;
				int nb_duplicates_tUniqRow_7 = 0;
				KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
				java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>();

				/**
				 * [tUniqRow_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /**
				 * Start field
				 * tFileInputDelimited_6:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "patient_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_6:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_6)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6
								.setEscapeChar(csvReadertFileInputDelimited_6
										.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
										.getValues();
								if (!(rowtFileInputDelimited_6.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_6[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
									: totalLinetFileInputDelimited_6
											- footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6
									.setEscapeChar(csvReadertFileInputDelimited_6
											.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_6 != 0
							&& csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
								.getValues();

						if (rowtFileInputDelimited_6.length == 1
								&& ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row6 = new row6Struct();
						try {

							char fieldSeparator_tFileInputDelimited_6_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_6_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_6.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.PATIENT_IDE = null;

								row6.PATIENT_IDE_SOURCE = null;

								row6.PATIENT_NUM = null;

								row6.PATIENT_IDE_STATUS = null;

								row6.UPLOAD_DATE = null;

								row6.UPDATE_DATE = null;

								row6.DOWNLOAD_DATE = null;

								row6.IMPORT_DATE = null;

								row6.SOURCESYSTEM_CD = null;

								row6.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE_SOURCE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row6.PATIENT_NUM = null;
									}

								} else {
									row6.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE_STATUS = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.UPLOAD_DATE = null;
									}

								} else {
									row6.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 5;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.UPDATE_DATE = null;
									}

								} else {
									row6.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 6;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.DOWNLOAD_DATE = null;
									}

								} else {
									row6.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 7;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.IMPORT_DATE = null;
									}

								} else {
									row6.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 8;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.SOURCESYSTEM_CD = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 9;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row6.UPLOAD_ID = null;
									}

								} else {
									row6.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tUniqRow_7 main ] start
							 */

							currentComponent = "tUniqRow_7";

							row50 = null;
							finder_tUniqRow_7.PATIENT_IDE = row6.PATIENT_IDE;
							finder_tUniqRow_7.PATIENT_IDE_SOURCE = row6.PATIENT_IDE_SOURCE;
							finder_tUniqRow_7.hashCodeDirty = true;
							if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
								KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

								new_tUniqRow_7.PATIENT_IDE = row6.PATIENT_IDE;
								new_tUniqRow_7.PATIENT_IDE_SOURCE = row6.PATIENT_IDE_SOURCE;

								keystUniqRow_7.add(new_tUniqRow_7);
								if (row50 == null) {

									row50 = new row50Struct();
								}
								row50.PATIENT_IDE = row6.PATIENT_IDE;
								row50.PATIENT_IDE_SOURCE = row6.PATIENT_IDE_SOURCE;
								row50.PATIENT_NUM = row6.PATIENT_NUM;
								row50.PATIENT_IDE_STATUS = row6.PATIENT_IDE_STATUS;
								row50.UPLOAD_DATE = row6.UPLOAD_DATE;
								row50.UPDATE_DATE = row6.UPDATE_DATE;
								row50.DOWNLOAD_DATE = row6.DOWNLOAD_DATE;
								row50.IMPORT_DATE = row6.IMPORT_DATE;
								row50.SOURCESYSTEM_CD = row6.SOURCESYSTEM_CD;
								row50.UPLOAD_ID = row6.UPLOAD_ID;
								nb_uniques_tUniqRow_7++;
							} else {
								nb_duplicates_tUniqRow_7++;
							}

							tos_count_tUniqRow_7++;

							/**
							 * [tUniqRow_7 main ] stop
							 */
							// Start of branch "row50"
							if (row50 != null) {

								/**
								 * [tJavaRow_3 main ] start
								 */

								currentComponent = "tJavaRow_3";

								// Code generated according to input schema and
								// output schema
								row1.PATIENT_IDE = row50.PATIENT_IDE;
								row1.PATIENT_IDE_SOURCE = row50.PATIENT_IDE_SOURCE;
								row1.PATIENT_NUM = row50.PATIENT_NUM;// .add(new
																		// BigDecimal(10000));
								row1.PATIENT_IDE_STATUS = row50.PATIENT_IDE_STATUS;
								row1.UPLOAD_DATE = row50.UPLOAD_DATE;
								row1.UPDATE_DATE = row50.UPDATE_DATE;
								row1.DOWNLOAD_DATE = row50.DOWNLOAD_DATE;
								row1.IMPORT_DATE = row50.IMPORT_DATE;
								row1.SOURCESYSTEM_CD = row50.SOURCESYSTEM_CD;
								row1.UPLOAD_ID = row50.UPLOAD_ID;

								nb_line_tJavaRow_3++;

								tos_count_tJavaRow_3++;

								/**
								 * [tJavaRow_3 main ] stop
								 */

								/**
								 * [tMap_15 main ] start
								 */

								currentComponent = "tMap_15";

								boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_15 = false;
								boolean mainRowRejected_tMap_15 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row48"
								// /////////////////////////////////////////////

								boolean forceLooprow48 = false;

								row48Struct row48ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_15) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_15 = false;

									row48HashKey.PATIENT_IDE = row1.PATIENT_IDE;

									row48HashKey.PATIENT_IDE_SOURCE = row1.PATIENT_IDE_SOURCE;

									row48HashKey.hashCodeDirty = true;

									tHash_Lookup_row48.lookup(row48HashKey);

									if (!tHash_Lookup_row48.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_15 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row48 != null
										&& tHash_Lookup_row48
												.getCount(row48HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row48' and it contains more one result from keys :  row48.PATIENT_IDE = '"
									// + row48HashKey.PATIENT_IDE +
									// "', row48.PATIENT_IDE_SOURCE = '" +
									// row48HashKey.PATIENT_IDE_SOURCE + "'");
								} // G 071

								row48Struct row48 = null;

								row48Struct fromLookup_row48 = null;
								row48 = row48Default;

								if (tHash_Lookup_row48 != null
										&& tHash_Lookup_row48.hasNext()) { // G
																			// 099

									fromLookup_row48 = tHash_Lookup_row48
											.next();

								} // G 099

								if (fromLookup_row48 != null) {
									row48 = fromLookup_row48;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
									// ###############################
									// # Output tables

									out18 = null;
									out17 = null;

									if (!rejectedInnerJoin_tMap_15) {

										// # Output table : 'out18'
										out18_tmp.PATIENT_IDE = row1.PATIENT_IDE;
										out18_tmp.PATIENT_IDE_SOURCE = row1.PATIENT_IDE_SOURCE;
										out18_tmp.PATIENT_NUM = row1.PATIENT_NUM;
										out18_tmp.PATIENT_IDE_STATUS = row1.PATIENT_IDE_STATUS;
										out18_tmp.UPLOAD_DATE = row1.UPLOAD_DATE;
										out18_tmp.UPDATE_DATE = row1.UPDATE_DATE;
										out18_tmp.DOWNLOAD_DATE = row1.DOWNLOAD_DATE;
										out18_tmp.IMPORT_DATE = row1.IMPORT_DATE;
										out18_tmp.SOURCESYSTEM_CD = row1.SOURCESYSTEM_CD;
										out18_tmp.UPLOAD_ID = row1.UPLOAD_ID;
										out18 = out18_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out17'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_15) {
										out17_tmp.PATIENT_IDE = row1.PATIENT_IDE;
										out17_tmp.PATIENT_IDE_SOURCE = row1.PATIENT_IDE_SOURCE;
										out17_tmp.PATIENT_NUM = row1.PATIENT_NUM;
										out17_tmp.PATIENT_IDE_STATUS = row1.PATIENT_IDE_STATUS;
										out17_tmp.UPLOAD_DATE = row1.UPLOAD_DATE;
										out17_tmp.UPDATE_DATE = row1.UPDATE_DATE;
										out17_tmp.DOWNLOAD_DATE = row1.DOWNLOAD_DATE;
										out17_tmp.IMPORT_DATE = row1.IMPORT_DATE;
										out17_tmp.SOURCESYSTEM_CD = row1.SOURCESYSTEM_CD;
										out17_tmp.UPLOAD_ID = row1.UPLOAD_ID;
										out17 = out17_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_15 = false;

								tos_count_tMap_15++;

								/**
								 * [tMap_15 main ] stop
								 */
								// Start of branch "out17"
								if (out17 != null) {

									/**
									 * [tJDBCOutput_3 main ] start
									 */

									currentComponent = "tJDBCOutput_3";

									row31 = null;
									whetherReject_tJDBCOutput_3 = false;
									if (out17.PATIENT_IDE == null) {
										pstmt_tJDBCOutput_3.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_3.setString(1,
												out17.PATIENT_IDE);
									}

									if (out17.PATIENT_IDE_SOURCE == null) {
										pstmt_tJDBCOutput_3.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_3.setString(2,
												out17.PATIENT_IDE_SOURCE);
									}

									pstmt_tJDBCOutput_3.setBigDecimal(3,
											out17.PATIENT_NUM);

									if (out17.PATIENT_IDE_STATUS == null) {
										pstmt_tJDBCOutput_3.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_3.setString(4,
												out17.PATIENT_IDE_STATUS);
									}

									if (out17.UPLOAD_DATE != null) {
										pstmt_tJDBCOutput_3.setTimestamp(
												5,
												new java.sql.Timestamp(
														out17.UPLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_3.setNull(5,
												java.sql.Types.DATE);
									}

									if (out17.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_3.setTimestamp(
												6,
												new java.sql.Timestamp(
														out17.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_3.setNull(6,
												java.sql.Types.DATE);
									}

									if (out17.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_3.setTimestamp(
												7,
												new java.sql.Timestamp(
														out17.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_3.setNull(7,
												java.sql.Types.DATE);
									}

									if (out17.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_3.setTimestamp(
												8,
												new java.sql.Timestamp(
														out17.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_3.setNull(8,
												java.sql.Types.DATE);
									}

									if (out17.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_3.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_3.setString(9,
												out17.SOURCESYSTEM_CD);
									}

									if (out17.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_3.setNull(10,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_3.setInt(10,
												out17.UPLOAD_ID);
									}

									pstmt_tJDBCOutput_3.addBatch();
									nb_line_tJDBCOutput_3++;

									batchSizeCounter_tJDBCOutput_3++;
									if (!whetherReject_tJDBCOutput_3) {
										row31 = new row31Struct();
										row31.PATIENT_IDE = out17.PATIENT_IDE;
										row31.PATIENT_IDE_SOURCE = out17.PATIENT_IDE_SOURCE;
										row31.PATIENT_NUM = out17.PATIENT_NUM;
										row31.PATIENT_IDE_STATUS = out17.PATIENT_IDE_STATUS;
										row31.UPLOAD_DATE = out17.UPLOAD_DATE;
										row31.UPDATE_DATE = out17.UPDATE_DATE;
										row31.DOWNLOAD_DATE = out17.DOWNLOAD_DATE;
										row31.IMPORT_DATE = out17.IMPORT_DATE;
										row31.SOURCESYSTEM_CD = out17.SOURCESYSTEM_CD;
										row31.UPLOAD_ID = out17.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_3 <= batchSizeCounter_tJDBCOutput_3) {
										int[] status_tJDBCOutput_3 = null;
										int countSum_tJDBCOutput_3 = 0;
										try {
											batchSizeCounter_tJDBCOutput_3 = 0;

											status_tJDBCOutput_3 = pstmt_tJDBCOutput_3
													.executeBatch();

											for (int countEach_tJDBCOutput_3 : status_tJDBCOutput_3) {
												countSum_tJDBCOutput_3 += (countEach_tJDBCOutput_3 < 0 ? 0
														: countEach_tJDBCOutput_3);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_3 = pstmt_tJDBCOutput_3
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_3 = tmp_batchUpdateCount_tJDBCOutput_3 > countSum_tJDBCOutput_3 ? tmp_batchUpdateCount_tJDBCOutput_3
												: countSum_tJDBCOutput_3;

										insertedCount_tJDBCOutput_3 += tmp_batchUpdateCount_tJDBCOutput_3;

									}

									commitCounter_tJDBCOutput_3++;
									if (commitEvery_tJDBCOutput_3 <= commitCounter_tJDBCOutput_3) {

										connection_tJDBCOutput_3.commit();
										commitCounter_tJDBCOutput_3 = 0;
									}

									tos_count_tJDBCOutput_3++;

									/**
									 * [tJDBCOutput_3 main ] stop
									 */
									// Start of branch "row31"
									if (row31 != null) {

										/**
										 * [tJavaRow_12 main ] start
										 */

										currentComponent = "tJavaRow_12";

										context.counter++;

										if (context.counter % 250 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Patient_Mapping: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_12++;

										tos_count_tJavaRow_12++;

										/**
										 * [tJavaRow_12 main ] stop
										 */

									} // End of branch "row31"

								} // End of branch "out17"

								// Start of branch "out18"
								if (out18 != null) {

									/**
									 * [tJDBCOutput_21 main ] start
									 */

									currentComponent = "tJDBCOutput_21";

									row49 = null;
									whetherReject_tJDBCOutput_21 = false;
									pstmt_tJDBCOutput_21.setBigDecimal(1,
											out18.PATIENT_NUM);

									if (out18.PATIENT_IDE_STATUS == null) {
										pstmt_tJDBCOutput_21.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_21.setString(2,
												out18.PATIENT_IDE_STATUS);
									}

									if (out18.UPLOAD_DATE != null) {
										pstmt_tJDBCOutput_21.setTimestamp(
												3,
												new java.sql.Timestamp(
														out18.UPLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_21.setNull(3,
												java.sql.Types.DATE);
									}

									if (out18.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_21.setTimestamp(
												4,
												new java.sql.Timestamp(
														out18.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_21.setNull(4,
												java.sql.Types.DATE);
									}

									if (out18.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_21.setTimestamp(
												5,
												new java.sql.Timestamp(
														out18.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_21.setNull(5,
												java.sql.Types.DATE);
									}

									if (out18.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_21.setTimestamp(
												6,
												new java.sql.Timestamp(
														out18.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_21.setNull(6,
												java.sql.Types.DATE);
									}

									if (out18.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_21.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_21.setString(7,
												out18.SOURCESYSTEM_CD);
									}

									if (out18.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_21.setNull(8,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_21.setInt(8,
												out18.UPLOAD_ID);
									}

									if (out18.PATIENT_IDE == null) {
										pstmt_tJDBCOutput_21.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_21.setString(9,
												out18.PATIENT_IDE);
									}

									if (out18.PATIENT_IDE_SOURCE == null) {
										pstmt_tJDBCOutput_21.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_21.setString(10,
												out18.PATIENT_IDE_SOURCE);
									}

									pstmt_tJDBCOutput_21.addBatch();
									nb_line_tJDBCOutput_21++;

									batchSizeCounter_tJDBCOutput_21++;
									if (!whetherReject_tJDBCOutput_21) {
										row49 = new row49Struct();
										row49.PATIENT_IDE = out18.PATIENT_IDE;
										row49.PATIENT_IDE_SOURCE = out18.PATIENT_IDE_SOURCE;
										row49.PATIENT_NUM = out18.PATIENT_NUM;
										row49.PATIENT_IDE_STATUS = out18.PATIENT_IDE_STATUS;
										row49.UPLOAD_DATE = out18.UPLOAD_DATE;
										row49.UPDATE_DATE = out18.UPDATE_DATE;
										row49.DOWNLOAD_DATE = out18.DOWNLOAD_DATE;
										row49.IMPORT_DATE = out18.IMPORT_DATE;
										row49.SOURCESYSTEM_CD = out18.SOURCESYSTEM_CD;
										row49.UPLOAD_ID = out18.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_21 <= batchSizeCounter_tJDBCOutput_21) {
										int[] status_tJDBCOutput_21 = null;
										int countSum_tJDBCOutput_21 = 0;
										try {
											batchSizeCounter_tJDBCOutput_21 = 0;

											status_tJDBCOutput_21 = pstmt_tJDBCOutput_21
													.executeBatch();

											for (int countEach_tJDBCOutput_21 : status_tJDBCOutput_21) {
												countSum_tJDBCOutput_21 += (countEach_tJDBCOutput_21 < 0 ? 0
														: countEach_tJDBCOutput_21);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_21 = pstmt_tJDBCOutput_21
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_21 = tmp_batchUpdateCount_tJDBCOutput_21 > countSum_tJDBCOutput_21 ? tmp_batchUpdateCount_tJDBCOutput_21
												: countSum_tJDBCOutput_21;

										updatedCount_tJDBCOutput_21 += tmp_batchUpdateCount_tJDBCOutput_21;

									}

									commitCounter_tJDBCOutput_21++;
									if (commitEvery_tJDBCOutput_21 <= commitCounter_tJDBCOutput_21) {

										connection_tJDBCOutput_21.commit();
										commitCounter_tJDBCOutput_21 = 0;
									}

									tos_count_tJDBCOutput_21++;

									/**
									 * [tJDBCOutput_21 main ] stop
									 */
									// Start of branch "row49"
									if (row49 != null) {

										/**
										 * [tJavaRow_21 main ] start
										 */

										currentComponent = "tJavaRow_21";

										context.counter++;

										if (context.counter % 250 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Patient_Mapping: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_21++;

										tos_count_tJavaRow_21++;

										/**
										 * [tJavaRow_21 main ] stop
										 */

									} // End of branch "row49"

								} // End of branch "out18"

							} // End of branch "row50"

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}

				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tUniqRow_7 end ] start
				 */

				currentComponent = "tUniqRow_7";

				globalMap.put("tUniqRow_7_NB_UNIQUES", nb_uniques_tUniqRow_7);
				globalMap.put("tUniqRow_7_NB_DUPLICATES",
						nb_duplicates_tUniqRow_7);

				ok_Hash.put("tUniqRow_7", true);
				end_Hash.put("tUniqRow_7", System.currentTimeMillis());

				/**
				 * [tUniqRow_7 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row48 != null) {
					tHash_Lookup_row48.endGet();
				}
				globalMap.remove("tHash_Lookup_row48");

				// ###############################

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tJDBCOutput_3 end ] start
				 */

				currentComponent = "tJDBCOutput_3";

				int[] status_tJDBCOutput_3 = null;
				int countSum_tJDBCOutput_3 = 0;
				try {
					if (pstmt_tJDBCOutput_3 != null
							&& batchSizeCounter_tJDBCOutput_3 > 0) {

						status_tJDBCOutput_3 = pstmt_tJDBCOutput_3
								.executeBatch();

						for (int countEach_tJDBCOutput_3 : status_tJDBCOutput_3) {
							countSum_tJDBCOutput_3 += (countEach_tJDBCOutput_3 < 0 ? 0
									: countEach_tJDBCOutput_3);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_3 != null
						&& batchSizeCounter_tJDBCOutput_3 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_3 = pstmt_tJDBCOutput_3
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_3 = tmp_batchUpdateCount_tJDBCOutput_3 > countSum_tJDBCOutput_3 ? tmp_batchUpdateCount_tJDBCOutput_3
							: countSum_tJDBCOutput_3;

					insertedCount_tJDBCOutput_3 += tmp_batchUpdateCount_tJDBCOutput_3;

				}
				if (pstmt_tJDBCOutput_3 != null) {

					pstmt_tJDBCOutput_3.close();

				}

				if (commitCounter_tJDBCOutput_3 > 0) {

					connection_tJDBCOutput_3.commit();

				}

				connection_tJDBCOutput_3.close();

				resourceMap.put("finish_tJDBCOutput_3", true);

				nb_line_deleted_tJDBCOutput_3 = nb_line_deleted_tJDBCOutput_3
						+ deletedCount_tJDBCOutput_3;
				nb_line_update_tJDBCOutput_3 = nb_line_update_tJDBCOutput_3
						+ updatedCount_tJDBCOutput_3;
				nb_line_inserted_tJDBCOutput_3 = nb_line_inserted_tJDBCOutput_3
						+ insertedCount_tJDBCOutput_3;
				nb_line_rejected_tJDBCOutput_3 = nb_line_rejected_tJDBCOutput_3
						+ rejectedCount_tJDBCOutput_3;

				globalMap.put("tJDBCOutput_3_NB_LINE", nb_line_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_3);

				ok_Hash.put("tJDBCOutput_3", true);
				end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_3 end ] stop
				 */

				/**
				 * [tJavaRow_12 end ] start
				 */

				currentComponent = "tJavaRow_12";

				globalMap.put("tJavaRow_12_NB_LINE", nb_line_tJavaRow_12);

				ok_Hash.put("tJavaRow_12", true);
				end_Hash.put("tJavaRow_12", System.currentTimeMillis());

				/**
				 * [tJavaRow_12 end ] stop
				 */

				/**
				 * [tJDBCOutput_21 end ] start
				 */

				currentComponent = "tJDBCOutput_21";

				int[] status_tJDBCOutput_21 = null;
				int countSum_tJDBCOutput_21 = 0;
				try {
					if (pstmt_tJDBCOutput_21 != null
							&& batchSizeCounter_tJDBCOutput_21 > 0) {

						status_tJDBCOutput_21 = pstmt_tJDBCOutput_21
								.executeBatch();

						for (int countEach_tJDBCOutput_21 : status_tJDBCOutput_21) {
							countSum_tJDBCOutput_21 += (countEach_tJDBCOutput_21 < 0 ? 0
									: countEach_tJDBCOutput_21);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_21 != null
						&& batchSizeCounter_tJDBCOutput_21 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_21 = pstmt_tJDBCOutput_21
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_21 = tmp_batchUpdateCount_tJDBCOutput_21 > countSum_tJDBCOutput_21 ? tmp_batchUpdateCount_tJDBCOutput_21
							: countSum_tJDBCOutput_21;

					updatedCount_tJDBCOutput_21 += tmp_batchUpdateCount_tJDBCOutput_21;

				}
				if (pstmt_tJDBCOutput_21 != null) {

					pstmt_tJDBCOutput_21.close();

				}

				if (commitCounter_tJDBCOutput_21 > 0) {

					connection_tJDBCOutput_21.commit();

				}

				connection_tJDBCOutput_21.close();

				resourceMap.put("finish_tJDBCOutput_21", true);

				nb_line_deleted_tJDBCOutput_21 = nb_line_deleted_tJDBCOutput_21
						+ deletedCount_tJDBCOutput_21;
				nb_line_update_tJDBCOutput_21 = nb_line_update_tJDBCOutput_21
						+ updatedCount_tJDBCOutput_21;
				nb_line_inserted_tJDBCOutput_21 = nb_line_inserted_tJDBCOutput_21
						+ insertedCount_tJDBCOutput_21;
				nb_line_rejected_tJDBCOutput_21 = nb_line_rejected_tJDBCOutput_21
						+ rejectedCount_tJDBCOutput_21;

				globalMap.put("tJDBCOutput_21_NB_LINE", nb_line_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_21);

				ok_Hash.put("tJDBCOutput_21", true);
				end_Hash.put("tJDBCOutput_21", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_21 end ] stop
				 */

				/**
				 * [tJavaRow_21 end ] start
				 */

				currentComponent = "tJavaRow_21";

				globalMap.put("tJavaRow_21_NB_LINE", nb_line_tJavaRow_21);

				ok_Hash.put("tJavaRow_21", true);
				end_Hash.put("tJavaRow_21", System.currentTimeMillis());

				/**
				 * [tJavaRow_21 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_21Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_15"
			globalMap.remove("tHash_Lookup_row48");

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tUniqRow_7 finally ] start
				 */

				currentComponent = "tUniqRow_7";

				/**
				 * [tUniqRow_7 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tJDBCOutput_3 finally ] start
				 */

				currentComponent = "tJDBCOutput_3";

				if (resourceMap.get("finish_tJDBCOutput_3") == null) {
					if (resourceMap.get("conn_tJDBCOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_3) {
							String errorMessage_tJDBCOutput_3 = "failed to close the connection in tJDBCOutput_3 :"
									+ sqlEx_tJDBCOutput_3.getMessage();

							System.err.println(errorMessage_tJDBCOutput_3);
						}
					}
				}

				/**
				 * [tJDBCOutput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_12 finally ] start
				 */

				currentComponent = "tJavaRow_12";

				/**
				 * [tJavaRow_12 finally ] stop
				 */

				/**
				 * [tJDBCOutput_21 finally ] start
				 */

				currentComponent = "tJDBCOutput_21";

				if (resourceMap.get("finish_tJDBCOutput_21") == null) {
					if (resourceMap.get("conn_tJDBCOutput_21") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_21")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_21) {
							String errorMessage_tJDBCOutput_21 = "failed to close the connection in tJDBCOutput_21 :"
									+ sqlEx_tJDBCOutput_21.getMessage();

							System.err.println(errorMessage_tJDBCOutput_21);
						}
					}
				}

				/**
				 * [tJDBCOutput_21 finally ] stop
				 */

				/**
				 * [tJavaRow_21 finally ] start
				 */

				currentComponent = "tJavaRow_21";

				/**
				 * [tJavaRow_21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public void tDie_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_8 begin ] start
				 */

				ok_Hash.put("tDie_8", false);
				start_Hash.put("tDie_8", System.currentTimeMillis());

				currentComponent = "tDie_8";

				int tos_count_tDie_8 = 0;

				/**
				 * [tDie_8 begin ] stop
				 */

				/**
				 * [tDie_8 main ] start
				 */

				currentComponent = "tDie_8";

				globalMap.put("tDie_8_DIE_PRIORITY", 5);
				System.err.println("Error: Patient_Mapping");

				globalMap.put("tDie_8_DIE_MESSAGE", "Error: Patient_Mapping");
				globalMap.put("tDie_8_DIE_MESSAGES", "Error: Patient_Mapping");
				currentComponent = "tDie_8";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_8_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_8++;

				/**
				 * [tDie_8 main ] stop
				 */

				/**
				 * [tDie_8 end ] start
				 */

				currentComponent = "tDie_8";

				ok_Hash.put("tDie_8", true);
				end_Hash.put("tDie_8", System.currentTimeMillis());

				/**
				 * [tDie_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_8 finally ] start
				 */

				currentComponent = "tDie_8";

				/**
				 * [tDie_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_8_SUBPROCESS_STATE", 1);
	}

	public void tDie_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_7 begin ] start
				 */

				ok_Hash.put("tDie_7", false);
				start_Hash.put("tDie_7", System.currentTimeMillis());

				currentComponent = "tDie_7";

				int tos_count_tDie_7 = 0;

				/**
				 * [tDie_7 begin ] stop
				 */

				/**
				 * [tDie_7 main ] start
				 */

				currentComponent = "tDie_7";

				globalMap.put("tDie_7_DIE_PRIORITY", 5);
				System.err.println("Error: Patient_Mapping");

				globalMap.put("tDie_7_DIE_MESSAGE", "Error: Patient_Mapping");
				globalMap.put("tDie_7_DIE_MESSAGES", "Error: Patient_Mapping");
				currentComponent = "tDie_7";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_7_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_7++;

				/**
				 * [tDie_7 main ] stop
				 */

				/**
				 * [tDie_7 end ] start
				 */

				currentComponent = "tDie_7";

				ok_Hash.put("tDie_7", true);
				end_Hash.put("tDie_7", System.currentTimeMillis());

				/**
				 * [tDie_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_7 finally ] start
				 */

				currentComponent = "tDie_7";

				/**
				 * [tDie_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_21Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_21 begin ] start
				 */

				ok_Hash.put("tJava_21", false);
				start_Hash.put("tJava_21", System.currentTimeMillis());

				currentComponent = "tJava_21";

				int tos_count_tJava_21 = 0;

				StatusListener.setSubStatus(StatusListener.getSubPerc(),
						"Patient_Mapping done! " + context.counter
								+ " rows imported.");

				/**
				 * [tJava_21 begin ] stop
				 */

				/**
				 * [tJava_21 main ] start
				 */

				currentComponent = "tJava_21";

				tos_count_tJava_21++;

				/**
				 * [tJava_21 main ] stop
				 */

				/**
				 * [tJava_21 end ] start
				 */

				currentComponent = "tJava_21";

				ok_Hash.put("tJava_21", true);
				end_Hash.put("tJava_21", System.currentTimeMillis());

				/**
				 * [tJava_21 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_21 finally ] start
				 */

				currentComponent = "tJava_21";

				/**
				 * [tJava_21 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_21_SUBPROCESS_STATE", 1);
	}

	public static class row48Struct implements
			routines.system.IPersistableComparableLookupRow<row48Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				result = prime
						* result
						+ ((this.PATIENT_IDE_SOURCE == null) ? 0
								: this.PATIENT_IDE_SOURCE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row48Struct other = (row48Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			if (this.PATIENT_IDE_SOURCE == null) {
				if (other.PATIENT_IDE_SOURCE != null)
					return false;

			} else if (!this.PATIENT_IDE_SOURCE
					.equals(other.PATIENT_IDE_SOURCE))

				return false;

			return true;
		}

		public void copyDataTo(row48Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;

		}

		public void copyKeysDataTo(row48Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATIENT_IDE_SOURCE,
					other.PATIENT_IDE_SOURCE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row48Struct row48 = new row48Struct();

				/**
				 * [tAdvancedHash_row48 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row48", false);
				start_Hash.put("tAdvancedHash_row48",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row48";

				int tos_count_tAdvancedHash_row48 = 0;

				// connection name:row48
				// source node:tJDBCInput_12 -
				// inputs:(after_tFileInputDelimited_6) outputs:(row48,row48) |
				// target node:tAdvancedHash_row48 - inputs:(row48) outputs:()
				// linked node: tMap_15 - inputs:(row1,row48)
				// outputs:(out17,out18)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row48 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row48Struct> getLookup(matchingModeEnum_row48);

				globalMap.put("tHash_Lookup_row48", tHash_Lookup_row48);

				/**
				 * [tAdvancedHash_row48 begin ] stop
				 */

				/**
				 * [tJDBCInput_12 begin ] start
				 */

				ok_Hash.put("tJDBCInput_12", false);
				start_Hash.put("tJDBCInput_12", System.currentTimeMillis());

				currentComponent = "tJDBCInput_12";

				int tos_count_tJDBCInput_12 = 0;

				int nb_line_tJDBCInput_12 = 0;
				java.sql.Connection conn_tJDBCInput_12 = null;
				String driverClass_tJDBCInput_12 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_12);

				String url_tJDBCInput_12 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_12 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_12 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_12 = decryptedPassword_tJDBCInput_12;

				conn_tJDBCInput_12 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_12, dbUser_tJDBCInput_12,
						dbPwd_tJDBCInput_12);

				java.sql.Statement stmt_tJDBCInput_12 = conn_tJDBCInput_12
						.createStatement();

				String dbquery_tJDBCInput_12 = "select PATIENT_IDE, PATIENT_IDE_SOURCE from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_12_QUERY", dbquery_tJDBCInput_12);
				java.sql.ResultSet rs_tJDBCInput_12 = null;
				try {
					rs_tJDBCInput_12 = stmt_tJDBCInput_12
							.executeQuery(dbquery_tJDBCInput_12);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_12 = rs_tJDBCInput_12
							.getMetaData();
					int colQtyInRs_tJDBCInput_12 = rsmd_tJDBCInput_12
							.getColumnCount();

					String tmpContent_tJDBCInput_12 = null;

					while (rs_tJDBCInput_12.next()) {
						nb_line_tJDBCInput_12++;

						if (colQtyInRs_tJDBCInput_12 < 1) {
							row48.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(1);
							if (tmpContent_tJDBCInput_12 != null) {
								row48.PATIENT_IDE = tmpContent_tJDBCInput_12;
							} else {
								row48.PATIENT_IDE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 2) {
							row48.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(2);
							if (tmpContent_tJDBCInput_12 != null) {
								row48.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_12;
							} else {
								row48.PATIENT_IDE_SOURCE = null;
							}
						}

						/**
						 * [tJDBCInput_12 begin ] stop
						 */

						/**
						 * [tJDBCInput_12 main ] start
						 */

						currentComponent = "tJDBCInput_12";

						tos_count_tJDBCInput_12++;

						/**
						 * [tJDBCInput_12 main ] stop
						 */

						/**
						 * [tAdvancedHash_row48 main ] start
						 */

						currentComponent = "tAdvancedHash_row48";

						row48Struct row48_HashRow = new row48Struct();

						row48_HashRow.PATIENT_IDE = row48.PATIENT_IDE;

						row48_HashRow.PATIENT_IDE_SOURCE = row48.PATIENT_IDE_SOURCE;

						tHash_Lookup_row48.put(row48_HashRow);

						tos_count_tAdvancedHash_row48++;

						/**
						 * [tAdvancedHash_row48 main ] stop
						 */

						/**
						 * [tJDBCInput_12 end ] start
						 */

						currentComponent = "tJDBCInput_12";

					}
				} finally {
					if (rs_tJDBCInput_12 != null) {
						rs_tJDBCInput_12.close();
					}
					stmt_tJDBCInput_12.close();

					if (conn_tJDBCInput_12 != null
							&& !conn_tJDBCInput_12.isClosed()) {

						conn_tJDBCInput_12.close();

					}
				}
				globalMap.put("tJDBCInput_12_NB_LINE", nb_line_tJDBCInput_12);

				ok_Hash.put("tJDBCInput_12", true);
				end_Hash.put("tJDBCInput_12", System.currentTimeMillis());

				/**
				 * [tJDBCInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row48 end ] start
				 */

				currentComponent = "tAdvancedHash_row48";

				tHash_Lookup_row48.endPut();

				ok_Hash.put("tAdvancedHash_row48", true);
				end_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row48 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_12 finally ] start
				 */

				currentComponent = "tJDBCInput_12";

				/**
				 * [tJDBCInput_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row48 finally ] start
				 */

				currentComponent = "tAdvancedHash_row48";

				/**
				 * [tAdvancedHash_row48 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements
			routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row39Struct other = (row39Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row39Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row39Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out6Struct implements
			routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out7Struct implements
			routines.system.IPersistableRow<out7Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_8Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_8Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_6Process(globalMap);

				row8Struct row8 = new row8Struct();
				row28Struct row28 = new row28Struct();
				out6Struct out6 = new out6Struct();
				row19Struct row19 = new row19Struct();
				out7Struct out7 = new out7Struct();
				row39Struct row39 = new row39Struct();

				/**
				 * [tJavaRow_14 begin ] start
				 */

				ok_Hash.put("tJavaRow_14", false);
				start_Hash.put("tJavaRow_14", System.currentTimeMillis());

				currentComponent = "tJavaRow_14";

				int tos_count_tJavaRow_14 = 0;

				int nb_line_tJavaRow_14 = 0;

				/**
				 * [tJavaRow_14 begin ] stop
				 */

				/**
				 * [tJDBCOutput_5 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_5", false);
				start_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_5";

				int tos_count_tJDBCOutput_5 = 0;

				int nb_line_tJDBCOutput_5 = 0;
				int nb_line_update_tJDBCOutput_5 = 0;
				int nb_line_inserted_tJDBCOutput_5 = 0;
				int nb_line_deleted_tJDBCOutput_5 = 0;
				int nb_line_rejected_tJDBCOutput_5 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_5 = 0;

				int deletedCount_tJDBCOutput_5 = 0;
				int updatedCount_tJDBCOutput_5 = 0;
				int insertedCount_tJDBCOutput_5 = 0;
				int rejectedCount_tJDBCOutput_5 = 0;

				boolean whetherReject_tJDBCOutput_5 = false;

				java.sql.Connection connection_tJDBCOutput_5 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_5 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_5 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_5 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_5,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_5);

				resourceMap.put("conn_tJDBCOutput_5", connection_tJDBCOutput_5);
				connection_tJDBCOutput_5.setAutoCommit(false);
				int commitEvery_tJDBCOutput_5 = 500000;
				int commitCounter_tJDBCOutput_5 = 0;
				int batchSize_tJDBCOutput_5 = 250000;
				int batchSizeCounter_tJDBCOutput_5 = 0;

				String insert_tJDBCOutput_5 = "INSERT INTO "
						+ context.currentTable
						+ " (CONCEPT_PATH,CONCEPT_CD,NAME_CHAR,CONCEPT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_5 = connection_tJDBCOutput_5
						.prepareStatement(insert_tJDBCOutput_5);

				/**
				 * [tJDBCOutput_5 begin ] stop
				 */

				/**
				 * [tJavaRow_16 begin ] start
				 */

				ok_Hash.put("tJavaRow_16", false);
				start_Hash.put("tJavaRow_16", System.currentTimeMillis());

				currentComponent = "tJavaRow_16";

				int tos_count_tJavaRow_16 = 0;

				int nb_line_tJavaRow_16 = 0;

				/**
				 * [tJavaRow_16 begin ] stop
				 */

				/**
				 * [tJDBCOutput_11 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_11", false);
				start_Hash.put("tJDBCOutput_11", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_11";

				int tos_count_tJDBCOutput_11 = 0;

				int updateKeyCount_tJDBCOutput_11 = 1;
				if (updateKeyCount_tJDBCOutput_11 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_11 = 0;
				int nb_line_update_tJDBCOutput_11 = 0;
				int nb_line_inserted_tJDBCOutput_11 = 0;
				int nb_line_deleted_tJDBCOutput_11 = 0;
				int nb_line_rejected_tJDBCOutput_11 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_11 = 0;

				int deletedCount_tJDBCOutput_11 = 0;
				int updatedCount_tJDBCOutput_11 = 0;
				int insertedCount_tJDBCOutput_11 = 0;
				int rejectedCount_tJDBCOutput_11 = 0;

				boolean whetherReject_tJDBCOutput_11 = false;

				java.sql.Connection connection_tJDBCOutput_11 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_11 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_11 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_11 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_11,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_11);

				resourceMap.put("conn_tJDBCOutput_11",
						connection_tJDBCOutput_11);
				connection_tJDBCOutput_11.setAutoCommit(false);
				int commitEvery_tJDBCOutput_11 = 500000;
				int commitCounter_tJDBCOutput_11 = 0;
				int batchSize_tJDBCOutput_11 = 250000;
				int batchSizeCounter_tJDBCOutput_11 = 0;

				String update_tJDBCOutput_11 = "UPDATE "
						+ context.currentTable
						+ " SET CONCEPT_CD = ?,NAME_CHAR = ?,CONCEPT_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE CONCEPT_PATH = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_11 = connection_tJDBCOutput_11
						.prepareStatement(update_tJDBCOutput_11);

				/**
				 * [tJDBCOutput_11 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) globalMap
						.get("tHash_Lookup_row38"));

				row38Struct row38HashKey = new row38Struct();
				row38Struct row38Default = new row38Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out6Struct out6_tmp = new out6Struct();
				out7Struct out7_tmp = new out7Struct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CONCEPT_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.CONCEPT_PATH == null) ? 0
											: this.CONCEPT_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.CONCEPT_PATH == null) {
							if (other.CONCEPT_PATH != null)
								return false;

						} else if (!this.CONCEPT_PATH
								.equals(other.CONCEPT_PATH))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "concept_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row8 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row8 = new row8Struct();
						try {

							char fieldSeparator_tFileInputDelimited_8_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_8_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.CONCEPT_PATH = null;

								row8.CONCEPT_CD = null;

								row8.NAME_CHAR = null;

								row8.CONCEPT_BLOB = null;

								row8.UPDATE_DATE = null;

								row8.DOWNLOAD_DATE = null;

								row8.IMPORT_DATE = null;

								row8.SOURCESYSTEM_CD = null;

								row8.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 2;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.NAME_CHAR = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 3;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_BLOB = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 4;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.UPDATE_DATE = null;
									}

								} else {
									row8.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 5;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.DOWNLOAD_DATE = null;
									}

								} else {
									row8.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 6;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.IMPORT_DATE = null;
									}

								} else {
									row8.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 7;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.SOURCESYSTEM_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 8;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);

									} else {
										row8.UPLOAD_ID = null;
									}

								} else {
									row8.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							row28 = null;
							finder_tUniqRow_1.CONCEPT_PATH = row8.CONCEPT_PATH;
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								new_tUniqRow_1.CONCEPT_PATH = row8.CONCEPT_PATH;

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row28 == null) {

									row28 = new row28Struct();
								}
								row28.CONCEPT_PATH = row8.CONCEPT_PATH;
								row28.CONCEPT_CD = row8.CONCEPT_CD;
								row28.NAME_CHAR = row8.NAME_CHAR;
								row28.CONCEPT_BLOB = row8.CONCEPT_BLOB;
								row28.UPDATE_DATE = row8.UPDATE_DATE;
								row28.DOWNLOAD_DATE = row8.DOWNLOAD_DATE;
								row28.IMPORT_DATE = row8.IMPORT_DATE;
								row28.SOURCESYSTEM_CD = row8.SOURCESYSTEM_CD;
								row28.UPLOAD_ID = row8.UPLOAD_ID;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */
							// Start of branch "row28"
							if (row28 != null) {

								/**
								 * [tMap_9 main ] start
								 */

								currentComponent = "tMap_9";

								boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_9 = false;
								boolean mainRowRejected_tMap_9 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row38"
								// /////////////////////////////////////////////

								boolean forceLooprow38 = false;

								row38Struct row38ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_9 = false;

									row38HashKey.CONCEPT_PATH = row28.CONCEPT_PATH;

									row38HashKey.hashCodeDirty = true;

									tHash_Lookup_row38.lookup(row38HashKey);

									if (!tHash_Lookup_row38.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_9 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row38 != null
										&& tHash_Lookup_row38
												.getCount(row38HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.CONCEPT_PATH = '"
									// + row38HashKey.CONCEPT_PATH + "'");
								} // G 071

								row38Struct row38 = null;

								row38Struct fromLookup_row38 = null;
								row38 = row38Default;

								if (tHash_Lookup_row38 != null
										&& tHash_Lookup_row38.hasNext()) { // G
																			// 099

									fromLookup_row38 = tHash_Lookup_row38
											.next();

								} // G 099

								if (fromLookup_row38 != null) {
									row38 = fromLookup_row38;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
									// ###############################
									// # Output tables

									out7 = null;
									out6 = null;

									if (!rejectedInnerJoin_tMap_9) {

										// # Output table : 'out7'
										out7_tmp.CONCEPT_PATH = row28.CONCEPT_PATH;
										out7_tmp.CONCEPT_CD = row28.CONCEPT_CD;
										out7_tmp.NAME_CHAR = row28.NAME_CHAR;
										out7_tmp.CONCEPT_BLOB = row28.CONCEPT_BLOB;
										out7_tmp.UPDATE_DATE = row28.UPDATE_DATE;
										out7_tmp.DOWNLOAD_DATE = row28.DOWNLOAD_DATE;
										out7_tmp.IMPORT_DATE = row28.IMPORT_DATE;
										out7_tmp.SOURCESYSTEM_CD = row28.SOURCESYSTEM_CD;
										out7_tmp.UPLOAD_ID = row28.UPLOAD_ID;
										out7 = out7_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out6'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_9) {
										out6_tmp.CONCEPT_PATH = row28.CONCEPT_PATH;
										out6_tmp.CONCEPT_CD = row28.CONCEPT_CD;
										out6_tmp.NAME_CHAR = row28.NAME_CHAR;
										out6_tmp.CONCEPT_BLOB = row28.CONCEPT_BLOB;
										out6_tmp.UPDATE_DATE = row28.UPDATE_DATE;
										out6_tmp.DOWNLOAD_DATE = row28.DOWNLOAD_DATE;
										out6_tmp.IMPORT_DATE = row28.IMPORT_DATE;
										out6_tmp.SOURCESYSTEM_CD = row28.SOURCESYSTEM_CD;
										out6_tmp.UPLOAD_ID = row28.UPLOAD_ID;
										out6 = out6_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_9 = false;

								tos_count_tMap_9++;

								/**
								 * [tMap_9 main ] stop
								 */
								// Start of branch "out6"
								if (out6 != null) {

									/**
									 * [tJDBCOutput_5 main ] start
									 */

									currentComponent = "tJDBCOutput_5";

									row19 = null;
									whetherReject_tJDBCOutput_5 = false;
									if (out6.CONCEPT_PATH == null) {
										pstmt_tJDBCOutput_5.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_5.setString(1,
												out6.CONCEPT_PATH);
									}

									if (out6.CONCEPT_CD == null) {
										pstmt_tJDBCOutput_5.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_5.setString(2,
												out6.CONCEPT_CD);
									}

									if (out6.NAME_CHAR == null) {
										pstmt_tJDBCOutput_5.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_5.setString(3,
												out6.NAME_CHAR);
									}

									if (out6.CONCEPT_BLOB == null) {
										pstmt_tJDBCOutput_5.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_5.setString(4,
												out6.CONCEPT_BLOB);
									}

									if (out6.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_5.setTimestamp(
												5,
												new java.sql.Timestamp(
														out6.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_5.setNull(5,
												java.sql.Types.DATE);
									}

									if (out6.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_5.setTimestamp(
												6,
												new java.sql.Timestamp(
														out6.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_5.setNull(6,
												java.sql.Types.DATE);
									}

									if (out6.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_5.setTimestamp(
												7,
												new java.sql.Timestamp(
														out6.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_5.setNull(7,
												java.sql.Types.DATE);
									}

									if (out6.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_5.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_5.setString(8,
												out6.SOURCESYSTEM_CD);
									}

									if (out6.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_5.setNull(9,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_5.setInt(9,
												out6.UPLOAD_ID);
									}

									pstmt_tJDBCOutput_5.addBatch();
									nb_line_tJDBCOutput_5++;

									batchSizeCounter_tJDBCOutput_5++;
									if (!whetherReject_tJDBCOutput_5) {
										row19 = new row19Struct();
										row19.CONCEPT_PATH = out6.CONCEPT_PATH;
										row19.CONCEPT_CD = out6.CONCEPT_CD;
										row19.NAME_CHAR = out6.NAME_CHAR;
										row19.CONCEPT_BLOB = out6.CONCEPT_BLOB;
										row19.UPDATE_DATE = out6.UPDATE_DATE;
										row19.DOWNLOAD_DATE = out6.DOWNLOAD_DATE;
										row19.IMPORT_DATE = out6.IMPORT_DATE;
										row19.SOURCESYSTEM_CD = out6.SOURCESYSTEM_CD;
										row19.UPLOAD_ID = out6.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_5 <= batchSizeCounter_tJDBCOutput_5) {
										int[] status_tJDBCOutput_5 = null;
										int countSum_tJDBCOutput_5 = 0;
										try {
											batchSizeCounter_tJDBCOutput_5 = 0;

											status_tJDBCOutput_5 = pstmt_tJDBCOutput_5
													.executeBatch();

											for (int countEach_tJDBCOutput_5 : status_tJDBCOutput_5) {
												countSum_tJDBCOutput_5 += (countEach_tJDBCOutput_5 < 0 ? 0
														: countEach_tJDBCOutput_5);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_5 = pstmt_tJDBCOutput_5
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_5 = tmp_batchUpdateCount_tJDBCOutput_5 > countSum_tJDBCOutput_5 ? tmp_batchUpdateCount_tJDBCOutput_5
												: countSum_tJDBCOutput_5;

										insertedCount_tJDBCOutput_5 += tmp_batchUpdateCount_tJDBCOutput_5;

									}

									commitCounter_tJDBCOutput_5++;
									if (commitEvery_tJDBCOutput_5 <= commitCounter_tJDBCOutput_5) {

										connection_tJDBCOutput_5.commit();
										commitCounter_tJDBCOutput_5 = 0;
									}

									tos_count_tJDBCOutput_5++;

									/**
									 * [tJDBCOutput_5 main ] stop
									 */
									// Start of branch "row19"
									if (row19 != null) {

										/**
										 * [tJavaRow_14 main ] start
										 */

										currentComponent = "tJavaRow_14";

										context.counter++;

										if (context.counter % 1000 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Concept_Dimension: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_14++;

										tos_count_tJavaRow_14++;

										/**
										 * [tJavaRow_14 main ] stop
										 */

									} // End of branch "row19"

								} // End of branch "out6"

								// Start of branch "out7"
								if (out7 != null) {

									/**
									 * [tJDBCOutput_11 main ] start
									 */

									currentComponent = "tJDBCOutput_11";

									row39 = null;
									whetherReject_tJDBCOutput_11 = false;
									if (out7.CONCEPT_CD == null) {
										pstmt_tJDBCOutput_11.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_11.setString(1,
												out7.CONCEPT_CD);
									}

									if (out7.NAME_CHAR == null) {
										pstmt_tJDBCOutput_11.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_11.setString(2,
												out7.NAME_CHAR);
									}

									if (out7.CONCEPT_BLOB == null) {
										pstmt_tJDBCOutput_11.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_11.setString(3,
												out7.CONCEPT_BLOB);
									}

									if (out7.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_11.setTimestamp(
												4,
												new java.sql.Timestamp(
														out7.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_11.setNull(4,
												java.sql.Types.DATE);
									}

									if (out7.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_11.setTimestamp(
												5,
												new java.sql.Timestamp(
														out7.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_11.setNull(5,
												java.sql.Types.DATE);
									}

									if (out7.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_11.setTimestamp(
												6,
												new java.sql.Timestamp(
														out7.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_11.setNull(6,
												java.sql.Types.DATE);
									}

									if (out7.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_11.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_11.setString(7,
												out7.SOURCESYSTEM_CD);
									}

									if (out7.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_11.setNull(8,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_11.setInt(8,
												out7.UPLOAD_ID);
									}

									if (out7.CONCEPT_PATH == null) {
										pstmt_tJDBCOutput_11.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_11.setString(9,
												out7.CONCEPT_PATH);
									}

									pstmt_tJDBCOutput_11.addBatch();
									nb_line_tJDBCOutput_11++;

									batchSizeCounter_tJDBCOutput_11++;
									if (!whetherReject_tJDBCOutput_11) {
										row39 = new row39Struct();
										row39.CONCEPT_PATH = out7.CONCEPT_PATH;
										row39.CONCEPT_CD = out7.CONCEPT_CD;
										row39.NAME_CHAR = out7.NAME_CHAR;
										row39.CONCEPT_BLOB = out7.CONCEPT_BLOB;
										row39.UPDATE_DATE = out7.UPDATE_DATE;
										row39.DOWNLOAD_DATE = out7.DOWNLOAD_DATE;
										row39.IMPORT_DATE = out7.IMPORT_DATE;
										row39.SOURCESYSTEM_CD = out7.SOURCESYSTEM_CD;
										row39.UPLOAD_ID = out7.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_11 <= batchSizeCounter_tJDBCOutput_11) {
										int[] status_tJDBCOutput_11 = null;
										int countSum_tJDBCOutput_11 = 0;
										try {
											batchSizeCounter_tJDBCOutput_11 = 0;

											status_tJDBCOutput_11 = pstmt_tJDBCOutput_11
													.executeBatch();

											for (int countEach_tJDBCOutput_11 : status_tJDBCOutput_11) {
												countSum_tJDBCOutput_11 += (countEach_tJDBCOutput_11 < 0 ? 0
														: countEach_tJDBCOutput_11);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_11 = pstmt_tJDBCOutput_11
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_11 = tmp_batchUpdateCount_tJDBCOutput_11 > countSum_tJDBCOutput_11 ? tmp_batchUpdateCount_tJDBCOutput_11
												: countSum_tJDBCOutput_11;

										updatedCount_tJDBCOutput_11 += tmp_batchUpdateCount_tJDBCOutput_11;

									}

									commitCounter_tJDBCOutput_11++;
									if (commitEvery_tJDBCOutput_11 <= commitCounter_tJDBCOutput_11) {

										connection_tJDBCOutput_11.commit();
										commitCounter_tJDBCOutput_11 = 0;
									}

									tos_count_tJDBCOutput_11++;

									/**
									 * [tJDBCOutput_11 main ] stop
									 */
									// Start of branch "row39"
									if (row39 != null) {

										/**
										 * [tJavaRow_16 main ] start
										 */

										currentComponent = "tJavaRow_16";

										context.counter++;

										if (context.counter % 1000 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Concept_Dimension: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_16++;

										tos_count_tJavaRow_16++;

										/**
										 * [tJavaRow_16 main ] stop
										 */

									} // End of branch "row39"

								} // End of branch "out7"

							} // End of branch "row28"

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}

				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row38 != null) {
					tHash_Lookup_row38.endGet();
				}
				globalMap.remove("tHash_Lookup_row38");

				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tJDBCOutput_5 end ] start
				 */

				currentComponent = "tJDBCOutput_5";

				int[] status_tJDBCOutput_5 = null;
				int countSum_tJDBCOutput_5 = 0;
				try {
					if (pstmt_tJDBCOutput_5 != null
							&& batchSizeCounter_tJDBCOutput_5 > 0) {

						status_tJDBCOutput_5 = pstmt_tJDBCOutput_5
								.executeBatch();

						for (int countEach_tJDBCOutput_5 : status_tJDBCOutput_5) {
							countSum_tJDBCOutput_5 += (countEach_tJDBCOutput_5 < 0 ? 0
									: countEach_tJDBCOutput_5);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_5 != null
						&& batchSizeCounter_tJDBCOutput_5 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_5 = pstmt_tJDBCOutput_5
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_5 = tmp_batchUpdateCount_tJDBCOutput_5 > countSum_tJDBCOutput_5 ? tmp_batchUpdateCount_tJDBCOutput_5
							: countSum_tJDBCOutput_5;

					insertedCount_tJDBCOutput_5 += tmp_batchUpdateCount_tJDBCOutput_5;

				}
				if (pstmt_tJDBCOutput_5 != null) {

					pstmt_tJDBCOutput_5.close();

				}

				if (commitCounter_tJDBCOutput_5 > 0) {

					connection_tJDBCOutput_5.commit();

				}

				connection_tJDBCOutput_5.close();

				resourceMap.put("finish_tJDBCOutput_5", true);

				nb_line_deleted_tJDBCOutput_5 = nb_line_deleted_tJDBCOutput_5
						+ deletedCount_tJDBCOutput_5;
				nb_line_update_tJDBCOutput_5 = nb_line_update_tJDBCOutput_5
						+ updatedCount_tJDBCOutput_5;
				nb_line_inserted_tJDBCOutput_5 = nb_line_inserted_tJDBCOutput_5
						+ insertedCount_tJDBCOutput_5;
				nb_line_rejected_tJDBCOutput_5 = nb_line_rejected_tJDBCOutput_5
						+ rejectedCount_tJDBCOutput_5;

				globalMap.put("tJDBCOutput_5_NB_LINE", nb_line_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_5);

				ok_Hash.put("tJDBCOutput_5", true);
				end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_5 end ] stop
				 */

				/**
				 * [tJavaRow_14 end ] start
				 */

				currentComponent = "tJavaRow_14";

				globalMap.put("tJavaRow_14_NB_LINE", nb_line_tJavaRow_14);

				ok_Hash.put("tJavaRow_14", true);
				end_Hash.put("tJavaRow_14", System.currentTimeMillis());

				/**
				 * [tJavaRow_14 end ] stop
				 */

				/**
				 * [tJDBCOutput_11 end ] start
				 */

				currentComponent = "tJDBCOutput_11";

				int[] status_tJDBCOutput_11 = null;
				int countSum_tJDBCOutput_11 = 0;
				try {
					if (pstmt_tJDBCOutput_11 != null
							&& batchSizeCounter_tJDBCOutput_11 > 0) {

						status_tJDBCOutput_11 = pstmt_tJDBCOutput_11
								.executeBatch();

						for (int countEach_tJDBCOutput_11 : status_tJDBCOutput_11) {
							countSum_tJDBCOutput_11 += (countEach_tJDBCOutput_11 < 0 ? 0
									: countEach_tJDBCOutput_11);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_11 != null
						&& batchSizeCounter_tJDBCOutput_11 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_11 = pstmt_tJDBCOutput_11
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_11 = tmp_batchUpdateCount_tJDBCOutput_11 > countSum_tJDBCOutput_11 ? tmp_batchUpdateCount_tJDBCOutput_11
							: countSum_tJDBCOutput_11;

					updatedCount_tJDBCOutput_11 += tmp_batchUpdateCount_tJDBCOutput_11;

				}
				if (pstmt_tJDBCOutput_11 != null) {

					pstmt_tJDBCOutput_11.close();

				}

				if (commitCounter_tJDBCOutput_11 > 0) {

					connection_tJDBCOutput_11.commit();

				}

				connection_tJDBCOutput_11.close();

				resourceMap.put("finish_tJDBCOutput_11", true);

				nb_line_deleted_tJDBCOutput_11 = nb_line_deleted_tJDBCOutput_11
						+ deletedCount_tJDBCOutput_11;
				nb_line_update_tJDBCOutput_11 = nb_line_update_tJDBCOutput_11
						+ updatedCount_tJDBCOutput_11;
				nb_line_inserted_tJDBCOutput_11 = nb_line_inserted_tJDBCOutput_11
						+ insertedCount_tJDBCOutput_11;
				nb_line_rejected_tJDBCOutput_11 = nb_line_rejected_tJDBCOutput_11
						+ rejectedCount_tJDBCOutput_11;

				globalMap.put("tJDBCOutput_11_NB_LINE", nb_line_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_11);

				ok_Hash.put("tJDBCOutput_11", true);
				end_Hash.put("tJDBCOutput_11", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_11 end ] stop
				 */

				/**
				 * [tJavaRow_16 end ] start
				 */

				currentComponent = "tJavaRow_16";

				globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

				ok_Hash.put("tJavaRow_16", true);
				end_Hash.put("tJavaRow_16", System.currentTimeMillis());

				/**
				 * [tJavaRow_16 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_23Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row38");

			try {

				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tJDBCOutput_5 finally ] start
				 */

				currentComponent = "tJDBCOutput_5";

				if (resourceMap.get("finish_tJDBCOutput_5") == null) {
					if (resourceMap.get("conn_tJDBCOutput_5") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_5")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_5) {
							String errorMessage_tJDBCOutput_5 = "failed to close the connection in tJDBCOutput_5 :"
									+ sqlEx_tJDBCOutput_5.getMessage();

							System.err.println(errorMessage_tJDBCOutput_5);
						}
					}
				}

				/**
				 * [tJDBCOutput_5 finally ] stop
				 */

				/**
				 * [tJavaRow_14 finally ] start
				 */

				currentComponent = "tJavaRow_14";

				/**
				 * [tJavaRow_14 finally ] stop
				 */

				/**
				 * [tJDBCOutput_11 finally ] start
				 */

				currentComponent = "tJDBCOutput_11";

				if (resourceMap.get("finish_tJDBCOutput_11") == null) {
					if (resourceMap.get("conn_tJDBCOutput_11") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_11")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_11) {
							String errorMessage_tJDBCOutput_11 = "failed to close the connection in tJDBCOutput_11 :"
									+ sqlEx_tJDBCOutput_11.getMessage();

							System.err.println(errorMessage_tJDBCOutput_11);
						}
					}
				}

				/**
				 * [tJDBCOutput_11 finally ] stop
				 */

				/**
				 * [tJavaRow_16 finally ] start
				 */

				currentComponent = "tJavaRow_16";

				/**
				 * [tJavaRow_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public void tDie_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_12 begin ] start
				 */

				ok_Hash.put("tDie_12", false);
				start_Hash.put("tDie_12", System.currentTimeMillis());

				currentComponent = "tDie_12";

				int tos_count_tDie_12 = 0;

				/**
				 * [tDie_12 begin ] stop
				 */

				/**
				 * [tDie_12 main ] start
				 */

				currentComponent = "tDie_12";

				globalMap.put("tDie_12_DIE_PRIORITY", 5);
				System.err.println("Error: Concept_Dimension");

				globalMap
						.put("tDie_12_DIE_MESSAGE", "Error: Concept_Dimension");
				globalMap.put("tDie_12_DIE_MESSAGES",
						"Error: Concept_Dimension");
				currentComponent = "tDie_12";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_12_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_12++;

				/**
				 * [tDie_12 main ] stop
				 */

				/**
				 * [tDie_12 end ] start
				 */

				currentComponent = "tDie_12";

				ok_Hash.put("tDie_12", true);
				end_Hash.put("tDie_12", System.currentTimeMillis());

				/**
				 * [tDie_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_12 finally ] start
				 */

				currentComponent = "tDie_12";

				/**
				 * [tDie_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_12_SUBPROCESS_STATE", 1);
	}

	public void tDie_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_11 begin ] start
				 */

				ok_Hash.put("tDie_11", false);
				start_Hash.put("tDie_11", System.currentTimeMillis());

				currentComponent = "tDie_11";

				int tos_count_tDie_11 = 0;

				/**
				 * [tDie_11 begin ] stop
				 */

				/**
				 * [tDie_11 main ] start
				 */

				currentComponent = "tDie_11";

				globalMap.put("tDie_11_DIE_PRIORITY", 5);
				System.err.println("Error: Concept_Dimension");

				globalMap
						.put("tDie_11_DIE_MESSAGE", "Error: Concept_Dimension");
				globalMap.put("tDie_11_DIE_MESSAGES",
						"Error: Concept_Dimension");
				currentComponent = "tDie_11";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_11_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_11++;

				/**
				 * [tDie_11 main ] stop
				 */

				/**
				 * [tDie_11 end ] start
				 */

				currentComponent = "tDie_11";

				ok_Hash.put("tDie_11", true);
				end_Hash.put("tDie_11", System.currentTimeMillis());

				/**
				 * [tDie_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_11 finally ] start
				 */

				currentComponent = "tDie_11";

				/**
				 * [tDie_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_11_SUBPROCESS_STATE", 1);
	}

	public void tJava_23Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_23 begin ] start
				 */

				ok_Hash.put("tJava_23", false);
				start_Hash.put("tJava_23", System.currentTimeMillis());

				currentComponent = "tJava_23";

				int tos_count_tJava_23 = 0;

				StatusListener.setSubStatus(StatusListener.getSubPerc(),
						"Concept_Dimension done! " + context.counter
								+ " rows imported.");

				/**
				 * [tJava_23 begin ] stop
				 */

				/**
				 * [tJava_23 main ] start
				 */

				currentComponent = "tJava_23";

				tos_count_tJava_23++;

				/**
				 * [tJava_23 main ] stop
				 */

				/**
				 * [tJava_23 end ] start
				 */

				currentComponent = "tJava_23";

				ok_Hash.put("tJava_23", true);
				end_Hash.put("tJava_23", System.currentTimeMillis());

				/**
				 * [tJava_23 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_23 finally ] start
				 */

				currentComponent = "tJava_23";

				/**
				 * [tJava_23 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_23_SUBPROCESS_STATE", 1);
	}

	public static class row38Struct implements
			routines.system.IPersistableComparableLookupRow<row38Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row38Struct other = (row38Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row38Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		public void copyKeysDataTo(row38Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();

				/**
				 * [tAdvancedHash_row38 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row38", false);
				start_Hash.put("tAdvancedHash_row38",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row38";

				int tos_count_tAdvancedHash_row38 = 0;

				// connection name:row38
				// source node:tJDBCInput_6 -
				// inputs:(after_tFileInputDelimited_8) outputs:(row38,row38) |
				// target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
				// linked node: tMap_9 - inputs:(row28,row38)
				// outputs:(out6,out7)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row38Struct> getLookup(matchingModeEnum_row38);

				globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);

				/**
				 * [tAdvancedHash_row38 begin ] stop
				 */

				/**
				 * [tJDBCInput_6 begin ] start
				 */

				ok_Hash.put("tJDBCInput_6", false);
				start_Hash.put("tJDBCInput_6", System.currentTimeMillis());

				currentComponent = "tJDBCInput_6";

				int tos_count_tJDBCInput_6 = 0;

				int nb_line_tJDBCInput_6 = 0;
				java.sql.Connection conn_tJDBCInput_6 = null;
				String driverClass_tJDBCInput_6 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_6);

				String url_tJDBCInput_6 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_6 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_6 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_6 = decryptedPassword_tJDBCInput_6;

				conn_tJDBCInput_6 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_6, dbUser_tJDBCInput_6,
						dbPwd_tJDBCInput_6);

				java.sql.Statement stmt_tJDBCInput_6 = conn_tJDBCInput_6
						.createStatement();

				String dbquery_tJDBCInput_6 = "select CONCEPT_PATH from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_6_QUERY", dbquery_tJDBCInput_6);
				java.sql.ResultSet rs_tJDBCInput_6 = null;
				try {
					rs_tJDBCInput_6 = stmt_tJDBCInput_6
							.executeQuery(dbquery_tJDBCInput_6);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_6 = rs_tJDBCInput_6
							.getMetaData();
					int colQtyInRs_tJDBCInput_6 = rsmd_tJDBCInput_6
							.getColumnCount();

					String tmpContent_tJDBCInput_6 = null;

					while (rs_tJDBCInput_6.next()) {
						nb_line_tJDBCInput_6++;

						if (colQtyInRs_tJDBCInput_6 < 1) {
							row38.CONCEPT_PATH = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(1);
							if (tmpContent_tJDBCInput_6 != null) {
								row38.CONCEPT_PATH = tmpContent_tJDBCInput_6;
							} else {
								row38.CONCEPT_PATH = null;
							}
						}

						/**
						 * [tJDBCInput_6 begin ] stop
						 */

						/**
						 * [tJDBCInput_6 main ] start
						 */

						currentComponent = "tJDBCInput_6";

						tos_count_tJDBCInput_6++;

						/**
						 * [tJDBCInput_6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row38 main ] start
						 */

						currentComponent = "tAdvancedHash_row38";

						row38Struct row38_HashRow = new row38Struct();

						row38_HashRow.CONCEPT_PATH = row38.CONCEPT_PATH;

						tHash_Lookup_row38.put(row38_HashRow);

						tos_count_tAdvancedHash_row38++;

						/**
						 * [tAdvancedHash_row38 main ] stop
						 */

						/**
						 * [tJDBCInput_6 end ] start
						 */

						currentComponent = "tJDBCInput_6";

					}
				} finally {
					if (rs_tJDBCInput_6 != null) {
						rs_tJDBCInput_6.close();
					}
					stmt_tJDBCInput_6.close();

					if (conn_tJDBCInput_6 != null
							&& !conn_tJDBCInput_6.isClosed()) {

						conn_tJDBCInput_6.close();

					}
				}
				globalMap.put("tJDBCInput_6_NB_LINE", nb_line_tJDBCInput_6);

				ok_Hash.put("tJDBCInput_6", true);
				end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

				/**
				 * [tJDBCInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row38 end ] start
				 */

				currentComponent = "tAdvancedHash_row38";

				tHash_Lookup_row38.endPut();

				ok_Hash.put("tAdvancedHash_row38", true);
				end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row38 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_6 finally ] start
				 */

				currentComponent = "tJDBCInput_6";

				/**
				 * [tJDBCInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row38 finally ] start
				 */

				currentComponent = "tAdvancedHash_row38";

				/**
				 * [tAdvancedHash_row38 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				result = prime
						* result
						+ ((this.PROVIDER_ID == null) ? 0 : this.PROVIDER_ID
								.hashCode());

				result = prime
						* result
						+ ((this.START_DATE == null) ? 0 : this.START_DATE
								.hashCode());

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				result = prime * result + (int) this.INSTANCE_NUM;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row45Struct other = (row45Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;

			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

				return false;

			if (this.PROVIDER_ID == null) {
				if (other.PROVIDER_ID != null)
					return false;

			} else if (!this.PROVIDER_ID.equals(other.PROVIDER_ID))

				return false;

			if (this.START_DATE == null) {
				if (other.START_DATE != null)
					return false;

			} else if (!this.START_DATE.equals(other.START_DATE))

				return false;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;

			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

				return false;

			if (this.INSTANCE_NUM != other.INSTANCE_NUM)
				return false;

			return true;
		}

		public void copyDataTo(row45Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row45Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PROVIDER_ID,
					other.PROVIDER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.START_DATE,
					other.START_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.INSTANCE_NUM,
					other.INSTANCE_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out14Struct implements
			routines.system.IPersistableRow<out14Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row51Struct implements
			routines.system.IPersistableRow<row51Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_9Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_9Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_3Process(globalMap);

				row10Struct row10 = new row10Struct();
				row51Struct row51 = new row51Struct();
				row23Struct row23 = new row23Struct();
				out3Struct out3 = new out3Struct();
				row25Struct row25 = new row25Struct();
				out14Struct out14 = new out14Struct();
				row45Struct row45 = new row45Struct();

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());

				currentComponent = "tJavaRow_9";

				int tos_count_tJavaRow_9 = 0;

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_1 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_1 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_1 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_1,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_1);

				resourceMap.put("conn_tJDBCOutput_1", connection_tJDBCOutput_1);
				connection_tJDBCOutput_1.setAutoCommit(false);
				int commitEvery_tJDBCOutput_1 = 500000;
				int commitCounter_tJDBCOutput_1 = 0;
				int batchSize_tJDBCOutput_1 = 250000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ context.currentTable
						+ " (ENCOUNTER_NUM,PATIENT_NUM,CONCEPT_CD,PROVIDER_ID,START_DATE,MODIFIER_CD,INSTANCE_NUM,VALTYPE_CD,TVAL_CHAR,NVAL_NUM,VALUEFLAG_CD,QUANTITY_NUM,UNITS_CD,END_DATE,LOCATION_CD,OBSERVATION_BLOB,CONFIDENCE_NUM,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);

				StringBuffer query_tJDBCOutput_1 = null;

				String[] insertSQLSplits_tJDBCOutput_1 = insert_tJDBCOutput_1
						.split("\\?");

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tJavaRow_19 begin ] start
				 */

				ok_Hash.put("tJavaRow_19", false);
				start_Hash.put("tJavaRow_19", System.currentTimeMillis());

				currentComponent = "tJavaRow_19";

				int tos_count_tJavaRow_19 = 0;

				int nb_line_tJavaRow_19 = 0;

				/**
				 * [tJavaRow_19 begin ] stop
				 */

				/**
				 * [tJDBCOutput_19 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_19", false);
				start_Hash.put("tJDBCOutput_19", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_19";

				int tos_count_tJDBCOutput_19 = 0;

				int updateKeyCount_tJDBCOutput_19 = 6;
				if (updateKeyCount_tJDBCOutput_19 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_19 = 0;
				int nb_line_update_tJDBCOutput_19 = 0;
				int nb_line_inserted_tJDBCOutput_19 = 0;
				int nb_line_deleted_tJDBCOutput_19 = 0;
				int nb_line_rejected_tJDBCOutput_19 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_19 = 0;

				int deletedCount_tJDBCOutput_19 = 0;
				int updatedCount_tJDBCOutput_19 = 0;
				int insertedCount_tJDBCOutput_19 = 0;
				int rejectedCount_tJDBCOutput_19 = 0;

				boolean whetherReject_tJDBCOutput_19 = false;

				java.sql.Connection connection_tJDBCOutput_19 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_19 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_19 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_19 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_19,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_19);

				resourceMap.put("conn_tJDBCOutput_19",
						connection_tJDBCOutput_19);
				connection_tJDBCOutput_19.setAutoCommit(false);
				int commitEvery_tJDBCOutput_19 = 500000;
				int commitCounter_tJDBCOutput_19 = 0;
				int batchSize_tJDBCOutput_19 = 250000;
				int batchSizeCounter_tJDBCOutput_19 = 0;

				String update_tJDBCOutput_19 = "UPDATE "
						+ context.currentTable
						+ " SET ENCOUNTER_NUM = ?,VALTYPE_CD = ?,TVAL_CHAR = ?,NVAL_NUM = ?,VALUEFLAG_CD = ?,QUANTITY_NUM = ?,UNITS_CD = ?,END_DATE = ?,LOCATION_CD = ?,OBSERVATION_BLOB = ?,CONFIDENCE_NUM = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE PATIENT_NUM = ? AND CONCEPT_CD = ? AND PROVIDER_ID = ? AND START_DATE = ? AND MODIFIER_CD = ? AND INSTANCE_NUM = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_19 = connection_tJDBCOutput_19
						.prepareStatement(update_tJDBCOutput_19);

				/**
				 * [tJDBCOutput_19 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) globalMap
						.get("tHash_Lookup_row34"));

				row34Struct row34HashKey = new row34Struct();
				row34Struct row34Default = new row34Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out3Struct out3_tmp = new out3Struct();
				out14Struct out14_tmp = new out14Struct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tUniqRow_8 begin ] start
				 */

				ok_Hash.put("tUniqRow_8", false);
				start_Hash.put("tUniqRow_8", System.currentTimeMillis());

				currentComponent = "tUniqRow_8";

				int tos_count_tUniqRow_8 = 0;

				class KeyStruct_tUniqRow_8 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal ENCOUNTER_NUM;
					String CONCEPT_CD;
					String PROVIDER_ID;
					java.util.Date START_DATE;
					String MODIFIER_CD;
					int INSTANCE_NUM;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ENCOUNTER_NUM == null) ? 0
											: this.ENCOUNTER_NUM.hashCode());

							result = prime
									* result
									+ ((this.CONCEPT_CD == null) ? 0
											: this.CONCEPT_CD.hashCode());

							result = prime
									* result
									+ ((this.PROVIDER_ID == null) ? 0
											: this.PROVIDER_ID.hashCode());

							result = prime
									* result
									+ ((this.START_DATE == null) ? 0
											: this.START_DATE.hashCode());

							result = prime
									* result
									+ ((this.MODIFIER_CD == null) ? 0
											: this.MODIFIER_CD.hashCode());

							result = prime * result + (int) this.INSTANCE_NUM;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;

						if (this.ENCOUNTER_NUM == null) {
							if (other.ENCOUNTER_NUM != null)
								return false;

						} else if (!this.ENCOUNTER_NUM
								.equals(other.ENCOUNTER_NUM))

							return false;

						if (this.CONCEPT_CD == null) {
							if (other.CONCEPT_CD != null)
								return false;

						} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

							return false;

						if (this.PROVIDER_ID == null) {
							if (other.PROVIDER_ID != null)
								return false;

						} else if (!this.PROVIDER_ID.equals(other.PROVIDER_ID))

							return false;

						if (this.START_DATE == null) {
							if (other.START_DATE != null)
								return false;

						} else if (!this.START_DATE.equals(other.START_DATE))

							return false;

						if (this.MODIFIER_CD == null) {
							if (other.MODIFIER_CD != null)
								return false;

						} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

							return false;

						if (this.INSTANCE_NUM != other.INSTANCE_NUM)
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_8 = 0;
				int nb_duplicates_tUniqRow_8 = 0;
				KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
				java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>();

				/**
				 * [tUniqRow_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				context.folderMain + context.folderOutput + "patient_data.csv"/**
				 * 
				 * End field tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('"');

						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row10 = new row10Struct();
						try {

							char fieldSeparator_tFileInputDelimited_9_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_9_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.ENCOUNTER_NUM = null;

								row10.PATIENT_NUM = null;

								row10.CONCEPT_CD = null;

								row10.PROVIDER_ID = null;

								row10.START_DATE = null;

								row10.MODIFIER_CD = null;

								row10.INSTANCE_NUM = 0;

								row10.VALTYPE_CD = null;

								row10.TVAL_CHAR = null;

								row10.NVAL_NUM = null;

								row10.VALUEFLAG_CD = null;

								row10.QUANTITY_NUM = null;

								row10.UNITS_CD = null;

								row10.END_DATE = null;

								row10.LOCATION_CD = null;

								row10.OBSERVATION_BLOB = null;

								row10.CONFIDENCE_NUM = null;

								row10.UPDATE_DATE = null;

								row10.DOWNLOAD_DATE = null;

								row10.IMPORT_DATE = null;

								row10.SOURCESYSTEM_CD = null;

								row10.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.ENCOUNTER_NUM = null;
									}

								} else {
									row10.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.PATIENT_NUM = null;
									}

								} else {
									row10.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.CONCEPT_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.PROVIDER_ID = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.START_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.START_DATE = null;
									}

								} else {
									row10.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.MODIFIER_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.INSTANCE_NUM = ParserUtils
												.parseTo_int(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.INSTANCE_NUM = 0;
									}

								} else {
									row10.INSTANCE_NUM = 0;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.VALTYPE_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.TVAL_CHAR = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 9;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.NVAL_NUM = null;
									}

								} else {
									row10.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 10;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.VALUEFLAG_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 11;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.QUANTITY_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.QUANTITY_NUM = null;
									}

								} else {
									row10.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 12;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.UNITS_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 13;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.END_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.END_DATE = null;
									}

								} else {
									row10.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 14;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.LOCATION_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 15;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.OBSERVATION_BLOB = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 16;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.CONFIDENCE_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.CONFIDENCE_NUM = null;
									}

								} else {
									row10.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 17;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.UPDATE_DATE = null;
									}

								} else {
									row10.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 18;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.DOWNLOAD_DATE = null;
									}

								} else {
									row10.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 19;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.IMPORT_DATE = null;
									}

								} else {
									row10.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 20;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.SOURCESYSTEM_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 21;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.UPLOAD_ID = null;
									}

								} else {
									row10.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tUniqRow_8 main ] start
							 */

							currentComponent = "tUniqRow_8";

							row51 = null;
							finder_tUniqRow_8.ENCOUNTER_NUM = row10.ENCOUNTER_NUM;
							finder_tUniqRow_8.CONCEPT_CD = row10.CONCEPT_CD;
							finder_tUniqRow_8.PROVIDER_ID = row10.PROVIDER_ID;
							finder_tUniqRow_8.START_DATE = row10.START_DATE;
							finder_tUniqRow_8.MODIFIER_CD = row10.MODIFIER_CD;
							finder_tUniqRow_8.INSTANCE_NUM = row10.INSTANCE_NUM;
							finder_tUniqRow_8.hashCodeDirty = true;
							if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
								KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

								new_tUniqRow_8.ENCOUNTER_NUM = row10.ENCOUNTER_NUM;
								new_tUniqRow_8.CONCEPT_CD = row10.CONCEPT_CD;
								new_tUniqRow_8.PROVIDER_ID = row10.PROVIDER_ID;
								new_tUniqRow_8.START_DATE = row10.START_DATE;
								new_tUniqRow_8.MODIFIER_CD = row10.MODIFIER_CD;
								new_tUniqRow_8.INSTANCE_NUM = row10.INSTANCE_NUM;

								keystUniqRow_8.add(new_tUniqRow_8);
								if (row51 == null) {

									row51 = new row51Struct();
								}
								row51.ENCOUNTER_NUM = row10.ENCOUNTER_NUM;
								row51.PATIENT_NUM = row10.PATIENT_NUM;
								row51.CONCEPT_CD = row10.CONCEPT_CD;
								row51.PROVIDER_ID = row10.PROVIDER_ID;
								row51.START_DATE = row10.START_DATE;
								row51.MODIFIER_CD = row10.MODIFIER_CD;
								row51.INSTANCE_NUM = row10.INSTANCE_NUM;
								row51.VALTYPE_CD = row10.VALTYPE_CD;
								row51.TVAL_CHAR = row10.TVAL_CHAR;
								row51.NVAL_NUM = row10.NVAL_NUM;
								row51.VALUEFLAG_CD = row10.VALUEFLAG_CD;
								row51.QUANTITY_NUM = row10.QUANTITY_NUM;
								row51.UNITS_CD = row10.UNITS_CD;
								row51.END_DATE = row10.END_DATE;
								row51.LOCATION_CD = row10.LOCATION_CD;
								row51.OBSERVATION_BLOB = row10.OBSERVATION_BLOB;
								row51.CONFIDENCE_NUM = row10.CONFIDENCE_NUM;
								row51.UPDATE_DATE = row10.UPDATE_DATE;
								row51.DOWNLOAD_DATE = row10.DOWNLOAD_DATE;
								row51.IMPORT_DATE = row10.IMPORT_DATE;
								row51.SOURCESYSTEM_CD = row10.SOURCESYSTEM_CD;
								row51.UPLOAD_ID = row10.UPLOAD_ID;
								nb_uniques_tUniqRow_8++;
							} else {
								nb_duplicates_tUniqRow_8++;
							}

							tos_count_tUniqRow_8++;

							/**
							 * [tUniqRow_8 main ] stop
							 */
							// Start of branch "row51"
							if (row51 != null) {

								/**
								 * [tJavaRow_2 main ] start
								 */

								currentComponent = "tJavaRow_2";

								// Code generated according to input schema and
								// output schema

								row23.ENCOUNTER_NUM = row51.ENCOUNTER_NUM;
								row23.PATIENT_NUM = row51.PATIENT_NUM;// .add(new
																		// BigDecimal(10000));
								row23.CONCEPT_CD = row51.CONCEPT_CD;
								row23.PROVIDER_ID = row51.PROVIDER_ID;
								row23.START_DATE = row51.START_DATE;
								row23.MODIFIER_CD = row51.MODIFIER_CD;
								row23.INSTANCE_NUM = row51.INSTANCE_NUM;
								row23.VALTYPE_CD = row51.VALTYPE_CD;
								row23.TVAL_CHAR = row51.TVAL_CHAR;
								row23.NVAL_NUM = row51.NVAL_NUM;
								row23.VALUEFLAG_CD = row51.VALUEFLAG_CD;
								if (row51.QUANTITY_NUM == null)
									row51.QUANTITY_NUM = 0f;
								row23.QUANTITY_NUM = row51.QUANTITY_NUM;
								row23.UNITS_CD = row51.UNITS_CD;
								row23.END_DATE = row51.END_DATE;
								row23.LOCATION_CD = row51.LOCATION_CD;
								row23.OBSERVATION_BLOB = row51.OBSERVATION_BLOB;
								if (row51.CONFIDENCE_NUM == null)
									row51.CONFIDENCE_NUM = 0f;
								row23.CONFIDENCE_NUM = row51.CONFIDENCE_NUM;
								row23.UPDATE_DATE = row51.UPDATE_DATE;
								row23.DOWNLOAD_DATE = row51.DOWNLOAD_DATE;
								row23.IMPORT_DATE = row51.IMPORT_DATE;
								row23.SOURCESYSTEM_CD = row51.SOURCESYSTEM_CD;
								if (row51.UPLOAD_ID == null)
									row51.UPLOAD_ID = 0;
								row23.UPLOAD_ID = row51.UPLOAD_ID;

								nb_line_tJavaRow_2++;

								tos_count_tJavaRow_2++;

								/**
								 * [tJavaRow_2 main ] stop
								 */

								/**
								 * [tMap_7 main ] start
								 */

								currentComponent = "tMap_7";

								boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_7 = false;
								boolean mainRowRejected_tMap_7 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row34"
								// /////////////////////////////////////////////

								boolean forceLooprow34 = false;

								row34Struct row34ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_7 = false;

									row34HashKey.ENCOUNTER_NUM = row23.ENCOUNTER_NUM;

									row34HashKey.CONCEPT_CD = row23.CONCEPT_CD;

									row34HashKey.PROVIDER_ID = row23.PROVIDER_ID;

									row34HashKey.START_DATE = row23.START_DATE;

									row34HashKey.MODIFIER_CD = row23.MODIFIER_CD;

									Object exprKeyValue_row34__INSTANCE_NUM = row23.INSTANCE_NUM;
									if (exprKeyValue_row34__INSTANCE_NUM == null) {
										hasCasePrimitiveKeyWithNull_tMap_7 = true;
									} else {
										row34HashKey.INSTANCE_NUM = (int) (Integer) exprKeyValue_row34__INSTANCE_NUM;
									}

									row34HashKey.hashCodeDirty = true;

									if (!hasCasePrimitiveKeyWithNull_tMap_7) { // G_TM_M_091

										tHash_Lookup_row34.lookup(row34HashKey);

									} // G_TM_M_091

									if (hasCasePrimitiveKeyWithNull_tMap_7
											|| !tHash_Lookup_row34.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_7 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row34 != null
										&& tHash_Lookup_row34
												.getCount(row34HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.ENCOUNTER_NUM = '"
									// + row34HashKey.ENCOUNTER_NUM +
									// "', row34.CONCEPT_CD = '" +
									// row34HashKey.CONCEPT_CD +
									// "', row34.PROVIDER_ID = '" +
									// row34HashKey.PROVIDER_ID +
									// "', row34.START_DATE = '" +
									// row34HashKey.START_DATE +
									// "', row34.MODIFIER_CD = '" +
									// row34HashKey.MODIFIER_CD +
									// "', row34.INSTANCE_NUM = '" +
									// row34HashKey.INSTANCE_NUM + "'");
								} // G 071

								row34Struct row34 = null;

								row34Struct fromLookup_row34 = null;
								row34 = row34Default;

								if (tHash_Lookup_row34 != null
										&& tHash_Lookup_row34.hasNext()) { // G
																			// 099

									fromLookup_row34 = tHash_Lookup_row34
											.next();

								} // G 099

								if (fromLookup_row34 != null) {
									row34 = fromLookup_row34;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
									// ###############################
									// # Output tables

									out14 = null;
									out3 = null;

									if (!rejectedInnerJoin_tMap_7) {

										// # Output table : 'out14'
										out14_tmp.ENCOUNTER_NUM = row23.ENCOUNTER_NUM;
										out14_tmp.PATIENT_NUM = row23.PATIENT_NUM;
										out14_tmp.CONCEPT_CD = row23.CONCEPT_CD;
										out14_tmp.PROVIDER_ID = row23.PROVIDER_ID;
										out14_tmp.START_DATE = row23.START_DATE;
										out14_tmp.MODIFIER_CD = row23.MODIFIER_CD;
										out14_tmp.INSTANCE_NUM = row23.INSTANCE_NUM;
										out14_tmp.VALTYPE_CD = row23.VALTYPE_CD;
										out14_tmp.TVAL_CHAR = row23.TVAL_CHAR;
										out14_tmp.NVAL_NUM = row23.NVAL_NUM;
										out14_tmp.VALUEFLAG_CD = row23.VALUEFLAG_CD;
										out14_tmp.QUANTITY_NUM = row23.QUANTITY_NUM;
										out14_tmp.UNITS_CD = row23.UNITS_CD;
										out14_tmp.END_DATE = row23.END_DATE;
										out14_tmp.LOCATION_CD = row23.LOCATION_CD;
										out14_tmp.OBSERVATION_BLOB = row23.OBSERVATION_BLOB;
										out14_tmp.CONFIDENCE_NUM = row23.CONFIDENCE_NUM;
										out14_tmp.UPDATE_DATE = row23.UPDATE_DATE;
										out14_tmp.DOWNLOAD_DATE = row23.DOWNLOAD_DATE;
										out14_tmp.IMPORT_DATE = row23.IMPORT_DATE;
										out14_tmp.SOURCESYSTEM_CD = row23.SOURCESYSTEM_CD;
										out14_tmp.UPLOAD_ID = row23.UPLOAD_ID;
										out14 = out14_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out3'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_7) {
										out3_tmp.ENCOUNTER_NUM = row23.ENCOUNTER_NUM;
										out3_tmp.PATIENT_NUM = row23.PATIENT_NUM;
										out3_tmp.CONCEPT_CD = row23.CONCEPT_CD;
										out3_tmp.PROVIDER_ID = row23.PROVIDER_ID;
										out3_tmp.START_DATE = row23.START_DATE;
										out3_tmp.MODIFIER_CD = row23.MODIFIER_CD;
										out3_tmp.INSTANCE_NUM = row23.INSTANCE_NUM;
										out3_tmp.VALTYPE_CD = row23.VALTYPE_CD;
										out3_tmp.TVAL_CHAR = row23.TVAL_CHAR;
										out3_tmp.NVAL_NUM = row23.NVAL_NUM;
										out3_tmp.VALUEFLAG_CD = row23.VALUEFLAG_CD;
										out3_tmp.QUANTITY_NUM = row23.QUANTITY_NUM;
										out3_tmp.UNITS_CD = row23.UNITS_CD;
										out3_tmp.END_DATE = row23.END_DATE;
										out3_tmp.LOCATION_CD = row23.LOCATION_CD;
										out3_tmp.OBSERVATION_BLOB = row23.OBSERVATION_BLOB;
										out3_tmp.CONFIDENCE_NUM = row23.CONFIDENCE_NUM;
										out3_tmp.UPDATE_DATE = row23.UPDATE_DATE;
										out3_tmp.DOWNLOAD_DATE = row23.DOWNLOAD_DATE;
										out3_tmp.IMPORT_DATE = row23.IMPORT_DATE;
										out3_tmp.SOURCESYSTEM_CD = row23.SOURCESYSTEM_CD;
										out3_tmp.UPLOAD_ID = row23.UPLOAD_ID;
										out3 = out3_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_7 = false;

								tos_count_tMap_7++;

								/**
								 * [tMap_7 main ] stop
								 */
								// Start of branch "out3"
								if (out3 != null) {

									/**
									 * [tJDBCOutput_1 main ] start
									 */

									currentComponent = "tJDBCOutput_1";

									row25 = null;
									query_tJDBCOutput_1 = new StringBuffer("");
									whetherReject_tJDBCOutput_1 = false;
									pstmt_tJDBCOutput_1.setBigDecimal(1,
											out3.ENCOUNTER_NUM);

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(insertSQLSplits_tJDBCOutput_1[0])
											.append(out3.ENCOUNTER_NUM == null ? "null"
													: String.valueOf(out3.ENCOUNTER_NUM))
											.append(insertSQLSplits_tJDBCOutput_1[1]);
									pstmt_tJDBCOutput_1.setBigDecimal(2,
											out3.PATIENT_NUM);

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.PATIENT_NUM == null ? "null"
													: String.valueOf(out3.PATIENT_NUM))
											.append(insertSQLSplits_tJDBCOutput_1[2]);
									if (out3.CONCEPT_CD == null) {
										pstmt_tJDBCOutput_1.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(3,
												out3.CONCEPT_CD);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.CONCEPT_CD == null ? "null"
													: "'" + out3.CONCEPT_CD
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[3]);
									if (out3.PROVIDER_ID == null) {
										pstmt_tJDBCOutput_1.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(4,
												out3.PROVIDER_ID);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.PROVIDER_ID == null ? "null"
													: "'" + out3.PROVIDER_ID
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[4]);
									if (out3.START_DATE != null) {
										pstmt_tJDBCOutput_1.setTimestamp(
												5,
												new java.sql.Timestamp(
														out3.START_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_1.setNull(5,
												java.sql.Types.DATE);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.START_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"yyyy-MM-dd")
																	.format(out3.START_DATE)
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[5]);
									if (out3.MODIFIER_CD == null) {
										pstmt_tJDBCOutput_1.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(6,
												out3.MODIFIER_CD);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.MODIFIER_CD == null ? "null"
													: "'" + out3.MODIFIER_CD
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[6]);
									pstmt_tJDBCOutput_1.setInt(7,
											out3.INSTANCE_NUM);

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(String
													.valueOf(out3.INSTANCE_NUM))
											.append(insertSQLSplits_tJDBCOutput_1[7]);
									if (out3.VALTYPE_CD == null) {
										pstmt_tJDBCOutput_1.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(8,
												out3.VALTYPE_CD);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.VALTYPE_CD == null ? "null"
													: "'" + out3.VALTYPE_CD
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[8]);
									if (out3.TVAL_CHAR == null) {
										pstmt_tJDBCOutput_1.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(9,
												out3.TVAL_CHAR);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.TVAL_CHAR == null ? "null"
													: "'" + out3.TVAL_CHAR
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[9]);
									if (out3.NVAL_NUM == null) {
										pstmt_tJDBCOutput_1.setNull(10,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tJDBCOutput_1.setFloat(10,
												out3.NVAL_NUM);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.NVAL_NUM == null ? "null"
													: String.valueOf(out3.NVAL_NUM))
											.append(insertSQLSplits_tJDBCOutput_1[10]);
									if (out3.VALUEFLAG_CD == null) {
										pstmt_tJDBCOutput_1.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(11,
												out3.VALUEFLAG_CD);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.VALUEFLAG_CD == null ? "null"
													: "'" + out3.VALUEFLAG_CD
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[11]);
									if (out3.QUANTITY_NUM == null) {
										pstmt_tJDBCOutput_1.setNull(12,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tJDBCOutput_1.setFloat(12,
												out3.QUANTITY_NUM);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.QUANTITY_NUM == null ? "null"
													: String.valueOf(out3.QUANTITY_NUM))
											.append(insertSQLSplits_tJDBCOutput_1[12]);
									if (out3.UNITS_CD == null) {
										pstmt_tJDBCOutput_1.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(13,
												out3.UNITS_CD);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.UNITS_CD == null ? "null"
													: "'" + out3.UNITS_CD + "'")
											.append(insertSQLSplits_tJDBCOutput_1[13]);
									if (out3.END_DATE != null) {
										pstmt_tJDBCOutput_1
												.setTimestamp(
														14,
														new java.sql.Timestamp(
																out3.END_DATE
																		.getTime()));
									} else {
										pstmt_tJDBCOutput_1.setNull(14,
												java.sql.Types.DATE);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.END_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"yyyy-MM-dd")
																	.format(out3.END_DATE)
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[14]);
									if (out3.LOCATION_CD == null) {
										pstmt_tJDBCOutput_1.setNull(15,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(15,
												out3.LOCATION_CD);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.LOCATION_CD == null ? "null"
													: "'" + out3.LOCATION_CD
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[15]);
									if (out3.OBSERVATION_BLOB == null) {
										pstmt_tJDBCOutput_1.setNull(16,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(16,
												out3.OBSERVATION_BLOB);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.OBSERVATION_BLOB == null ? "null"
													: "'"
															+ out3.OBSERVATION_BLOB
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[16]);
									if (out3.CONFIDENCE_NUM == null) {
										pstmt_tJDBCOutput_1.setNull(17,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tJDBCOutput_1.setFloat(17,
												out3.CONFIDENCE_NUM);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.CONFIDENCE_NUM == null ? "null"
													: String.valueOf(out3.CONFIDENCE_NUM))
											.append(insertSQLSplits_tJDBCOutput_1[17]);
									if (out3.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_1.setTimestamp(
												18,
												new java.sql.Timestamp(
														out3.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_1.setNull(18,
												java.sql.Types.DATE);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.UPDATE_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"yyyy-MM-dd")
																	.format(out3.UPDATE_DATE)
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[18]);
									if (out3.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_1.setTimestamp(
												19,
												new java.sql.Timestamp(
														out3.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_1.setNull(19,
												java.sql.Types.DATE);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.DOWNLOAD_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"yyyy-MM-dd")
																	.format(out3.DOWNLOAD_DATE)
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[19]);
									if (out3.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_1.setTimestamp(
												20,
												new java.sql.Timestamp(
														out3.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_1.setNull(20,
												java.sql.Types.DATE);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.IMPORT_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"yyyy-MM-dd")
																	.format(out3.IMPORT_DATE)
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[20]);
									if (out3.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_1.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_1.setString(21,
												out3.SOURCESYSTEM_CD);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.SOURCESYSTEM_CD == null ? "null"
													: "'"
															+ out3.SOURCESYSTEM_CD
															+ "'")
											.append(insertSQLSplits_tJDBCOutput_1[21]);
									if (out3.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_1.setNull(22,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_1.setInt(22,
												out3.UPLOAD_ID);
									}

									query_tJDBCOutput_1 = query_tJDBCOutput_1
											.append(out3.UPLOAD_ID == null ? "null"
													: String.valueOf(out3.UPLOAD_ID))
											.append(insertSQLSplits_tJDBCOutput_1[22]);
									globalMap.put("tJDBCOutput_1_QUERY",
											query_tJDBCOutput_1.toString()
													.trim());
									pstmt_tJDBCOutput_1.addBatch();
									nb_line_tJDBCOutput_1++;

									batchSizeCounter_tJDBCOutput_1++;
									if (!whetherReject_tJDBCOutput_1) {
										row25 = new row25Struct();
										row25.ENCOUNTER_NUM = out3.ENCOUNTER_NUM;
										row25.PATIENT_NUM = out3.PATIENT_NUM;
										row25.CONCEPT_CD = out3.CONCEPT_CD;
										row25.PROVIDER_ID = out3.PROVIDER_ID;
										row25.START_DATE = out3.START_DATE;
										row25.MODIFIER_CD = out3.MODIFIER_CD;
										row25.INSTANCE_NUM = out3.INSTANCE_NUM;
										row25.VALTYPE_CD = out3.VALTYPE_CD;
										row25.TVAL_CHAR = out3.TVAL_CHAR;
										row25.NVAL_NUM = out3.NVAL_NUM;
										row25.VALUEFLAG_CD = out3.VALUEFLAG_CD;
										row25.QUANTITY_NUM = out3.QUANTITY_NUM;
										row25.UNITS_CD = out3.UNITS_CD;
										row25.END_DATE = out3.END_DATE;
										row25.LOCATION_CD = out3.LOCATION_CD;
										row25.OBSERVATION_BLOB = out3.OBSERVATION_BLOB;
										row25.CONFIDENCE_NUM = out3.CONFIDENCE_NUM;
										row25.UPDATE_DATE = out3.UPDATE_DATE;
										row25.DOWNLOAD_DATE = out3.DOWNLOAD_DATE;
										row25.IMPORT_DATE = out3.IMPORT_DATE;
										row25.SOURCESYSTEM_CD = out3.SOURCESYSTEM_CD;
										row25.UPLOAD_ID = out3.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_1 <= batchSizeCounter_tJDBCOutput_1) {
										int[] status_tJDBCOutput_1 = null;
										int countSum_tJDBCOutput_1 = 0;
										try {
											batchSizeCounter_tJDBCOutput_1 = 0;

											status_tJDBCOutput_1 = pstmt_tJDBCOutput_1
													.executeBatch();

											for (int countEach_tJDBCOutput_1 : status_tJDBCOutput_1) {
												countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
														: countEach_tJDBCOutput_1);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_1 = pstmt_tJDBCOutput_1
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_1 = tmp_batchUpdateCount_tJDBCOutput_1 > countSum_tJDBCOutput_1 ? tmp_batchUpdateCount_tJDBCOutput_1
												: countSum_tJDBCOutput_1;

										insertedCount_tJDBCOutput_1 += tmp_batchUpdateCount_tJDBCOutput_1;

									}

									commitCounter_tJDBCOutput_1++;
									if (commitEvery_tJDBCOutput_1 <= commitCounter_tJDBCOutput_1) {

										connection_tJDBCOutput_1.commit();
										commitCounter_tJDBCOutput_1 = 0;
									}

									tos_count_tJDBCOutput_1++;

									/**
									 * [tJDBCOutput_1 main ] stop
									 */
									// Start of branch "row25"
									if (row25 != null) {

										/**
										 * [tJavaRow_9 main ] start
										 */

										currentComponent = "tJavaRow_9";

										context.counter++;

										if (context.counter % 10000 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Observation Fact: "
																	+ context.counter
																	+ " rows imported.");
											System.out
													.println("Observation Fact: "
															+ context.counter
															+ " rows imported.");
										}
										nb_line_tJavaRow_9++;

										tos_count_tJavaRow_9++;

										/**
										 * [tJavaRow_9 main ] stop
										 */

									} // End of branch "row25"

								} // End of branch "out3"

								// Start of branch "out14"
								if (out14 != null) {

									/**
									 * [tJDBCOutput_19 main ] start
									 */

									currentComponent = "tJDBCOutput_19";

									row45 = null;
									whetherReject_tJDBCOutput_19 = false;
									pstmt_tJDBCOutput_19.setBigDecimal(1,
											out14.ENCOUNTER_NUM);

									if (out14.VALTYPE_CD == null) {
										pstmt_tJDBCOutput_19.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(2,
												out14.VALTYPE_CD);
									}

									if (out14.TVAL_CHAR == null) {
										pstmt_tJDBCOutput_19.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(3,
												out14.TVAL_CHAR);
									}

									if (out14.NVAL_NUM == null) {
										pstmt_tJDBCOutput_19.setNull(4,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tJDBCOutput_19.setFloat(4,
												out14.NVAL_NUM);
									}

									if (out14.VALUEFLAG_CD == null) {
										pstmt_tJDBCOutput_19.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(5,
												out14.VALUEFLAG_CD);
									}

									if (out14.QUANTITY_NUM == null) {
										pstmt_tJDBCOutput_19.setNull(6,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tJDBCOutput_19.setFloat(6,
												out14.QUANTITY_NUM);
									}

									if (out14.UNITS_CD == null) {
										pstmt_tJDBCOutput_19.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(7,
												out14.UNITS_CD);
									}

									if (out14.END_DATE != null) {
										pstmt_tJDBCOutput_19.setTimestamp(
												8,
												new java.sql.Timestamp(
														out14.END_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_19.setNull(8,
												java.sql.Types.DATE);
									}

									if (out14.LOCATION_CD == null) {
										pstmt_tJDBCOutput_19.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(9,
												out14.LOCATION_CD);
									}

									if (out14.OBSERVATION_BLOB == null) {
										pstmt_tJDBCOutput_19.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(10,
												out14.OBSERVATION_BLOB);
									}

									if (out14.CONFIDENCE_NUM == null) {
										pstmt_tJDBCOutput_19.setNull(11,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tJDBCOutput_19.setFloat(11,
												out14.CONFIDENCE_NUM);
									}

									if (out14.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_19.setTimestamp(
												12,
												new java.sql.Timestamp(
														out14.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_19.setNull(12,
												java.sql.Types.DATE);
									}

									if (out14.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_19.setTimestamp(
												13,
												new java.sql.Timestamp(
														out14.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_19.setNull(13,
												java.sql.Types.DATE);
									}

									if (out14.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_19.setTimestamp(
												14,
												new java.sql.Timestamp(
														out14.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_19.setNull(14,
												java.sql.Types.DATE);
									}

									if (out14.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_19.setNull(15,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(15,
												out14.SOURCESYSTEM_CD);
									}

									if (out14.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_19.setNull(16,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_19.setInt(16,
												out14.UPLOAD_ID);
									}

									pstmt_tJDBCOutput_19.setBigDecimal(17,
											out14.PATIENT_NUM);

									if (out14.CONCEPT_CD == null) {
										pstmt_tJDBCOutput_19.setNull(18,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(18,
												out14.CONCEPT_CD);
									}

									if (out14.PROVIDER_ID == null) {
										pstmt_tJDBCOutput_19.setNull(19,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(19,
												out14.PROVIDER_ID);
									}

									if (out14.START_DATE != null) {
										pstmt_tJDBCOutput_19.setTimestamp(
												20,
												new java.sql.Timestamp(
														out14.START_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_19.setNull(20,
												java.sql.Types.DATE);
									}

									if (out14.MODIFIER_CD == null) {
										pstmt_tJDBCOutput_19.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_19.setString(21,
												out14.MODIFIER_CD);
									}

									pstmt_tJDBCOutput_19.setInt(22,
											out14.INSTANCE_NUM);

									pstmt_tJDBCOutput_19.addBatch();
									nb_line_tJDBCOutput_19++;

									batchSizeCounter_tJDBCOutput_19++;
									if (!whetherReject_tJDBCOutput_19) {
										row45 = new row45Struct();
										row45.ENCOUNTER_NUM = out14.ENCOUNTER_NUM;
										row45.PATIENT_NUM = out14.PATIENT_NUM;
										row45.CONCEPT_CD = out14.CONCEPT_CD;
										row45.PROVIDER_ID = out14.PROVIDER_ID;
										row45.START_DATE = out14.START_DATE;
										row45.MODIFIER_CD = out14.MODIFIER_CD;
										row45.INSTANCE_NUM = out14.INSTANCE_NUM;
										row45.VALTYPE_CD = out14.VALTYPE_CD;
										row45.TVAL_CHAR = out14.TVAL_CHAR;
										row45.NVAL_NUM = out14.NVAL_NUM;
										row45.VALUEFLAG_CD = out14.VALUEFLAG_CD;
										row45.QUANTITY_NUM = out14.QUANTITY_NUM;
										row45.UNITS_CD = out14.UNITS_CD;
										row45.END_DATE = out14.END_DATE;
										row45.LOCATION_CD = out14.LOCATION_CD;
										row45.OBSERVATION_BLOB = out14.OBSERVATION_BLOB;
										row45.CONFIDENCE_NUM = out14.CONFIDENCE_NUM;
										row45.UPDATE_DATE = out14.UPDATE_DATE;
										row45.DOWNLOAD_DATE = out14.DOWNLOAD_DATE;
										row45.IMPORT_DATE = out14.IMPORT_DATE;
										row45.SOURCESYSTEM_CD = out14.SOURCESYSTEM_CD;
										row45.UPLOAD_ID = out14.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_19 <= batchSizeCounter_tJDBCOutput_19) {
										int[] status_tJDBCOutput_19 = null;
										int countSum_tJDBCOutput_19 = 0;
										try {
											batchSizeCounter_tJDBCOutput_19 = 0;

											status_tJDBCOutput_19 = pstmt_tJDBCOutput_19
													.executeBatch();

											for (int countEach_tJDBCOutput_19 : status_tJDBCOutput_19) {
												countSum_tJDBCOutput_19 += (countEach_tJDBCOutput_19 < 0 ? 0
														: countEach_tJDBCOutput_19);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_19 = pstmt_tJDBCOutput_19
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_19 = tmp_batchUpdateCount_tJDBCOutput_19 > countSum_tJDBCOutput_19 ? tmp_batchUpdateCount_tJDBCOutput_19
												: countSum_tJDBCOutput_19;

										updatedCount_tJDBCOutput_19 += tmp_batchUpdateCount_tJDBCOutput_19;

									}

									commitCounter_tJDBCOutput_19++;
									if (commitEvery_tJDBCOutput_19 <= commitCounter_tJDBCOutput_19) {

										connection_tJDBCOutput_19.commit();
										commitCounter_tJDBCOutput_19 = 0;
									}

									tos_count_tJDBCOutput_19++;

									/**
									 * [tJDBCOutput_19 main ] stop
									 */
									// Start of branch "row45"
									if (row45 != null) {

										/**
										 * [tJavaRow_19 main ] start
										 */

										currentComponent = "tJavaRow_19";

										context.counter++;

										if (context.counter % 10000 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Observation Fact: "
																	+ context.counter
																	+ " rows imported.");
											System.out
													.println("Observation Fact: "
															+ context.counter
															+ " rows imported.");
										}

										// Code erstellt anhand des Eingabe- und
										// Ausgabeschemas
										/*
										 * output_row.ENCOUNTER_NUM =
										 * row45.ENCOUNTER_NUM;
										 * output_row.PATIENT_NUM =
										 * row45.PATIENT_NUM;
										 * output_row.CONCEPT_CD =
										 * row45.CONCEPT_CD;
										 * output_row.PROVIDER_ID =
										 * row45.PROVIDER_ID;
										 * output_row.START_DATE =
										 * row45.START_DATE;
										 * output_row.MODIFIER_CD =
										 * row45.MODIFIER_CD;
										 * output_row.INSTANCE_NUM =
										 * row45.INSTANCE_NUM;
										 * output_row.VALTYPE_CD =
										 * row45.VALTYPE_CD;
										 * output_row.TVAL_CHAR =
										 * row45.TVAL_CHAR; output_row.NVAL_NUM
										 * = row45.NVAL_NUM;
										 * output_row.VALUEFLAG_CD =
										 * row45.VALUEFLAG_CD;
										 * output_row.QUANTITY_NUM =
										 * row45.QUANTITY_NUM;
										 * output_row.UNITS_CD = row45.UNITS_CD;
										 * output_row.END_DATE = row45.END_DATE;
										 * output_row.LOCATION_CD =
										 * row45.LOCATION_CD;
										 * output_row.OBSERVATION_TEXT =
										 * row45.OBSERVATION_TEXT;
										 * output_row.CONFIDENCE_NUM =
										 * row45.CONFIDENCE_NUM;
										 * output_row.UPDATE_DATE =
										 * row45.UPDATE_DATE;
										 * output_row.DOWNLOAD_DATE =
										 * row45.DOWNLOAD_DATE;
										 * output_row.IMPORT_DATE =
										 * row45.IMPORT_DATE;
										 * output_row.SOURCESYSTEM_CD =
										 * row45.SOURCESYSTEM_CD;
										 * output_row.UPLOAD_ID =
										 * row45.UPLOAD_ID;
										 * 
										 * 
										 * System.out.println("ROW ID: " +
										 * row45.ENCOUNTER_NUM);
										 */

										nb_line_tJavaRow_19++;

										tos_count_tJavaRow_19++;

										/**
										 * [tJavaRow_19 main ] stop
										 */

									} // End of branch "row45"

								} // End of branch "out14"

							} // End of branch "row51"

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}

				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tUniqRow_8 end ] start
				 */

				currentComponent = "tUniqRow_8";

				globalMap.put("tUniqRow_8_NB_UNIQUES", nb_uniques_tUniqRow_8);
				globalMap.put("tUniqRow_8_NB_DUPLICATES",
						nb_duplicates_tUniqRow_8);

				ok_Hash.put("tUniqRow_8", true);
				end_Hash.put("tUniqRow_8", System.currentTimeMillis());

				/**
				 * [tUniqRow_8 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row34 != null) {
					tHash_Lookup_row34.endGet();
				}
				globalMap.remove("tHash_Lookup_row34");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				int[] status_tJDBCOutput_1 = null;
				int countSum_tJDBCOutput_1 = 0;
				try {
					if (pstmt_tJDBCOutput_1 != null
							&& batchSizeCounter_tJDBCOutput_1 > 0) {

						status_tJDBCOutput_1 = pstmt_tJDBCOutput_1
								.executeBatch();

						for (int countEach_tJDBCOutput_1 : status_tJDBCOutput_1) {
							countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
									: countEach_tJDBCOutput_1);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_1 != null
						&& batchSizeCounter_tJDBCOutput_1 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_1 = pstmt_tJDBCOutput_1
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_1 = tmp_batchUpdateCount_tJDBCOutput_1 > countSum_tJDBCOutput_1 ? tmp_batchUpdateCount_tJDBCOutput_1
							: countSum_tJDBCOutput_1;

					insertedCount_tJDBCOutput_1 += tmp_batchUpdateCount_tJDBCOutput_1;

				}
				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				if (commitCounter_tJDBCOutput_1 > 0) {

					connection_tJDBCOutput_1.commit();

				}

				connection_tJDBCOutput_1.close();

				resourceMap.put("finish_tJDBCOutput_1", true);

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				/**
				 * [tJavaRow_9 end ] stop
				 */

				/**
				 * [tJDBCOutput_19 end ] start
				 */

				currentComponent = "tJDBCOutput_19";

				int[] status_tJDBCOutput_19 = null;
				int countSum_tJDBCOutput_19 = 0;
				try {
					if (pstmt_tJDBCOutput_19 != null
							&& batchSizeCounter_tJDBCOutput_19 > 0) {

						status_tJDBCOutput_19 = pstmt_tJDBCOutput_19
								.executeBatch();

						for (int countEach_tJDBCOutput_19 : status_tJDBCOutput_19) {
							countSum_tJDBCOutput_19 += (countEach_tJDBCOutput_19 < 0 ? 0
									: countEach_tJDBCOutput_19);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_19 != null
						&& batchSizeCounter_tJDBCOutput_19 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_19 = pstmt_tJDBCOutput_19
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_19 = tmp_batchUpdateCount_tJDBCOutput_19 > countSum_tJDBCOutput_19 ? tmp_batchUpdateCount_tJDBCOutput_19
							: countSum_tJDBCOutput_19;

					updatedCount_tJDBCOutput_19 += tmp_batchUpdateCount_tJDBCOutput_19;

				}
				if (pstmt_tJDBCOutput_19 != null) {

					pstmt_tJDBCOutput_19.close();

				}

				if (commitCounter_tJDBCOutput_19 > 0) {

					connection_tJDBCOutput_19.commit();

				}

				connection_tJDBCOutput_19.close();

				resourceMap.put("finish_tJDBCOutput_19", true);

				nb_line_deleted_tJDBCOutput_19 = nb_line_deleted_tJDBCOutput_19
						+ deletedCount_tJDBCOutput_19;
				nb_line_update_tJDBCOutput_19 = nb_line_update_tJDBCOutput_19
						+ updatedCount_tJDBCOutput_19;
				nb_line_inserted_tJDBCOutput_19 = nb_line_inserted_tJDBCOutput_19
						+ insertedCount_tJDBCOutput_19;
				nb_line_rejected_tJDBCOutput_19 = nb_line_rejected_tJDBCOutput_19
						+ rejectedCount_tJDBCOutput_19;

				globalMap.put("tJDBCOutput_19_NB_LINE", nb_line_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_19);

				ok_Hash.put("tJDBCOutput_19", true);
				end_Hash.put("tJDBCOutput_19", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_19 end ] stop
				 */

				/**
				 * [tJavaRow_19 end ] start
				 */

				currentComponent = "tJavaRow_19";

				globalMap.put("tJavaRow_19_NB_LINE", nb_line_tJavaRow_19);

				ok_Hash.put("tJavaRow_19", true);
				end_Hash.put("tJavaRow_19", System.currentTimeMillis());

				/**
				 * [tJavaRow_19 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row34");

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tUniqRow_8 finally ] start
				 */

				currentComponent = "tUniqRow_8";

				/**
				 * [tUniqRow_8 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tJDBCOutput_1 finally ] start
				 */

				currentComponent = "tJDBCOutput_1";

				if (resourceMap.get("finish_tJDBCOutput_1") == null) {
					if (resourceMap.get("conn_tJDBCOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_1) {
							String errorMessage_tJDBCOutput_1 = "failed to close the connection in tJDBCOutput_1 :"
									+ sqlEx_tJDBCOutput_1.getMessage();

							System.err.println(errorMessage_tJDBCOutput_1);
						}
					}
				}

				/**
				 * [tJDBCOutput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

				/**
				 * [tJDBCOutput_19 finally ] start
				 */

				currentComponent = "tJDBCOutput_19";

				if (resourceMap.get("finish_tJDBCOutput_19") == null) {
					if (resourceMap.get("conn_tJDBCOutput_19") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_19")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_19) {
							String errorMessage_tJDBCOutput_19 = "failed to close the connection in tJDBCOutput_19 :"
									+ sqlEx_tJDBCOutput_19.getMessage();

							System.err.println(errorMessage_tJDBCOutput_19);
						}
					}
				}

				/**
				 * [tJDBCOutput_19 finally ] stop
				 */

				/**
				 * [tJavaRow_19 finally ] start
				 */

				currentComponent = "tJavaRow_19";

				/**
				 * [tJavaRow_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public void tDie_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_4 begin ] start
				 */

				ok_Hash.put("tDie_4", false);
				start_Hash.put("tDie_4", System.currentTimeMillis());

				currentComponent = "tDie_4";

				int tos_count_tDie_4 = 0;

				/**
				 * [tDie_4 begin ] stop
				 */

				/**
				 * [tDie_4 main ] start
				 */

				currentComponent = "tDie_4";

				globalMap.put("tDie_4_DIE_PRIORITY", 5);
				System.err.println("Error: Observation_Fact");

				globalMap.put("tDie_4_DIE_MESSAGE", "Error: Observation_Fact");
				globalMap.put("tDie_4_DIE_MESSAGES", "Error: Observation_Fact");
				currentComponent = "tDie_4";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_4_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_4++;

				/**
				 * [tDie_4 main ] stop
				 */

				/**
				 * [tDie_4 end ] start
				 */

				currentComponent = "tDie_4";

				ok_Hash.put("tDie_4", true);
				end_Hash.put("tDie_4", System.currentTimeMillis());

				/**
				 * [tDie_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_4 finally ] start
				 */

				currentComponent = "tDie_4";

				/**
				 * [tDie_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}

	public void tDie_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_3 begin ] start
				 */

				ok_Hash.put("tDie_3", false);
				start_Hash.put("tDie_3", System.currentTimeMillis());

				currentComponent = "tDie_3";

				int tos_count_tDie_3 = 0;

				/**
				 * [tDie_3 begin ] stop
				 */

				/**
				 * [tDie_3 main ] start
				 */

				currentComponent = "tDie_3";

				globalMap.put("tDie_3_DIE_PRIORITY", 5);
				System.err.println("Error: Observation_Fact");

				globalMap.put("tDie_3_DIE_MESSAGE", "Error: Observation_Fact");
				globalMap.put("tDie_3_DIE_MESSAGES", "Error: Observation_Fact");
				currentComponent = "tDie_3";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_3_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_3++;

				/**
				 * [tDie_3 main ] stop
				 */

				/**
				 * [tDie_3 end ] start
				 */

				currentComponent = "tDie_3";

				ok_Hash.put("tDie_3", true);
				end_Hash.put("tDie_3", System.currentTimeMillis());

				/**
				 * [tDie_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_3 finally ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				StatusListener.setSubStatus(StatusListener.getSubPerc(),
						"Observation Fact done! " + context.counter
								+ " rows imported.");

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class row34Struct implements
			routines.system.IPersistableComparableLookupRow<row34Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_NUM == null) ? 0
								: this.ENCOUNTER_NUM.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				result = prime
						* result
						+ ((this.PROVIDER_ID == null) ? 0 : this.PROVIDER_ID
								.hashCode());

				result = prime
						* result
						+ ((this.START_DATE == null) ? 0 : this.START_DATE
								.hashCode());

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				result = prime * result + (int) this.INSTANCE_NUM;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row34Struct other = (row34Struct) obj;

			if (this.ENCOUNTER_NUM == null) {
				if (other.ENCOUNTER_NUM != null)
					return false;

			} else if (!this.ENCOUNTER_NUM.equals(other.ENCOUNTER_NUM))

				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;

			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

				return false;

			if (this.PROVIDER_ID == null) {
				if (other.PROVIDER_ID != null)
					return false;

			} else if (!this.PROVIDER_ID.equals(other.PROVIDER_ID))

				return false;

			if (this.START_DATE == null) {
				if (other.START_DATE != null)
					return false;

			} else if (!this.START_DATE.equals(other.START_DATE))

				return false;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;

			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

				return false;

			if (this.INSTANCE_NUM != other.INSTANCE_NUM)
				return false;

			return true;
		}

		public void copyDataTo(row34Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;

		}

		public void copyKeysDataTo(row34Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// int

				dos.writeInt(this.INSTANCE_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_NUM,
					other.ENCOUNTER_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PROVIDER_ID,
					other.PROVIDER_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.START_DATE,
					other.START_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.INSTANCE_NUM,
					other.INSTANCE_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row34Struct row34 = new row34Struct();

				/**
				 * [tAdvancedHash_row34 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row34", false);
				start_Hash.put("tAdvancedHash_row34",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row34";

				int tos_count_tAdvancedHash_row34 = 0;

				// connection name:row34
				// source node:tJDBCInput_3 -
				// inputs:(after_tFileInputDelimited_9) outputs:(row34,row34) |
				// target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
				// linked node: tMap_7 - inputs:(row23,row34)
				// outputs:(out3,out14)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row34Struct> getLookup(matchingModeEnum_row34);

				globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);

				/**
				 * [tAdvancedHash_row34 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				String driverClass_tJDBCInput_3 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_3);

				String url_tJDBCInput_3 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_3 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_3 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_3 = decryptedPassword_tJDBCInput_3;

				conn_tJDBCInput_3 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_3, dbUser_tJDBCInput_3,
						dbPwd_tJDBCInput_3);

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = "select ENCOUNTER_NUM, CONCEPT_CD, PROVIDER_ID, START_DATE,MODIFIER_CD,INSTANCE_NUM from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);
				java.sql.ResultSet rs_tJDBCInput_3 = null;
				try {
					rs_tJDBCInput_3 = stmt_tJDBCInput_3
							.executeQuery(dbquery_tJDBCInput_3);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
							.getMetaData();
					int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
							.getColumnCount();

					String tmpContent_tJDBCInput_3 = null;

					while (rs_tJDBCInput_3.next()) {
						nb_line_tJDBCInput_3++;

						if (colQtyInRs_tJDBCInput_3 < 1) {
							row34.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_3.getObject(1) != null) {
								row34.ENCOUNTER_NUM = rs_tJDBCInput_3
										.getBigDecimal(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 2) {
							row34.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(2);
							if (tmpContent_tJDBCInput_3 != null) {
								row34.CONCEPT_CD = tmpContent_tJDBCInput_3;
							} else {
								row34.CONCEPT_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 3) {
							row34.PROVIDER_ID = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(3);
							if (tmpContent_tJDBCInput_3 != null) {
								row34.PROVIDER_ID = tmpContent_tJDBCInput_3;
							} else {
								row34.PROVIDER_ID = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 4) {
							row34.START_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(4);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(4);
							}
							row34.START_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 5) {
							row34.MODIFIER_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(5);
							if (tmpContent_tJDBCInput_3 != null) {
								row34.MODIFIER_CD = tmpContent_tJDBCInput_3;
							} else {
								row34.MODIFIER_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 6) {
							row34.INSTANCE_NUM = 0;
						} else {

							if (rs_tJDBCInput_3.getObject(6) != null) {
								row34.INSTANCE_NUM = rs_tJDBCInput_3.getInt(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tJDBCInput_3 begin ] stop
						 */

						/**
						 * [tJDBCInput_3 main ] start
						 */

						currentComponent = "tJDBCInput_3";

						tos_count_tJDBCInput_3++;

						/**
						 * [tJDBCInput_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row34 main ] start
						 */

						currentComponent = "tAdvancedHash_row34";

						row34Struct row34_HashRow = new row34Struct();

						row34_HashRow.ENCOUNTER_NUM = row34.ENCOUNTER_NUM;

						row34_HashRow.CONCEPT_CD = row34.CONCEPT_CD;

						row34_HashRow.PROVIDER_ID = row34.PROVIDER_ID;

						row34_HashRow.START_DATE = row34.START_DATE;

						row34_HashRow.MODIFIER_CD = row34.MODIFIER_CD;

						row34_HashRow.INSTANCE_NUM = row34.INSTANCE_NUM;

						tHash_Lookup_row34.put(row34_HashRow);

						tos_count_tAdvancedHash_row34++;

						/**
						 * [tAdvancedHash_row34 main ] stop
						 */

						/**
						 * [tJDBCInput_3 end ] start
						 */

						currentComponent = "tJDBCInput_3";

					}
				} finally {
					if (rs_tJDBCInput_3 != null) {
						rs_tJDBCInput_3.close();
					}
					stmt_tJDBCInput_3.close();

					if (conn_tJDBCInput_3 != null
							&& !conn_tJDBCInput_3.isClosed()) {

						conn_tJDBCInput_3.close();

					}
				}
				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row34 end ] start
				 */

				currentComponent = "tAdvancedHash_row34";

				tHash_Lookup_row34.endPut();

				ok_Hash.put("tAdvancedHash_row34", true);
				end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row34 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_3 finally ] start
				 */

				currentComponent = "tJDBCInput_3";

				/**
				 * [tJDBCInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row34 finally ] start
				 */

				currentComponent = "tAdvancedHash_row34";

				/**
				 * [tAdvancedHash_row34 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.C_FULLNAME == null) ? 0 : this.C_FULLNAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row44Struct other = (row44Struct) obj;

			if (this.C_FULLNAME == null) {
				if (other.C_FULLNAME != null)
					return false;

			} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))

				return false;

			return true;
		}

		public void copyDataTo(row44Struct other) {

			other.C_HLEVEL = this.C_HLEVEL;
			other.C_FULLNAME = this.C_FULLNAME;
			other.C_NAME = this.C_NAME;
			other.C_SYNONYM_CD = this.C_SYNONYM_CD;
			other.C_VISUALATTRIBUTES = this.C_VISUALATTRIBUTES;
			other.C_TOTALNUM = this.C_TOTALNUM;
			other.C_BASECODE = this.C_BASECODE;
			other.C_METADATAXML = this.C_METADATAXML;
			other.C_FACTTABLECOLUMN = this.C_FACTTABLECOLUMN;
			other.C_TABLENAME = this.C_TABLENAME;
			other.C_COLUMNNAME = this.C_COLUMNNAME;
			other.C_COLUMNDATATYPE = this.C_COLUMNDATATYPE;
			other.C_OPERATOR = this.C_OPERATOR;
			other.C_DIMCODE = this.C_DIMCODE;
			other.C_COMMENT = this.C_COMMENT;
			other.C_TOOLTIP = this.C_TOOLTIP;
			other.M_APPLIED_PATH = this.M_APPLIED_PATH;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.VALUETYPE_CD = this.VALUETYPE_CD;
			other.M_EXCLUSION_CD = this.M_EXCLUSION_CD;
			other.C_PATH = this.C_PATH;
			other.C_SYMBOL = this.C_SYMBOL;

		}

		public void copyKeysDataTo(row44Struct other) {

			other.C_FULLNAME = this.C_FULLNAME;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.C_FULLNAME,
					other.C_FULLNAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.C_FULLNAME == null) ? 0 : this.C_FULLNAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row29Struct other = (row29Struct) obj;

			if (this.C_FULLNAME == null) {
				if (other.C_FULLNAME != null)
					return false;

			} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))

				return false;

			return true;
		}

		public void copyDataTo(row29Struct other) {

			other.C_HLEVEL = this.C_HLEVEL;
			other.C_FULLNAME = this.C_FULLNAME;
			other.C_NAME = this.C_NAME;
			other.C_SYNONYM_CD = this.C_SYNONYM_CD;
			other.C_VISUALATTRIBUTES = this.C_VISUALATTRIBUTES;
			other.C_TOTALNUM = this.C_TOTALNUM;
			other.C_BASECODE = this.C_BASECODE;
			other.C_METADATAXML = this.C_METADATAXML;
			other.C_FACTTABLECOLUMN = this.C_FACTTABLECOLUMN;
			other.C_TABLENAME = this.C_TABLENAME;
			other.C_COLUMNNAME = this.C_COLUMNNAME;
			other.C_COLUMNDATATYPE = this.C_COLUMNDATATYPE;
			other.C_OPERATOR = this.C_OPERATOR;
			other.C_DIMCODE = this.C_DIMCODE;
			other.C_COMMENT = this.C_COMMENT;
			other.C_TOOLTIP = this.C_TOOLTIP;
			other.M_APPLIED_PATH = this.M_APPLIED_PATH;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.VALUETYPE_CD = this.VALUETYPE_CD;
			other.M_EXCLUSION_CD = this.M_EXCLUSION_CD;
			other.C_PATH = this.C_PATH;
			other.C_SYMBOL = this.C_SYMBOL;

		}

		public void copyKeysDataTo(row29Struct other) {

			other.C_FULLNAME = this.C_FULLNAME;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.C_FULLNAME,
					other.C_FULLNAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out12Struct implements
			routines.system.IPersistableRow<out12Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out13Struct implements
			routines.system.IPersistableRow<out13Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outtStruct implements
			routines.system.IPersistableRow<outtStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_10Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_10Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_10Process(globalMap);

				row9Struct row9 = new row9Struct();
				outtStruct outt = new outtStruct();
				row24Struct row24 = new row24Struct();
				out12Struct out12 = new out12Struct();
				row29Struct row29 = new row29Struct();
				out13Struct out13 = new out13Struct();
				row44Struct row44 = new row44Struct();

				/**
				 * [tJavaRow_10 begin ] start
				 */

				ok_Hash.put("tJavaRow_10", false);
				start_Hash.put("tJavaRow_10", System.currentTimeMillis());

				currentComponent = "tJavaRow_10";

				int tos_count_tJavaRow_10 = 0;

				int nb_line_tJavaRow_10 = 0;

				/**
				 * [tJavaRow_10 begin ] stop
				 */

				/**
				 * [tJDBCOutput_15 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_15", false);
				start_Hash.put("tJDBCOutput_15", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_15";

				int tos_count_tJDBCOutput_15 = 0;

				int nb_line_tJDBCOutput_15 = 0;
				int nb_line_update_tJDBCOutput_15 = 0;
				int nb_line_inserted_tJDBCOutput_15 = 0;
				int nb_line_deleted_tJDBCOutput_15 = 0;
				int nb_line_rejected_tJDBCOutput_15 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_15 = 0;

				int deletedCount_tJDBCOutput_15 = 0;
				int updatedCount_tJDBCOutput_15 = 0;
				int insertedCount_tJDBCOutput_15 = 0;
				int rejectedCount_tJDBCOutput_15 = 0;

				boolean whetherReject_tJDBCOutput_15 = false;

				java.sql.Connection connection_tJDBCOutput_15 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_15 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_15 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_15 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_15,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_15);

				resourceMap.put("conn_tJDBCOutput_15",
						connection_tJDBCOutput_15);
				connection_tJDBCOutput_15.setAutoCommit(false);
				int commitEvery_tJDBCOutput_15 = 500000;
				int commitCounter_tJDBCOutput_15 = 0;
				int batchSize_tJDBCOutput_15 = 250000;
				int batchSizeCounter_tJDBCOutput_15 = 0;

				String insert_tJDBCOutput_15 = "INSERT INTO "
						+ context.currentTable
						+ " (C_HLEVEL,C_FULLNAME,C_NAME,C_SYNONYM_CD,C_VISUALATTRIBUTES,C_TOTALNUM,C_BASECODE,C_METADATAXML,C_FACTTABLECOLUMN,C_TABLENAME,C_COLUMNNAME,C_COLUMNDATATYPE,C_OPERATOR,C_DIMCODE,C_COMMENT,C_TOOLTIP,M_APPLIED_PATH,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_EXCLUSION_CD,C_PATH,C_SYMBOL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_15 = connection_tJDBCOutput_15
						.prepareStatement(insert_tJDBCOutput_15);

				StringBuffer query_tJDBCOutput_15 = null;

				String[] insertSQLSplits_tJDBCOutput_15 = insert_tJDBCOutput_15
						.split("\\?");

				/**
				 * [tJDBCOutput_15 begin ] stop
				 */

				/**
				 * [tJavaRow_18 begin ] start
				 */

				ok_Hash.put("tJavaRow_18", false);
				start_Hash.put("tJavaRow_18", System.currentTimeMillis());

				currentComponent = "tJavaRow_18";

				int tos_count_tJavaRow_18 = 0;

				int nb_line_tJavaRow_18 = 0;

				/**
				 * [tJavaRow_18 begin ] stop
				 */

				/**
				 * [tJDBCOutput_18 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_18", false);
				start_Hash.put("tJDBCOutput_18", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_18";

				int tos_count_tJDBCOutput_18 = 0;

				int updateKeyCount_tJDBCOutput_18 = 1;
				if (updateKeyCount_tJDBCOutput_18 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_18 = 0;
				int nb_line_update_tJDBCOutput_18 = 0;
				int nb_line_inserted_tJDBCOutput_18 = 0;
				int nb_line_deleted_tJDBCOutput_18 = 0;
				int nb_line_rejected_tJDBCOutput_18 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_18 = 0;

				int deletedCount_tJDBCOutput_18 = 0;
				int updatedCount_tJDBCOutput_18 = 0;
				int insertedCount_tJDBCOutput_18 = 0;
				int rejectedCount_tJDBCOutput_18 = 0;

				boolean whetherReject_tJDBCOutput_18 = false;

				java.sql.Connection connection_tJDBCOutput_18 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_18 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_18 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_18 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_18,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_18);

				resourceMap.put("conn_tJDBCOutput_18",
						connection_tJDBCOutput_18);
				connection_tJDBCOutput_18.setAutoCommit(false);
				int commitEvery_tJDBCOutput_18 = 500000;
				int commitCounter_tJDBCOutput_18 = 0;
				int batchSize_tJDBCOutput_18 = 250000;
				int batchSizeCounter_tJDBCOutput_18 = 0;

				String update_tJDBCOutput_18 = "UPDATE "
						+ context.currentTable
						+ " SET C_HLEVEL = ?,C_NAME = ?,C_SYNONYM_CD = ?,C_VISUALATTRIBUTES = ?,C_TOTALNUM = ?,C_BASECODE = ?,C_METADATAXML = ?,C_FACTTABLECOLUMN = ?,C_TABLENAME = ?,C_COLUMNNAME = ?,C_COLUMNDATATYPE = ?,C_OPERATOR = ?,C_DIMCODE = ?,C_COMMENT = ?,C_TOOLTIP = ?,M_APPLIED_PATH = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,VALUETYPE_CD = ?,M_EXCLUSION_CD = ?,C_PATH = ?,C_SYMBOL = ? WHERE C_FULLNAME = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_18 = connection_tJDBCOutput_18
						.prepareStatement(update_tJDBCOutput_18);

				/**
				 * [tJDBCOutput_18 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				int tos_count_tMap_13 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) globalMap
						.get("tHash_Lookup_row43"));

				row43Struct row43HashKey = new row43Struct();
				row43Struct row43Default = new row43Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out12Struct out12_tmp = new out12Struct();
				out13Struct out13_tmp = new out13Struct();
				// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());

				currentComponent = "tUniqRow_6";

				int tos_count_tUniqRow_6 = 0;

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outtStruct outt_tmp = new outtStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				int footer_tFileInputDelimited_10 = 0;
				int totalLinetFileInputDelimited_10 = 0;
				int limittFileInputDelimited_10 = -1;
				int lastLinetFileInputDelimited_10 = -1;

				char fieldSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_10 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_10 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_10 = /**
				 * Start field
				 * tFileInputDelimited_10:FILENAME
				 */
				context.folderMain + context.folderOutput + "ontology.csv"/**
				 * End
				 * field tFileInputDelimited_10:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

				try {

					String[] rowtFileInputDelimited_10 = null;
					int currentLinetFileInputDelimited_10 = 0;
					int outputLinetFileInputDelimited_10 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_10 = 0;
							if (footer_value_tFileInputDelimited_10 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_10,
									fieldSeparator_tFileInputDelimited_10[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_10)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_10[0]);
						}

						csvReadertFileInputDelimited_10
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
							csvReadertFileInputDelimited_10.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_10[0]);

						csvReadertFileInputDelimited_10.setQuoteChar('"');

						csvReadertFileInputDelimited_10
								.setEscapeChar(csvReadertFileInputDelimited_10
										.getQuoteChar());

						if (footer_tFileInputDelimited_10 > 0) {
							for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 1; totalLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_10.readNext()) {

								rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
										.getValues();
								if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_10[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_10++;

								}

							}
							int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
									- footer_tFileInputDelimited_10 < 0 ? 0
									: totalLinetFileInputDelimited_10
											- footer_tFileInputDelimited_10;
							if (lastLinetFileInputDelimited_10 > 0) {
								lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
										: lastLineTemptFileInputDelimited_10;
							} else {
								lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
							}

							csvReadertFileInputDelimited_10.close();
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_10[0]);
							}
							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar('"');

							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

						}

						if (limittFileInputDelimited_10 != 0) {
							for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 1; currentLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
						}
						csvReadertFileInputDelimited_10
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_10 != 0
							&& csvReadertFileInputDelimited_10 != null
							&& csvReadertFileInputDelimited_10.readNext()) {

						rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
								.getValues();

						if (rowtFileInputDelimited_10.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_10[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_10++;

						if (lastLinetFileInputDelimited_10 > -1
								&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
							break;
						}
						outputLinetFileInputDelimited_10++;
						if (limittFileInputDelimited_10 > 0
								&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
							break;
						}

						row9 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row9 = new row9Struct();
						try {

							char fieldSeparator_tFileInputDelimited_10_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_10_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row9.C_HLEVEL = 0;

								row9.C_FULLNAME = null;

								row9.C_NAME = null;

								row9.C_SYNONYM_CD = null;

								row9.C_VISUALATTRIBUTES = null;

								row9.C_TOTALNUM = null;

								row9.C_BASECODE = null;

								row9.C_METADATAXML = null;

								row9.C_FACTTABLECOLUMN = null;

								row9.C_TABLENAME = null;

								row9.C_COLUMNNAME = null;

								row9.C_COLUMNDATATYPE = null;

								row9.C_OPERATOR = null;

								row9.C_DIMCODE = null;

								row9.C_COMMENT = null;

								row9.C_TOOLTIP = null;

								row9.M_APPLIED_PATH = null;

								row9.UPDATE_DATE = null;

								row9.DOWNLOAD_DATE = null;

								row9.IMPORT_DATE = null;

								row9.SOURCESYSTEM_CD = null;

								row9.VALUETYPE_CD = null;

								row9.M_EXCLUSION_CD = null;

								row9.C_PATH = null;

								row9.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_10 = 0;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.C_HLEVEL = ParserUtils
												.parseTo_int(rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]);

									} else {
										row9.C_HLEVEL = 0;
									}

								} else {
									row9.C_HLEVEL = 0;
								}

								columnIndexWithD_tFileInputDelimited_10 = 1;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_FULLNAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 2;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_NAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 3;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_SYNONYM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 4;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_VISUALATTRIBUTES = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 5;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.C_TOTALNUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]);

									} else {
										row9.C_TOTALNUM = null;
									}

								} else {
									row9.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 6;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_BASECODE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 7;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_METADATAXML = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 8;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_FACTTABLECOLUMN = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 9;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_TABLENAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 10;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COLUMNNAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 11;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COLUMNDATATYPE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 12;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_OPERATOR = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 13;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_DIMCODE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 14;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COMMENT = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 15;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_TOOLTIP = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 16;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.M_APPLIED_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 17;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.UPDATE_DATE = null;
									}

								} else {
									row9.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 18;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.DOWNLOAD_DATE = null;
									}

								} else {
									row9.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 19;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.IMPORT_DATE = null;
									}

								} else {
									row9.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 20;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.SOURCESYSTEM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 21;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.VALUETYPE_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 22;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.M_EXCLUSION_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 23;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 24;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_SYMBOL = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								outt = null;

								// # Output table : 'outt'
								// # Filter conditions
								if (

								row9.C_NAME.length() > 0

								) {
									outt_tmp.C_HLEVEL = context.DB_StagingI2B2_WHType
											.equalsIgnoreCase("transmart") ? row9.C_HLEVEL - 1
											: row9.C_HLEVEL;
									outt_tmp.C_FULLNAME = row9.C_FULLNAME;
									outt_tmp.C_NAME = row9.C_NAME;
									outt_tmp.C_SYNONYM_CD = row9.C_SYNONYM_CD;
									outt_tmp.C_VISUALATTRIBUTES = row9.C_VISUALATTRIBUTES;
									outt_tmp.C_TOTALNUM = row9.C_TOTALNUM;
									outt_tmp.C_BASECODE = row9.C_BASECODE;
									outt_tmp.C_METADATAXML = row9.C_METADATAXML;
									outt_tmp.C_FACTTABLECOLUMN = row9.C_FACTTABLECOLUMN;
									outt_tmp.C_TABLENAME = row9.C_TABLENAME;
									outt_tmp.C_COLUMNNAME = row9.C_COLUMNNAME;
									outt_tmp.C_COLUMNDATATYPE = row9.C_COLUMNDATATYPE;
									outt_tmp.C_OPERATOR = row9.C_OPERATOR;
									outt_tmp.C_DIMCODE = row9.C_DIMCODE;
									outt_tmp.C_COMMENT = row9.C_COMMENT;
									outt_tmp.C_TOOLTIP = row9.C_TOOLTIP;
									outt_tmp.M_APPLIED_PATH = row9.M_APPLIED_PATH;
									outt_tmp.UPDATE_DATE = row9.UPDATE_DATE;
									outt_tmp.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;
									outt_tmp.IMPORT_DATE = row9.IMPORT_DATE;
									outt_tmp.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;
									outt_tmp.VALUETYPE_CD = row9.VALUETYPE_CD;
									outt_tmp.M_EXCLUSION_CD = row9.M_EXCLUSION_CD;
									outt_tmp.C_PATH = row9.C_PATH;
									outt_tmp.C_SYMBOL = row9.C_SYMBOL;
									outt = outt_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "outt"
							if (outt != null) {

								/**
								 * [tUniqRow_6 main ] start
								 */

								currentComponent = "tUniqRow_6";

								row24.C_HLEVEL = outt.C_HLEVEL;
								row24.C_FULLNAME = outt.C_FULLNAME;
								row24.C_NAME = outt.C_NAME;
								row24.C_SYNONYM_CD = outt.C_SYNONYM_CD;
								row24.C_VISUALATTRIBUTES = outt.C_VISUALATTRIBUTES;
								row24.C_TOTALNUM = outt.C_TOTALNUM;
								row24.C_BASECODE = outt.C_BASECODE;
								row24.C_METADATAXML = outt.C_METADATAXML;
								row24.C_FACTTABLECOLUMN = outt.C_FACTTABLECOLUMN;
								row24.C_TABLENAME = outt.C_TABLENAME;
								row24.C_COLUMNNAME = outt.C_COLUMNNAME;
								row24.C_COLUMNDATATYPE = outt.C_COLUMNDATATYPE;
								row24.C_OPERATOR = outt.C_OPERATOR;
								row24.C_DIMCODE = outt.C_DIMCODE;
								row24.C_COMMENT = outt.C_COMMENT;
								row24.C_TOOLTIP = outt.C_TOOLTIP;
								row24.M_APPLIED_PATH = outt.M_APPLIED_PATH;
								row24.UPDATE_DATE = outt.UPDATE_DATE;
								row24.DOWNLOAD_DATE = outt.DOWNLOAD_DATE;
								row24.IMPORT_DATE = outt.IMPORT_DATE;
								row24.SOURCESYSTEM_CD = outt.SOURCESYSTEM_CD;
								row24.VALUETYPE_CD = outt.VALUETYPE_CD;
								row24.M_EXCLUSION_CD = outt.M_EXCLUSION_CD;
								row24.C_PATH = outt.C_PATH;
								row24.C_SYMBOL = outt.C_SYMBOL;

								tos_count_tUniqRow_6++;

								/**
								 * [tUniqRow_6 main ] stop
								 */
								// Start of branch "row24"
								if (row24 != null) {

									/**
									 * [tMap_13 main ] start
									 */

									currentComponent = "tMap_13";

									boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_13 = false;
									boolean mainRowRejected_tMap_13 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row43"
									// /////////////////////////////////////////////

									boolean forceLooprow43 = false;

									row43Struct row43ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_13) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_13 = false;

										row43HashKey.C_DIMCODE = row24.C_DIMCODE;

										row43HashKey.hashCodeDirty = true;

										tHash_Lookup_row43.lookup(row43HashKey);

										if (!tHash_Lookup_row43.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_13 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row43 != null
											&& tHash_Lookup_row43
													.getCount(row43HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row43' and it contains more one result from keys :  row43.C_DIMCODE = '"
										// + row43HashKey.C_DIMCODE + "'");
									} // G 071

									row43Struct row43 = null;

									row43Struct fromLookup_row43 = null;
									row43 = row43Default;

									if (tHash_Lookup_row43 != null
											&& tHash_Lookup_row43.hasNext()) { // G
																				// 099

										fromLookup_row43 = tHash_Lookup_row43
												.next();

									} // G 099

									if (fromLookup_row43 != null) {
										row43 = fromLookup_row43;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
										// ###############################
										// # Output tables

										out13 = null;
										out12 = null;

										if (!rejectedInnerJoin_tMap_13) {

											// # Output table : 'out13'
											out13_tmp.C_HLEVEL = row24.C_HLEVEL;
											out13_tmp.C_FULLNAME = row24.C_FULLNAME;
											out13_tmp.C_NAME = row24.C_NAME;
											out13_tmp.C_SYNONYM_CD = row24.C_SYNONYM_CD;
											out13_tmp.C_VISUALATTRIBUTES = row24.C_VISUALATTRIBUTES;
											out13_tmp.C_TOTALNUM = row24.C_TOTALNUM;
											out13_tmp.C_BASECODE = row24.C_BASECODE;
											out13_tmp.C_METADATAXML = row24.C_METADATAXML;
											out13_tmp.C_FACTTABLECOLUMN = row24.C_FACTTABLECOLUMN;
											out13_tmp.C_TABLENAME = row24.C_TABLENAME;
											out13_tmp.C_COLUMNNAME = row24.C_COLUMNNAME;
											out13_tmp.C_COLUMNDATATYPE = row24.C_COLUMNDATATYPE;
											out13_tmp.C_OPERATOR = row24.C_OPERATOR;
											out13_tmp.C_DIMCODE = row24.C_DIMCODE;
											out13_tmp.C_COMMENT = row24.C_COMMENT;
											out13_tmp.C_TOOLTIP = row24.C_TOOLTIP;
											out13_tmp.M_APPLIED_PATH = row24.M_APPLIED_PATH;
											out13_tmp.UPDATE_DATE = row24.UPDATE_DATE;
											out13_tmp.DOWNLOAD_DATE = row24.DOWNLOAD_DATE;
											out13_tmp.IMPORT_DATE = row24.IMPORT_DATE;
											out13_tmp.SOURCESYSTEM_CD = row24.SOURCESYSTEM_CD;
											out13_tmp.VALUETYPE_CD = row24.VALUETYPE_CD;
											out13_tmp.M_EXCLUSION_CD = row24.M_EXCLUSION_CD;
											out13_tmp.C_PATH = row24.C_PATH;
											out13_tmp.C_SYMBOL = row24.C_SYMBOL;
											out13 = out13_tmp;
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table : 'out12'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_13) {
											out12_tmp.C_HLEVEL = row24.C_HLEVEL;
											out12_tmp.C_FULLNAME = row24.C_FULLNAME;
											out12_tmp.C_NAME = row24.C_NAME;
											out12_tmp.C_SYNONYM_CD = row24.C_SYNONYM_CD;
											out12_tmp.C_VISUALATTRIBUTES = row24.C_VISUALATTRIBUTES;
											out12_tmp.C_TOTALNUM = row24.C_TOTALNUM;
											out12_tmp.C_BASECODE = row24.C_BASECODE;
											out12_tmp.C_METADATAXML = row24.C_METADATAXML;
											out12_tmp.C_FACTTABLECOLUMN = row24.C_FACTTABLECOLUMN;
											out12_tmp.C_TABLENAME = row24.C_TABLENAME;
											out12_tmp.C_COLUMNNAME = row24.C_COLUMNNAME;
											out12_tmp.C_COLUMNDATATYPE = row24.C_COLUMNDATATYPE;
											out12_tmp.C_OPERATOR = row24.C_OPERATOR;
											out12_tmp.C_DIMCODE = row24.C_DIMCODE;
											out12_tmp.C_COMMENT = row24.C_COMMENT;
											out12_tmp.C_TOOLTIP = row24.C_TOOLTIP;
											out12_tmp.M_APPLIED_PATH = row24.M_APPLIED_PATH;
											out12_tmp.UPDATE_DATE = row24.UPDATE_DATE;
											out12_tmp.DOWNLOAD_DATE = row24.DOWNLOAD_DATE;
											out12_tmp.IMPORT_DATE = row24.IMPORT_DATE;
											out12_tmp.SOURCESYSTEM_CD = (row24.SOURCESYSTEM_CD
													.equals("")) ? null
													: row24.SOURCESYSTEM_CD;
											out12_tmp.VALUETYPE_CD = row24.VALUETYPE_CD;
											out12_tmp.M_EXCLUSION_CD = (row24.M_EXCLUSION_CD
													.equals("")) ? null
													: row24.M_EXCLUSION_CD;
											out12_tmp.C_PATH = row24.C_PATH;
											out12_tmp.C_SYMBOL = (row24.C_SYMBOL
													.equals("")) ? null
													: row24.C_SYMBOL;
											out12 = out12_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_13 = false;

									tos_count_tMap_13++;

									/**
									 * [tMap_13 main ] stop
									 */
									// Start of branch "out12"
									if (out12 != null) {

										/**
										 * [tJDBCOutput_15 main ] start
										 */

										currentComponent = "tJDBCOutput_15";

										row29 = null;
										query_tJDBCOutput_15 = new StringBuffer(
												"");
										whetherReject_tJDBCOutput_15 = false;
										pstmt_tJDBCOutput_15.setInt(1,
												out12.C_HLEVEL);

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(insertSQLSplits_tJDBCOutput_15[0])
												.append(String
														.valueOf(out12.C_HLEVEL))
												.append(insertSQLSplits_tJDBCOutput_15[1]);
										if (out12.C_FULLNAME == null) {
											pstmt_tJDBCOutput_15.setNull(2,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(2,
													out12.C_FULLNAME);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_FULLNAME == null ? "null"
														: "'"
																+ out12.C_FULLNAME
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[2]);
										if (out12.C_NAME == null) {
											pstmt_tJDBCOutput_15.setNull(3,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(3,
													out12.C_NAME);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_NAME == null ? "null"
														: "'" + out12.C_NAME
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[3]);
										if (out12.C_SYNONYM_CD == null) {
											pstmt_tJDBCOutput_15.setNull(4,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(4,
													out12.C_SYNONYM_CD);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_SYNONYM_CD == null ? "null"
														: "'"
																+ out12.C_SYNONYM_CD
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[4]);
										if (out12.C_VISUALATTRIBUTES == null) {
											pstmt_tJDBCOutput_15.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(5,
													out12.C_VISUALATTRIBUTES);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_VISUALATTRIBUTES == null ? "null"
														: "'"
																+ out12.C_VISUALATTRIBUTES
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[5]);
										pstmt_tJDBCOutput_15.setBigDecimal(6,
												out12.C_TOTALNUM);

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_TOTALNUM == null ? "null"
														: String.valueOf(out12.C_TOTALNUM))
												.append(insertSQLSplits_tJDBCOutput_15[6]);
										if (out12.C_BASECODE == null) {
											pstmt_tJDBCOutput_15.setNull(7,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(7,
													out12.C_BASECODE);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_BASECODE == null ? "null"
														: "'"
																+ out12.C_BASECODE
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[7]);
										if (out12.C_METADATAXML == null) {
											pstmt_tJDBCOutput_15.setNull(8,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(8,
													out12.C_METADATAXML);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_METADATAXML == null ? "null"
														: "'"
																+ out12.C_METADATAXML
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[8]);
										if (out12.C_FACTTABLECOLUMN == null) {
											pstmt_tJDBCOutput_15.setNull(9,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(9,
													out12.C_FACTTABLECOLUMN);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_FACTTABLECOLUMN == null ? "null"
														: "'"
																+ out12.C_FACTTABLECOLUMN
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[9]);
										if (out12.C_TABLENAME == null) {
											pstmt_tJDBCOutput_15.setNull(10,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(10,
													out12.C_TABLENAME);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_TABLENAME == null ? "null"
														: "'"
																+ out12.C_TABLENAME
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[10]);
										if (out12.C_COLUMNNAME == null) {
											pstmt_tJDBCOutput_15.setNull(11,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(11,
													out12.C_COLUMNNAME);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_COLUMNNAME == null ? "null"
														: "'"
																+ out12.C_COLUMNNAME
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[11]);
										if (out12.C_COLUMNDATATYPE == null) {
											pstmt_tJDBCOutput_15.setNull(12,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(12,
													out12.C_COLUMNDATATYPE);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_COLUMNDATATYPE == null ? "null"
														: "'"
																+ out12.C_COLUMNDATATYPE
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[12]);
										if (out12.C_OPERATOR == null) {
											pstmt_tJDBCOutput_15.setNull(13,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(13,
													out12.C_OPERATOR);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_OPERATOR == null ? "null"
														: "'"
																+ out12.C_OPERATOR
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[13]);
										if (out12.C_DIMCODE == null) {
											pstmt_tJDBCOutput_15.setNull(14,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(14,
													out12.C_DIMCODE);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_DIMCODE == null ? "null"
														: "'" + out12.C_DIMCODE
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[14]);
										if (out12.C_COMMENT == null) {
											pstmt_tJDBCOutput_15.setNull(15,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(15,
													out12.C_COMMENT);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_COMMENT == null ? "null"
														: "'" + out12.C_COMMENT
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[15]);
										if (out12.C_TOOLTIP == null) {
											pstmt_tJDBCOutput_15.setNull(16,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(16,
													out12.C_TOOLTIP);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_TOOLTIP == null ? "null"
														: "'" + out12.C_TOOLTIP
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[16]);
										if (out12.M_APPLIED_PATH == null) {
											pstmt_tJDBCOutput_15.setNull(17,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(17,
													out12.M_APPLIED_PATH);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.M_APPLIED_PATH == null ? "null"
														: "'"
																+ out12.M_APPLIED_PATH
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[17]);
										if (out12.UPDATE_DATE != null) {
											pstmt_tJDBCOutput_15
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	out12.UPDATE_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_15.setNull(18,
													java.sql.Types.DATE);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.UPDATE_DATE == null ? "null"
														: "'"
																+ new java.text.SimpleDateFormat(
																		"dd-MM-yyyy")
																		.format(out12.UPDATE_DATE)
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[18]);
										if (out12.DOWNLOAD_DATE != null) {
											pstmt_tJDBCOutput_15
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	out12.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_15.setNull(19,
													java.sql.Types.DATE);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.DOWNLOAD_DATE == null ? "null"
														: "'"
																+ new java.text.SimpleDateFormat(
																		"dd-MM-yyyy")
																		.format(out12.DOWNLOAD_DATE)
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[19]);
										if (out12.IMPORT_DATE != null) {
											pstmt_tJDBCOutput_15
													.setTimestamp(
															20,
															new java.sql.Timestamp(
																	out12.IMPORT_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_15.setNull(20,
													java.sql.Types.DATE);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.IMPORT_DATE == null ? "null"
														: "'"
																+ new java.text.SimpleDateFormat(
																		"dd-MM-yyyy")
																		.format(out12.IMPORT_DATE)
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[20]);
										if (out12.SOURCESYSTEM_CD == null) {
											pstmt_tJDBCOutput_15.setNull(21,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(21,
													out12.SOURCESYSTEM_CD);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.SOURCESYSTEM_CD == null ? "null"
														: "'"
																+ out12.SOURCESYSTEM_CD
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[21]);
										if (out12.VALUETYPE_CD == null) {
											pstmt_tJDBCOutput_15.setNull(22,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(22,
													out12.VALUETYPE_CD);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.VALUETYPE_CD == null ? "null"
														: "'"
																+ out12.VALUETYPE_CD
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[22]);
										if (out12.M_EXCLUSION_CD == null) {
											pstmt_tJDBCOutput_15.setNull(23,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(23,
													out12.M_EXCLUSION_CD);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.M_EXCLUSION_CD == null ? "null"
														: "'"
																+ out12.M_EXCLUSION_CD
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[23]);
										if (out12.C_PATH == null) {
											pstmt_tJDBCOutput_15.setNull(24,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(24,
													out12.C_PATH);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_PATH == null ? "null"
														: "'" + out12.C_PATH
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[24]);
										if (out12.C_SYMBOL == null) {
											pstmt_tJDBCOutput_15.setNull(25,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_15.setString(25,
													out12.C_SYMBOL);
										}

										query_tJDBCOutput_15 = query_tJDBCOutput_15
												.append(out12.C_SYMBOL == null ? "null"
														: "'" + out12.C_SYMBOL
																+ "'")
												.append(insertSQLSplits_tJDBCOutput_15[25]);
										globalMap.put("tJDBCOutput_15_QUERY",
												query_tJDBCOutput_15.toString()
														.trim());
										pstmt_tJDBCOutput_15.addBatch();
										nb_line_tJDBCOutput_15++;

										batchSizeCounter_tJDBCOutput_15++;
										if (!whetherReject_tJDBCOutput_15) {
											row29 = new row29Struct();
											row29.C_HLEVEL = out12.C_HLEVEL;
											row29.C_FULLNAME = out12.C_FULLNAME;
											row29.C_NAME = out12.C_NAME;
											row29.C_SYNONYM_CD = out12.C_SYNONYM_CD;
											row29.C_VISUALATTRIBUTES = out12.C_VISUALATTRIBUTES;
											row29.C_TOTALNUM = out12.C_TOTALNUM;
											row29.C_BASECODE = out12.C_BASECODE;
											row29.C_METADATAXML = out12.C_METADATAXML;
											row29.C_FACTTABLECOLUMN = out12.C_FACTTABLECOLUMN;
											row29.C_TABLENAME = out12.C_TABLENAME;
											row29.C_COLUMNNAME = out12.C_COLUMNNAME;
											row29.C_COLUMNDATATYPE = out12.C_COLUMNDATATYPE;
											row29.C_OPERATOR = out12.C_OPERATOR;
											row29.C_DIMCODE = out12.C_DIMCODE;
											row29.C_COMMENT = out12.C_COMMENT;
											row29.C_TOOLTIP = out12.C_TOOLTIP;
											row29.M_APPLIED_PATH = out12.M_APPLIED_PATH;
											row29.UPDATE_DATE = out12.UPDATE_DATE;
											row29.DOWNLOAD_DATE = out12.DOWNLOAD_DATE;
											row29.IMPORT_DATE = out12.IMPORT_DATE;
											row29.SOURCESYSTEM_CD = out12.SOURCESYSTEM_CD;
											row29.VALUETYPE_CD = out12.VALUETYPE_CD;
											row29.M_EXCLUSION_CD = out12.M_EXCLUSION_CD;
											row29.C_PATH = out12.C_PATH;
											row29.C_SYMBOL = out12.C_SYMBOL;
										}
										if (batchSize_tJDBCOutput_15 <= batchSizeCounter_tJDBCOutput_15) {
											int[] status_tJDBCOutput_15 = null;
											int countSum_tJDBCOutput_15 = 0;
											try {
												batchSizeCounter_tJDBCOutput_15 = 0;

												status_tJDBCOutput_15 = pstmt_tJDBCOutput_15
														.executeBatch();

												for (int countEach_tJDBCOutput_15 : status_tJDBCOutput_15) {
													countSum_tJDBCOutput_15 += (countEach_tJDBCOutput_15 < 0 ? 0
															: countEach_tJDBCOutput_15);
												}
											} catch (java.sql.BatchUpdateException e) {

												throw (e);

											}
											try {
												tmp_batchUpdateCount_tJDBCOutput_15 = pstmt_tJDBCOutput_15
														.getUpdateCount();
											} catch (java.sql.SQLException e) {

											}
											tmp_batchUpdateCount_tJDBCOutput_15 = tmp_batchUpdateCount_tJDBCOutput_15 > countSum_tJDBCOutput_15 ? tmp_batchUpdateCount_tJDBCOutput_15
													: countSum_tJDBCOutput_15;

											insertedCount_tJDBCOutput_15 += tmp_batchUpdateCount_tJDBCOutput_15;

										}

										commitCounter_tJDBCOutput_15++;
										if (commitEvery_tJDBCOutput_15 <= commitCounter_tJDBCOutput_15) {

											connection_tJDBCOutput_15.commit();
											commitCounter_tJDBCOutput_15 = 0;
										}

										tos_count_tJDBCOutput_15++;

										/**
										 * [tJDBCOutput_15 main ] stop
										 */
										// Start of branch "row29"
										if (row29 != null) {

											/**
											 * [tJavaRow_10 main ] start
											 */

											currentComponent = "tJavaRow_10";

											context.counter++;

											if (context.counter % 1000 == 0) {
												StatusListener
														.setSubStatus(
																StatusListener
																		.getSubPerc(),
																"Ontology: "
																		+ context.counter
																		+ " rows imported.");
											}
											nb_line_tJavaRow_10++;

											tos_count_tJavaRow_10++;

											/**
											 * [tJavaRow_10 main ] stop
											 */

										} // End of branch "row29"

									} // End of branch "out12"

									// Start of branch "out13"
									if (out13 != null) {

										/**
										 * [tJDBCOutput_18 main ] start
										 */

										currentComponent = "tJDBCOutput_18";

										row44 = null;
										whetherReject_tJDBCOutput_18 = false;
										pstmt_tJDBCOutput_18.setInt(1,
												out13.C_HLEVEL);

										if (out13.C_NAME == null) {
											pstmt_tJDBCOutput_18.setNull(2,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(2,
													out13.C_NAME);
										}

										if (out13.C_SYNONYM_CD == null) {
											pstmt_tJDBCOutput_18.setNull(3,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(3,
													out13.C_SYNONYM_CD);
										}

										if (out13.C_VISUALATTRIBUTES == null) {
											pstmt_tJDBCOutput_18.setNull(4,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(4,
													out13.C_VISUALATTRIBUTES);
										}

										pstmt_tJDBCOutput_18.setBigDecimal(5,
												out13.C_TOTALNUM);

										if (out13.C_BASECODE == null) {
											pstmt_tJDBCOutput_18.setNull(6,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(6,
													out13.C_BASECODE);
										}

										if (out13.C_METADATAXML == null) {
											pstmt_tJDBCOutput_18.setNull(7,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(7,
													out13.C_METADATAXML);
										}

										if (out13.C_FACTTABLECOLUMN == null) {
											pstmt_tJDBCOutput_18.setNull(8,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(8,
													out13.C_FACTTABLECOLUMN);
										}

										if (out13.C_TABLENAME == null) {
											pstmt_tJDBCOutput_18.setNull(9,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(9,
													out13.C_TABLENAME);
										}

										if (out13.C_COLUMNNAME == null) {
											pstmt_tJDBCOutput_18.setNull(10,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(10,
													out13.C_COLUMNNAME);
										}

										if (out13.C_COLUMNDATATYPE == null) {
											pstmt_tJDBCOutput_18.setNull(11,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(11,
													out13.C_COLUMNDATATYPE);
										}

										if (out13.C_OPERATOR == null) {
											pstmt_tJDBCOutput_18.setNull(12,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(12,
													out13.C_OPERATOR);
										}

										if (out13.C_DIMCODE == null) {
											pstmt_tJDBCOutput_18.setNull(13,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(13,
													out13.C_DIMCODE);
										}

										if (out13.C_COMMENT == null) {
											pstmt_tJDBCOutput_18.setNull(14,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(14,
													out13.C_COMMENT);
										}

										if (out13.C_TOOLTIP == null) {
											pstmt_tJDBCOutput_18.setNull(15,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(15,
													out13.C_TOOLTIP);
										}

										if (out13.M_APPLIED_PATH == null) {
											pstmt_tJDBCOutput_18.setNull(16,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(16,
													out13.M_APPLIED_PATH);
										}

										if (out13.UPDATE_DATE != null) {
											pstmt_tJDBCOutput_18
													.setTimestamp(
															17,
															new java.sql.Timestamp(
																	out13.UPDATE_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_18.setNull(17,
													java.sql.Types.DATE);
										}

										if (out13.DOWNLOAD_DATE != null) {
											pstmt_tJDBCOutput_18
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	out13.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_18.setNull(18,
													java.sql.Types.DATE);
										}

										if (out13.IMPORT_DATE != null) {
											pstmt_tJDBCOutput_18
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	out13.IMPORT_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_18.setNull(19,
													java.sql.Types.DATE);
										}

										if (out13.SOURCESYSTEM_CD == null) {
											pstmt_tJDBCOutput_18.setNull(20,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(20,
													out13.SOURCESYSTEM_CD);
										}

										if (out13.VALUETYPE_CD == null) {
											pstmt_tJDBCOutput_18.setNull(21,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(21,
													out13.VALUETYPE_CD);
										}

										if (out13.M_EXCLUSION_CD == null) {
											pstmt_tJDBCOutput_18.setNull(22,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(22,
													out13.M_EXCLUSION_CD);
										}

										if (out13.C_PATH == null) {
											pstmt_tJDBCOutput_18.setNull(23,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(23,
													out13.C_PATH);
										}

										if (out13.C_SYMBOL == null) {
											pstmt_tJDBCOutput_18.setNull(24,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(24,
													out13.C_SYMBOL);
										}

										if (out13.C_FULLNAME == null) {
											pstmt_tJDBCOutput_18.setNull(25,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_18.setString(25,
													out13.C_FULLNAME);
										}

										pstmt_tJDBCOutput_18.addBatch();
										nb_line_tJDBCOutput_18++;

										batchSizeCounter_tJDBCOutput_18++;
										if (!whetherReject_tJDBCOutput_18) {
											row44 = new row44Struct();
											row44.C_HLEVEL = out13.C_HLEVEL;
											row44.C_FULLNAME = out13.C_FULLNAME;
											row44.C_NAME = out13.C_NAME;
											row44.C_SYNONYM_CD = out13.C_SYNONYM_CD;
											row44.C_VISUALATTRIBUTES = out13.C_VISUALATTRIBUTES;
											row44.C_TOTALNUM = out13.C_TOTALNUM;
											row44.C_BASECODE = out13.C_BASECODE;
											row44.C_METADATAXML = out13.C_METADATAXML;
											row44.C_FACTTABLECOLUMN = out13.C_FACTTABLECOLUMN;
											row44.C_TABLENAME = out13.C_TABLENAME;
											row44.C_COLUMNNAME = out13.C_COLUMNNAME;
											row44.C_COLUMNDATATYPE = out13.C_COLUMNDATATYPE;
											row44.C_OPERATOR = out13.C_OPERATOR;
											row44.C_DIMCODE = out13.C_DIMCODE;
											row44.C_COMMENT = out13.C_COMMENT;
											row44.C_TOOLTIP = out13.C_TOOLTIP;
											row44.M_APPLIED_PATH = out13.M_APPLIED_PATH;
											row44.UPDATE_DATE = out13.UPDATE_DATE;
											row44.DOWNLOAD_DATE = out13.DOWNLOAD_DATE;
											row44.IMPORT_DATE = out13.IMPORT_DATE;
											row44.SOURCESYSTEM_CD = out13.SOURCESYSTEM_CD;
											row44.VALUETYPE_CD = out13.VALUETYPE_CD;
											row44.M_EXCLUSION_CD = out13.M_EXCLUSION_CD;
											row44.C_PATH = out13.C_PATH;
											row44.C_SYMBOL = out13.C_SYMBOL;
										}
										if (batchSize_tJDBCOutput_18 <= batchSizeCounter_tJDBCOutput_18) {
											int[] status_tJDBCOutput_18 = null;
											int countSum_tJDBCOutput_18 = 0;
											try {
												batchSizeCounter_tJDBCOutput_18 = 0;

												status_tJDBCOutput_18 = pstmt_tJDBCOutput_18
														.executeBatch();

												for (int countEach_tJDBCOutput_18 : status_tJDBCOutput_18) {
													countSum_tJDBCOutput_18 += (countEach_tJDBCOutput_18 < 0 ? 0
															: countEach_tJDBCOutput_18);
												}
											} catch (java.sql.BatchUpdateException e) {

												throw (e);

											}
											try {
												tmp_batchUpdateCount_tJDBCOutput_18 = pstmt_tJDBCOutput_18
														.getUpdateCount();
											} catch (java.sql.SQLException e) {

											}
											tmp_batchUpdateCount_tJDBCOutput_18 = tmp_batchUpdateCount_tJDBCOutput_18 > countSum_tJDBCOutput_18 ? tmp_batchUpdateCount_tJDBCOutput_18
													: countSum_tJDBCOutput_18;

											updatedCount_tJDBCOutput_18 += tmp_batchUpdateCount_tJDBCOutput_18;

										}

										commitCounter_tJDBCOutput_18++;
										if (commitEvery_tJDBCOutput_18 <= commitCounter_tJDBCOutput_18) {

											connection_tJDBCOutput_18.commit();
											commitCounter_tJDBCOutput_18 = 0;
										}

										tos_count_tJDBCOutput_18++;

										/**
										 * [tJDBCOutput_18 main ] stop
										 */
										// Start of branch "row44"
										if (row44 != null) {

											/**
											 * [tJavaRow_18 main ] start
											 */

											currentComponent = "tJavaRow_18";

											context.counter++;

											if (context.counter % 1000 == 0) {
												StatusListener
														.setSubStatus(
																StatusListener
																		.getSubPerc(),
																"Ontology: "
																		+ context.counter
																		+ " rows imported.");
											}
											nb_line_tJavaRow_18++;

											tos_count_tJavaRow_18++;

											/**
											 * [tJavaRow_18 main ] stop
											 */

										} // End of branch "row44"

									} // End of branch "out13"

								} // End of branch "row24"

							} // End of branch "outt"

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						nb_line_tFileInputDelimited_10++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_10 != null) {
							csvReadertFileInputDelimited_10.close();
						}
					}
					if (csvReadertFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								nb_line_tFileInputDelimited_10);
					}

				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES",
						nb_duplicates_tUniqRow_6);

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row43 != null) {
					tHash_Lookup_row43.endGet();
				}
				globalMap.remove("tHash_Lookup_row43");

				// ###############################

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tJDBCOutput_15 end ] start
				 */

				currentComponent = "tJDBCOutput_15";

				int[] status_tJDBCOutput_15 = null;
				int countSum_tJDBCOutput_15 = 0;
				try {
					if (pstmt_tJDBCOutput_15 != null
							&& batchSizeCounter_tJDBCOutput_15 > 0) {

						status_tJDBCOutput_15 = pstmt_tJDBCOutput_15
								.executeBatch();

						for (int countEach_tJDBCOutput_15 : status_tJDBCOutput_15) {
							countSum_tJDBCOutput_15 += (countEach_tJDBCOutput_15 < 0 ? 0
									: countEach_tJDBCOutput_15);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_15 != null
						&& batchSizeCounter_tJDBCOutput_15 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_15 = pstmt_tJDBCOutput_15
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_15 = tmp_batchUpdateCount_tJDBCOutput_15 > countSum_tJDBCOutput_15 ? tmp_batchUpdateCount_tJDBCOutput_15
							: countSum_tJDBCOutput_15;

					insertedCount_tJDBCOutput_15 += tmp_batchUpdateCount_tJDBCOutput_15;

				}
				if (pstmt_tJDBCOutput_15 != null) {

					pstmt_tJDBCOutput_15.close();

				}

				if (commitCounter_tJDBCOutput_15 > 0) {

					connection_tJDBCOutput_15.commit();

				}

				connection_tJDBCOutput_15.close();

				resourceMap.put("finish_tJDBCOutput_15", true);

				nb_line_deleted_tJDBCOutput_15 = nb_line_deleted_tJDBCOutput_15
						+ deletedCount_tJDBCOutput_15;
				nb_line_update_tJDBCOutput_15 = nb_line_update_tJDBCOutput_15
						+ updatedCount_tJDBCOutput_15;
				nb_line_inserted_tJDBCOutput_15 = nb_line_inserted_tJDBCOutput_15
						+ insertedCount_tJDBCOutput_15;
				nb_line_rejected_tJDBCOutput_15 = nb_line_rejected_tJDBCOutput_15
						+ rejectedCount_tJDBCOutput_15;

				globalMap.put("tJDBCOutput_15_NB_LINE", nb_line_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_15);

				ok_Hash.put("tJDBCOutput_15", true);
				end_Hash.put("tJDBCOutput_15", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_15 end ] stop
				 */

				/**
				 * [tJavaRow_10 end ] start
				 */

				currentComponent = "tJavaRow_10";

				globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

				ok_Hash.put("tJavaRow_10", true);
				end_Hash.put("tJavaRow_10", System.currentTimeMillis());

				/**
				 * [tJavaRow_10 end ] stop
				 */

				/**
				 * [tJDBCOutput_18 end ] start
				 */

				currentComponent = "tJDBCOutput_18";

				int[] status_tJDBCOutput_18 = null;
				int countSum_tJDBCOutput_18 = 0;
				try {
					if (pstmt_tJDBCOutput_18 != null
							&& batchSizeCounter_tJDBCOutput_18 > 0) {

						status_tJDBCOutput_18 = pstmt_tJDBCOutput_18
								.executeBatch();

						for (int countEach_tJDBCOutput_18 : status_tJDBCOutput_18) {
							countSum_tJDBCOutput_18 += (countEach_tJDBCOutput_18 < 0 ? 0
									: countEach_tJDBCOutput_18);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_18 != null
						&& batchSizeCounter_tJDBCOutput_18 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_18 = pstmt_tJDBCOutput_18
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_18 = tmp_batchUpdateCount_tJDBCOutput_18 > countSum_tJDBCOutput_18 ? tmp_batchUpdateCount_tJDBCOutput_18
							: countSum_tJDBCOutput_18;

					updatedCount_tJDBCOutput_18 += tmp_batchUpdateCount_tJDBCOutput_18;

				}
				if (pstmt_tJDBCOutput_18 != null) {

					pstmt_tJDBCOutput_18.close();

				}

				if (commitCounter_tJDBCOutput_18 > 0) {

					connection_tJDBCOutput_18.commit();

				}

				connection_tJDBCOutput_18.close();

				resourceMap.put("finish_tJDBCOutput_18", true);

				nb_line_deleted_tJDBCOutput_18 = nb_line_deleted_tJDBCOutput_18
						+ deletedCount_tJDBCOutput_18;
				nb_line_update_tJDBCOutput_18 = nb_line_update_tJDBCOutput_18
						+ updatedCount_tJDBCOutput_18;
				nb_line_inserted_tJDBCOutput_18 = nb_line_inserted_tJDBCOutput_18
						+ insertedCount_tJDBCOutput_18;
				nb_line_rejected_tJDBCOutput_18 = nb_line_rejected_tJDBCOutput_18
						+ rejectedCount_tJDBCOutput_18;

				globalMap.put("tJDBCOutput_18_NB_LINE", nb_line_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_18);

				ok_Hash.put("tJDBCOutput_18", true);
				end_Hash.put("tJDBCOutput_18", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_18 end ] stop
				 */

				/**
				 * [tJavaRow_18 end ] start
				 */

				currentComponent = "tJavaRow_18";

				globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

				ok_Hash.put("tJavaRow_18", true);
				end_Hash.put("tJavaRow_18", System.currentTimeMillis());

				/**
				 * [tJavaRow_18 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_18Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_13"
			globalMap.remove("tHash_Lookup_row43");

			try {

				/**
				 * [tFileInputDelimited_10 finally ] start
				 */

				currentComponent = "tFileInputDelimited_10";

				/**
				 * [tFileInputDelimited_10 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_6 finally ] start
				 */

				currentComponent = "tUniqRow_6";

				/**
				 * [tUniqRow_6 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tJDBCOutput_15 finally ] start
				 */

				currentComponent = "tJDBCOutput_15";

				if (resourceMap.get("finish_tJDBCOutput_15") == null) {
					if (resourceMap.get("conn_tJDBCOutput_15") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_15")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_15) {
							String errorMessage_tJDBCOutput_15 = "failed to close the connection in tJDBCOutput_15 :"
									+ sqlEx_tJDBCOutput_15.getMessage();

							System.err.println(errorMessage_tJDBCOutput_15);
						}
					}
				}

				/**
				 * [tJDBCOutput_15 finally ] stop
				 */

				/**
				 * [tJavaRow_10 finally ] start
				 */

				currentComponent = "tJavaRow_10";

				/**
				 * [tJavaRow_10 finally ] stop
				 */

				/**
				 * [tJDBCOutput_18 finally ] start
				 */

				currentComponent = "tJDBCOutput_18";

				if (resourceMap.get("finish_tJDBCOutput_18") == null) {
					if (resourceMap.get("conn_tJDBCOutput_18") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_18")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_18) {
							String errorMessage_tJDBCOutput_18 = "failed to close the connection in tJDBCOutput_18 :"
									+ sqlEx_tJDBCOutput_18.getMessage();

							System.err.println(errorMessage_tJDBCOutput_18);
						}
					}
				}

				/**
				 * [tJDBCOutput_18 finally ] stop
				 */

				/**
				 * [tJavaRow_18 finally ] start
				 */

				currentComponent = "tJavaRow_18";

				/**
				 * [tJavaRow_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				globalMap.put("tDie_2_DIE_PRIORITY", 5);
				System.err.println("Error: Ontology");

				globalMap.put("tDie_2_DIE_MESSAGE", "Error: Ontology");
				globalMap.put("tDie_2_DIE_MESSAGES", "Error: Ontology");
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err.println("Error: Ontology");

				globalMap.put("tDie_1_DIE_MESSAGE", "Error: Ontology");
				globalMap.put("tDie_1_DIE_MESSAGES", "Error: Ontology");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_18 begin ] start
				 */

				ok_Hash.put("tJava_18", false);
				start_Hash.put("tJava_18", System.currentTimeMillis());

				currentComponent = "tJava_18";

				int tos_count_tJava_18 = 0;

				StatusListener
						.setSubStatus(StatusListener.getSubPerc(),
								"Ontology done! " + context.counter
										+ " rows imported.");

				/**
				 * [tJava_18 begin ] stop
				 */

				/**
				 * [tJava_18 main ] start
				 */

				currentComponent = "tJava_18";

				tos_count_tJava_18++;

				/**
				 * [tJava_18 main ] stop
				 */

				/**
				 * [tJava_18 end ] start
				 */

				currentComponent = "tJava_18";

				ok_Hash.put("tJava_18", true);
				end_Hash.put("tJava_18", System.currentTimeMillis());

				/**
				 * [tJava_18 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_18 finally ] start
				 */

				currentComponent = "tJava_18";

				/**
				 * [tJava_18 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}

	public static class row43Struct implements
			routines.system.IPersistableComparableLookupRow<row43Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.C_DIMCODE == null) ? 0 : this.C_DIMCODE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row43Struct other = (row43Struct) obj;

			if (this.C_DIMCODE == null) {
				if (other.C_DIMCODE != null)
					return false;

			} else if (!this.C_DIMCODE.equals(other.C_DIMCODE))

				return false;

			return true;
		}

		public void copyDataTo(row43Struct other) {

			other.C_DIMCODE = this.C_DIMCODE;

		}

		public void copyKeysDataTo(row43Struct other) {

			other.C_DIMCODE = this.C_DIMCODE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_DIMCODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.C_DIMCODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_DIMCODE=" + C_DIMCODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.C_DIMCODE, other.C_DIMCODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row43Struct row43 = new row43Struct();

				/**
				 * [tAdvancedHash_row43 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row43", false);
				start_Hash.put("tAdvancedHash_row43",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row43";

				int tos_count_tAdvancedHash_row43 = 0;

				// connection name:row43
				// source node:tJDBCInput_10 -
				// inputs:(after_tFileInputDelimited_10) outputs:(row43,row43) |
				// target node:tAdvancedHash_row43 - inputs:(row43) outputs:()
				// linked node: tMap_13 - inputs:(row24,row43)
				// outputs:(out12,out13)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row43 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row43Struct> getLookup(matchingModeEnum_row43);

				globalMap.put("tHash_Lookup_row43", tHash_Lookup_row43);

				/**
				 * [tAdvancedHash_row43 begin ] stop
				 */

				/**
				 * [tJDBCInput_10 begin ] start
				 */

				ok_Hash.put("tJDBCInput_10", false);
				start_Hash.put("tJDBCInput_10", System.currentTimeMillis());

				currentComponent = "tJDBCInput_10";

				int tos_count_tJDBCInput_10 = 0;

				int nb_line_tJDBCInput_10 = 0;
				java.sql.Connection conn_tJDBCInput_10 = null;
				String driverClass_tJDBCInput_10 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_10);

				String url_tJDBCInput_10 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_10 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_10 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_10 = decryptedPassword_tJDBCInput_10;

				conn_tJDBCInput_10 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_10, dbUser_tJDBCInput_10,
						dbPwd_tJDBCInput_10);

				java.sql.Statement stmt_tJDBCInput_10 = conn_tJDBCInput_10
						.createStatement();

				String dbquery_tJDBCInput_10 = "select C_DIMCODE from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_10_QUERY", dbquery_tJDBCInput_10);
				java.sql.ResultSet rs_tJDBCInput_10 = null;
				try {
					rs_tJDBCInput_10 = stmt_tJDBCInput_10
							.executeQuery(dbquery_tJDBCInput_10);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_10 = rs_tJDBCInput_10
							.getMetaData();
					int colQtyInRs_tJDBCInput_10 = rsmd_tJDBCInput_10
							.getColumnCount();

					String tmpContent_tJDBCInput_10 = null;

					while (rs_tJDBCInput_10.next()) {
						nb_line_tJDBCInput_10++;

						if (colQtyInRs_tJDBCInput_10 < 1) {
							row43.C_DIMCODE = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(1);
							if (tmpContent_tJDBCInput_10 != null) {
								row43.C_DIMCODE = tmpContent_tJDBCInput_10;
							} else {
								row43.C_DIMCODE = null;
							}
						}

						/**
						 * [tJDBCInput_10 begin ] stop
						 */

						/**
						 * [tJDBCInput_10 main ] start
						 */

						currentComponent = "tJDBCInput_10";

						tos_count_tJDBCInput_10++;

						/**
						 * [tJDBCInput_10 main ] stop
						 */

						/**
						 * [tAdvancedHash_row43 main ] start
						 */

						currentComponent = "tAdvancedHash_row43";

						row43Struct row43_HashRow = new row43Struct();

						row43_HashRow.C_DIMCODE = row43.C_DIMCODE;

						tHash_Lookup_row43.put(row43_HashRow);

						tos_count_tAdvancedHash_row43++;

						/**
						 * [tAdvancedHash_row43 main ] stop
						 */

						/**
						 * [tJDBCInput_10 end ] start
						 */

						currentComponent = "tJDBCInput_10";

					}
				} finally {
					if (rs_tJDBCInput_10 != null) {
						rs_tJDBCInput_10.close();
					}
					stmt_tJDBCInput_10.close();

					if (conn_tJDBCInput_10 != null
							&& !conn_tJDBCInput_10.isClosed()) {

						conn_tJDBCInput_10.close();

					}
				}
				globalMap.put("tJDBCInput_10_NB_LINE", nb_line_tJDBCInput_10);

				ok_Hash.put("tJDBCInput_10", true);
				end_Hash.put("tJDBCInput_10", System.currentTimeMillis());

				/**
				 * [tJDBCInput_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row43 end ] start
				 */

				currentComponent = "tAdvancedHash_row43";

				tHash_Lookup_row43.endPut();

				ok_Hash.put("tAdvancedHash_row43", true);
				end_Hash.put("tAdvancedHash_row43", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row43 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_10 finally ] start
				 */

				currentComponent = "tJDBCInput_10";

				/**
				 * [tJDBCInput_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row43 finally ] start
				 */

				currentComponent = "tAdvancedHash_row43";

				/**
				 * [tAdvancedHash_row43 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_10_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row37Struct other = (row37Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			return true;
		}

		public void copyDataTo(row37Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.VITAL_STATUS_CD = this.VITAL_STATUS_CD;
			other.BIRTH_DATE = this.BIRTH_DATE;
			other.DEATH_DATE = this.DEATH_DATE;
			other.SEX_CD = this.SEX_CD;
			other.AGE_IN_YEARS_NUM = this.AGE_IN_YEARS_NUM;
			other.LANGUAGE_CD = this.LANGUAGE_CD;
			other.RACE_CD = this.RACE_CD;
			other.MARITAL_STATUS_CD = this.MARITAL_STATUS_CD;
			other.RELIGION_CD = this.RELIGION_CD;
			other.ZIP_CD = this.ZIP_CD;
			other.STATECITYZIP_PATH = this.STATECITYZIP_PATH;
			other.INCOME_CD = this.INCOME_CD;
			other.PATIENT_BLOB = this.PATIENT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row37Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.VITAL_STATUS_CD = this.VITAL_STATUS_CD;
			other.BIRTH_DATE = this.BIRTH_DATE;
			other.DEATH_DATE = this.DEATH_DATE;
			other.SEX_CD = this.SEX_CD;
			other.AGE_IN_YEARS_NUM = this.AGE_IN_YEARS_NUM;
			other.LANGUAGE_CD = this.LANGUAGE_CD;
			other.RACE_CD = this.RACE_CD;
			other.MARITAL_STATUS_CD = this.MARITAL_STATUS_CD;
			other.RELIGION_CD = this.RELIGION_CD;
			other.ZIP_CD = this.ZIP_CD;
			other.STATECITYZIP_PATH = this.STATECITYZIP_PATH;
			other.INCOME_CD = this.INCOME_CD;
			other.PATIENT_BLOB = this.PATIENT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out4Struct implements
			routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements
			routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_PMappingStruct implements
			routines.system.IPersistableRow<to_PMappingStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_PMappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_PTrialStruct implements
			routines.system.IPersistableRow<to_PTrialStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String trial;

		public String getTrial() {
			return this.trial;
		}

		public String secure_obj_token;

		public String getSecure_obj_token() {
			return this.secure_obj_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.trial = readString(dis);

					this.secure_obj_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.trial, dos);

				// String

				writeString(this.secure_obj_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",trial=" + trial);
			sb.append(",secure_obj_token=" + secure_obj_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_PTrialStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_7Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_7Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_4Process(globalMap);

				row7Struct row7 = new row7Struct();
				row36Struct row36 = new row36Struct();
				to_PMappingStruct to_PMapping = new to_PMappingStruct();
				out4Struct out4 = new out4Struct();
				row22Struct row22 = new row22Struct();
				out5Struct out5 = new out5Struct();
				row37Struct row37 = new row37Struct();
				to_PTrialStruct to_PTrial = new to_PTrialStruct();

				/**
				 * [tJavaRow_13 begin ] start
				 */

				ok_Hash.put("tJavaRow_13", false);
				start_Hash.put("tJavaRow_13", System.currentTimeMillis());

				currentComponent = "tJavaRow_13";

				int tos_count_tJavaRow_13 = 0;

				int nb_line_tJavaRow_13 = 0;

				/**
				 * [tJavaRow_13 begin ] stop
				 */

				/**
				 * [tJDBCOutput_9 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_9", false);
				start_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_9";

				int tos_count_tJDBCOutput_9 = 0;

				int nb_line_tJDBCOutput_9 = 0;
				int nb_line_update_tJDBCOutput_9 = 0;
				int nb_line_inserted_tJDBCOutput_9 = 0;
				int nb_line_deleted_tJDBCOutput_9 = 0;
				int nb_line_rejected_tJDBCOutput_9 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_9 = 0;

				int deletedCount_tJDBCOutput_9 = 0;
				int updatedCount_tJDBCOutput_9 = 0;
				int insertedCount_tJDBCOutput_9 = 0;
				int rejectedCount_tJDBCOutput_9 = 0;

				boolean whetherReject_tJDBCOutput_9 = false;

				java.sql.Connection connection_tJDBCOutput_9 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_9 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_9 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_9 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_9,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_9);

				resourceMap.put("conn_tJDBCOutput_9", connection_tJDBCOutput_9);
				connection_tJDBCOutput_9.setAutoCommit(false);
				int commitEvery_tJDBCOutput_9 = 500000;
				int commitCounter_tJDBCOutput_9 = 0;
				int batchSize_tJDBCOutput_9 = 250000;
				int batchSizeCounter_tJDBCOutput_9 = 0;

				String insert_tJDBCOutput_9 = "INSERT INTO "
						+ context.currentTable
						+ " (PATIENT_NUM,VITAL_STATUS_CD,BIRTH_DATE,DEATH_DATE,SEX_CD,AGE_IN_YEARS_NUM,LANGUAGE_CD,RACE_CD,MARITAL_STATUS_CD,RELIGION_CD,ZIP_CD,STATECITYZIP_PATH,INCOME_CD,PATIENT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_9 = connection_tJDBCOutput_9
						.prepareStatement(insert_tJDBCOutput_9);

				/**
				 * [tJDBCOutput_9 begin ] stop
				 */

				/**
				 * [tJavaRow_15 begin ] start
				 */

				ok_Hash.put("tJavaRow_15", false);
				start_Hash.put("tJavaRow_15", System.currentTimeMillis());

				currentComponent = "tJavaRow_15";

				int tos_count_tJavaRow_15 = 0;

				int nb_line_tJavaRow_15 = 0;

				/**
				 * [tJavaRow_15 begin ] stop
				 */

				/**
				 * [tJDBCOutput_10 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_10", false);
				start_Hash.put("tJDBCOutput_10", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_10";

				int tos_count_tJDBCOutput_10 = 0;

				int updateKeyCount_tJDBCOutput_10 = 1;
				if (updateKeyCount_tJDBCOutput_10 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_10 = 0;
				int nb_line_update_tJDBCOutput_10 = 0;
				int nb_line_inserted_tJDBCOutput_10 = 0;
				int nb_line_deleted_tJDBCOutput_10 = 0;
				int nb_line_rejected_tJDBCOutput_10 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_10 = 0;

				int deletedCount_tJDBCOutput_10 = 0;
				int updatedCount_tJDBCOutput_10 = 0;
				int insertedCount_tJDBCOutput_10 = 0;
				int rejectedCount_tJDBCOutput_10 = 0;

				boolean whetherReject_tJDBCOutput_10 = false;

				java.sql.Connection connection_tJDBCOutput_10 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_10 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_10 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_10 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_10,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_10);

				resourceMap.put("conn_tJDBCOutput_10",
						connection_tJDBCOutput_10);
				connection_tJDBCOutput_10.setAutoCommit(false);
				int commitEvery_tJDBCOutput_10 = 500000;
				int commitCounter_tJDBCOutput_10 = 0;
				int batchSize_tJDBCOutput_10 = 250000;
				int batchSizeCounter_tJDBCOutput_10 = 0;

				String update_tJDBCOutput_10 = "UPDATE "
						+ context.currentTable
						+ " SET VITAL_STATUS_CD = ?,BIRTH_DATE = ?,DEATH_DATE = ?,SEX_CD = ?,AGE_IN_YEARS_NUM = ?,LANGUAGE_CD = ?,RACE_CD = ?,MARITAL_STATUS_CD = ?,RELIGION_CD = ?,ZIP_CD = ?,STATECITYZIP_PATH = ?,INCOME_CD = ?,PATIENT_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE PATIENT_NUM = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_10 = connection_tJDBCOutput_10
						.prepareStatement(update_tJDBCOutput_10);

				/**
				 * [tJDBCOutput_10 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) globalMap
						.get("tHash_Lookup_row35"));

				row35Struct row35HashKey = new row35Struct();
				row35Struct row35Default = new row35Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out4Struct out4_tmp = new out4Struct();
				out5Struct out5_tmp = new out5Struct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tJDBCOutput_4 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_4", false);
				start_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_4";

				int tos_count_tJDBCOutput_4 = 0;

				int nb_line_tJDBCOutput_4 = 0;
				int nb_line_update_tJDBCOutput_4 = 0;
				int nb_line_inserted_tJDBCOutput_4 = 0;
				int nb_line_deleted_tJDBCOutput_4 = 0;
				int nb_line_rejected_tJDBCOutput_4 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_4 = 0;

				int deletedCount_tJDBCOutput_4 = 0;
				int updatedCount_tJDBCOutput_4 = 0;
				int insertedCount_tJDBCOutput_4 = 0;
				int rejectedCount_tJDBCOutput_4 = 0;

				boolean whetherReject_tJDBCOutput_4 = false;

				java.sql.Connection connection_tJDBCOutput_4 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_4 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_4 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_4 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_4,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_4);

				resourceMap.put("conn_tJDBCOutput_4", connection_tJDBCOutput_4);
				connection_tJDBCOutput_4.setAutoCommit(false);
				int commitEvery_tJDBCOutput_4 = 100000;
				int commitCounter_tJDBCOutput_4 = 0;
				int batchSize_tJDBCOutput_4 = 10000;
				int batchSizeCounter_tJDBCOutput_4 = 0;

				String insert_tJDBCOutput_4 = "INSERT INTO "
						+ "i2b2demodata.patient_trial"
						+ " (patient_num,trial,secure_obj_token) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_4 = connection_tJDBCOutput_4
						.prepareStatement(insert_tJDBCOutput_4);

				/**
				 * [tJDBCOutput_4 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				to_PMappingStruct to_PMapping_tmp = new to_PMappingStruct();
				to_PTrialStruct to_PTrial_tmp = new to_PTrialStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal PATIENT_NUM;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.PATIENT_NUM == null) ? 0
											: this.PATIENT_NUM.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.PATIENT_NUM == null) {
							if (other.PATIENT_NUM != null)
								return false;

						} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "patient_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row7 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row7 = new row7Struct();
						try {

							char fieldSeparator_tFileInputDelimited_7_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_7_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row7.PATIENT_NUM = null;

								row7.VITAL_STATUS_CD = null;

								row7.BIRTH_DATE = null;

								row7.DEATH_DATE = null;

								row7.SEX_CD = null;

								row7.AGE_IN_YEARS_NUM = null;

								row7.LANGUAGE_CD = null;

								row7.RACE_CD = null;

								row7.MARITAL_STATUS_CD = null;

								row7.RELIGION_CD = null;

								row7.ZIP_CD = null;

								row7.STATECITYZIP_PATH = null;

								row7.INCOME_CD = null;

								row7.PATIENT_BLOB = null;

								row7.UPDATE_DATE = null;

								row7.DOWNLOAD_DATE = null;

								row7.IMPORT_DATE = null;

								row7.SOURCESYSTEM_CD = null;

								row7.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row7.PATIENT_NUM = null;
									}

								} else {
									row7.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.VITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.VITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.BIRTH_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.BIRTH_DATE = null;
									}

								} else {
									row7.BIRTH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.DEATH_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.DEATH_DATE = null;
									}

								} else {
									row7.DEATH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.SEX_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.SEX_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.AGE_IN_YEARS_NUM = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row7.AGE_IN_YEARS_NUM = null;
									}

								} else {
									row7.AGE_IN_YEARS_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.LANGUAGE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.LANGUAGE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.RACE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.RACE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.MARITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.MARITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.RELIGION_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.RELIGION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.ZIP_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.ZIP_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 11;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.STATECITYZIP_PATH = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.STATECITYZIP_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 12;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.INCOME_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.INCOME_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 13;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.PATIENT_BLOB = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.PATIENT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 14;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.UPDATE_DATE = null;
									}

								} else {
									row7.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 15;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.DOWNLOAD_DATE = null;
									}

								} else {
									row7.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 16;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.IMPORT_DATE = null;
									}

								} else {
									row7.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 17;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.SOURCESYSTEM_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 18;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row7.UPLOAD_ID = null;
									}

								} else {
									row7.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tUniqRow_5 main ] start
							 */

							currentComponent = "tUniqRow_5";

							row36 = null;
							finder_tUniqRow_5.PATIENT_NUM = row7.PATIENT_NUM;
							finder_tUniqRow_5.hashCodeDirty = true;
							if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
								KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

								new_tUniqRow_5.PATIENT_NUM = row7.PATIENT_NUM;

								keystUniqRow_5.add(new_tUniqRow_5);
								if (row36 == null) {

									row36 = new row36Struct();
								}
								row36.PATIENT_NUM = row7.PATIENT_NUM;
								row36.VITAL_STATUS_CD = row7.VITAL_STATUS_CD;
								row36.BIRTH_DATE = row7.BIRTH_DATE;
								row36.DEATH_DATE = row7.DEATH_DATE;
								row36.SEX_CD = row7.SEX_CD;
								row36.AGE_IN_YEARS_NUM = row7.AGE_IN_YEARS_NUM;
								row36.LANGUAGE_CD = row7.LANGUAGE_CD;
								row36.RACE_CD = row7.RACE_CD;
								row36.MARITAL_STATUS_CD = row7.MARITAL_STATUS_CD;
								row36.RELIGION_CD = row7.RELIGION_CD;
								row36.ZIP_CD = row7.ZIP_CD;
								row36.STATECITYZIP_PATH = row7.STATECITYZIP_PATH;
								row36.INCOME_CD = row7.INCOME_CD;
								row36.PATIENT_BLOB = row7.PATIENT_BLOB;
								row36.UPDATE_DATE = row7.UPDATE_DATE;
								row36.DOWNLOAD_DATE = row7.DOWNLOAD_DATE;
								row36.IMPORT_DATE = row7.IMPORT_DATE;
								row36.SOURCESYSTEM_CD = row7.SOURCESYSTEM_CD;
								row36.UPLOAD_ID = row7.UPLOAD_ID;
								nb_uniques_tUniqRow_5++;
							} else {
								nb_duplicates_tUniqRow_5++;
							}

							tos_count_tUniqRow_5++;

							/**
							 * [tUniqRow_5 main ] stop
							 */
							// Start of branch "row36"
							if (row36 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									to_PMapping = null;
									to_PTrial = null;

									// # Output table : 'to_PMapping'
									to_PMapping_tmp.PATIENT_NUM = row36.PATIENT_NUM;
									to_PMapping_tmp.VITAL_STATUS_CD = row36.VITAL_STATUS_CD;
									to_PMapping_tmp.BIRTH_DATE = row36.BIRTH_DATE;
									to_PMapping_tmp.DEATH_DATE = row36.DEATH_DATE;
									to_PMapping_tmp.SEX_CD = row36.SEX_CD;
									to_PMapping_tmp.AGE_IN_YEARS_NUM = row36.AGE_IN_YEARS_NUM == null ? 0
											: row36.AGE_IN_YEARS_NUM;
									to_PMapping_tmp.LANGUAGE_CD = row36.LANGUAGE_CD;
									to_PMapping_tmp.RACE_CD = row36.RACE_CD;
									to_PMapping_tmp.MARITAL_STATUS_CD = row36.MARITAL_STATUS_CD;
									to_PMapping_tmp.RELIGION_CD = row36.RELIGION_CD;
									to_PMapping_tmp.ZIP_CD = row36.ZIP_CD;
									to_PMapping_tmp.STATECITYZIP_PATH = row36.STATECITYZIP_PATH;
									to_PMapping_tmp.INCOME_CD = row36.INCOME_CD;
									to_PMapping_tmp.PATIENT_BLOB = row36.PATIENT_BLOB;
									to_PMapping_tmp.UPDATE_DATE = row36.UPDATE_DATE;
									to_PMapping_tmp.DOWNLOAD_DATE = row36.DOWNLOAD_DATE;
									to_PMapping_tmp.IMPORT_DATE = row36.IMPORT_DATE;
									to_PMapping_tmp.SOURCESYSTEM_CD = row36.SOURCESYSTEM_CD;
									to_PMapping_tmp.UPLOAD_ID = row36.UPLOAD_ID;
									to_PMapping = to_PMapping_tmp;

									// # Output table : 'to_PTrial'
									// # Filter conditions
									if (

									context.DB_StagingI2B2_WHType
											.equalsIgnoreCase("transmart")

									) {
										to_PTrial_tmp.PATIENT_NUM = row36.PATIENT_NUM;
										to_PTrial_tmp.trial = context.fileName;
										to_PTrial_tmp.secure_obj_token = "Study:"
												+ context.fileName;
										to_PTrial = to_PTrial_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "to_PMapping"
								if (to_PMapping != null) {

									/**
									 * [tMap_8 main ] start
									 */

									currentComponent = "tMap_8";

									boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_8 = false;
									boolean mainRowRejected_tMap_8 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row35"
									// /////////////////////////////////////////////

									boolean forceLooprow35 = false;

									row35Struct row35ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_8 = false;

										row35HashKey.PATIENT_NUM = to_PMapping.PATIENT_NUM;

										row35HashKey.hashCodeDirty = true;

										tHash_Lookup_row35.lookup(row35HashKey);

										if (!tHash_Lookup_row35.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_8 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row35 != null
											&& tHash_Lookup_row35
													.getCount(row35HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row35' and it contains more one result from keys :  row35.PATIENT_NUM = '"
										// + row35HashKey.PATIENT_NUM + "'");
									} // G 071

									row35Struct row35 = null;

									row35Struct fromLookup_row35 = null;
									row35 = row35Default;

									if (tHash_Lookup_row35 != null
											&& tHash_Lookup_row35.hasNext()) { // G
																				// 099

										fromLookup_row35 = tHash_Lookup_row35
												.next();

									} // G 099

									if (fromLookup_row35 != null) {
										row35 = fromLookup_row35;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
										// ###############################
										// # Output tables

										out5 = null;
										out4 = null;

										if (!rejectedInnerJoin_tMap_8) {

											// # Output table : 'out5'
											out5_tmp.PATIENT_NUM = to_PMapping.PATIENT_NUM;
											out5_tmp.VITAL_STATUS_CD = to_PMapping.VITAL_STATUS_CD;
											out5_tmp.BIRTH_DATE = to_PMapping.BIRTH_DATE;
											out5_tmp.DEATH_DATE = to_PMapping.DEATH_DATE;
											out5_tmp.SEX_CD = to_PMapping.SEX_CD;
											out5_tmp.AGE_IN_YEARS_NUM = to_PMapping.AGE_IN_YEARS_NUM;
											out5_tmp.LANGUAGE_CD = to_PMapping.LANGUAGE_CD;
											out5_tmp.RACE_CD = to_PMapping.RACE_CD;
											out5_tmp.MARITAL_STATUS_CD = to_PMapping.MARITAL_STATUS_CD;
											out5_tmp.RELIGION_CD = to_PMapping.RELIGION_CD;
											out5_tmp.ZIP_CD = to_PMapping.ZIP_CD;
											out5_tmp.STATECITYZIP_PATH = to_PMapping.STATECITYZIP_PATH;
											out5_tmp.INCOME_CD = to_PMapping.INCOME_CD;
											out5_tmp.PATIENT_BLOB = to_PMapping.PATIENT_BLOB;
											out5_tmp.UPDATE_DATE = to_PMapping.UPDATE_DATE;
											out5_tmp.DOWNLOAD_DATE = to_PMapping.DOWNLOAD_DATE;
											out5_tmp.IMPORT_DATE = to_PMapping.IMPORT_DATE;
											out5_tmp.SOURCESYSTEM_CD = to_PMapping.SOURCESYSTEM_CD;
											out5_tmp.UPLOAD_ID = to_PMapping.UPLOAD_ID;
											out5 = out5_tmp;
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table : 'out4'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_8) {
											out4_tmp.PATIENT_NUM = to_PMapping.PATIENT_NUM;
											out4_tmp.VITAL_STATUS_CD = to_PMapping.VITAL_STATUS_CD;
											out4_tmp.BIRTH_DATE = to_PMapping.BIRTH_DATE;
											out4_tmp.DEATH_DATE = to_PMapping.DEATH_DATE;
											out4_tmp.SEX_CD = to_PMapping.SEX_CD;
											out4_tmp.AGE_IN_YEARS_NUM = to_PMapping.AGE_IN_YEARS_NUM;
											out4_tmp.LANGUAGE_CD = to_PMapping.LANGUAGE_CD;
											out4_tmp.RACE_CD = to_PMapping.RACE_CD;
											out4_tmp.MARITAL_STATUS_CD = to_PMapping.MARITAL_STATUS_CD;
											out4_tmp.RELIGION_CD = to_PMapping.RELIGION_CD;
											out4_tmp.ZIP_CD = to_PMapping.ZIP_CD;
											out4_tmp.STATECITYZIP_PATH = to_PMapping.STATECITYZIP_PATH;
											out4_tmp.INCOME_CD = to_PMapping.INCOME_CD;
											out4_tmp.PATIENT_BLOB = to_PMapping.PATIENT_BLOB;
											out4_tmp.UPDATE_DATE = to_PMapping.UPDATE_DATE;
											out4_tmp.DOWNLOAD_DATE = to_PMapping.DOWNLOAD_DATE;
											out4_tmp.IMPORT_DATE = to_PMapping.IMPORT_DATE;
											out4_tmp.SOURCESYSTEM_CD = to_PMapping.SOURCESYSTEM_CD;
											out4_tmp.UPLOAD_ID = to_PMapping.UPLOAD_ID;
											out4 = out4_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_8 = false;

									tos_count_tMap_8++;

									/**
									 * [tMap_8 main ] stop
									 */
									// Start of branch "out4"
									if (out4 != null) {

										/**
										 * [tJDBCOutput_9 main ] start
										 */

										currentComponent = "tJDBCOutput_9";

										row22 = null;
										whetherReject_tJDBCOutput_9 = false;
										pstmt_tJDBCOutput_9.setBigDecimal(1,
												out4.PATIENT_NUM);

										if (out4.VITAL_STATUS_CD == null) {
											pstmt_tJDBCOutput_9.setNull(2,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(2,
													out4.VITAL_STATUS_CD);
										}

										if (out4.BIRTH_DATE != null) {
											pstmt_tJDBCOutput_9
													.setTimestamp(
															3,
															new java.sql.Timestamp(
																	out4.BIRTH_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_9.setNull(3,
													java.sql.Types.DATE);
										}

										if (out4.DEATH_DATE != null) {
											pstmt_tJDBCOutput_9
													.setTimestamp(
															4,
															new java.sql.Timestamp(
																	out4.DEATH_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_9.setNull(4,
													java.sql.Types.DATE);
										}

										if (out4.SEX_CD == null) {
											pstmt_tJDBCOutput_9.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(5,
													out4.SEX_CD);
										}

										if (out4.AGE_IN_YEARS_NUM == null) {
											pstmt_tJDBCOutput_9.setNull(6,
													java.sql.Types.INTEGER);
										} else {
											pstmt_tJDBCOutput_9.setInt(6,
													out4.AGE_IN_YEARS_NUM);
										}

										if (out4.LANGUAGE_CD == null) {
											pstmt_tJDBCOutput_9.setNull(7,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(7,
													out4.LANGUAGE_CD);
										}

										if (out4.RACE_CD == null) {
											pstmt_tJDBCOutput_9.setNull(8,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(8,
													out4.RACE_CD);
										}

										if (out4.MARITAL_STATUS_CD == null) {
											pstmt_tJDBCOutput_9.setNull(9,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(9,
													out4.MARITAL_STATUS_CD);
										}

										if (out4.RELIGION_CD == null) {
											pstmt_tJDBCOutput_9.setNull(10,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(10,
													out4.RELIGION_CD);
										}

										if (out4.ZIP_CD == null) {
											pstmt_tJDBCOutput_9.setNull(11,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(11,
													out4.ZIP_CD);
										}

										if (out4.STATECITYZIP_PATH == null) {
											pstmt_tJDBCOutput_9.setNull(12,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(12,
													out4.STATECITYZIP_PATH);
										}

										if (out4.INCOME_CD == null) {
											pstmt_tJDBCOutput_9.setNull(13,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(13,
													out4.INCOME_CD);
										}

										if (out4.PATIENT_BLOB == null) {
											pstmt_tJDBCOutput_9.setNull(14,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(14,
													out4.PATIENT_BLOB);
										}

										if (out4.UPDATE_DATE != null) {
											pstmt_tJDBCOutput_9
													.setTimestamp(
															15,
															new java.sql.Timestamp(
																	out4.UPDATE_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_9.setNull(15,
													java.sql.Types.DATE);
										}

										if (out4.DOWNLOAD_DATE != null) {
											pstmt_tJDBCOutput_9
													.setTimestamp(
															16,
															new java.sql.Timestamp(
																	out4.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_9.setNull(16,
													java.sql.Types.DATE);
										}

										if (out4.IMPORT_DATE != null) {
											pstmt_tJDBCOutput_9
													.setTimestamp(
															17,
															new java.sql.Timestamp(
																	out4.IMPORT_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_9.setNull(17,
													java.sql.Types.DATE);
										}

										if (out4.SOURCESYSTEM_CD == null) {
											pstmt_tJDBCOutput_9.setNull(18,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_9.setString(18,
													out4.SOURCESYSTEM_CD);
										}

										if (out4.UPLOAD_ID == null) {
											pstmt_tJDBCOutput_9.setNull(19,
													java.sql.Types.INTEGER);
										} else {
											pstmt_tJDBCOutput_9.setInt(19,
													out4.UPLOAD_ID);
										}

										pstmt_tJDBCOutput_9.addBatch();
										nb_line_tJDBCOutput_9++;

										batchSizeCounter_tJDBCOutput_9++;
										if (!whetherReject_tJDBCOutput_9) {
											row22 = new row22Struct();
											row22.PATIENT_NUM = out4.PATIENT_NUM;
											row22.VITAL_STATUS_CD = out4.VITAL_STATUS_CD;
											row22.BIRTH_DATE = out4.BIRTH_DATE;
											row22.DEATH_DATE = out4.DEATH_DATE;
											row22.SEX_CD = out4.SEX_CD;
											row22.AGE_IN_YEARS_NUM = out4.AGE_IN_YEARS_NUM;
											row22.LANGUAGE_CD = out4.LANGUAGE_CD;
											row22.RACE_CD = out4.RACE_CD;
											row22.MARITAL_STATUS_CD = out4.MARITAL_STATUS_CD;
											row22.RELIGION_CD = out4.RELIGION_CD;
											row22.ZIP_CD = out4.ZIP_CD;
											row22.STATECITYZIP_PATH = out4.STATECITYZIP_PATH;
											row22.INCOME_CD = out4.INCOME_CD;
											row22.PATIENT_BLOB = out4.PATIENT_BLOB;
											row22.UPDATE_DATE = out4.UPDATE_DATE;
											row22.DOWNLOAD_DATE = out4.DOWNLOAD_DATE;
											row22.IMPORT_DATE = out4.IMPORT_DATE;
											row22.SOURCESYSTEM_CD = out4.SOURCESYSTEM_CD;
											row22.UPLOAD_ID = out4.UPLOAD_ID;
										}
										if (batchSize_tJDBCOutput_9 <= batchSizeCounter_tJDBCOutput_9) {
											int[] status_tJDBCOutput_9 = null;
											int countSum_tJDBCOutput_9 = 0;
											try {
												batchSizeCounter_tJDBCOutput_9 = 0;

												status_tJDBCOutput_9 = pstmt_tJDBCOutput_9
														.executeBatch();

												for (int countEach_tJDBCOutput_9 : status_tJDBCOutput_9) {
													countSum_tJDBCOutput_9 += (countEach_tJDBCOutput_9 < 0 ? 0
															: countEach_tJDBCOutput_9);
												}
											} catch (java.sql.BatchUpdateException e) {

												throw (e);

											}
											try {
												tmp_batchUpdateCount_tJDBCOutput_9 = pstmt_tJDBCOutput_9
														.getUpdateCount();
											} catch (java.sql.SQLException e) {

											}
											tmp_batchUpdateCount_tJDBCOutput_9 = tmp_batchUpdateCount_tJDBCOutput_9 > countSum_tJDBCOutput_9 ? tmp_batchUpdateCount_tJDBCOutput_9
													: countSum_tJDBCOutput_9;

											insertedCount_tJDBCOutput_9 += tmp_batchUpdateCount_tJDBCOutput_9;

										}

										commitCounter_tJDBCOutput_9++;
										if (commitEvery_tJDBCOutput_9 <= commitCounter_tJDBCOutput_9) {

											connection_tJDBCOutput_9.commit();
											commitCounter_tJDBCOutput_9 = 0;
										}

										tos_count_tJDBCOutput_9++;

										/**
										 * [tJDBCOutput_9 main ] stop
										 */
										// Start of branch "row22"
										if (row22 != null) {

											/**
											 * [tJavaRow_13 main ] start
											 */

											currentComponent = "tJavaRow_13";

											context.counter++;

											if (context.counter % 250 == 0) {
												StatusListener
														.setSubStatus(
																StatusListener
																		.getSubPerc(),
																"Patient_Dimension: "
																		+ context.counter
																		+ " rows imported.");
											}
											nb_line_tJavaRow_13++;

											tos_count_tJavaRow_13++;

											/**
											 * [tJavaRow_13 main ] stop
											 */

										} // End of branch "row22"

									} // End of branch "out4"

									// Start of branch "out5"
									if (out5 != null) {

										/**
										 * [tJDBCOutput_10 main ] start
										 */

										currentComponent = "tJDBCOutput_10";

										row37 = null;
										whetherReject_tJDBCOutput_10 = false;
										if (out5.VITAL_STATUS_CD == null) {
											pstmt_tJDBCOutput_10.setNull(1,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(1,
													out5.VITAL_STATUS_CD);
										}

										if (out5.BIRTH_DATE != null) {
											pstmt_tJDBCOutput_10
													.setTimestamp(
															2,
															new java.sql.Timestamp(
																	out5.BIRTH_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_10.setNull(2,
													java.sql.Types.DATE);
										}

										if (out5.DEATH_DATE != null) {
											pstmt_tJDBCOutput_10
													.setTimestamp(
															3,
															new java.sql.Timestamp(
																	out5.DEATH_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_10.setNull(3,
													java.sql.Types.DATE);
										}

										if (out5.SEX_CD == null) {
											pstmt_tJDBCOutput_10.setNull(4,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(4,
													out5.SEX_CD);
										}

										if (out5.AGE_IN_YEARS_NUM == null) {
											pstmt_tJDBCOutput_10.setNull(5,
													java.sql.Types.INTEGER);
										} else {
											pstmt_tJDBCOutput_10.setInt(5,
													out5.AGE_IN_YEARS_NUM);
										}

										if (out5.LANGUAGE_CD == null) {
											pstmt_tJDBCOutput_10.setNull(6,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(6,
													out5.LANGUAGE_CD);
										}

										if (out5.RACE_CD == null) {
											pstmt_tJDBCOutput_10.setNull(7,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(7,
													out5.RACE_CD);
										}

										if (out5.MARITAL_STATUS_CD == null) {
											pstmt_tJDBCOutput_10.setNull(8,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(8,
													out5.MARITAL_STATUS_CD);
										}

										if (out5.RELIGION_CD == null) {
											pstmt_tJDBCOutput_10.setNull(9,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(9,
													out5.RELIGION_CD);
										}

										if (out5.ZIP_CD == null) {
											pstmt_tJDBCOutput_10.setNull(10,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(10,
													out5.ZIP_CD);
										}

										if (out5.STATECITYZIP_PATH == null) {
											pstmt_tJDBCOutput_10.setNull(11,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(11,
													out5.STATECITYZIP_PATH);
										}

										if (out5.INCOME_CD == null) {
											pstmt_tJDBCOutput_10.setNull(12,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(12,
													out5.INCOME_CD);
										}

										if (out5.PATIENT_BLOB == null) {
											pstmt_tJDBCOutput_10.setNull(13,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(13,
													out5.PATIENT_BLOB);
										}

										if (out5.UPDATE_DATE != null) {
											pstmt_tJDBCOutput_10
													.setTimestamp(
															14,
															new java.sql.Timestamp(
																	out5.UPDATE_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_10.setNull(14,
													java.sql.Types.DATE);
										}

										if (out5.DOWNLOAD_DATE != null) {
											pstmt_tJDBCOutput_10
													.setTimestamp(
															15,
															new java.sql.Timestamp(
																	out5.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_10.setNull(15,
													java.sql.Types.DATE);
										}

										if (out5.IMPORT_DATE != null) {
											pstmt_tJDBCOutput_10
													.setTimestamp(
															16,
															new java.sql.Timestamp(
																	out5.IMPORT_DATE
																			.getTime()));
										} else {
											pstmt_tJDBCOutput_10.setNull(16,
													java.sql.Types.DATE);
										}

										if (out5.SOURCESYSTEM_CD == null) {
											pstmt_tJDBCOutput_10.setNull(17,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tJDBCOutput_10.setString(17,
													out5.SOURCESYSTEM_CD);
										}

										if (out5.UPLOAD_ID == null) {
											pstmt_tJDBCOutput_10.setNull(18,
													java.sql.Types.INTEGER);
										} else {
											pstmt_tJDBCOutput_10.setInt(18,
													out5.UPLOAD_ID);
										}

										pstmt_tJDBCOutput_10.setBigDecimal(19,
												out5.PATIENT_NUM);

										pstmt_tJDBCOutput_10.addBatch();
										nb_line_tJDBCOutput_10++;

										batchSizeCounter_tJDBCOutput_10++;
										if (!whetherReject_tJDBCOutput_10) {
											row37 = new row37Struct();
											row37.PATIENT_NUM = out5.PATIENT_NUM;
											row37.VITAL_STATUS_CD = out5.VITAL_STATUS_CD;
											row37.BIRTH_DATE = out5.BIRTH_DATE;
											row37.DEATH_DATE = out5.DEATH_DATE;
											row37.SEX_CD = out5.SEX_CD;
											row37.AGE_IN_YEARS_NUM = out5.AGE_IN_YEARS_NUM;
											row37.LANGUAGE_CD = out5.LANGUAGE_CD;
											row37.RACE_CD = out5.RACE_CD;
											row37.MARITAL_STATUS_CD = out5.MARITAL_STATUS_CD;
											row37.RELIGION_CD = out5.RELIGION_CD;
											row37.ZIP_CD = out5.ZIP_CD;
											row37.STATECITYZIP_PATH = out5.STATECITYZIP_PATH;
											row37.INCOME_CD = out5.INCOME_CD;
											row37.PATIENT_BLOB = out5.PATIENT_BLOB;
											row37.UPDATE_DATE = out5.UPDATE_DATE;
											row37.DOWNLOAD_DATE = out5.DOWNLOAD_DATE;
											row37.IMPORT_DATE = out5.IMPORT_DATE;
											row37.SOURCESYSTEM_CD = out5.SOURCESYSTEM_CD;
											row37.UPLOAD_ID = out5.UPLOAD_ID;
										}
										if (batchSize_tJDBCOutput_10 <= batchSizeCounter_tJDBCOutput_10) {
											int[] status_tJDBCOutput_10 = null;
											int countSum_tJDBCOutput_10 = 0;
											try {
												batchSizeCounter_tJDBCOutput_10 = 0;

												status_tJDBCOutput_10 = pstmt_tJDBCOutput_10
														.executeBatch();

												for (int countEach_tJDBCOutput_10 : status_tJDBCOutput_10) {
													countSum_tJDBCOutput_10 += (countEach_tJDBCOutput_10 < 0 ? 0
															: countEach_tJDBCOutput_10);
												}
											} catch (java.sql.BatchUpdateException e) {

												throw (e);

											}
											try {
												tmp_batchUpdateCount_tJDBCOutput_10 = pstmt_tJDBCOutput_10
														.getUpdateCount();
											} catch (java.sql.SQLException e) {

											}
											tmp_batchUpdateCount_tJDBCOutput_10 = tmp_batchUpdateCount_tJDBCOutput_10 > countSum_tJDBCOutput_10 ? tmp_batchUpdateCount_tJDBCOutput_10
													: countSum_tJDBCOutput_10;

											updatedCount_tJDBCOutput_10 += tmp_batchUpdateCount_tJDBCOutput_10;

										}

										commitCounter_tJDBCOutput_10++;
										if (commitEvery_tJDBCOutput_10 <= commitCounter_tJDBCOutput_10) {

											connection_tJDBCOutput_10.commit();
											commitCounter_tJDBCOutput_10 = 0;
										}

										tos_count_tJDBCOutput_10++;

										/**
										 * [tJDBCOutput_10 main ] stop
										 */
										// Start of branch "row37"
										if (row37 != null) {

											/**
											 * [tJavaRow_15 main ] start
											 */

											currentComponent = "tJavaRow_15";

											context.counter++;

											if (context.counter % 250 == 0) {

												System.out
														.println(context.counter
																+ " updated");
												StatusListener
														.setSubStatus(
																StatusListener
																		.getSubPerc(),
																"Patient_Dimension: "
																		+ context.counter
																		+ " rows updated.");
											}
											nb_line_tJavaRow_15++;

											tos_count_tJavaRow_15++;

											/**
											 * [tJavaRow_15 main ] stop
											 */

										} // End of branch "row37"

									} // End of branch "out5"

								} // End of branch "to_PMapping"

								// Start of branch "to_PTrial"
								if (to_PTrial != null) {

									/**
									 * [tJDBCOutput_4 main ] start
									 */

									currentComponent = "tJDBCOutput_4";

									whetherReject_tJDBCOutput_4 = false;
									pstmt_tJDBCOutput_4.setBigDecimal(1,
											to_PTrial.PATIENT_NUM);

									if (to_PTrial.trial == null) {
										pstmt_tJDBCOutput_4.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_4.setString(2,
												to_PTrial.trial);
									}

									if (to_PTrial.secure_obj_token == null) {
										pstmt_tJDBCOutput_4.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_4.setString(3,
												to_PTrial.secure_obj_token);
									}

									pstmt_tJDBCOutput_4.addBatch();
									nb_line_tJDBCOutput_4++;

									batchSizeCounter_tJDBCOutput_4++;
									if (batchSize_tJDBCOutput_4 <= batchSizeCounter_tJDBCOutput_4) {
										int[] status_tJDBCOutput_4 = null;
										int countSum_tJDBCOutput_4 = 0;
										try {
											batchSizeCounter_tJDBCOutput_4 = 0;

											status_tJDBCOutput_4 = pstmt_tJDBCOutput_4
													.executeBatch();

											for (int countEach_tJDBCOutput_4 : status_tJDBCOutput_4) {
												countSum_tJDBCOutput_4 += (countEach_tJDBCOutput_4 < 0 ? 0
														: countEach_tJDBCOutput_4);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_4 = pstmt_tJDBCOutput_4
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_4 = tmp_batchUpdateCount_tJDBCOutput_4 > countSum_tJDBCOutput_4 ? tmp_batchUpdateCount_tJDBCOutput_4
												: countSum_tJDBCOutput_4;

										insertedCount_tJDBCOutput_4 += tmp_batchUpdateCount_tJDBCOutput_4;

									}

									commitCounter_tJDBCOutput_4++;
									if (commitEvery_tJDBCOutput_4 <= commitCounter_tJDBCOutput_4) {

										connection_tJDBCOutput_4.commit();
										commitCounter_tJDBCOutput_4 = 0;
									}

									tos_count_tJDBCOutput_4++;

									/**
									 * [tJDBCOutput_4 main ] stop
									 */

								} // End of branch "to_PTrial"

							} // End of branch "row36"

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}

				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES",
						nb_duplicates_tUniqRow_5);

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row35 != null) {
					tHash_Lookup_row35.endGet();
				}
				globalMap.remove("tHash_Lookup_row35");

				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tJDBCOutput_9 end ] start
				 */

				currentComponent = "tJDBCOutput_9";

				int[] status_tJDBCOutput_9 = null;
				int countSum_tJDBCOutput_9 = 0;
				try {
					if (pstmt_tJDBCOutput_9 != null
							&& batchSizeCounter_tJDBCOutput_9 > 0) {

						status_tJDBCOutput_9 = pstmt_tJDBCOutput_9
								.executeBatch();

						for (int countEach_tJDBCOutput_9 : status_tJDBCOutput_9) {
							countSum_tJDBCOutput_9 += (countEach_tJDBCOutput_9 < 0 ? 0
									: countEach_tJDBCOutput_9);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_9 != null
						&& batchSizeCounter_tJDBCOutput_9 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_9 = pstmt_tJDBCOutput_9
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_9 = tmp_batchUpdateCount_tJDBCOutput_9 > countSum_tJDBCOutput_9 ? tmp_batchUpdateCount_tJDBCOutput_9
							: countSum_tJDBCOutput_9;

					insertedCount_tJDBCOutput_9 += tmp_batchUpdateCount_tJDBCOutput_9;

				}
				if (pstmt_tJDBCOutput_9 != null) {

					pstmt_tJDBCOutput_9.close();

				}

				if (commitCounter_tJDBCOutput_9 > 0) {

					connection_tJDBCOutput_9.commit();

				}

				connection_tJDBCOutput_9.close();

				resourceMap.put("finish_tJDBCOutput_9", true);

				nb_line_deleted_tJDBCOutput_9 = nb_line_deleted_tJDBCOutput_9
						+ deletedCount_tJDBCOutput_9;
				nb_line_update_tJDBCOutput_9 = nb_line_update_tJDBCOutput_9
						+ updatedCount_tJDBCOutput_9;
				nb_line_inserted_tJDBCOutput_9 = nb_line_inserted_tJDBCOutput_9
						+ insertedCount_tJDBCOutput_9;
				nb_line_rejected_tJDBCOutput_9 = nb_line_rejected_tJDBCOutput_9
						+ rejectedCount_tJDBCOutput_9;

				globalMap.put("tJDBCOutput_9_NB_LINE", nb_line_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_9);

				ok_Hash.put("tJDBCOutput_9", true);
				end_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_9 end ] stop
				 */

				/**
				 * [tJavaRow_13 end ] start
				 */

				currentComponent = "tJavaRow_13";

				globalMap.put("tJavaRow_13_NB_LINE", nb_line_tJavaRow_13);

				ok_Hash.put("tJavaRow_13", true);
				end_Hash.put("tJavaRow_13", System.currentTimeMillis());

				/**
				 * [tJavaRow_13 end ] stop
				 */

				/**
				 * [tJDBCOutput_10 end ] start
				 */

				currentComponent = "tJDBCOutput_10";

				int[] status_tJDBCOutput_10 = null;
				int countSum_tJDBCOutput_10 = 0;
				try {
					if (pstmt_tJDBCOutput_10 != null
							&& batchSizeCounter_tJDBCOutput_10 > 0) {

						status_tJDBCOutput_10 = pstmt_tJDBCOutput_10
								.executeBatch();

						for (int countEach_tJDBCOutput_10 : status_tJDBCOutput_10) {
							countSum_tJDBCOutput_10 += (countEach_tJDBCOutput_10 < 0 ? 0
									: countEach_tJDBCOutput_10);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_10 != null
						&& batchSizeCounter_tJDBCOutput_10 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_10 = pstmt_tJDBCOutput_10
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_10 = tmp_batchUpdateCount_tJDBCOutput_10 > countSum_tJDBCOutput_10 ? tmp_batchUpdateCount_tJDBCOutput_10
							: countSum_tJDBCOutput_10;

					updatedCount_tJDBCOutput_10 += tmp_batchUpdateCount_tJDBCOutput_10;

				}
				if (pstmt_tJDBCOutput_10 != null) {

					pstmt_tJDBCOutput_10.close();

				}

				if (commitCounter_tJDBCOutput_10 > 0) {

					connection_tJDBCOutput_10.commit();

				}

				connection_tJDBCOutput_10.close();

				resourceMap.put("finish_tJDBCOutput_10", true);

				nb_line_deleted_tJDBCOutput_10 = nb_line_deleted_tJDBCOutput_10
						+ deletedCount_tJDBCOutput_10;
				nb_line_update_tJDBCOutput_10 = nb_line_update_tJDBCOutput_10
						+ updatedCount_tJDBCOutput_10;
				nb_line_inserted_tJDBCOutput_10 = nb_line_inserted_tJDBCOutput_10
						+ insertedCount_tJDBCOutput_10;
				nb_line_rejected_tJDBCOutput_10 = nb_line_rejected_tJDBCOutput_10
						+ rejectedCount_tJDBCOutput_10;

				globalMap.put("tJDBCOutput_10_NB_LINE", nb_line_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_10);

				ok_Hash.put("tJDBCOutput_10", true);
				end_Hash.put("tJDBCOutput_10", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_10 end ] stop
				 */

				/**
				 * [tJavaRow_15 end ] start
				 */

				currentComponent = "tJavaRow_15";

				globalMap.put("tJavaRow_15_NB_LINE", nb_line_tJavaRow_15);

				ok_Hash.put("tJavaRow_15", true);
				end_Hash.put("tJavaRow_15", System.currentTimeMillis());

				/**
				 * [tJavaRow_15 end ] stop
				 */

				/**
				 * [tJDBCOutput_4 end ] start
				 */

				currentComponent = "tJDBCOutput_4";

				int[] status_tJDBCOutput_4 = null;
				int countSum_tJDBCOutput_4 = 0;
				try {
					if (pstmt_tJDBCOutput_4 != null
							&& batchSizeCounter_tJDBCOutput_4 > 0) {

						status_tJDBCOutput_4 = pstmt_tJDBCOutput_4
								.executeBatch();

						for (int countEach_tJDBCOutput_4 : status_tJDBCOutput_4) {
							countSum_tJDBCOutput_4 += (countEach_tJDBCOutput_4 < 0 ? 0
									: countEach_tJDBCOutput_4);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_4 != null
						&& batchSizeCounter_tJDBCOutput_4 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_4 = pstmt_tJDBCOutput_4
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_4 = tmp_batchUpdateCount_tJDBCOutput_4 > countSum_tJDBCOutput_4 ? tmp_batchUpdateCount_tJDBCOutput_4
							: countSum_tJDBCOutput_4;

					insertedCount_tJDBCOutput_4 += tmp_batchUpdateCount_tJDBCOutput_4;

				}
				if (pstmt_tJDBCOutput_4 != null) {

					pstmt_tJDBCOutput_4.close();

				}

				if (commitCounter_tJDBCOutput_4 > 0) {

					connection_tJDBCOutput_4.commit();

				}

				connection_tJDBCOutput_4.close();

				resourceMap.put("finish_tJDBCOutput_4", true);

				nb_line_deleted_tJDBCOutput_4 = nb_line_deleted_tJDBCOutput_4
						+ deletedCount_tJDBCOutput_4;
				nb_line_update_tJDBCOutput_4 = nb_line_update_tJDBCOutput_4
						+ updatedCount_tJDBCOutput_4;
				nb_line_inserted_tJDBCOutput_4 = nb_line_inserted_tJDBCOutput_4
						+ insertedCount_tJDBCOutput_4;
				nb_line_rejected_tJDBCOutput_4 = nb_line_rejected_tJDBCOutput_4
						+ rejectedCount_tJDBCOutput_4;

				globalMap.put("tJDBCOutput_4_NB_LINE", nb_line_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_4);

				ok_Hash.put("tJDBCOutput_4", true);
				end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_22Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row35");

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tJDBCOutput_9 finally ] start
				 */

				currentComponent = "tJDBCOutput_9";

				if (resourceMap.get("finish_tJDBCOutput_9") == null) {
					if (resourceMap.get("conn_tJDBCOutput_9") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_9")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_9) {
							String errorMessage_tJDBCOutput_9 = "failed to close the connection in tJDBCOutput_9 :"
									+ sqlEx_tJDBCOutput_9.getMessage();

							System.err.println(errorMessage_tJDBCOutput_9);
						}
					}
				}

				/**
				 * [tJDBCOutput_9 finally ] stop
				 */

				/**
				 * [tJavaRow_13 finally ] start
				 */

				currentComponent = "tJavaRow_13";

				/**
				 * [tJavaRow_13 finally ] stop
				 */

				/**
				 * [tJDBCOutput_10 finally ] start
				 */

				currentComponent = "tJDBCOutput_10";

				if (resourceMap.get("finish_tJDBCOutput_10") == null) {
					if (resourceMap.get("conn_tJDBCOutput_10") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_10")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_10) {
							String errorMessage_tJDBCOutput_10 = "failed to close the connection in tJDBCOutput_10 :"
									+ sqlEx_tJDBCOutput_10.getMessage();

							System.err.println(errorMessage_tJDBCOutput_10);
						}
					}
				}

				/**
				 * [tJDBCOutput_10 finally ] stop
				 */

				/**
				 * [tJavaRow_15 finally ] start
				 */

				currentComponent = "tJavaRow_15";

				/**
				 * [tJavaRow_15 finally ] stop
				 */

				/**
				 * [tJDBCOutput_4 finally ] start
				 */

				currentComponent = "tJDBCOutput_4";

				if (resourceMap.get("finish_tJDBCOutput_4") == null) {
					if (resourceMap.get("conn_tJDBCOutput_4") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_4")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_4) {
							String errorMessage_tJDBCOutput_4 = "failed to close the connection in tJDBCOutput_4 :"
									+ sqlEx_tJDBCOutput_4.getMessage();

							System.err.println(errorMessage_tJDBCOutput_4);
						}
					}
				}

				/**
				 * [tJDBCOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tDie_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_10 begin ] start
				 */

				ok_Hash.put("tDie_10", false);
				start_Hash.put("tDie_10", System.currentTimeMillis());

				currentComponent = "tDie_10";

				int tos_count_tDie_10 = 0;

				/**
				 * [tDie_10 begin ] stop
				 */

				/**
				 * [tDie_10 main ] start
				 */

				currentComponent = "tDie_10";

				globalMap.put("tDie_10_DIE_PRIORITY", 5);
				System.err.println("Error: Patient_Dimension");

				globalMap
						.put("tDie_10_DIE_MESSAGE", "Error: Patient_Dimension");
				globalMap.put("tDie_10_DIE_MESSAGES",
						"Error: Patient_Dimension");
				currentComponent = "tDie_10";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_10_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_10++;

				/**
				 * [tDie_10 main ] stop
				 */

				/**
				 * [tDie_10 end ] start
				 */

				currentComponent = "tDie_10";

				ok_Hash.put("tDie_10", true);
				end_Hash.put("tDie_10", System.currentTimeMillis());

				/**
				 * [tDie_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_10 finally ] start
				 */

				currentComponent = "tDie_10";

				/**
				 * [tDie_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_10_SUBPROCESS_STATE", 1);
	}

	public void tDie_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_9 begin ] start
				 */

				ok_Hash.put("tDie_9", false);
				start_Hash.put("tDie_9", System.currentTimeMillis());

				currentComponent = "tDie_9";

				int tos_count_tDie_9 = 0;

				/**
				 * [tDie_9 begin ] stop
				 */

				/**
				 * [tDie_9 main ] start
				 */

				currentComponent = "tDie_9";

				globalMap.put("tDie_9_DIE_PRIORITY", 5);
				System.err.println("Error: Patient_Dimension");

				globalMap.put("tDie_9_DIE_MESSAGE", "Error: Patient_Dimension");
				globalMap
						.put("tDie_9_DIE_MESSAGES", "Error: Patient_Dimension");
				currentComponent = "tDie_9";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_9_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_9++;

				/**
				 * [tDie_9 main ] stop
				 */

				/**
				 * [tDie_9 end ] start
				 */

				currentComponent = "tDie_9";

				ok_Hash.put("tDie_9", true);
				end_Hash.put("tDie_9", System.currentTimeMillis());

				/**
				 * [tDie_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_9 finally ] start
				 */

				currentComponent = "tDie_9";

				/**
				 * [tDie_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_9_SUBPROCESS_STATE", 1);
	}

	public void tJava_22Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_22 begin ] start
				 */

				ok_Hash.put("tJava_22", false);
				start_Hash.put("tJava_22", System.currentTimeMillis());

				currentComponent = "tJava_22";

				int tos_count_tJava_22 = 0;

				StatusListener.setSubStatus(StatusListener.getSubPerc(),
						"Patient_Dimension done! " + context.counter
								+ " rows imported.");

				/**
				 * [tJava_22 begin ] stop
				 */

				/**
				 * [tJava_22 main ] start
				 */

				currentComponent = "tJava_22";

				tos_count_tJava_22++;

				/**
				 * [tJava_22 main ] stop
				 */

				/**
				 * [tJava_22 end ] start
				 */

				currentComponent = "tJava_22";

				ok_Hash.put("tJava_22", true);
				end_Hash.put("tJava_22", System.currentTimeMillis());

				/**
				 * [tJava_22 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_22 finally ] start
				 */

				currentComponent = "tJava_22";

				/**
				 * [tJava_22 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_22_SUBPROCESS_STATE", 1);
	}

	public static class row35Struct implements
			routines.system.IPersistableComparableLookupRow<row35Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row35Struct other = (row35Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			return true;
		}

		public void copyDataTo(row35Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void copyKeysDataTo(row35Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();

				/**
				 * [tAdvancedHash_row35 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row35", false);
				start_Hash.put("tAdvancedHash_row35",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row35";

				int tos_count_tAdvancedHash_row35 = 0;

				// connection name:row35
				// source node:tJDBCInput_4 -
				// inputs:(after_tFileInputDelimited_7) outputs:(row35,row35) |
				// target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
				// linked node: tMap_8 - inputs:(to_PMapping,row35)
				// outputs:(out4,out5)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row35Struct> getLookup(matchingModeEnum_row35);

				globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);

				/**
				 * [tAdvancedHash_row35 begin ] stop
				 */

				/**
				 * [tJDBCInput_4 begin ] start
				 */

				ok_Hash.put("tJDBCInput_4", false);
				start_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				currentComponent = "tJDBCInput_4";

				int tos_count_tJDBCInput_4 = 0;

				int nb_line_tJDBCInput_4 = 0;
				java.sql.Connection conn_tJDBCInput_4 = null;
				String driverClass_tJDBCInput_4 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_4);

				String url_tJDBCInput_4 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_4 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_4 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_4 = decryptedPassword_tJDBCInput_4;

				conn_tJDBCInput_4 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_4, dbUser_tJDBCInput_4,
						dbPwd_tJDBCInput_4);

				java.sql.Statement stmt_tJDBCInput_4 = conn_tJDBCInput_4
						.createStatement();

				String dbquery_tJDBCInput_4 = "select PATIENT_NUM from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_4_QUERY", dbquery_tJDBCInput_4);
				java.sql.ResultSet rs_tJDBCInput_4 = null;
				try {
					rs_tJDBCInput_4 = stmt_tJDBCInput_4
							.executeQuery(dbquery_tJDBCInput_4);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_4 = rs_tJDBCInput_4
							.getMetaData();
					int colQtyInRs_tJDBCInput_4 = rsmd_tJDBCInput_4
							.getColumnCount();

					String tmpContent_tJDBCInput_4 = null;

					while (rs_tJDBCInput_4.next()) {
						nb_line_tJDBCInput_4++;

						if (colQtyInRs_tJDBCInput_4 < 1) {
							row35.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_4.getObject(1) != null) {
								row35.PATIENT_NUM = rs_tJDBCInput_4
										.getBigDecimal(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tJDBCInput_4 begin ] stop
						 */

						/**
						 * [tJDBCInput_4 main ] start
						 */

						currentComponent = "tJDBCInput_4";

						tos_count_tJDBCInput_4++;

						/**
						 * [tJDBCInput_4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row35 main ] start
						 */

						currentComponent = "tAdvancedHash_row35";

						row35Struct row35_HashRow = new row35Struct();

						row35_HashRow.PATIENT_NUM = row35.PATIENT_NUM;

						tHash_Lookup_row35.put(row35_HashRow);

						tos_count_tAdvancedHash_row35++;

						/**
						 * [tAdvancedHash_row35 main ] stop
						 */

						/**
						 * [tJDBCInput_4 end ] start
						 */

						currentComponent = "tJDBCInput_4";

					}
				} finally {
					if (rs_tJDBCInput_4 != null) {
						rs_tJDBCInput_4.close();
					}
					stmt_tJDBCInput_4.close();

					if (conn_tJDBCInput_4 != null
							&& !conn_tJDBCInput_4.isClosed()) {

						conn_tJDBCInput_4.close();

					}
				}
				globalMap.put("tJDBCInput_4_NB_LINE", nb_line_tJDBCInput_4);

				ok_Hash.put("tJDBCInput_4", true);
				end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				/**
				 * [tJDBCInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row35 end ] start
				 */

				currentComponent = "tAdvancedHash_row35";

				tHash_Lookup_row35.endPut();

				ok_Hash.put("tAdvancedHash_row35", true);
				end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row35 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_4 finally ] start
				 */

				currentComponent = "tJDBCInput_4";

				/**
				 * [tJDBCInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row35 finally ] start
				 */

				currentComponent = "tAdvancedHash_row35";

				/**
				 * [tAdvancedHash_row35 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row47Struct implements
			routines.system.IPersistableRow<row47Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_IDE == null) ? 0
								: this.ENCOUNTER_IDE.hashCode());

				result = prime
						* result
						+ ((this.ENCOUNTER_IDE_SOURCE == null) ? 0
								: this.ENCOUNTER_IDE_SOURCE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row47Struct other = (row47Struct) obj;

			if (this.ENCOUNTER_IDE == null) {
				if (other.ENCOUNTER_IDE != null)
					return false;

			} else if (!this.ENCOUNTER_IDE.equals(other.ENCOUNTER_IDE))

				return false;

			if (this.ENCOUNTER_IDE_SOURCE == null) {
				if (other.ENCOUNTER_IDE_SOURCE != null)
					return false;

			} else if (!this.ENCOUNTER_IDE_SOURCE
					.equals(other.ENCOUNTER_IDE_SOURCE))

				return false;

			return true;
		}

		public void copyDataTo(row47Struct other) {

			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;
			other.ENCOUNTER_IDE_SOURCE = this.ENCOUNTER_IDE_SOURCE;
			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.ENCOUNTER_IDE_STATUS = this.ENCOUNTER_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row47Struct other) {

			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;
			other.ENCOUNTER_IDE_SOURCE = this.ENCOUNTER_IDE_SOURCE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_IDE,
					other.ENCOUNTER_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ENCOUNTER_IDE_SOURCE,
					other.ENCOUNTER_IDE_SOURCE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out15Struct implements
			routines.system.IPersistableRow<out15Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out16Struct implements
			routines.system.IPersistableRow<out16Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_12Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_12Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = dis.readInt();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_11Process(globalMap);

				row13Struct row13 = new row13Struct();
				row27Struct row27 = new row27Struct();
				row21Struct row21 = new row21Struct();
				out15Struct out15 = new out15Struct();
				row30Struct row30 = new row30Struct();
				out16Struct out16 = new out16Struct();
				row47Struct row47 = new row47Struct();

				/**
				 * [tJavaRow_11 begin ] start
				 */

				ok_Hash.put("tJavaRow_11", false);
				start_Hash.put("tJavaRow_11", System.currentTimeMillis());

				currentComponent = "tJavaRow_11";

				int tos_count_tJavaRow_11 = 0;

				int nb_line_tJavaRow_11 = 0;

				/**
				 * [tJavaRow_11 begin ] stop
				 */

				/**
				 * [tJDBCOutput_2 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_2", false);
				start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_2";

				int tos_count_tJDBCOutput_2 = 0;

				int nb_line_tJDBCOutput_2 = 0;
				int nb_line_update_tJDBCOutput_2 = 0;
				int nb_line_inserted_tJDBCOutput_2 = 0;
				int nb_line_deleted_tJDBCOutput_2 = 0;
				int nb_line_rejected_tJDBCOutput_2 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_2 = 0;

				int deletedCount_tJDBCOutput_2 = 0;
				int updatedCount_tJDBCOutput_2 = 0;
				int insertedCount_tJDBCOutput_2 = 0;
				int rejectedCount_tJDBCOutput_2 = 0;

				boolean whetherReject_tJDBCOutput_2 = false;

				java.sql.Connection connection_tJDBCOutput_2 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_2 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_2 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_2 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_2,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_2);

				resourceMap.put("conn_tJDBCOutput_2", connection_tJDBCOutput_2);
				connection_tJDBCOutput_2.setAutoCommit(false);
				int commitEvery_tJDBCOutput_2 = 500000;
				int commitCounter_tJDBCOutput_2 = 0;
				int batchSize_tJDBCOutput_2 = 250000;
				int batchSizeCounter_tJDBCOutput_2 = 0;

				String insert_tJDBCOutput_2 = "INSERT INTO "
						+ context.currentTable
						+ " (ENCOUNTER_IDE,ENCOUNTER_IDE_SOURCE,ENCOUNTER_NUM,PATIENT_IDE,PATIENT_IDE_SOURCE,ENCOUNTER_IDE_STATUS,UPLOAD_DATE,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(insert_tJDBCOutput_2);

				/**
				 * [tJDBCOutput_2 begin ] stop
				 */

				/**
				 * [tJavaRow_20 begin ] start
				 */

				ok_Hash.put("tJavaRow_20", false);
				start_Hash.put("tJavaRow_20", System.currentTimeMillis());

				currentComponent = "tJavaRow_20";

				int tos_count_tJavaRow_20 = 0;

				int nb_line_tJavaRow_20 = 0;

				/**
				 * [tJavaRow_20 begin ] stop
				 */

				/**
				 * [tJDBCOutput_20 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_20", false);
				start_Hash.put("tJDBCOutput_20", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_20";

				int tos_count_tJDBCOutput_20 = 0;

				int updateKeyCount_tJDBCOutput_20 = 2;
				if (updateKeyCount_tJDBCOutput_20 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_20 = 0;
				int nb_line_update_tJDBCOutput_20 = 0;
				int nb_line_inserted_tJDBCOutput_20 = 0;
				int nb_line_deleted_tJDBCOutput_20 = 0;
				int nb_line_rejected_tJDBCOutput_20 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_20 = 0;

				int deletedCount_tJDBCOutput_20 = 0;
				int updatedCount_tJDBCOutput_20 = 0;
				int insertedCount_tJDBCOutput_20 = 0;
				int rejectedCount_tJDBCOutput_20 = 0;

				boolean whetherReject_tJDBCOutput_20 = false;

				java.sql.Connection connection_tJDBCOutput_20 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_20 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_20 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_20 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_20,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_20);

				resourceMap.put("conn_tJDBCOutput_20",
						connection_tJDBCOutput_20);
				connection_tJDBCOutput_20.setAutoCommit(false);
				int commitEvery_tJDBCOutput_20 = 500000;
				int commitCounter_tJDBCOutput_20 = 0;
				int batchSize_tJDBCOutput_20 = 250000;
				int batchSizeCounter_tJDBCOutput_20 = 0;

				String update_tJDBCOutput_20 = "UPDATE "
						+ context.currentTable
						+ " SET ENCOUNTER_NUM = ?,PATIENT_IDE = ?,PATIENT_IDE_SOURCE = ?,ENCOUNTER_IDE_STATUS = ?,UPLOAD_DATE = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE ENCOUNTER_IDE = ? AND ENCOUNTER_IDE_SOURCE = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_20 = connection_tJDBCOutput_20
						.prepareStatement(update_tJDBCOutput_20);

				/**
				 * [tJDBCOutput_20 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) globalMap
						.get("tHash_Lookup_row46"));

				row46Struct row46HashKey = new row46Struct();
				row46Struct row46Default = new row46Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out15Struct out15_tmp = new out15Struct();
				out16Struct out16_tmp = new out16Struct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ENCOUNTER_IDE;
					String ENCOUNTER_IDE_SOURCE;
					int ENCOUNTER_NUM;
					String PATIENT_IDE;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ENCOUNTER_IDE == null) ? 0
											: this.ENCOUNTER_IDE.hashCode());

							result = prime
									* result
									+ ((this.ENCOUNTER_IDE_SOURCE == null) ? 0
											: this.ENCOUNTER_IDE_SOURCE
													.hashCode());

							result = prime * result + (int) this.ENCOUNTER_NUM;

							result = prime
									* result
									+ ((this.PATIENT_IDE == null) ? 0
											: this.PATIENT_IDE.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.ENCOUNTER_IDE == null) {
							if (other.ENCOUNTER_IDE != null)
								return false;

						} else if (!this.ENCOUNTER_IDE
								.equals(other.ENCOUNTER_IDE))

							return false;

						if (this.ENCOUNTER_IDE_SOURCE == null) {
							if (other.ENCOUNTER_IDE_SOURCE != null)
								return false;

						} else if (!this.ENCOUNTER_IDE_SOURCE
								.equals(other.ENCOUNTER_IDE_SOURCE))

							return false;

						if (this.ENCOUNTER_NUM != other.ENCOUNTER_NUM)
							return false;

						if (this.PATIENT_IDE == null) {
							if (other.PATIENT_IDE != null)
								return false;

						} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "encounter_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 1; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 1; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row13 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row13 = new row13Struct();
						try {

							char fieldSeparator_tFileInputDelimited_12_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_12_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row13.ENCOUNTER_IDE = null;

								row13.ENCOUNTER_IDE_SOURCE = null;

								row13.ENCOUNTER_NUM = 0;

								row13.PATIENT_IDE = null;

								row13.PATIENT_IDE_SOURCE = null;

								row13.ENCOUNTER_IDE_STATUS = null;

								row13.UPLOAD_DATE = null;

								row13.UPDATE_DATE = null;

								row13.DOWNLOAD_DATE = null;

								row13.IMPORT_DATE = null;

								row13.SOURCESYSTEM_CD = null;

								row13.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE_SOURCE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.ENCOUNTER_NUM = ParserUtils
												.parseTo_int(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row13.ENCOUNTER_NUM = 0;
									}

								} else {
									row13.ENCOUNTER_NUM = 0;
								}

								columnIndexWithD_tFileInputDelimited_12 = 3;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.PATIENT_IDE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 4;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.PATIENT_IDE_SOURCE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 5;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE_STATUS = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 6;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.UPLOAD_DATE = null;
									}

								} else {
									row13.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 7;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.UPDATE_DATE = null;
									}

								} else {
									row13.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 8;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.DOWNLOAD_DATE = null;
									}

								} else {
									row13.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 9;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.IMPORT_DATE = null;
									}

								} else {
									row13.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 10;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.SOURCESYSTEM_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 11;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row13.UPLOAD_ID = null;
									}

								} else {
									row13.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tJavaRow_7 main ] start
							 */

							currentComponent = "tJavaRow_7";

							// Code generated according to input schema and
							// output schema
							row27.ENCOUNTER_IDE = row13.ENCOUNTER_IDE;
							row27.ENCOUNTER_IDE_SOURCE = row13.ENCOUNTER_IDE_SOURCE;
							row27.ENCOUNTER_NUM = row13.ENCOUNTER_NUM;// .add(new
																		// BigDecimal(10000));
							row27.PATIENT_IDE = row13.PATIENT_IDE;
							row27.PATIENT_IDE_SOURCE = row13.PATIENT_IDE_SOURCE;
							row27.ENCOUNTER_IDE_STATUS = row13.ENCOUNTER_IDE_STATUS;
							row27.UPLOAD_DATE = row13.UPLOAD_DATE;
							row27.UPDATE_DATE = row13.UPDATE_DATE;
							row27.DOWNLOAD_DATE = row13.DOWNLOAD_DATE;
							row27.IMPORT_DATE = row13.IMPORT_DATE;
							row27.SOURCESYSTEM_CD = row13.SOURCESYSTEM_CD;
							row27.UPLOAD_ID = row13.UPLOAD_ID;

							nb_line_tJavaRow_7++;

							tos_count_tJavaRow_7++;

							/**
							 * [tJavaRow_7 main ] stop
							 */

							/**
							 * [tUniqRow_4 main ] start
							 */

							currentComponent = "tUniqRow_4";

							row21 = null;
							finder_tUniqRow_4.ENCOUNTER_IDE = row27.ENCOUNTER_IDE;
							finder_tUniqRow_4.ENCOUNTER_IDE_SOURCE = row27.ENCOUNTER_IDE_SOURCE;
							finder_tUniqRow_4.ENCOUNTER_NUM = row27.ENCOUNTER_NUM;
							finder_tUniqRow_4.PATIENT_IDE = row27.PATIENT_IDE;
							finder_tUniqRow_4.hashCodeDirty = true;
							if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
								KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

								new_tUniqRow_4.ENCOUNTER_IDE = row27.ENCOUNTER_IDE;
								new_tUniqRow_4.ENCOUNTER_IDE_SOURCE = row27.ENCOUNTER_IDE_SOURCE;
								new_tUniqRow_4.ENCOUNTER_NUM = row27.ENCOUNTER_NUM;
								new_tUniqRow_4.PATIENT_IDE = row27.PATIENT_IDE;

								keystUniqRow_4.add(new_tUniqRow_4);
								if (row21 == null) {

									row21 = new row21Struct();
								}
								row21.ENCOUNTER_IDE = row27.ENCOUNTER_IDE;
								row21.ENCOUNTER_IDE_SOURCE = row27.ENCOUNTER_IDE_SOURCE;
								row21.ENCOUNTER_NUM = row27.ENCOUNTER_NUM;
								row21.PATIENT_IDE = row27.PATIENT_IDE;
								row21.PATIENT_IDE_SOURCE = row27.PATIENT_IDE_SOURCE;
								row21.ENCOUNTER_IDE_STATUS = row27.ENCOUNTER_IDE_STATUS;
								row21.UPLOAD_DATE = row27.UPLOAD_DATE;
								row21.UPDATE_DATE = row27.UPDATE_DATE;
								row21.DOWNLOAD_DATE = row27.DOWNLOAD_DATE;
								row21.IMPORT_DATE = row27.IMPORT_DATE;
								row21.SOURCESYSTEM_CD = row27.SOURCESYSTEM_CD;
								row21.UPLOAD_ID = row27.UPLOAD_ID;
								nb_uniques_tUniqRow_4++;
							} else {
								nb_duplicates_tUniqRow_4++;
							}

							tos_count_tUniqRow_4++;

							/**
							 * [tUniqRow_4 main ] stop
							 */
							// Start of branch "row21"
							if (row21 != null) {

								/**
								 * [tMap_14 main ] start
								 */

								currentComponent = "tMap_14";

								boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_14 = false;
								boolean mainRowRejected_tMap_14 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row46"
								// /////////////////////////////////////////////

								boolean forceLooprow46 = false;

								row46Struct row46ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_14 = false;

									row46HashKey.ENCOUNTER_IDE = row21.ENCOUNTER_IDE;

									row46HashKey.ENCOUNTER_IDE_SOURCE = row21.ENCOUNTER_IDE_SOURCE;

									row46HashKey.hashCodeDirty = true;

									tHash_Lookup_row46.lookup(row46HashKey);

									if (!tHash_Lookup_row46.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_14 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row46 != null
										&& tHash_Lookup_row46
												.getCount(row46HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row46' and it contains more one result from keys :  row46.ENCOUNTER_IDE = '"
									// + row46HashKey.ENCOUNTER_IDE +
									// "', row46.ENCOUNTER_IDE_SOURCE = '" +
									// row46HashKey.ENCOUNTER_IDE_SOURCE + "'");
								} // G 071

								row46Struct row46 = null;

								row46Struct fromLookup_row46 = null;
								row46 = row46Default;

								if (tHash_Lookup_row46 != null
										&& tHash_Lookup_row46.hasNext()) { // G
																			// 099

									fromLookup_row46 = tHash_Lookup_row46
											.next();

								} // G 099

								if (fromLookup_row46 != null) {
									row46 = fromLookup_row46;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
									// ###############################
									// # Output tables

									out16 = null;
									out15 = null;

									if (!rejectedInnerJoin_tMap_14) {

										// # Output table : 'out16'
										out16_tmp.ENCOUNTER_IDE = row21.ENCOUNTER_IDE;
										out16_tmp.ENCOUNTER_IDE_SOURCE = row21.ENCOUNTER_IDE_SOURCE;
										out16_tmp.ENCOUNTER_NUM = row21.ENCOUNTER_NUM;
										out16_tmp.PATIENT_IDE = row21.PATIENT_IDE;
										out16_tmp.PATIENT_IDE_SOURCE = row21.PATIENT_IDE_SOURCE;
										out16_tmp.ENCOUNTER_IDE_STATUS = row21.ENCOUNTER_IDE_STATUS;
										out16_tmp.UPLOAD_DATE = row21.UPLOAD_DATE;
										out16_tmp.UPDATE_DATE = row21.UPDATE_DATE;
										out16_tmp.DOWNLOAD_DATE = row21.DOWNLOAD_DATE;
										out16_tmp.IMPORT_DATE = row21.IMPORT_DATE;
										out16_tmp.SOURCESYSTEM_CD = row21.SOURCESYSTEM_CD;
										out16_tmp.UPLOAD_ID = row21.UPLOAD_ID;
										out16 = out16_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out15'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_14) {
										out15_tmp.ENCOUNTER_IDE = row21.ENCOUNTER_IDE;
										out15_tmp.ENCOUNTER_IDE_SOURCE = row21.ENCOUNTER_IDE_SOURCE;
										out15_tmp.ENCOUNTER_NUM = row21.ENCOUNTER_NUM;
										out15_tmp.PATIENT_IDE = row21.PATIENT_IDE;
										out15_tmp.PATIENT_IDE_SOURCE = row21.PATIENT_IDE_SOURCE;
										out15_tmp.ENCOUNTER_IDE_STATUS = row21.ENCOUNTER_IDE_STATUS;
										out15_tmp.UPLOAD_DATE = row21.UPLOAD_DATE;
										out15_tmp.UPDATE_DATE = row21.UPDATE_DATE;
										out15_tmp.DOWNLOAD_DATE = row21.DOWNLOAD_DATE;
										out15_tmp.IMPORT_DATE = row21.IMPORT_DATE;
										out15_tmp.SOURCESYSTEM_CD = row21.SOURCESYSTEM_CD;
										out15_tmp.UPLOAD_ID = row21.UPLOAD_ID;
										out15 = out15_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_14 = false;

								tos_count_tMap_14++;

								/**
								 * [tMap_14 main ] stop
								 */
								// Start of branch "out15"
								if (out15 != null) {

									/**
									 * [tJDBCOutput_2 main ] start
									 */

									currentComponent = "tJDBCOutput_2";

									row30 = null;
									whetherReject_tJDBCOutput_2 = false;
									if (out15.ENCOUNTER_IDE == null) {
										pstmt_tJDBCOutput_2.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_2.setString(1,
												out15.ENCOUNTER_IDE);
									}

									if (out15.ENCOUNTER_IDE_SOURCE == null) {
										pstmt_tJDBCOutput_2.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_2.setString(2,
												out15.ENCOUNTER_IDE_SOURCE);
									}

									pstmt_tJDBCOutput_2.setInt(3,
											out15.ENCOUNTER_NUM);

									if (out15.PATIENT_IDE == null) {
										pstmt_tJDBCOutput_2.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_2.setString(4,
												out15.PATIENT_IDE);
									}

									if (out15.PATIENT_IDE_SOURCE == null) {
										pstmt_tJDBCOutput_2.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_2.setString(5,
												out15.PATIENT_IDE_SOURCE);
									}

									if (out15.ENCOUNTER_IDE_STATUS == null) {
										pstmt_tJDBCOutput_2.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_2.setString(6,
												out15.ENCOUNTER_IDE_STATUS);
									}

									if (out15.UPLOAD_DATE != null) {
										pstmt_tJDBCOutput_2.setTimestamp(
												7,
												new java.sql.Timestamp(
														out15.UPLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_2.setNull(7,
												java.sql.Types.DATE);
									}

									if (out15.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_2.setTimestamp(
												8,
												new java.sql.Timestamp(
														out15.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_2.setNull(8,
												java.sql.Types.DATE);
									}

									if (out15.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_2.setTimestamp(
												9,
												new java.sql.Timestamp(
														out15.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_2.setNull(9,
												java.sql.Types.DATE);
									}

									if (out15.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_2.setTimestamp(
												10,
												new java.sql.Timestamp(
														out15.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_2.setNull(10,
												java.sql.Types.DATE);
									}

									if (out15.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_2.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_2.setString(11,
												out15.SOURCESYSTEM_CD);
									}

									if (out15.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_2.setNull(12,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_2.setInt(12,
												out15.UPLOAD_ID);
									}

									pstmt_tJDBCOutput_2.addBatch();
									nb_line_tJDBCOutput_2++;

									batchSizeCounter_tJDBCOutput_2++;
									if (!whetherReject_tJDBCOutput_2) {
										row30 = new row30Struct();
										row30.ENCOUNTER_IDE = out15.ENCOUNTER_IDE;
										row30.ENCOUNTER_IDE_SOURCE = out15.ENCOUNTER_IDE_SOURCE;
										row30.ENCOUNTER_NUM = out15.ENCOUNTER_NUM;
										row30.PATIENT_IDE = out15.PATIENT_IDE;
										row30.PATIENT_IDE_SOURCE = out15.PATIENT_IDE_SOURCE;
										row30.ENCOUNTER_IDE_STATUS = out15.ENCOUNTER_IDE_STATUS;
										row30.UPLOAD_DATE = out15.UPLOAD_DATE;
										row30.UPDATE_DATE = out15.UPDATE_DATE;
										row30.DOWNLOAD_DATE = out15.DOWNLOAD_DATE;
										row30.IMPORT_DATE = out15.IMPORT_DATE;
										row30.SOURCESYSTEM_CD = out15.SOURCESYSTEM_CD;
										row30.UPLOAD_ID = out15.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_2 <= batchSizeCounter_tJDBCOutput_2) {
										int[] status_tJDBCOutput_2 = null;
										int countSum_tJDBCOutput_2 = 0;
										try {
											batchSizeCounter_tJDBCOutput_2 = 0;

											status_tJDBCOutput_2 = pstmt_tJDBCOutput_2
													.executeBatch();

											for (int countEach_tJDBCOutput_2 : status_tJDBCOutput_2) {
												countSum_tJDBCOutput_2 += (countEach_tJDBCOutput_2 < 0 ? 0
														: countEach_tJDBCOutput_2);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_2 = pstmt_tJDBCOutput_2
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_2 = tmp_batchUpdateCount_tJDBCOutput_2 > countSum_tJDBCOutput_2 ? tmp_batchUpdateCount_tJDBCOutput_2
												: countSum_tJDBCOutput_2;

										insertedCount_tJDBCOutput_2 += tmp_batchUpdateCount_tJDBCOutput_2;

									}

									commitCounter_tJDBCOutput_2++;
									if (commitEvery_tJDBCOutput_2 <= commitCounter_tJDBCOutput_2) {

										connection_tJDBCOutput_2.commit();
										commitCounter_tJDBCOutput_2 = 0;
									}

									tos_count_tJDBCOutput_2++;

									/**
									 * [tJDBCOutput_2 main ] stop
									 */
									// Start of branch "row30"
									if (row30 != null) {

										/**
										 * [tJavaRow_11 main ] start
										 */

										currentComponent = "tJavaRow_11";

										context.counter++;

										if (context.counter % 250 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Encounter_Mapping: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_11++;

										tos_count_tJavaRow_11++;

										/**
										 * [tJavaRow_11 main ] stop
										 */

									} // End of branch "row30"

								} // End of branch "out15"

								// Start of branch "out16"
								if (out16 != null) {

									/**
									 * [tJDBCOutput_20 main ] start
									 */

									currentComponent = "tJDBCOutput_20";

									row47 = null;
									whetherReject_tJDBCOutput_20 = false;
									pstmt_tJDBCOutput_20.setInt(1,
											out16.ENCOUNTER_NUM);

									if (out16.PATIENT_IDE == null) {
										pstmt_tJDBCOutput_20.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_20.setString(2,
												out16.PATIENT_IDE);
									}

									if (out16.PATIENT_IDE_SOURCE == null) {
										pstmt_tJDBCOutput_20.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_20.setString(3,
												out16.PATIENT_IDE_SOURCE);
									}

									if (out16.ENCOUNTER_IDE_STATUS == null) {
										pstmt_tJDBCOutput_20.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_20.setString(4,
												out16.ENCOUNTER_IDE_STATUS);
									}

									if (out16.UPLOAD_DATE != null) {
										pstmt_tJDBCOutput_20.setTimestamp(
												5,
												new java.sql.Timestamp(
														out16.UPLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_20.setNull(5,
												java.sql.Types.DATE);
									}

									if (out16.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_20.setTimestamp(
												6,
												new java.sql.Timestamp(
														out16.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_20.setNull(6,
												java.sql.Types.DATE);
									}

									if (out16.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_20.setTimestamp(
												7,
												new java.sql.Timestamp(
														out16.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_20.setNull(7,
												java.sql.Types.DATE);
									}

									if (out16.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_20.setTimestamp(
												8,
												new java.sql.Timestamp(
														out16.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_20.setNull(8,
												java.sql.Types.DATE);
									}

									if (out16.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_20.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_20.setString(9,
												out16.SOURCESYSTEM_CD);
									}

									if (out16.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_20.setNull(10,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_20.setInt(10,
												out16.UPLOAD_ID);
									}

									if (out16.ENCOUNTER_IDE == null) {
										pstmt_tJDBCOutput_20.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_20.setString(11,
												out16.ENCOUNTER_IDE);
									}

									if (out16.ENCOUNTER_IDE_SOURCE == null) {
										pstmt_tJDBCOutput_20.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_20.setString(12,
												out16.ENCOUNTER_IDE_SOURCE);
									}

									pstmt_tJDBCOutput_20.addBatch();
									nb_line_tJDBCOutput_20++;

									batchSizeCounter_tJDBCOutput_20++;
									if (!whetherReject_tJDBCOutput_20) {
										row47 = new row47Struct();
										row47.ENCOUNTER_IDE = out16.ENCOUNTER_IDE;
										row47.ENCOUNTER_IDE_SOURCE = out16.ENCOUNTER_IDE_SOURCE;
										row47.ENCOUNTER_NUM = out16.ENCOUNTER_NUM;
										row47.PATIENT_IDE = out16.PATIENT_IDE;
										row47.PATIENT_IDE_SOURCE = out16.PATIENT_IDE_SOURCE;
										row47.ENCOUNTER_IDE_STATUS = out16.ENCOUNTER_IDE_STATUS;
										row47.UPLOAD_DATE = out16.UPLOAD_DATE;
										row47.UPDATE_DATE = out16.UPDATE_DATE;
										row47.DOWNLOAD_DATE = out16.DOWNLOAD_DATE;
										row47.IMPORT_DATE = out16.IMPORT_DATE;
										row47.SOURCESYSTEM_CD = out16.SOURCESYSTEM_CD;
										row47.UPLOAD_ID = out16.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_20 <= batchSizeCounter_tJDBCOutput_20) {
										int[] status_tJDBCOutput_20 = null;
										int countSum_tJDBCOutput_20 = 0;
										try {
											batchSizeCounter_tJDBCOutput_20 = 0;

											status_tJDBCOutput_20 = pstmt_tJDBCOutput_20
													.executeBatch();

											for (int countEach_tJDBCOutput_20 : status_tJDBCOutput_20) {
												countSum_tJDBCOutput_20 += (countEach_tJDBCOutput_20 < 0 ? 0
														: countEach_tJDBCOutput_20);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_20 = pstmt_tJDBCOutput_20
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_20 = tmp_batchUpdateCount_tJDBCOutput_20 > countSum_tJDBCOutput_20 ? tmp_batchUpdateCount_tJDBCOutput_20
												: countSum_tJDBCOutput_20;

										updatedCount_tJDBCOutput_20 += tmp_batchUpdateCount_tJDBCOutput_20;

									}

									commitCounter_tJDBCOutput_20++;
									if (commitEvery_tJDBCOutput_20 <= commitCounter_tJDBCOutput_20) {

										connection_tJDBCOutput_20.commit();
										commitCounter_tJDBCOutput_20 = 0;
									}

									tos_count_tJDBCOutput_20++;

									/**
									 * [tJDBCOutput_20 main ] stop
									 */
									// Start of branch "row47"
									if (row47 != null) {

										/**
										 * [tJavaRow_20 main ] start
										 */

										currentComponent = "tJavaRow_20";

										context.counter++;

										if (context.counter % 250 == 0) {
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Encounter_Mapping: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_20++;

										tos_count_tJavaRow_20++;

										/**
										 * [tJavaRow_20 main ] stop
										 */

									} // End of branch "row47"

								} // End of branch "out16"

							} // End of branch "row21"

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}

				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES",
						nb_duplicates_tUniqRow_4);

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row46 != null) {
					tHash_Lookup_row46.endGet();
				}
				globalMap.remove("tHash_Lookup_row46");

				// ###############################

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tJDBCOutput_2 end ] start
				 */

				currentComponent = "tJDBCOutput_2";

				int[] status_tJDBCOutput_2 = null;
				int countSum_tJDBCOutput_2 = 0;
				try {
					if (pstmt_tJDBCOutput_2 != null
							&& batchSizeCounter_tJDBCOutput_2 > 0) {

						status_tJDBCOutput_2 = pstmt_tJDBCOutput_2
								.executeBatch();

						for (int countEach_tJDBCOutput_2 : status_tJDBCOutput_2) {
							countSum_tJDBCOutput_2 += (countEach_tJDBCOutput_2 < 0 ? 0
									: countEach_tJDBCOutput_2);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_2 != null
						&& batchSizeCounter_tJDBCOutput_2 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_2 = pstmt_tJDBCOutput_2
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_2 = tmp_batchUpdateCount_tJDBCOutput_2 > countSum_tJDBCOutput_2 ? tmp_batchUpdateCount_tJDBCOutput_2
							: countSum_tJDBCOutput_2;

					insertedCount_tJDBCOutput_2 += tmp_batchUpdateCount_tJDBCOutput_2;

				}
				if (pstmt_tJDBCOutput_2 != null) {

					pstmt_tJDBCOutput_2.close();

				}

				if (commitCounter_tJDBCOutput_2 > 0) {

					connection_tJDBCOutput_2.commit();

				}

				connection_tJDBCOutput_2.close();

				resourceMap.put("finish_tJDBCOutput_2", true);

				nb_line_deleted_tJDBCOutput_2 = nb_line_deleted_tJDBCOutput_2
						+ deletedCount_tJDBCOutput_2;
				nb_line_update_tJDBCOutput_2 = nb_line_update_tJDBCOutput_2
						+ updatedCount_tJDBCOutput_2;
				nb_line_inserted_tJDBCOutput_2 = nb_line_inserted_tJDBCOutput_2
						+ insertedCount_tJDBCOutput_2;
				nb_line_rejected_tJDBCOutput_2 = nb_line_rejected_tJDBCOutput_2
						+ rejectedCount_tJDBCOutput_2;

				globalMap.put("tJDBCOutput_2_NB_LINE", nb_line_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_2);

				ok_Hash.put("tJDBCOutput_2", true);
				end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_2 end ] stop
				 */

				/**
				 * [tJavaRow_11 end ] start
				 */

				currentComponent = "tJavaRow_11";

				globalMap.put("tJavaRow_11_NB_LINE", nb_line_tJavaRow_11);

				ok_Hash.put("tJavaRow_11", true);
				end_Hash.put("tJavaRow_11", System.currentTimeMillis());

				/**
				 * [tJavaRow_11 end ] stop
				 */

				/**
				 * [tJDBCOutput_20 end ] start
				 */

				currentComponent = "tJDBCOutput_20";

				int[] status_tJDBCOutput_20 = null;
				int countSum_tJDBCOutput_20 = 0;
				try {
					if (pstmt_tJDBCOutput_20 != null
							&& batchSizeCounter_tJDBCOutput_20 > 0) {

						status_tJDBCOutput_20 = pstmt_tJDBCOutput_20
								.executeBatch();

						for (int countEach_tJDBCOutput_20 : status_tJDBCOutput_20) {
							countSum_tJDBCOutput_20 += (countEach_tJDBCOutput_20 < 0 ? 0
									: countEach_tJDBCOutput_20);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_20 != null
						&& batchSizeCounter_tJDBCOutput_20 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_20 = pstmt_tJDBCOutput_20
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_20 = tmp_batchUpdateCount_tJDBCOutput_20 > countSum_tJDBCOutput_20 ? tmp_batchUpdateCount_tJDBCOutput_20
							: countSum_tJDBCOutput_20;

					updatedCount_tJDBCOutput_20 += tmp_batchUpdateCount_tJDBCOutput_20;

				}
				if (pstmt_tJDBCOutput_20 != null) {

					pstmt_tJDBCOutput_20.close();

				}

				if (commitCounter_tJDBCOutput_20 > 0) {

					connection_tJDBCOutput_20.commit();

				}

				connection_tJDBCOutput_20.close();

				resourceMap.put("finish_tJDBCOutput_20", true);

				nb_line_deleted_tJDBCOutput_20 = nb_line_deleted_tJDBCOutput_20
						+ deletedCount_tJDBCOutput_20;
				nb_line_update_tJDBCOutput_20 = nb_line_update_tJDBCOutput_20
						+ updatedCount_tJDBCOutput_20;
				nb_line_inserted_tJDBCOutput_20 = nb_line_inserted_tJDBCOutput_20
						+ insertedCount_tJDBCOutput_20;
				nb_line_rejected_tJDBCOutput_20 = nb_line_rejected_tJDBCOutput_20
						+ rejectedCount_tJDBCOutput_20;

				globalMap.put("tJDBCOutput_20_NB_LINE", nb_line_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_20);

				ok_Hash.put("tJDBCOutput_20", true);
				end_Hash.put("tJDBCOutput_20", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_20 end ] stop
				 */

				/**
				 * [tJavaRow_20 end ] start
				 */

				currentComponent = "tJavaRow_20";

				globalMap.put("tJavaRow_20_NB_LINE", nb_line_tJavaRow_20);

				ok_Hash.put("tJavaRow_20", true);
				end_Hash.put("tJavaRow_20", System.currentTimeMillis());

				/**
				 * [tJavaRow_20 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_20Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_row46");

			try {

				/**
				 * [tFileInputDelimited_12 finally ] start
				 */

				currentComponent = "tFileInputDelimited_12";

				/**
				 * [tFileInputDelimited_12 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tJDBCOutput_2 finally ] start
				 */

				currentComponent = "tJDBCOutput_2";

				if (resourceMap.get("finish_tJDBCOutput_2") == null) {
					if (resourceMap.get("conn_tJDBCOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_2) {
							String errorMessage_tJDBCOutput_2 = "failed to close the connection in tJDBCOutput_2 :"
									+ sqlEx_tJDBCOutput_2.getMessage();

							System.err.println(errorMessage_tJDBCOutput_2);
						}
					}
				}

				/**
				 * [tJDBCOutput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_11 finally ] start
				 */

				currentComponent = "tJavaRow_11";

				/**
				 * [tJavaRow_11 finally ] stop
				 */

				/**
				 * [tJDBCOutput_20 finally ] start
				 */

				currentComponent = "tJDBCOutput_20";

				if (resourceMap.get("finish_tJDBCOutput_20") == null) {
					if (resourceMap.get("conn_tJDBCOutput_20") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_20")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_20) {
							String errorMessage_tJDBCOutput_20 = "failed to close the connection in tJDBCOutput_20 :"
									+ sqlEx_tJDBCOutput_20.getMessage();

							System.err.println(errorMessage_tJDBCOutput_20);
						}
					}
				}

				/**
				 * [tJDBCOutput_20 finally ] stop
				 */

				/**
				 * [tJavaRow_20 finally ] start
				 */

				currentComponent = "tJavaRow_20";

				/**
				 * [tJavaRow_20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public void tDie_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_6 begin ] start
				 */

				ok_Hash.put("tDie_6", false);
				start_Hash.put("tDie_6", System.currentTimeMillis());

				currentComponent = "tDie_6";

				int tos_count_tDie_6 = 0;

				/**
				 * [tDie_6 begin ] stop
				 */

				/**
				 * [tDie_6 main ] start
				 */

				currentComponent = "tDie_6";

				globalMap.put("tDie_6_DIE_PRIORITY", 5);
				System.err.println("Error: Encounter_Mapping");

				globalMap.put("tDie_6_DIE_MESSAGE", "Error: Encounter_Mapping");
				globalMap
						.put("tDie_6_DIE_MESSAGES", "Error: Encounter_Mapping");
				currentComponent = "tDie_6";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_6_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_6++;

				/**
				 * [tDie_6 main ] stop
				 */

				/**
				 * [tDie_6 end ] start
				 */

				currentComponent = "tDie_6";

				ok_Hash.put("tDie_6", true);
				end_Hash.put("tDie_6", System.currentTimeMillis());

				/**
				 * [tDie_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_6 finally ] start
				 */

				currentComponent = "tDie_6";

				/**
				 * [tDie_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_6_SUBPROCESS_STATE", 1);
	}

	public void tDie_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_5 begin ] start
				 */

				ok_Hash.put("tDie_5", false);
				start_Hash.put("tDie_5", System.currentTimeMillis());

				currentComponent = "tDie_5";

				int tos_count_tDie_5 = 0;

				/**
				 * [tDie_5 begin ] stop
				 */

				/**
				 * [tDie_5 main ] start
				 */

				currentComponent = "tDie_5";

				globalMap.put("tDie_5_DIE_PRIORITY", 5);
				System.err.println("Error: Encounter_Mapping");

				globalMap.put("tDie_5_DIE_MESSAGE", "Error: Encounter_Mapping");
				globalMap
						.put("tDie_5_DIE_MESSAGES", "Error: Encounter_Mapping");
				currentComponent = "tDie_5";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_5_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_5++;

				/**
				 * [tDie_5 main ] stop
				 */

				/**
				 * [tDie_5 end ] start
				 */

				currentComponent = "tDie_5";

				ok_Hash.put("tDie_5", true);
				end_Hash.put("tDie_5", System.currentTimeMillis());

				/**
				 * [tDie_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_5 finally ] start
				 */

				currentComponent = "tDie_5";

				/**
				 * [tDie_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_20Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_20 begin ] start
				 */

				ok_Hash.put("tJava_20", false);
				start_Hash.put("tJava_20", System.currentTimeMillis());

				currentComponent = "tJava_20";

				int tos_count_tJava_20 = 0;

				StatusListener.setSubStatus(StatusListener.getSubPerc(),
						"Encounter_Mapping done! " + context.counter
								+ " rows imported.");

				/**
				 * [tJava_20 begin ] stop
				 */

				/**
				 * [tJava_20 main ] start
				 */

				currentComponent = "tJava_20";

				tos_count_tJava_20++;

				/**
				 * [tJava_20 main ] stop
				 */

				/**
				 * [tJava_20 end ] start
				 */

				currentComponent = "tJava_20";

				ok_Hash.put("tJava_20", true);
				end_Hash.put("tJava_20", System.currentTimeMillis());

				/**
				 * [tJava_20 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_20 finally ] start
				 */

				currentComponent = "tJava_20";

				/**
				 * [tJava_20 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_20_SUBPROCESS_STATE", 1);
	}

	public static class row46Struct implements
			routines.system.IPersistableComparableLookupRow<row46Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_IDE == null) ? 0
								: this.ENCOUNTER_IDE.hashCode());

				result = prime
						* result
						+ ((this.ENCOUNTER_IDE_SOURCE == null) ? 0
								: this.ENCOUNTER_IDE_SOURCE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row46Struct other = (row46Struct) obj;

			if (this.ENCOUNTER_IDE == null) {
				if (other.ENCOUNTER_IDE != null)
					return false;

			} else if (!this.ENCOUNTER_IDE.equals(other.ENCOUNTER_IDE))

				return false;

			if (this.ENCOUNTER_IDE_SOURCE == null) {
				if (other.ENCOUNTER_IDE_SOURCE != null)
					return false;

			} else if (!this.ENCOUNTER_IDE_SOURCE
					.equals(other.ENCOUNTER_IDE_SOURCE))

				return false;

			return true;
		}

		public void copyDataTo(row46Struct other) {

			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;
			other.ENCOUNTER_IDE_SOURCE = this.ENCOUNTER_IDE_SOURCE;

		}

		public void copyKeysDataTo(row46Struct other) {

			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;
			other.ENCOUNTER_IDE_SOURCE = this.ENCOUNTER_IDE_SOURCE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_IDE,
					other.ENCOUNTER_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ENCOUNTER_IDE_SOURCE,
					other.ENCOUNTER_IDE_SOURCE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row46Struct row46 = new row46Struct();

				/**
				 * [tAdvancedHash_row46 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row46", false);
				start_Hash.put("tAdvancedHash_row46",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row46";

				int tos_count_tAdvancedHash_row46 = 0;

				// connection name:row46
				// source node:tJDBCInput_11 -
				// inputs:(after_tFileInputDelimited_12) outputs:(row46,row46) |
				// target node:tAdvancedHash_row46 - inputs:(row46) outputs:()
				// linked node: tMap_14 - inputs:(row21,row46)
				// outputs:(out15,out16)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row46 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row46Struct> getLookup(matchingModeEnum_row46);

				globalMap.put("tHash_Lookup_row46", tHash_Lookup_row46);

				/**
				 * [tAdvancedHash_row46 begin ] stop
				 */

				/**
				 * [tJDBCInput_11 begin ] start
				 */

				ok_Hash.put("tJDBCInput_11", false);
				start_Hash.put("tJDBCInput_11", System.currentTimeMillis());

				currentComponent = "tJDBCInput_11";

				int tos_count_tJDBCInput_11 = 0;

				int nb_line_tJDBCInput_11 = 0;
				java.sql.Connection conn_tJDBCInput_11 = null;
				String driverClass_tJDBCInput_11 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_11);

				String url_tJDBCInput_11 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_11 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_11 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_11 = decryptedPassword_tJDBCInput_11;

				conn_tJDBCInput_11 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_11, dbUser_tJDBCInput_11,
						dbPwd_tJDBCInput_11);

				java.sql.Statement stmt_tJDBCInput_11 = conn_tJDBCInput_11
						.createStatement();

				String dbquery_tJDBCInput_11 = "select ENCOUNTER_IDE, ENCOUNTER_IDE_SOURCE from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_11_QUERY", dbquery_tJDBCInput_11);
				java.sql.ResultSet rs_tJDBCInput_11 = null;
				try {
					rs_tJDBCInput_11 = stmt_tJDBCInput_11
							.executeQuery(dbquery_tJDBCInput_11);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_11 = rs_tJDBCInput_11
							.getMetaData();
					int colQtyInRs_tJDBCInput_11 = rsmd_tJDBCInput_11
							.getColumnCount();

					String tmpContent_tJDBCInput_11 = null;

					while (rs_tJDBCInput_11.next()) {
						nb_line_tJDBCInput_11++;

						if (colQtyInRs_tJDBCInput_11 < 1) {
							row46.ENCOUNTER_IDE = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(1);
							if (tmpContent_tJDBCInput_11 != null) {
								row46.ENCOUNTER_IDE = tmpContent_tJDBCInput_11;
							} else {
								row46.ENCOUNTER_IDE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 2) {
							row46.ENCOUNTER_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(2);
							if (tmpContent_tJDBCInput_11 != null) {
								row46.ENCOUNTER_IDE_SOURCE = tmpContent_tJDBCInput_11;
							} else {
								row46.ENCOUNTER_IDE_SOURCE = null;
							}
						}

						/**
						 * [tJDBCInput_11 begin ] stop
						 */

						/**
						 * [tJDBCInput_11 main ] start
						 */

						currentComponent = "tJDBCInput_11";

						tos_count_tJDBCInput_11++;

						/**
						 * [tJDBCInput_11 main ] stop
						 */

						/**
						 * [tAdvancedHash_row46 main ] start
						 */

						currentComponent = "tAdvancedHash_row46";

						row46Struct row46_HashRow = new row46Struct();

						row46_HashRow.ENCOUNTER_IDE = row46.ENCOUNTER_IDE;

						row46_HashRow.ENCOUNTER_IDE_SOURCE = row46.ENCOUNTER_IDE_SOURCE;

						tHash_Lookup_row46.put(row46_HashRow);

						tos_count_tAdvancedHash_row46++;

						/**
						 * [tAdvancedHash_row46 main ] stop
						 */

						/**
						 * [tJDBCInput_11 end ] start
						 */

						currentComponent = "tJDBCInput_11";

					}
				} finally {
					if (rs_tJDBCInput_11 != null) {
						rs_tJDBCInput_11.close();
					}
					stmt_tJDBCInput_11.close();

					if (conn_tJDBCInput_11 != null
							&& !conn_tJDBCInput_11.isClosed()) {

						conn_tJDBCInput_11.close();

					}
				}
				globalMap.put("tJDBCInput_11_NB_LINE", nb_line_tJDBCInput_11);

				ok_Hash.put("tJDBCInput_11", true);
				end_Hash.put("tJDBCInput_11", System.currentTimeMillis());

				/**
				 * [tJDBCInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row46 end ] start
				 */

				currentComponent = "tAdvancedHash_row46";

				tHash_Lookup_row46.endPut();

				ok_Hash.put("tAdvancedHash_row46", true);
				end_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row46 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_11 finally ] start
				 */

				currentComponent = "tJDBCInput_11";

				/**
				 * [tJDBCInput_11 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row46 finally ] start
				 */

				currentComponent = "tAdvancedHash_row46";

				/**
				 * [tAdvancedHash_row46 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row41Struct other = (row41Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;

			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row41Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row41Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out8Struct implements
			routines.system.IPersistableRow<out8Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out9Struct implements
			routines.system.IPersistableRow<out9Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_14Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_14Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_7Process(globalMap);

				row17Struct row17 = new row17Struct();
				row32Struct row32 = new row32Struct();
				out8Struct out8 = new out8Struct();
				row20Struct row20 = new row20Struct();
				out9Struct out9 = new out9Struct();
				row41Struct row41 = new row41Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tJDBCOutput_6 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_6", false);
				start_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_6";

				int tos_count_tJDBCOutput_6 = 0;

				int nb_line_tJDBCOutput_6 = 0;
				int nb_line_update_tJDBCOutput_6 = 0;
				int nb_line_inserted_tJDBCOutput_6 = 0;
				int nb_line_deleted_tJDBCOutput_6 = 0;
				int nb_line_rejected_tJDBCOutput_6 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_6 = 0;

				int deletedCount_tJDBCOutput_6 = 0;
				int updatedCount_tJDBCOutput_6 = 0;
				int insertedCount_tJDBCOutput_6 = 0;
				int rejectedCount_tJDBCOutput_6 = 0;

				boolean whetherReject_tJDBCOutput_6 = false;

				java.sql.Connection connection_tJDBCOutput_6 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_6 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_6 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_6 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_6,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_6);

				resourceMap.put("conn_tJDBCOutput_6", connection_tJDBCOutput_6);
				connection_tJDBCOutput_6.setAutoCommit(false);
				int commitEvery_tJDBCOutput_6 = 500000;
				int commitCounter_tJDBCOutput_6 = 0;
				int batchSize_tJDBCOutput_6 = 250000;
				int batchSizeCounter_tJDBCOutput_6 = 0;

				String insert_tJDBCOutput_6 = "INSERT INTO "
						+ context.currentTable
						+ " (MODIFIER_PATH,MODIFIER_CD,NAME_CHAR,MODIFIER_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_6 = connection_tJDBCOutput_6
						.prepareStatement(insert_tJDBCOutput_6);

				/**
				 * [tJDBCOutput_6 begin ] stop
				 */

				/**
				 * [tJavaRow_17 begin ] start
				 */

				ok_Hash.put("tJavaRow_17", false);
				start_Hash.put("tJavaRow_17", System.currentTimeMillis());

				currentComponent = "tJavaRow_17";

				int tos_count_tJavaRow_17 = 0;

				int nb_line_tJavaRow_17 = 0;

				/**
				 * [tJavaRow_17 begin ] stop
				 */

				/**
				 * [tJDBCOutput_14 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_14", false);
				start_Hash.put("tJDBCOutput_14", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_14";

				int tos_count_tJDBCOutput_14 = 0;

				int updateKeyCount_tJDBCOutput_14 = 1;
				if (updateKeyCount_tJDBCOutput_14 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_14 = 0;
				int nb_line_update_tJDBCOutput_14 = 0;
				int nb_line_inserted_tJDBCOutput_14 = 0;
				int nb_line_deleted_tJDBCOutput_14 = 0;
				int nb_line_rejected_tJDBCOutput_14 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_14 = 0;

				int deletedCount_tJDBCOutput_14 = 0;
				int updatedCount_tJDBCOutput_14 = 0;
				int insertedCount_tJDBCOutput_14 = 0;
				int rejectedCount_tJDBCOutput_14 = 0;

				boolean whetherReject_tJDBCOutput_14 = false;

				java.sql.Connection connection_tJDBCOutput_14 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_14 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_14 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_14 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_14,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_14);

				resourceMap.put("conn_tJDBCOutput_14",
						connection_tJDBCOutput_14);
				connection_tJDBCOutput_14.setAutoCommit(false);
				int commitEvery_tJDBCOutput_14 = 500000;
				int commitCounter_tJDBCOutput_14 = 0;
				int batchSize_tJDBCOutput_14 = 250000;
				int batchSizeCounter_tJDBCOutput_14 = 0;

				String update_tJDBCOutput_14 = "UPDATE "
						+ context.currentTable
						+ " SET MODIFIER_CD = ?,NAME_CHAR = ?,MODIFIER_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE MODIFIER_PATH = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_14 = connection_tJDBCOutput_14
						.prepareStatement(update_tJDBCOutput_14);

				/**
				 * [tJDBCOutput_14 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) globalMap
						.get("tHash_Lookup_row40"));

				row40Struct row40HashKey = new row40Struct();
				row40Struct row40Default = new row40Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out8Struct out8_tmp = new out8Struct();
				out9Struct out9_tmp = new out9Struct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String MODIFIER_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.MODIFIER_PATH == null) ? 0
											: this.MODIFIER_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.MODIFIER_PATH == null) {
							if (other.MODIFIER_PATH != null)
								return false;

						} else if (!this.MODIFIER_PATH
								.equals(other.MODIFIER_PATH))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				int footer_tFileInputDelimited_14 = 0;
				int totalLinetFileInputDelimited_14 = 0;
				int limittFileInputDelimited_14 = -1;
				int lastLinetFileInputDelimited_14 = -1;

				char fieldSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_14 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_14 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_14 = /**
				 * Start field
				 * tFileInputDelimited_14:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "modifier_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_14:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_14 = null;

				try {

					String[] rowtFileInputDelimited_14 = null;
					int currentLinetFileInputDelimited_14 = 0;
					int outputLinetFileInputDelimited_14 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_14 = 0;
							if (footer_value_tFileInputDelimited_14 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_14,
									fieldSeparator_tFileInputDelimited_14[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_14)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_14[0]);
						}

						csvReadertFileInputDelimited_14
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
							csvReadertFileInputDelimited_14.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_14[0]);

						csvReadertFileInputDelimited_14.setQuoteChar('"');

						csvReadertFileInputDelimited_14
								.setEscapeChar(csvReadertFileInputDelimited_14
										.getQuoteChar());

						if (footer_tFileInputDelimited_14 > 0) {
							for (totalLinetFileInputDelimited_14 = 0; totalLinetFileInputDelimited_14 < 1; totalLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
							csvReadertFileInputDelimited_14
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_14.readNext()) {

								rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
										.getValues();
								if (!(rowtFileInputDelimited_14.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_14[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_14++;

								}

							}
							int lastLineTemptFileInputDelimited_14 = totalLinetFileInputDelimited_14
									- footer_tFileInputDelimited_14 < 0 ? 0
									: totalLinetFileInputDelimited_14
											- footer_tFileInputDelimited_14;
							if (lastLinetFileInputDelimited_14 > 0) {
								lastLinetFileInputDelimited_14 = lastLinetFileInputDelimited_14 < lastLineTemptFileInputDelimited_14 ? lastLinetFileInputDelimited_14
										: lastLineTemptFileInputDelimited_14;
							} else {
								lastLinetFileInputDelimited_14 = lastLineTemptFileInputDelimited_14;
							}

							csvReadertFileInputDelimited_14.close();
							if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_14,
										fieldSeparator_tFileInputDelimited_14[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_14)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_14[0]);
							}
							csvReadertFileInputDelimited_14
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
								csvReadertFileInputDelimited_14
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_14[0]);

							csvReadertFileInputDelimited_14.setQuoteChar('"');

							csvReadertFileInputDelimited_14
									.setEscapeChar(csvReadertFileInputDelimited_14
											.getQuoteChar());

						}

						if (limittFileInputDelimited_14 != 0) {
							for (currentLinetFileInputDelimited_14 = 0; currentLinetFileInputDelimited_14 < 1; currentLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
						}
						csvReadertFileInputDelimited_14
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_14 != 0
							&& csvReadertFileInputDelimited_14 != null
							&& csvReadertFileInputDelimited_14.readNext()) {

						rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
								.getValues();

						if (rowtFileInputDelimited_14.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_14[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_14++;

						if (lastLinetFileInputDelimited_14 > -1
								&& currentLinetFileInputDelimited_14 > lastLinetFileInputDelimited_14) {
							break;
						}
						outputLinetFileInputDelimited_14++;
						if (limittFileInputDelimited_14 > 0
								&& outputLinetFileInputDelimited_14 > limittFileInputDelimited_14) {
							break;
						}

						row17 = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						row17 = new row17Struct();
						try {

							char fieldSeparator_tFileInputDelimited_14_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_14_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_14.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_14[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row17.MODIFIER_PATH = null;

								row17.MODIFIER_CD = null;

								row17.NAME_CHAR = null;

								row17.MODIFIER_BLOB = null;

								row17.UPDATE_DATE = null;

								row17.DOWNLOAD_DATE = null;

								row17.IMPORT_DATE = null;

								row17.SOURCESYSTEM_CD = null;

								row17.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_14 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_14 = 0;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_PATH = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 1;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 2;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.NAME_CHAR = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 3;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_BLOB = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 4;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.UPDATE_DATE = null;
									}

								} else {
									row17.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 5;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.DOWNLOAD_DATE = null;
									}

								} else {
									row17.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 6;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.IMPORT_DATE = null;
									}

								} else {
									row17.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 7;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.SOURCESYSTEM_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 8;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										row17.UPLOAD_ID = null;
									}

								} else {
									row17.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							row32 = null;
							finder_tUniqRow_2.MODIFIER_PATH = row17.MODIFIER_PATH;
							finder_tUniqRow_2.hashCodeDirty = true;
							if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
								KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

								new_tUniqRow_2.MODIFIER_PATH = row17.MODIFIER_PATH;

								keystUniqRow_2.add(new_tUniqRow_2);
								if (row32 == null) {

									row32 = new row32Struct();
								}
								row32.MODIFIER_PATH = row17.MODIFIER_PATH;
								row32.MODIFIER_CD = row17.MODIFIER_CD;
								row32.NAME_CHAR = row17.NAME_CHAR;
								row32.MODIFIER_BLOB = row17.MODIFIER_BLOB;
								row32.UPDATE_DATE = row17.UPDATE_DATE;
								row32.DOWNLOAD_DATE = row17.DOWNLOAD_DATE;
								row32.IMPORT_DATE = row17.IMPORT_DATE;
								row32.SOURCESYSTEM_CD = row17.SOURCESYSTEM_CD;
								row32.UPLOAD_ID = row17.UPLOAD_ID;
								nb_uniques_tUniqRow_2++;
							} else {
								nb_duplicates_tUniqRow_2++;
							}

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */
							// Start of branch "row32"
							if (row32 != null) {

								/**
								 * [tMap_10 main ] start
								 */

								currentComponent = "tMap_10";

								boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_10 = false;
								boolean mainRowRejected_tMap_10 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row40"
								// /////////////////////////////////////////////

								boolean forceLooprow40 = false;

								row40Struct row40ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_10 = false;

									row40HashKey.MODIFIER_PATH = row32.MODIFIER_PATH;

									row40HashKey.hashCodeDirty = true;

									tHash_Lookup_row40.lookup(row40HashKey);

									if (!tHash_Lookup_row40.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_10 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row40 != null
										&& tHash_Lookup_row40
												.getCount(row40HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.MODIFIER_PATH = '"
									// + row40HashKey.MODIFIER_PATH + "'");
								} // G 071

								row40Struct row40 = null;

								row40Struct fromLookup_row40 = null;
								row40 = row40Default;

								if (tHash_Lookup_row40 != null
										&& tHash_Lookup_row40.hasNext()) { // G
																			// 099

									fromLookup_row40 = tHash_Lookup_row40
											.next();

								} // G 099

								if (fromLookup_row40 != null) {
									row40 = fromLookup_row40;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
									// ###############################
									// # Output tables

									out9 = null;
									out8 = null;

									if (!rejectedInnerJoin_tMap_10) {

										// # Output table : 'out9'
										out9_tmp.MODIFIER_PATH = row32.MODIFIER_PATH;
										out9_tmp.MODIFIER_CD = row32.MODIFIER_CD;
										out9_tmp.NAME_CHAR = row32.NAME_CHAR;
										out9_tmp.MODIFIER_BLOB = row32.MODIFIER_BLOB;
										out9_tmp.UPDATE_DATE = row32.UPDATE_DATE;
										out9_tmp.DOWNLOAD_DATE = row32.DOWNLOAD_DATE;
										out9_tmp.IMPORT_DATE = row32.IMPORT_DATE;
										out9_tmp.SOURCESYSTEM_CD = row32.SOURCESYSTEM_CD;
										out9_tmp.UPLOAD_ID = row32.UPLOAD_ID;
										out9 = out9_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out8'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_10) {
										out8_tmp.MODIFIER_PATH = row32.MODIFIER_PATH;
										out8_tmp.MODIFIER_CD = row32.MODIFIER_CD;
										out8_tmp.NAME_CHAR = row32.NAME_CHAR;
										out8_tmp.MODIFIER_BLOB = row32.MODIFIER_BLOB;
										out8_tmp.UPDATE_DATE = row32.UPDATE_DATE;
										out8_tmp.DOWNLOAD_DATE = row32.DOWNLOAD_DATE;
										out8_tmp.IMPORT_DATE = row32.IMPORT_DATE;
										out8_tmp.SOURCESYSTEM_CD = row32.SOURCESYSTEM_CD;
										out8_tmp.UPLOAD_ID = row32.UPLOAD_ID;
										out8 = out8_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_10 = false;

								tos_count_tMap_10++;

								/**
								 * [tMap_10 main ] stop
								 */
								// Start of branch "out8"
								if (out8 != null) {

									/**
									 * [tJDBCOutput_6 main ] start
									 */

									currentComponent = "tJDBCOutput_6";

									row20 = null;
									whetherReject_tJDBCOutput_6 = false;
									if (out8.MODIFIER_PATH == null) {
										pstmt_tJDBCOutput_6.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_6.setString(1,
												out8.MODIFIER_PATH);
									}

									if (out8.MODIFIER_CD == null) {
										pstmt_tJDBCOutput_6.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_6.setString(2,
												out8.MODIFIER_CD);
									}

									if (out8.NAME_CHAR == null) {
										pstmt_tJDBCOutput_6.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_6.setString(3,
												out8.NAME_CHAR);
									}

									if (out8.MODIFIER_BLOB == null) {
										pstmt_tJDBCOutput_6.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_6.setString(4,
												out8.MODIFIER_BLOB);
									}

									if (out8.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_6.setTimestamp(
												5,
												new java.sql.Timestamp(
														out8.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_6.setNull(5,
												java.sql.Types.DATE);
									}

									if (out8.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_6.setTimestamp(
												6,
												new java.sql.Timestamp(
														out8.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_6.setNull(6,
												java.sql.Types.DATE);
									}

									if (out8.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_6.setTimestamp(
												7,
												new java.sql.Timestamp(
														out8.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_6.setNull(7,
												java.sql.Types.DATE);
									}

									if (out8.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_6.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_6.setString(8,
												out8.SOURCESYSTEM_CD);
									}

									if (out8.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_6.setNull(9,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_6.setInt(9,
												out8.UPLOAD_ID);
									}

									pstmt_tJDBCOutput_6.addBatch();
									nb_line_tJDBCOutput_6++;

									batchSizeCounter_tJDBCOutput_6++;
									if (!whetherReject_tJDBCOutput_6) {
										row20 = new row20Struct();
										row20.MODIFIER_PATH = out8.MODIFIER_PATH;
										row20.MODIFIER_CD = out8.MODIFIER_CD;
										row20.NAME_CHAR = out8.NAME_CHAR;
										row20.MODIFIER_BLOB = out8.MODIFIER_BLOB;
										row20.UPDATE_DATE = out8.UPDATE_DATE;
										row20.DOWNLOAD_DATE = out8.DOWNLOAD_DATE;
										row20.IMPORT_DATE = out8.IMPORT_DATE;
										row20.SOURCESYSTEM_CD = out8.SOURCESYSTEM_CD;
										row20.UPLOAD_ID = out8.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_6 <= batchSizeCounter_tJDBCOutput_6) {
										int[] status_tJDBCOutput_6 = null;
										int countSum_tJDBCOutput_6 = 0;
										try {
											batchSizeCounter_tJDBCOutput_6 = 0;

											status_tJDBCOutput_6 = pstmt_tJDBCOutput_6
													.executeBatch();

											for (int countEach_tJDBCOutput_6 : status_tJDBCOutput_6) {
												countSum_tJDBCOutput_6 += (countEach_tJDBCOutput_6 < 0 ? 0
														: countEach_tJDBCOutput_6);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_6 = pstmt_tJDBCOutput_6
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_6 = tmp_batchUpdateCount_tJDBCOutput_6 > countSum_tJDBCOutput_6 ? tmp_batchUpdateCount_tJDBCOutput_6
												: countSum_tJDBCOutput_6;

										insertedCount_tJDBCOutput_6 += tmp_batchUpdateCount_tJDBCOutput_6;

									}

									commitCounter_tJDBCOutput_6++;
									if (commitEvery_tJDBCOutput_6 <= commitCounter_tJDBCOutput_6) {

										connection_tJDBCOutput_6.commit();
										commitCounter_tJDBCOutput_6 = 0;
									}

									tos_count_tJDBCOutput_6++;

									/**
									 * [tJDBCOutput_6 main ] stop
									 */
									// Start of branch "row20"
									if (row20 != null) {

										/**
										 * [tJavaRow_1 main ] start
										 */

										currentComponent = "tJavaRow_1";

										context.counter++;

										if (context.counter % 1000 == 0) {
											System.out.println(context.counter);
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Modifier_Dimension: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_1++;

										tos_count_tJavaRow_1++;

										/**
										 * [tJavaRow_1 main ] stop
										 */

									} // End of branch "row20"

								} // End of branch "out8"

								// Start of branch "out9"
								if (out9 != null) {

									/**
									 * [tJDBCOutput_14 main ] start
									 */

									currentComponent = "tJDBCOutput_14";

									row41 = null;
									whetherReject_tJDBCOutput_14 = false;
									if (out9.MODIFIER_CD == null) {
										pstmt_tJDBCOutput_14.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_14.setString(1,
												out9.MODIFIER_CD);
									}

									if (out9.NAME_CHAR == null) {
										pstmt_tJDBCOutput_14.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_14.setString(2,
												out9.NAME_CHAR);
									}

									if (out9.MODIFIER_BLOB == null) {
										pstmt_tJDBCOutput_14.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_14.setString(3,
												out9.MODIFIER_BLOB);
									}

									if (out9.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_14.setTimestamp(
												4,
												new java.sql.Timestamp(
														out9.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_14.setNull(4,
												java.sql.Types.DATE);
									}

									if (out9.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_14.setTimestamp(
												5,
												new java.sql.Timestamp(
														out9.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_14.setNull(5,
												java.sql.Types.DATE);
									}

									if (out9.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_14.setTimestamp(
												6,
												new java.sql.Timestamp(
														out9.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_14.setNull(6,
												java.sql.Types.DATE);
									}

									if (out9.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_14.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_14.setString(7,
												out9.SOURCESYSTEM_CD);
									}

									if (out9.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_14.setNull(8,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_14.setInt(8,
												out9.UPLOAD_ID);
									}

									if (out9.MODIFIER_PATH == null) {
										pstmt_tJDBCOutput_14.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_14.setString(9,
												out9.MODIFIER_PATH);
									}

									pstmt_tJDBCOutput_14.addBatch();
									nb_line_tJDBCOutput_14++;

									batchSizeCounter_tJDBCOutput_14++;
									if (!whetherReject_tJDBCOutput_14) {
										row41 = new row41Struct();
										row41.MODIFIER_PATH = out9.MODIFIER_PATH;
										row41.MODIFIER_CD = out9.MODIFIER_CD;
										row41.NAME_CHAR = out9.NAME_CHAR;
										row41.MODIFIER_BLOB = out9.MODIFIER_BLOB;
										row41.UPDATE_DATE = out9.UPDATE_DATE;
										row41.DOWNLOAD_DATE = out9.DOWNLOAD_DATE;
										row41.IMPORT_DATE = out9.IMPORT_DATE;
										row41.SOURCESYSTEM_CD = out9.SOURCESYSTEM_CD;
										row41.UPLOAD_ID = out9.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_14 <= batchSizeCounter_tJDBCOutput_14) {
										int[] status_tJDBCOutput_14 = null;
										int countSum_tJDBCOutput_14 = 0;
										try {
											batchSizeCounter_tJDBCOutput_14 = 0;

											status_tJDBCOutput_14 = pstmt_tJDBCOutput_14
													.executeBatch();

											for (int countEach_tJDBCOutput_14 : status_tJDBCOutput_14) {
												countSum_tJDBCOutput_14 += (countEach_tJDBCOutput_14 < 0 ? 0
														: countEach_tJDBCOutput_14);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_14 = pstmt_tJDBCOutput_14
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_14 = tmp_batchUpdateCount_tJDBCOutput_14 > countSum_tJDBCOutput_14 ? tmp_batchUpdateCount_tJDBCOutput_14
												: countSum_tJDBCOutput_14;

										updatedCount_tJDBCOutput_14 += tmp_batchUpdateCount_tJDBCOutput_14;

									}

									commitCounter_tJDBCOutput_14++;
									if (commitEvery_tJDBCOutput_14 <= commitCounter_tJDBCOutput_14) {

										connection_tJDBCOutput_14.commit();
										commitCounter_tJDBCOutput_14 = 0;
									}

									tos_count_tJDBCOutput_14++;

									/**
									 * [tJDBCOutput_14 main ] stop
									 */
									// Start of branch "row41"
									if (row41 != null) {

										/**
										 * [tJavaRow_17 main ] start
										 */

										currentComponent = "tJavaRow_17";

										context.counter++;

										if (context.counter % 1000 == 0) {
											System.out.println(context.counter);
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Modifier_Dimension: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_17++;

										tos_count_tJavaRow_17++;

										/**
										 * [tJavaRow_17 main ] stop
										 */

									} // End of branch "row41"

								} // End of branch "out9"

							} // End of branch "row32"

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						nb_line_tFileInputDelimited_14++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_14 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_14 != null) {
							csvReadertFileInputDelimited_14.close();
						}
					}
					if (csvReadertFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								nb_line_tFileInputDelimited_14);
					}

				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES",
						nb_duplicates_tUniqRow_2);

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row40 != null) {
					tHash_Lookup_row40.endGet();
				}
				globalMap.remove("tHash_Lookup_row40");

				// ###############################

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tJDBCOutput_6 end ] start
				 */

				currentComponent = "tJDBCOutput_6";

				int[] status_tJDBCOutput_6 = null;
				int countSum_tJDBCOutput_6 = 0;
				try {
					if (pstmt_tJDBCOutput_6 != null
							&& batchSizeCounter_tJDBCOutput_6 > 0) {

						status_tJDBCOutput_6 = pstmt_tJDBCOutput_6
								.executeBatch();

						for (int countEach_tJDBCOutput_6 : status_tJDBCOutput_6) {
							countSum_tJDBCOutput_6 += (countEach_tJDBCOutput_6 < 0 ? 0
									: countEach_tJDBCOutput_6);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_6 != null
						&& batchSizeCounter_tJDBCOutput_6 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_6 = pstmt_tJDBCOutput_6
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_6 = tmp_batchUpdateCount_tJDBCOutput_6 > countSum_tJDBCOutput_6 ? tmp_batchUpdateCount_tJDBCOutput_6
							: countSum_tJDBCOutput_6;

					insertedCount_tJDBCOutput_6 += tmp_batchUpdateCount_tJDBCOutput_6;

				}
				if (pstmt_tJDBCOutput_6 != null) {

					pstmt_tJDBCOutput_6.close();

				}

				if (commitCounter_tJDBCOutput_6 > 0) {

					connection_tJDBCOutput_6.commit();

				}

				connection_tJDBCOutput_6.close();

				resourceMap.put("finish_tJDBCOutput_6", true);

				nb_line_deleted_tJDBCOutput_6 = nb_line_deleted_tJDBCOutput_6
						+ deletedCount_tJDBCOutput_6;
				nb_line_update_tJDBCOutput_6 = nb_line_update_tJDBCOutput_6
						+ updatedCount_tJDBCOutput_6;
				nb_line_inserted_tJDBCOutput_6 = nb_line_inserted_tJDBCOutput_6
						+ insertedCount_tJDBCOutput_6;
				nb_line_rejected_tJDBCOutput_6 = nb_line_rejected_tJDBCOutput_6
						+ rejectedCount_tJDBCOutput_6;

				globalMap.put("tJDBCOutput_6_NB_LINE", nb_line_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_6);

				ok_Hash.put("tJDBCOutput_6", true);
				end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_6 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_14 end ] start
				 */

				currentComponent = "tJDBCOutput_14";

				int[] status_tJDBCOutput_14 = null;
				int countSum_tJDBCOutput_14 = 0;
				try {
					if (pstmt_tJDBCOutput_14 != null
							&& batchSizeCounter_tJDBCOutput_14 > 0) {

						status_tJDBCOutput_14 = pstmt_tJDBCOutput_14
								.executeBatch();

						for (int countEach_tJDBCOutput_14 : status_tJDBCOutput_14) {
							countSum_tJDBCOutput_14 += (countEach_tJDBCOutput_14 < 0 ? 0
									: countEach_tJDBCOutput_14);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_14 != null
						&& batchSizeCounter_tJDBCOutput_14 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_14 = pstmt_tJDBCOutput_14
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_14 = tmp_batchUpdateCount_tJDBCOutput_14 > countSum_tJDBCOutput_14 ? tmp_batchUpdateCount_tJDBCOutput_14
							: countSum_tJDBCOutput_14;

					updatedCount_tJDBCOutput_14 += tmp_batchUpdateCount_tJDBCOutput_14;

				}
				if (pstmt_tJDBCOutput_14 != null) {

					pstmt_tJDBCOutput_14.close();

				}

				if (commitCounter_tJDBCOutput_14 > 0) {

					connection_tJDBCOutput_14.commit();

				}

				connection_tJDBCOutput_14.close();

				resourceMap.put("finish_tJDBCOutput_14", true);

				nb_line_deleted_tJDBCOutput_14 = nb_line_deleted_tJDBCOutput_14
						+ deletedCount_tJDBCOutput_14;
				nb_line_update_tJDBCOutput_14 = nb_line_update_tJDBCOutput_14
						+ updatedCount_tJDBCOutput_14;
				nb_line_inserted_tJDBCOutput_14 = nb_line_inserted_tJDBCOutput_14
						+ insertedCount_tJDBCOutput_14;
				nb_line_rejected_tJDBCOutput_14 = nb_line_rejected_tJDBCOutput_14
						+ rejectedCount_tJDBCOutput_14;

				globalMap.put("tJDBCOutput_14_NB_LINE", nb_line_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_14);

				ok_Hash.put("tJDBCOutput_14", true);
				end_Hash.put("tJDBCOutput_14", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_14 end ] stop
				 */

				/**
				 * [tJavaRow_17 end ] start
				 */

				currentComponent = "tJavaRow_17";

				globalMap.put("tJavaRow_17_NB_LINE", nb_line_tJavaRow_17);

				ok_Hash.put("tJavaRow_17", true);
				end_Hash.put("tJavaRow_17", System.currentTimeMillis());

				/**
				 * [tJavaRow_17 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_14:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_24Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row40");

			try {

				/**
				 * [tFileInputDelimited_14 finally ] start
				 */

				currentComponent = "tFileInputDelimited_14";

				/**
				 * [tFileInputDelimited_14 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tJDBCOutput_6 finally ] start
				 */

				currentComponent = "tJDBCOutput_6";

				if (resourceMap.get("finish_tJDBCOutput_6") == null) {
					if (resourceMap.get("conn_tJDBCOutput_6") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_6")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_6) {
							String errorMessage_tJDBCOutput_6 = "failed to close the connection in tJDBCOutput_6 :"
									+ sqlEx_tJDBCOutput_6.getMessage();

							System.err.println(errorMessage_tJDBCOutput_6);
						}
					}
				}

				/**
				 * [tJDBCOutput_6 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tJDBCOutput_14 finally ] start
				 */

				currentComponent = "tJDBCOutput_14";

				if (resourceMap.get("finish_tJDBCOutput_14") == null) {
					if (resourceMap.get("conn_tJDBCOutput_14") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_14")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_14) {
							String errorMessage_tJDBCOutput_14 = "failed to close the connection in tJDBCOutput_14 :"
									+ sqlEx_tJDBCOutput_14.getMessage();

							System.err.println(errorMessage_tJDBCOutput_14);
						}
					}
				}

				/**
				 * [tJDBCOutput_14 finally ] stop
				 */

				/**
				 * [tJavaRow_17 finally ] start
				 */

				currentComponent = "tJavaRow_17";

				/**
				 * [tJavaRow_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public void tDie_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_14 begin ] start
				 */

				ok_Hash.put("tDie_14", false);
				start_Hash.put("tDie_14", System.currentTimeMillis());

				currentComponent = "tDie_14";

				int tos_count_tDie_14 = 0;

				/**
				 * [tDie_14 begin ] stop
				 */

				/**
				 * [tDie_14 main ] start
				 */

				currentComponent = "tDie_14";

				globalMap.put("tDie_14_DIE_PRIORITY", 5);
				System.err.println("Error: Modifier_Dimension");

				globalMap.put("tDie_14_DIE_MESSAGE",
						"Error: Modifier_Dimension");
				globalMap.put("tDie_14_DIE_MESSAGES",
						"Error: Modifier_Dimension");
				currentComponent = "tDie_14";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_14_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_14++;

				/**
				 * [tDie_14 main ] stop
				 */

				/**
				 * [tDie_14 end ] start
				 */

				currentComponent = "tDie_14";

				ok_Hash.put("tDie_14", true);
				end_Hash.put("tDie_14", System.currentTimeMillis());

				/**
				 * [tDie_14 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_14 finally ] start
				 */

				currentComponent = "tDie_14";

				/**
				 * [tDie_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_14_SUBPROCESS_STATE", 1);
	}

	public void tDie_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_13 begin ] start
				 */

				ok_Hash.put("tDie_13", false);
				start_Hash.put("tDie_13", System.currentTimeMillis());

				currentComponent = "tDie_13";

				int tos_count_tDie_13 = 0;

				/**
				 * [tDie_13 begin ] stop
				 */

				/**
				 * [tDie_13 main ] start
				 */

				currentComponent = "tDie_13";

				globalMap.put("tDie_13_DIE_PRIORITY", 5);
				System.err.println("Error: Modifier_Dimension");

				globalMap.put("tDie_13_DIE_MESSAGE",
						"Error: Modifier_Dimension");
				globalMap.put("tDie_13_DIE_MESSAGES",
						"Error: Modifier_Dimension");
				currentComponent = "tDie_13";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_13_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_13++;

				/**
				 * [tDie_13 main ] stop
				 */

				/**
				 * [tDie_13 end ] start
				 */

				currentComponent = "tDie_13";

				ok_Hash.put("tDie_13", true);
				end_Hash.put("tDie_13", System.currentTimeMillis());

				/**
				 * [tDie_13 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_13 finally ] start
				 */

				currentComponent = "tDie_13";

				/**
				 * [tDie_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_13_SUBPROCESS_STATE", 1);
	}

	public void tJava_24Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_24 begin ] start
				 */

				ok_Hash.put("tJava_24", false);
				start_Hash.put("tJava_24", System.currentTimeMillis());

				currentComponent = "tJava_24";

				int tos_count_tJava_24 = 0;

				StatusListener.setSubStatus(StatusListener.getSubPerc(),
						"Modifier_Dimension done! " + context.counter
								+ " rows imported.");

				/**
				 * [tJava_24 begin ] stop
				 */

				/**
				 * [tJava_24 main ] start
				 */

				currentComponent = "tJava_24";

				tos_count_tJava_24++;

				/**
				 * [tJava_24 main ] stop
				 */

				/**
				 * [tJava_24 end ] start
				 */

				currentComponent = "tJava_24";

				ok_Hash.put("tJava_24", true);
				end_Hash.put("tJava_24", System.currentTimeMillis());

				/**
				 * [tJava_24 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_24 finally ] start
				 */

				currentComponent = "tJava_24";

				/**
				 * [tJava_24 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_24_SUBPROCESS_STATE", 1);
	}

	public static class row40Struct implements
			routines.system.IPersistableComparableLookupRow<row40Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row40Struct other = (row40Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;

			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row40Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		public void copyKeysDataTo(row40Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row40Struct row40 = new row40Struct();

				/**
				 * [tAdvancedHash_row40 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row40", false);
				start_Hash.put("tAdvancedHash_row40",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row40";

				int tos_count_tAdvancedHash_row40 = 0;

				// connection name:row40
				// source node:tJDBCInput_7 -
				// inputs:(after_tFileInputDelimited_14) outputs:(row40,row40) |
				// target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
				// linked node: tMap_10 - inputs:(row32,row40)
				// outputs:(out8,out9)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row40Struct> getLookup(matchingModeEnum_row40);

				globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);

				/**
				 * [tAdvancedHash_row40 begin ] stop
				 */

				/**
				 * [tJDBCInput_7 begin ] start
				 */

				ok_Hash.put("tJDBCInput_7", false);
				start_Hash.put("tJDBCInput_7", System.currentTimeMillis());

				currentComponent = "tJDBCInput_7";

				int tos_count_tJDBCInput_7 = 0;

				int nb_line_tJDBCInput_7 = 0;
				java.sql.Connection conn_tJDBCInput_7 = null;
				String driverClass_tJDBCInput_7 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_7);

				String url_tJDBCInput_7 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_7 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_7 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_7 = decryptedPassword_tJDBCInput_7;

				conn_tJDBCInput_7 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_7, dbUser_tJDBCInput_7,
						dbPwd_tJDBCInput_7);

				java.sql.Statement stmt_tJDBCInput_7 = conn_tJDBCInput_7
						.createStatement();

				String dbquery_tJDBCInput_7 = "select MODIFIER_PATH from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_7_QUERY", dbquery_tJDBCInput_7);
				java.sql.ResultSet rs_tJDBCInput_7 = null;
				try {
					rs_tJDBCInput_7 = stmt_tJDBCInput_7
							.executeQuery(dbquery_tJDBCInput_7);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_7 = rs_tJDBCInput_7
							.getMetaData();
					int colQtyInRs_tJDBCInput_7 = rsmd_tJDBCInput_7
							.getColumnCount();

					String tmpContent_tJDBCInput_7 = null;

					while (rs_tJDBCInput_7.next()) {
						nb_line_tJDBCInput_7++;

						if (colQtyInRs_tJDBCInput_7 < 1) {
							row40.MODIFIER_PATH = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(1);
							if (tmpContent_tJDBCInput_7 != null) {
								row40.MODIFIER_PATH = tmpContent_tJDBCInput_7;
							} else {
								row40.MODIFIER_PATH = null;
							}
						}

						/**
						 * [tJDBCInput_7 begin ] stop
						 */

						/**
						 * [tJDBCInput_7 main ] start
						 */

						currentComponent = "tJDBCInput_7";

						tos_count_tJDBCInput_7++;

						/**
						 * [tJDBCInput_7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row40 main ] start
						 */

						currentComponent = "tAdvancedHash_row40";

						row40Struct row40_HashRow = new row40Struct();

						row40_HashRow.MODIFIER_PATH = row40.MODIFIER_PATH;

						tHash_Lookup_row40.put(row40_HashRow);

						tos_count_tAdvancedHash_row40++;

						/**
						 * [tAdvancedHash_row40 main ] stop
						 */

						/**
						 * [tJDBCInput_7 end ] start
						 */

						currentComponent = "tJDBCInput_7";

					}
				} finally {
					if (rs_tJDBCInput_7 != null) {
						rs_tJDBCInput_7.close();
					}
					stmt_tJDBCInput_7.close();

					if (conn_tJDBCInput_7 != null
							&& !conn_tJDBCInput_7.isClosed()) {

						conn_tJDBCInput_7.close();

					}
				}
				globalMap.put("tJDBCInput_7_NB_LINE", nb_line_tJDBCInput_7);

				ok_Hash.put("tJDBCInput_7", true);
				end_Hash.put("tJDBCInput_7", System.currentTimeMillis());

				/**
				 * [tJDBCInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row40 end ] start
				 */

				currentComponent = "tAdvancedHash_row40";

				tHash_Lookup_row40.endPut();

				ok_Hash.put("tAdvancedHash_row40", true);
				end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row40 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_7 finally ] start
				 */

				currentComponent = "tJDBCInput_7";

				/**
				 * [tJDBCInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row40 finally ] start
				 */

				currentComponent = "tAdvancedHash_row40";

				/**
				 * [tAdvancedHash_row40 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_NUM == null) ? 0
								: this.ENCOUNTER_NUM.hashCode());

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row42Struct other = (row42Struct) obj;

			if (this.ENCOUNTER_NUM == null) {
				if (other.ENCOUNTER_NUM != null)
					return false;

			} else if (!this.ENCOUNTER_NUM.equals(other.ENCOUNTER_NUM))

				return false;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			return true;
		}

		public void copyDataTo(row42Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.ACTIVE_STATUS_CD = this.ACTIVE_STATUS_CD;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.INOUT_CD = this.INOUT_CD;
			other.LOCATION_CD = this.LOCATION_CD;
			other.LOCATION_PATH = this.LOCATION_PATH;
			other.LENGTH_OF_STAY = this.LENGTH_OF_STAY;
			other.VISIT_BLOB = this.VISIT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row42Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_NUM,
					other.ENCOUNTER_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out10Struct implements
			routines.system.IPersistableRow<out10Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out11Struct implements
			routines.system.IPersistableRow<out11Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_NUM == null) ? 0
								: this.ENCOUNTER_NUM.hashCode());

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out11Struct other = (out11Struct) obj;

			if (this.ENCOUNTER_NUM == null) {
				if (other.ENCOUNTER_NUM != null)
					return false;

			} else if (!this.ENCOUNTER_NUM.equals(other.ENCOUNTER_NUM))

				return false;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			return true;
		}

		public void copyDataTo(out11Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.ACTIVE_STATUS_CD = this.ACTIVE_STATUS_CD;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.INOUT_CD = this.INOUT_CD;
			other.LOCATION_CD = this.LOCATION_CD;
			other.LOCATION_PATH = this.LOCATION_PATH;
			other.LENGTH_OF_STAY = this.LENGTH_OF_STAY;
			other.VISIT_BLOB = this.VISIT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(out11Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_NUM,
					other.ENCOUNTER_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_16Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_16Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_8Process(globalMap);

				row18Struct row18 = new row18Struct();
				row33Struct row33 = new row33Struct();
				out10Struct out10 = new out10Struct();
				row26Struct row26 = new row26Struct();
				out11Struct out11 = new out11Struct();
				row42Struct row42 = new row42Struct();

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tJDBCOutput_7 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_7", false);
				start_Hash.put("tJDBCOutput_7", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_7";

				int tos_count_tJDBCOutput_7 = 0;

				int nb_line_tJDBCOutput_7 = 0;
				int nb_line_update_tJDBCOutput_7 = 0;
				int nb_line_inserted_tJDBCOutput_7 = 0;
				int nb_line_deleted_tJDBCOutput_7 = 0;
				int nb_line_rejected_tJDBCOutput_7 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_7 = 0;

				int deletedCount_tJDBCOutput_7 = 0;
				int updatedCount_tJDBCOutput_7 = 0;
				int insertedCount_tJDBCOutput_7 = 0;
				int rejectedCount_tJDBCOutput_7 = 0;

				boolean whetherReject_tJDBCOutput_7 = false;

				java.sql.Connection connection_tJDBCOutput_7 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_7 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_7 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_7 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_7,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_7);

				resourceMap.put("conn_tJDBCOutput_7", connection_tJDBCOutput_7);
				connection_tJDBCOutput_7.setAutoCommit(false);
				int commitEvery_tJDBCOutput_7 = 500000;
				int commitCounter_tJDBCOutput_7 = 0;
				int batchSize_tJDBCOutput_7 = 250000;
				int batchSizeCounter_tJDBCOutput_7 = 0;

				String insert_tJDBCOutput_7 = "INSERT INTO "
						+ context.currentTable
						+ " (ENCOUNTER_NUM,PATIENT_NUM,ACTIVE_STATUS_CD,START_DATE,END_DATE,INOUT_CD,LOCATION_CD,LOCATION_PATH,LENGTH_OF_STAY,VISIT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_7 = connection_tJDBCOutput_7
						.prepareStatement(insert_tJDBCOutput_7);

				/**
				 * [tJDBCOutput_7 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tJDBCOutput_16 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_16", false);
				start_Hash.put("tJDBCOutput_16", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_16";

				int tos_count_tJDBCOutput_16 = 0;

				int updateKeyCount_tJDBCOutput_16 = 2;
				if (updateKeyCount_tJDBCOutput_16 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_16 = 0;
				int nb_line_update_tJDBCOutput_16 = 0;
				int nb_line_inserted_tJDBCOutput_16 = 0;
				int nb_line_deleted_tJDBCOutput_16 = 0;
				int nb_line_rejected_tJDBCOutput_16 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_16 = 0;

				int deletedCount_tJDBCOutput_16 = 0;
				int updatedCount_tJDBCOutput_16 = 0;
				int insertedCount_tJDBCOutput_16 = 0;
				int rejectedCount_tJDBCOutput_16 = 0;

				boolean whetherReject_tJDBCOutput_16 = false;

				java.sql.Connection connection_tJDBCOutput_16 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_16 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_16 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_16 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_16,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_16);

				resourceMap.put("conn_tJDBCOutput_16",
						connection_tJDBCOutput_16);
				connection_tJDBCOutput_16.setAutoCommit(false);
				int commitEvery_tJDBCOutput_16 = 500000;
				int commitCounter_tJDBCOutput_16 = 0;
				int batchSize_tJDBCOutput_16 = 250000;
				int batchSizeCounter_tJDBCOutput_16 = 0;

				String update_tJDBCOutput_16 = "UPDATE "
						+ context.currentTable
						+ " SET ACTIVE_STATUS_CD = ?,START_DATE = ?,END_DATE = ?,INOUT_CD = ?,LOCATION_CD = ?,LOCATION_PATH = ?,LENGTH_OF_STAY = ?,VISIT_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE ENCOUNTER_NUM = ? AND PATIENT_NUM = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_16 = connection_tJDBCOutput_16
						.prepareStatement(update_tJDBCOutput_16);

				/**
				 * [tJDBCOutput_16 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out10Struct out10_tmp = new out10Struct();
				out11Struct out11_tmp = new out11Struct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal ENCOUNTER_NUM;
					BigDecimal PATIENT_NUM;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ENCOUNTER_NUM == null) ? 0
											: this.ENCOUNTER_NUM.hashCode());

							result = prime
									* result
									+ ((this.PATIENT_NUM == null) ? 0
											: this.PATIENT_NUM.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.ENCOUNTER_NUM == null) {
							if (other.ENCOUNTER_NUM != null)
								return false;

						} else if (!this.ENCOUNTER_NUM
								.equals(other.ENCOUNTER_NUM))

							return false;

						if (this.PATIENT_NUM == null) {
							if (other.PATIENT_NUM != null)
								return false;

						} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				int nb_line_tFileInputDelimited_16 = 0;
				int footer_tFileInputDelimited_16 = 0;
				int totalLinetFileInputDelimited_16 = 0;
				int limittFileInputDelimited_16 = -1;
				int lastLinetFileInputDelimited_16 = -1;

				char fieldSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_16 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_16 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_16 = /**
				 * Start field
				 * tFileInputDelimited_16:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "visit_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_16:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

				try {

					String[] rowtFileInputDelimited_16 = null;
					int currentLinetFileInputDelimited_16 = 0;
					int outputLinetFileInputDelimited_16 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_16 = 0;
							if (footer_value_tFileInputDelimited_16 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_16,
									fieldSeparator_tFileInputDelimited_16[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_16)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_16[0]);
						}

						csvReadertFileInputDelimited_16
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
							csvReadertFileInputDelimited_16.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_16[0]);

						csvReadertFileInputDelimited_16.setQuoteChar('"');

						csvReadertFileInputDelimited_16
								.setEscapeChar(csvReadertFileInputDelimited_16
										.getQuoteChar());

						if (footer_tFileInputDelimited_16 > 0) {
							for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
							csvReadertFileInputDelimited_16
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_16.readNext()) {

								rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
										.getValues();
								if (!(rowtFileInputDelimited_16.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_16[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_16++;

								}

							}
							int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
									- footer_tFileInputDelimited_16 < 0 ? 0
									: totalLinetFileInputDelimited_16
											- footer_tFileInputDelimited_16;
							if (lastLinetFileInputDelimited_16 > 0) {
								lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16 ? lastLinetFileInputDelimited_16
										: lastLineTemptFileInputDelimited_16;
							} else {
								lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
							}

							csvReadertFileInputDelimited_16.close();
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_16)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_16[0]);
							}
							csvReadertFileInputDelimited_16
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16
											.getQuoteChar());

						}

						if (limittFileInputDelimited_16 != 0) {
							for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
						}
						csvReadertFileInputDelimited_16
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_16 != 0
							&& csvReadertFileInputDelimited_16 != null
							&& csvReadertFileInputDelimited_16.readNext()) {

						rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
								.getValues();

						if (rowtFileInputDelimited_16.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_16[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_16++;

						if (lastLinetFileInputDelimited_16 > -1
								&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
							break;
						}
						outputLinetFileInputDelimited_16++;
						if (limittFileInputDelimited_16 > 0
								&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
							break;
						}

						row18 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row18 = new row18Struct();
						try {

							char fieldSeparator_tFileInputDelimited_16_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_16_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_16.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_16[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row18.ENCOUNTER_NUM = null;

								row18.PATIENT_NUM = null;

								row18.ACTIVE_STATUS_CD = null;

								row18.START_DATE = null;

								row18.END_DATE = null;

								row18.INOUT_CD = null;

								row18.LOCATION_CD = null;

								row18.LOCATION_PATH = null;

								row18.LENGTH_OF_STAY = null;

								row18.VISIT_BLOB = null;

								row18.UPDATE_DATE = null;

								row18.DOWNLOAD_DATE = null;

								row18.IMPORT_DATE = null;

								row18.SOURCESYSTEM_CD = null;

								row18.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_16 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_16 = 0;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.ENCOUNTER_NUM = null;
									}

								} else {
									row18.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 1;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.PATIENT_NUM = null;
									}

								} else {
									row18.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 2;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.ACTIVE_STATUS_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.ACTIVE_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 3;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.START_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.START_DATE = null;
									}

								} else {
									row18.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 4;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.END_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.END_DATE = null;
									}

								} else {
									row18.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 5;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.INOUT_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.INOUT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 6;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.LOCATION_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 7;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.LOCATION_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.LOCATION_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 8;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.LENGTH_OF_STAY = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.LENGTH_OF_STAY = null;
									}

								} else {
									row18.LENGTH_OF_STAY = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 9;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.VISIT_BLOB = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.VISIT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 10;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.UPDATE_DATE = null;
									}

								} else {
									row18.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 11;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.DOWNLOAD_DATE = null;
									}

								} else {
									row18.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 12;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.IMPORT_DATE = null;
									}

								} else {
									row18.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 13;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.SOURCESYSTEM_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 14;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.UPLOAD_ID = null;
									}

								} else {
									row18.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tUniqRow_3 main ] start
							 */

							currentComponent = "tUniqRow_3";

							row33 = null;
							finder_tUniqRow_3.ENCOUNTER_NUM = row18.ENCOUNTER_NUM;
							finder_tUniqRow_3.PATIENT_NUM = row18.PATIENT_NUM;
							finder_tUniqRow_3.hashCodeDirty = true;
							if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
								KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

								new_tUniqRow_3.ENCOUNTER_NUM = row18.ENCOUNTER_NUM;
								new_tUniqRow_3.PATIENT_NUM = row18.PATIENT_NUM;

								keystUniqRow_3.add(new_tUniqRow_3);
								if (row33 == null) {

									row33 = new row33Struct();
								}
								row33.ENCOUNTER_NUM = row18.ENCOUNTER_NUM;
								row33.PATIENT_NUM = row18.PATIENT_NUM;
								row33.ACTIVE_STATUS_CD = row18.ACTIVE_STATUS_CD;
								row33.START_DATE = row18.START_DATE;
								row33.END_DATE = row18.END_DATE;
								row33.INOUT_CD = row18.INOUT_CD;
								row33.LOCATION_CD = row18.LOCATION_CD;
								row33.LOCATION_PATH = row18.LOCATION_PATH;
								row33.LENGTH_OF_STAY = row18.LENGTH_OF_STAY;
								row33.VISIT_BLOB = row18.VISIT_BLOB;
								row33.UPDATE_DATE = row18.UPDATE_DATE;
								row33.DOWNLOAD_DATE = row18.DOWNLOAD_DATE;
								row33.IMPORT_DATE = row18.IMPORT_DATE;
								row33.SOURCESYSTEM_CD = row18.SOURCESYSTEM_CD;
								row33.UPLOAD_ID = row18.UPLOAD_ID;
								nb_uniques_tUniqRow_3++;
							} else {
								nb_duplicates_tUniqRow_3++;
							}

							tos_count_tUniqRow_3++;

							/**
							 * [tUniqRow_3 main ] stop
							 */
							// Start of branch "row33"
							if (row33 != null) {

								/**
								 * [tMap_11 main ] start
								 */

								currentComponent = "tMap_11";

								boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_11 = false;
								boolean mainRowRejected_tMap_11 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row2"
								// /////////////////////////////////////////////

								boolean forceLooprow2 = false;

								row2Struct row2ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_11 = false;

									row2HashKey.ENCOUNTER_NUM = row33.ENCOUNTER_NUM;

									row2HashKey.PATIENT_NUM = row33.PATIENT_NUM;

									row2HashKey.hashCodeDirty = true;

									tHash_Lookup_row2.lookup(row2HashKey);

									if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_11 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row2 != null
										&& tHash_Lookup_row2
												.getCount(row2HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.ENCOUNTER_NUM = '"
									// + row2HashKey.ENCOUNTER_NUM +
									// "', row2.PATIENT_NUM = '" +
									// row2HashKey.PATIENT_NUM + "'");
								} // G 071

								row2Struct row2 = null;

								row2Struct fromLookup_row2 = null;
								row2 = row2Default;

								if (tHash_Lookup_row2 != null
										&& tHash_Lookup_row2.hasNext()) { // G
																			// 099

									fromLookup_row2 = tHash_Lookup_row2.next();

								} // G 099

								if (fromLookup_row2 != null) {
									row2 = fromLookup_row2;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
									// ###############################
									// # Output tables

									out11 = null;
									out10 = null;

									if (!rejectedInnerJoin_tMap_11) {

										// # Output table : 'out11'
										out11_tmp.ENCOUNTER_NUM = row33.ENCOUNTER_NUM;
										out11_tmp.PATIENT_NUM = row33.PATIENT_NUM;
										out11_tmp.ACTIVE_STATUS_CD = row33.ACTIVE_STATUS_CD;
										out11_tmp.START_DATE = row33.START_DATE;
										out11_tmp.END_DATE = row33.END_DATE;
										out11_tmp.INOUT_CD = row33.INOUT_CD;
										out11_tmp.LOCATION_CD = row33.LOCATION_CD;
										out11_tmp.LOCATION_PATH = row33.LOCATION_PATH;
										out11_tmp.LENGTH_OF_STAY = row33.LENGTH_OF_STAY;
										out11_tmp.VISIT_BLOB = row33.VISIT_BLOB;
										out11_tmp.UPDATE_DATE = row33.UPDATE_DATE;
										out11_tmp.DOWNLOAD_DATE = row33.DOWNLOAD_DATE;
										out11_tmp.IMPORT_DATE = row33.IMPORT_DATE;
										out11_tmp.SOURCESYSTEM_CD = row33.SOURCESYSTEM_CD;
										out11_tmp.UPLOAD_ID = row33.UPLOAD_ID;
										out11 = out11_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out10'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_11) {
										out10_tmp.ENCOUNTER_NUM = row33.ENCOUNTER_NUM;
										out10_tmp.PATIENT_NUM = row33.PATIENT_NUM;
										out10_tmp.ACTIVE_STATUS_CD = row33.ACTIVE_STATUS_CD;
										out10_tmp.START_DATE = row33.START_DATE;
										out10_tmp.END_DATE = row33.END_DATE;
										out10_tmp.INOUT_CD = row33.INOUT_CD;
										out10_tmp.LOCATION_CD = row33.LOCATION_CD;
										out10_tmp.LOCATION_PATH = row33.LOCATION_PATH;
										out10_tmp.LENGTH_OF_STAY = row33.LENGTH_OF_STAY;
										out10_tmp.VISIT_BLOB = row33.VISIT_BLOB;
										out10_tmp.UPDATE_DATE = row33.UPDATE_DATE;
										out10_tmp.DOWNLOAD_DATE = row33.DOWNLOAD_DATE;
										out10_tmp.IMPORT_DATE = row33.IMPORT_DATE;
										out10_tmp.SOURCESYSTEM_CD = row33.SOURCESYSTEM_CD;
										out10_tmp.UPLOAD_ID = row33.UPLOAD_ID;
										out10 = out10_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_11 = false;

								tos_count_tMap_11++;

								/**
								 * [tMap_11 main ] stop
								 */
								// Start of branch "out10"
								if (out10 != null) {

									/**
									 * [tJDBCOutput_7 main ] start
									 */

									currentComponent = "tJDBCOutput_7";

									row26 = null;
									whetherReject_tJDBCOutput_7 = false;
									pstmt_tJDBCOutput_7.setBigDecimal(1,
											out10.ENCOUNTER_NUM);

									pstmt_tJDBCOutput_7.setBigDecimal(2,
											out10.PATIENT_NUM);

									if (out10.ACTIVE_STATUS_CD == null) {
										pstmt_tJDBCOutput_7.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_7.setString(3,
												out10.ACTIVE_STATUS_CD);
									}

									if (out10.START_DATE != null) {
										pstmt_tJDBCOutput_7.setTimestamp(
												4,
												new java.sql.Timestamp(
														out10.START_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_7.setNull(4,
												java.sql.Types.DATE);
									}

									if (out10.END_DATE != null) {
										pstmt_tJDBCOutput_7.setTimestamp(
												5,
												new java.sql.Timestamp(
														out10.END_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_7.setNull(5,
												java.sql.Types.DATE);
									}

									if (out10.INOUT_CD == null) {
										pstmt_tJDBCOutput_7.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_7.setString(6,
												out10.INOUT_CD);
									}

									if (out10.LOCATION_CD == null) {
										pstmt_tJDBCOutput_7.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_7.setString(7,
												out10.LOCATION_CD);
									}

									if (out10.LOCATION_PATH == null) {
										pstmt_tJDBCOutput_7.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_7.setString(8,
												out10.LOCATION_PATH);
									}

									if (out10.LENGTH_OF_STAY == null) {
										pstmt_tJDBCOutput_7.setNull(9,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_7.setInt(9,
												out10.LENGTH_OF_STAY);
									}

									if (out10.VISIT_BLOB == null) {
										pstmt_tJDBCOutput_7.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_7.setString(10,
												out10.VISIT_BLOB);
									}

									if (out10.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_7.setTimestamp(
												11,
												new java.sql.Timestamp(
														out10.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_7.setNull(11,
												java.sql.Types.DATE);
									}

									if (out10.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_7.setTimestamp(
												12,
												new java.sql.Timestamp(
														out10.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_7.setNull(12,
												java.sql.Types.DATE);
									}

									if (out10.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_7.setTimestamp(
												13,
												new java.sql.Timestamp(
														out10.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_7.setNull(13,
												java.sql.Types.DATE);
									}

									if (out10.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_7.setNull(14,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_7.setString(14,
												out10.SOURCESYSTEM_CD);
									}

									if (out10.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_7.setNull(15,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_7.setInt(15,
												out10.UPLOAD_ID);
									}

									pstmt_tJDBCOutput_7.addBatch();
									nb_line_tJDBCOutput_7++;

									batchSizeCounter_tJDBCOutput_7++;
									if (!whetherReject_tJDBCOutput_7) {
										row26 = new row26Struct();
										row26.ENCOUNTER_NUM = out10.ENCOUNTER_NUM;
										row26.PATIENT_NUM = out10.PATIENT_NUM;
										row26.ACTIVE_STATUS_CD = out10.ACTIVE_STATUS_CD;
										row26.START_DATE = out10.START_DATE;
										row26.END_DATE = out10.END_DATE;
										row26.INOUT_CD = out10.INOUT_CD;
										row26.LOCATION_CD = out10.LOCATION_CD;
										row26.LOCATION_PATH = out10.LOCATION_PATH;
										row26.LENGTH_OF_STAY = out10.LENGTH_OF_STAY;
										row26.VISIT_BLOB = out10.VISIT_BLOB;
										row26.UPDATE_DATE = out10.UPDATE_DATE;
										row26.DOWNLOAD_DATE = out10.DOWNLOAD_DATE;
										row26.IMPORT_DATE = out10.IMPORT_DATE;
										row26.SOURCESYSTEM_CD = out10.SOURCESYSTEM_CD;
										row26.UPLOAD_ID = out10.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_7 <= batchSizeCounter_tJDBCOutput_7) {
										int[] status_tJDBCOutput_7 = null;
										int countSum_tJDBCOutput_7 = 0;
										try {
											batchSizeCounter_tJDBCOutput_7 = 0;

											status_tJDBCOutput_7 = pstmt_tJDBCOutput_7
													.executeBatch();

											for (int countEach_tJDBCOutput_7 : status_tJDBCOutput_7) {
												countSum_tJDBCOutput_7 += (countEach_tJDBCOutput_7 < 0 ? 0
														: countEach_tJDBCOutput_7);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_7 = pstmt_tJDBCOutput_7
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_7 = tmp_batchUpdateCount_tJDBCOutput_7 > countSum_tJDBCOutput_7 ? tmp_batchUpdateCount_tJDBCOutput_7
												: countSum_tJDBCOutput_7;

										insertedCount_tJDBCOutput_7 += tmp_batchUpdateCount_tJDBCOutput_7;

									}

									commitCounter_tJDBCOutput_7++;
									if (commitEvery_tJDBCOutput_7 <= commitCounter_tJDBCOutput_7) {

										connection_tJDBCOutput_7.commit();
										commitCounter_tJDBCOutput_7 = 0;
									}

									tos_count_tJDBCOutput_7++;

									/**
									 * [tJDBCOutput_7 main ] stop
									 */
									// Start of branch "row26"
									if (row26 != null) {

										/**
										 * [tJavaRow_8 main ] start
										 */

										currentComponent = "tJavaRow_8";

										context.counter++;

										if (context.counter % 1000 == 0) {
											System.out.println(context.counter);
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Visit_Dimension: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_8++;

										tos_count_tJavaRow_8++;

										/**
										 * [tJavaRow_8 main ] stop
										 */

									} // End of branch "row26"

								} // End of branch "out10"

								// Start of branch "out11"
								if (out11 != null) {

									/**
									 * [tJDBCOutput_16 main ] start
									 */

									currentComponent = "tJDBCOutput_16";

									row42 = null;
									whetherReject_tJDBCOutput_16 = false;
									if (out11.ACTIVE_STATUS_CD == null) {
										pstmt_tJDBCOutput_16.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_16.setString(1,
												out11.ACTIVE_STATUS_CD);
									}

									if (out11.START_DATE != null) {
										pstmt_tJDBCOutput_16.setTimestamp(
												2,
												new java.sql.Timestamp(
														out11.START_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_16.setNull(2,
												java.sql.Types.DATE);
									}

									if (out11.END_DATE != null) {
										pstmt_tJDBCOutput_16.setTimestamp(
												3,
												new java.sql.Timestamp(
														out11.END_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_16.setNull(3,
												java.sql.Types.DATE);
									}

									if (out11.INOUT_CD == null) {
										pstmt_tJDBCOutput_16.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_16.setString(4,
												out11.INOUT_CD);
									}

									if (out11.LOCATION_CD == null) {
										pstmt_tJDBCOutput_16.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_16.setString(5,
												out11.LOCATION_CD);
									}

									if (out11.LOCATION_PATH == null) {
										pstmt_tJDBCOutput_16.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_16.setString(6,
												out11.LOCATION_PATH);
									}

									if (out11.LENGTH_OF_STAY == null) {
										pstmt_tJDBCOutput_16.setNull(7,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_16.setInt(7,
												out11.LENGTH_OF_STAY);
									}

									if (out11.VISIT_BLOB == null) {
										pstmt_tJDBCOutput_16.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_16.setString(8,
												out11.VISIT_BLOB);
									}

									if (out11.UPDATE_DATE != null) {
										pstmt_tJDBCOutput_16.setTimestamp(
												9,
												new java.sql.Timestamp(
														out11.UPDATE_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_16.setNull(9,
												java.sql.Types.DATE);
									}

									if (out11.DOWNLOAD_DATE != null) {
										pstmt_tJDBCOutput_16.setTimestamp(
												10,
												new java.sql.Timestamp(
														out11.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_16.setNull(10,
												java.sql.Types.DATE);
									}

									if (out11.IMPORT_DATE != null) {
										pstmt_tJDBCOutput_16.setTimestamp(
												11,
												new java.sql.Timestamp(
														out11.IMPORT_DATE
																.getTime()));
									} else {
										pstmt_tJDBCOutput_16.setNull(11,
												java.sql.Types.DATE);
									}

									if (out11.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_16.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_16.setString(12,
												out11.SOURCESYSTEM_CD);
									}

									if (out11.UPLOAD_ID == null) {
										pstmt_tJDBCOutput_16.setNull(13,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tJDBCOutput_16.setInt(13,
												out11.UPLOAD_ID);
									}

									pstmt_tJDBCOutput_16.setBigDecimal(14,
											out11.ENCOUNTER_NUM);

									pstmt_tJDBCOutput_16.setBigDecimal(15,
											out11.PATIENT_NUM);

									pstmt_tJDBCOutput_16.addBatch();
									nb_line_tJDBCOutput_16++;

									batchSizeCounter_tJDBCOutput_16++;
									if (!whetherReject_tJDBCOutput_16) {
										row42 = new row42Struct();
										row42.ENCOUNTER_NUM = out11.ENCOUNTER_NUM;
										row42.PATIENT_NUM = out11.PATIENT_NUM;
										row42.ACTIVE_STATUS_CD = out11.ACTIVE_STATUS_CD;
										row42.START_DATE = out11.START_DATE;
										row42.END_DATE = out11.END_DATE;
										row42.INOUT_CD = out11.INOUT_CD;
										row42.LOCATION_CD = out11.LOCATION_CD;
										row42.LOCATION_PATH = out11.LOCATION_PATH;
										row42.LENGTH_OF_STAY = out11.LENGTH_OF_STAY;
										row42.VISIT_BLOB = out11.VISIT_BLOB;
										row42.UPDATE_DATE = out11.UPDATE_DATE;
										row42.DOWNLOAD_DATE = out11.DOWNLOAD_DATE;
										row42.IMPORT_DATE = out11.IMPORT_DATE;
										row42.SOURCESYSTEM_CD = out11.SOURCESYSTEM_CD;
										row42.UPLOAD_ID = out11.UPLOAD_ID;
									}
									if (batchSize_tJDBCOutput_16 <= batchSizeCounter_tJDBCOutput_16) {
										int[] status_tJDBCOutput_16 = null;
										int countSum_tJDBCOutput_16 = 0;
										try {
											batchSizeCounter_tJDBCOutput_16 = 0;

											status_tJDBCOutput_16 = pstmt_tJDBCOutput_16
													.executeBatch();

											for (int countEach_tJDBCOutput_16 : status_tJDBCOutput_16) {
												countSum_tJDBCOutput_16 += (countEach_tJDBCOutput_16 < 0 ? 0
														: countEach_tJDBCOutput_16);
											}
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
										try {
											tmp_batchUpdateCount_tJDBCOutput_16 = pstmt_tJDBCOutput_16
													.getUpdateCount();
										} catch (java.sql.SQLException e) {

										}
										tmp_batchUpdateCount_tJDBCOutput_16 = tmp_batchUpdateCount_tJDBCOutput_16 > countSum_tJDBCOutput_16 ? tmp_batchUpdateCount_tJDBCOutput_16
												: countSum_tJDBCOutput_16;

										updatedCount_tJDBCOutput_16 += tmp_batchUpdateCount_tJDBCOutput_16;

									}

									commitCounter_tJDBCOutput_16++;
									if (commitEvery_tJDBCOutput_16 <= commitCounter_tJDBCOutput_16) {

										connection_tJDBCOutput_16.commit();
										commitCounter_tJDBCOutput_16 = 0;
									}

									tos_count_tJDBCOutput_16++;

									/**
									 * [tJDBCOutput_16 main ] stop
									 */
									// Start of branch "row42"
									if (row42 != null) {

										/**
										 * [tJavaRow_4 main ] start
										 */

										currentComponent = "tJavaRow_4";

										context.counter++;

										if (context.counter % 1000 == 0) {
											System.out.println(context.counter);
											StatusListener
													.setSubStatus(
															StatusListener
																	.getSubPerc(),
															"Visit_Dimension: "
																	+ context.counter
																	+ " rows imported.");
										}
										nb_line_tJavaRow_4++;

										tos_count_tJavaRow_4++;

										/**
										 * [tJavaRow_4 main ] stop
										 */

									} // End of branch "row42"

								} // End of branch "out11"

							} // End of branch "row33"

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						nb_line_tFileInputDelimited_16++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_16 != null) {
							csvReadertFileInputDelimited_16.close();
						}
					}
					if (csvReadertFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE",
								nb_line_tFileInputDelimited_16);
					}

				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES",
						nb_duplicates_tUniqRow_3);

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tJDBCOutput_7 end ] start
				 */

				currentComponent = "tJDBCOutput_7";

				int[] status_tJDBCOutput_7 = null;
				int countSum_tJDBCOutput_7 = 0;
				try {
					if (pstmt_tJDBCOutput_7 != null
							&& batchSizeCounter_tJDBCOutput_7 > 0) {

						status_tJDBCOutput_7 = pstmt_tJDBCOutput_7
								.executeBatch();

						for (int countEach_tJDBCOutput_7 : status_tJDBCOutput_7) {
							countSum_tJDBCOutput_7 += (countEach_tJDBCOutput_7 < 0 ? 0
									: countEach_tJDBCOutput_7);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_7 != null
						&& batchSizeCounter_tJDBCOutput_7 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_7 = pstmt_tJDBCOutput_7
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_7 = tmp_batchUpdateCount_tJDBCOutput_7 > countSum_tJDBCOutput_7 ? tmp_batchUpdateCount_tJDBCOutput_7
							: countSum_tJDBCOutput_7;

					insertedCount_tJDBCOutput_7 += tmp_batchUpdateCount_tJDBCOutput_7;

				}
				if (pstmt_tJDBCOutput_7 != null) {

					pstmt_tJDBCOutput_7.close();

				}

				if (commitCounter_tJDBCOutput_7 > 0) {

					connection_tJDBCOutput_7.commit();

				}

				connection_tJDBCOutput_7.close();

				resourceMap.put("finish_tJDBCOutput_7", true);

				nb_line_deleted_tJDBCOutput_7 = nb_line_deleted_tJDBCOutput_7
						+ deletedCount_tJDBCOutput_7;
				nb_line_update_tJDBCOutput_7 = nb_line_update_tJDBCOutput_7
						+ updatedCount_tJDBCOutput_7;
				nb_line_inserted_tJDBCOutput_7 = nb_line_inserted_tJDBCOutput_7
						+ insertedCount_tJDBCOutput_7;
				nb_line_rejected_tJDBCOutput_7 = nb_line_rejected_tJDBCOutput_7
						+ rejectedCount_tJDBCOutput_7;

				globalMap.put("tJDBCOutput_7_NB_LINE", nb_line_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_7);

				ok_Hash.put("tJDBCOutput_7", true);
				end_Hash.put("tJDBCOutput_7", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_7 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				/**
				 * [tJavaRow_8 end ] stop
				 */

				/**
				 * [tJDBCOutput_16 end ] start
				 */

				currentComponent = "tJDBCOutput_16";

				int[] status_tJDBCOutput_16 = null;
				int countSum_tJDBCOutput_16 = 0;
				try {
					if (pstmt_tJDBCOutput_16 != null
							&& batchSizeCounter_tJDBCOutput_16 > 0) {

						status_tJDBCOutput_16 = pstmt_tJDBCOutput_16
								.executeBatch();

						for (int countEach_tJDBCOutput_16 : status_tJDBCOutput_16) {
							countSum_tJDBCOutput_16 += (countEach_tJDBCOutput_16 < 0 ? 0
									: countEach_tJDBCOutput_16);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_16 != null
						&& batchSizeCounter_tJDBCOutput_16 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_16 = pstmt_tJDBCOutput_16
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_16 = tmp_batchUpdateCount_tJDBCOutput_16 > countSum_tJDBCOutput_16 ? tmp_batchUpdateCount_tJDBCOutput_16
							: countSum_tJDBCOutput_16;

					updatedCount_tJDBCOutput_16 += tmp_batchUpdateCount_tJDBCOutput_16;

				}
				if (pstmt_tJDBCOutput_16 != null) {

					pstmt_tJDBCOutput_16.close();

				}

				if (commitCounter_tJDBCOutput_16 > 0) {

					connection_tJDBCOutput_16.commit();

				}

				connection_tJDBCOutput_16.close();

				resourceMap.put("finish_tJDBCOutput_16", true);

				nb_line_deleted_tJDBCOutput_16 = nb_line_deleted_tJDBCOutput_16
						+ deletedCount_tJDBCOutput_16;
				nb_line_update_tJDBCOutput_16 = nb_line_update_tJDBCOutput_16
						+ updatedCount_tJDBCOutput_16;
				nb_line_inserted_tJDBCOutput_16 = nb_line_inserted_tJDBCOutput_16
						+ insertedCount_tJDBCOutput_16;
				nb_line_rejected_tJDBCOutput_16 = nb_line_rejected_tJDBCOutput_16
						+ rejectedCount_tJDBCOutput_16;

				globalMap.put("tJDBCOutput_16_NB_LINE", nb_line_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_16);

				ok_Hash.put("tJDBCOutput_16", true);
				end_Hash.put("tJDBCOutput_16", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_16 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_16:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_25Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_11"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tFileInputDelimited_16 finally ] start
				 */

				currentComponent = "tFileInputDelimited_16";

				/**
				 * [tFileInputDelimited_16 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tJDBCOutput_7 finally ] start
				 */

				currentComponent = "tJDBCOutput_7";

				if (resourceMap.get("finish_tJDBCOutput_7") == null) {
					if (resourceMap.get("conn_tJDBCOutput_7") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_7")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_7) {
							String errorMessage_tJDBCOutput_7 = "failed to close the connection in tJDBCOutput_7 :"
									+ sqlEx_tJDBCOutput_7.getMessage();

							System.err.println(errorMessage_tJDBCOutput_7);
						}
					}
				}

				/**
				 * [tJDBCOutput_7 finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

				/**
				 * [tJDBCOutput_16 finally ] start
				 */

				currentComponent = "tJDBCOutput_16";

				if (resourceMap.get("finish_tJDBCOutput_16") == null) {
					if (resourceMap.get("conn_tJDBCOutput_16") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_16")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_16) {
							String errorMessage_tJDBCOutput_16 = "failed to close the connection in tJDBCOutput_16 :"
									+ sqlEx_tJDBCOutput_16.getMessage();

							System.err.println(errorMessage_tJDBCOutput_16);
						}
					}
				}

				/**
				 * [tJDBCOutput_16 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public void tDie_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_16 begin ] start
				 */

				ok_Hash.put("tDie_16", false);
				start_Hash.put("tDie_16", System.currentTimeMillis());

				currentComponent = "tDie_16";

				int tos_count_tDie_16 = 0;

				/**
				 * [tDie_16 begin ] stop
				 */

				/**
				 * [tDie_16 main ] start
				 */

				currentComponent = "tDie_16";

				globalMap.put("tDie_16_DIE_PRIORITY", 5);
				System.err.println("Error: Visit_Dimension");

				globalMap.put("tDie_16_DIE_MESSAGE", "Error: Visit_Dimension");
				globalMap.put("tDie_16_DIE_MESSAGES", "Error: Visit_Dimension");
				currentComponent = "tDie_16";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_16_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_16++;

				/**
				 * [tDie_16 main ] stop
				 */

				/**
				 * [tDie_16 end ] start
				 */

				currentComponent = "tDie_16";

				ok_Hash.put("tDie_16", true);
				end_Hash.put("tDie_16", System.currentTimeMillis());

				/**
				 * [tDie_16 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_16 finally ] start
				 */

				currentComponent = "tDie_16";

				/**
				 * [tDie_16 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_16_SUBPROCESS_STATE", 1);
	}

	public void tDie_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_15 begin ] start
				 */

				ok_Hash.put("tDie_15", false);
				start_Hash.put("tDie_15", System.currentTimeMillis());

				currentComponent = "tDie_15";

				int tos_count_tDie_15 = 0;

				/**
				 * [tDie_15 begin ] stop
				 */

				/**
				 * [tDie_15 main ] start
				 */

				currentComponent = "tDie_15";

				globalMap.put("tDie_15_DIE_PRIORITY", 5);
				System.err.println("Error: Visit_Dimension");

				globalMap.put("tDie_15_DIE_MESSAGE", "Error: Visit_Dimension");
				globalMap.put("tDie_15_DIE_MESSAGES", "Error: Visit_Dimension");
				currentComponent = "tDie_15";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_15_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_15++;

				/**
				 * [tDie_15 main ] stop
				 */

				/**
				 * [tDie_15 end ] start
				 */

				currentComponent = "tDie_15";

				ok_Hash.put("tDie_15", true);
				end_Hash.put("tDie_15", System.currentTimeMillis());

				/**
				 * [tDie_15 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_15 finally ] start
				 */

				currentComponent = "tDie_15";

				/**
				 * [tDie_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_15_SUBPROCESS_STATE", 1);
	}

	public void tJava_25Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_25 begin ] start
				 */

				ok_Hash.put("tJava_25", false);
				start_Hash.put("tJava_25", System.currentTimeMillis());

				currentComponent = "tJava_25";

				int tos_count_tJava_25 = 0;

				StatusListener.setSubStatus(StatusListener.getSubPerc(),
						"Visit_Dimension done! " + context.counter
								+ " rows imported.");

				/**
				 * [tJava_25 begin ] stop
				 */

				/**
				 * [tJava_25 main ] start
				 */

				currentComponent = "tJava_25";

				tos_count_tJava_25++;

				/**
				 * [tJava_25 main ] stop
				 */

				/**
				 * [tJava_25 end ] start
				 */

				currentComponent = "tJava_25";

				ok_Hash.put("tJava_25", true);
				end_Hash.put("tJava_25", System.currentTimeMillis());

				/**
				 * [tJava_25 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_25 finally ] start
				 */

				currentComponent = "tJava_25";

				/**
				 * [tJava_25 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_25_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_NUM == null) ? 0
								: this.ENCOUNTER_NUM.hashCode());

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ENCOUNTER_NUM == null) {
				if (other.ENCOUNTER_NUM != null)
					return false;

			} else if (!this.ENCOUNTER_NUM.equals(other.ENCOUNTER_NUM))

				return false;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_NUM,
					other.ENCOUNTER_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tJDBCInput_8 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_11 - inputs:(row33,row2)
				// outputs:(out10,out11)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tJDBCInput_8 begin ] start
				 */

				ok_Hash.put("tJDBCInput_8", false);
				start_Hash.put("tJDBCInput_8", System.currentTimeMillis());

				currentComponent = "tJDBCInput_8";

				int tos_count_tJDBCInput_8 = 0;

				int nb_line_tJDBCInput_8 = 0;
				java.sql.Connection conn_tJDBCInput_8 = null;
				String driverClass_tJDBCInput_8 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_8);

				String url_tJDBCInput_8 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_8 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_8 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_8 = decryptedPassword_tJDBCInput_8;

				conn_tJDBCInput_8 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_8, dbUser_tJDBCInput_8,
						dbPwd_tJDBCInput_8);

				java.sql.Statement stmt_tJDBCInput_8 = conn_tJDBCInput_8
						.createStatement();

				String dbquery_tJDBCInput_8 = "select ENCOUNTER_NUM, PATIENT_NUM from "
						+ context.currentTable;

				globalMap.put("tJDBCInput_8_QUERY", dbquery_tJDBCInput_8);
				java.sql.ResultSet rs_tJDBCInput_8 = null;
				try {
					rs_tJDBCInput_8 = stmt_tJDBCInput_8
							.executeQuery(dbquery_tJDBCInput_8);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_8 = rs_tJDBCInput_8
							.getMetaData();
					int colQtyInRs_tJDBCInput_8 = rsmd_tJDBCInput_8
							.getColumnCount();

					String tmpContent_tJDBCInput_8 = null;

					while (rs_tJDBCInput_8.next()) {
						nb_line_tJDBCInput_8++;

						if (colQtyInRs_tJDBCInput_8 < 1) {
							row2.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_8.getObject(1) != null) {
								row2.ENCOUNTER_NUM = rs_tJDBCInput_8
										.getBigDecimal(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 2) {
							row2.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_8.getObject(2) != null) {
								row2.PATIENT_NUM = rs_tJDBCInput_8
										.getBigDecimal(2);
							} else {
								row2.PATIENT_NUM = null;
							}
						}

						/**
						 * [tJDBCInput_8 begin ] stop
						 */

						/**
						 * [tJDBCInput_8 main ] start
						 */

						currentComponent = "tJDBCInput_8";

						tos_count_tJDBCInput_8++;

						/**
						 * [tJDBCInput_8 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.ENCOUNTER_NUM = row2.ENCOUNTER_NUM;

						row2_HashRow.PATIENT_NUM = row2.PATIENT_NUM;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tJDBCInput_8 end ] start
						 */

						currentComponent = "tJDBCInput_8";

					}
				} finally {
					if (rs_tJDBCInput_8 != null) {
						rs_tJDBCInput_8.close();
					}
					stmt_tJDBCInput_8.close();

					if (conn_tJDBCInput_8 != null
							&& !conn_tJDBCInput_8.isClosed()) {

						conn_tJDBCInput_8.close();

					}
				}
				globalMap.put("tJDBCInput_8_NB_LINE", nb_line_tJDBCInput_8);

				ok_Hash.put("tJDBCInput_8", true);
				end_Hash.put("tJDBCInput_8", System.currentTimeMillis());

				/**
				 * [tJDBCInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_8 finally ] start
				 */

				currentComponent = "tJDBCInput_8";

				/**
				 * [tJDBCInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 1);
	}

	public void tForeach_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tForeach_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tForeach_1", false);
				start_Hash.put("tForeach_1", System.currentTimeMillis());

				currentComponent = "tForeach_1";

				int tos_count_tForeach_1 = 0;

				Object[] values_tForeach_1 = new Object[] {
						"ALTER TABLE i2b2metadata.I2B2 ALTER  C_FULLNAME TYPE character varying(2000)",
						"ALTER TABLE i2b2metadata.I2B2 ALTER  C_BASECODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_FULLNAME TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_BASECODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_FULLNAME TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_BASECODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".CONCEPT_DIMENSION ALTER  CONCEPT_PATH TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".CONCEPT_DIMENSION ALTER  CONCEPT_CD  TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".MODIFIER_DIMENSION ALTER  MODIFIER_PATH TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".MODIFIER_DIMENSION ALTER  MODIFIER_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".OBSERVATION_FACT ALTER  MODIFIER_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".OBSERVATION_FACT ALTER  CONCEPT_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".patient_mapping ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".patient_dimension ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".observation_fact ALTER  PATIENT_NUM  TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".qt_patient_enc_collection ALTER  PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".qt_patient_set_collection ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".qt_patient_set_collection ALTER  PATIENT_NUM TYPE numeric(38,0)", };

				for (Object tmp_tForeach_1 : values_tForeach_1) {

					globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

					/**
					 * [tForeach_1 begin ] stop
					 */

					/**
					 * [tForeach_1 main ] start
					 */

					currentComponent = "tForeach_1";

					tos_count_tForeach_1++;

					/**
					 * [tForeach_1 main ] stop
					 */
					NB_ITERATE_tJava_2++;

					/**
					 * [tJava_2 begin ] start
					 */

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());

					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					System.out.println(((String) globalMap
							.get("tForeach_1_CURRENT_VALUE")));

					/**
					 * [tJava_2 begin ] stop
					 */

					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */

					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					tJDBCRow_1Process(globalMap);

					/**
					 * [tJava_2 end ] stop
					 */

					/**
					 * [tForeach_1 end ] start
					 */

					currentComponent = "tForeach_1";

				}

				ok_Hash.put("tForeach_1", true);
				end_Hash.put("tForeach_1", System.currentTimeMillis());

				/**
				 * [tForeach_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tForeach_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_17Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tForeach_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRow_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tForeach_1 finally ] start
				 */

				currentComponent = "tForeach_1";

				/**
				 * [tForeach_1 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tForeach_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_17 begin ] start
				 */

				ok_Hash.put("tJava_17", false);
				start_Hash.put("tJava_17", System.currentTimeMillis());

				currentComponent = "tJava_17";

				int tos_count_tJava_17 = 0;

				context.currentTable = "i2b2metadata.i2b2_secure";
				StatusListener.setSubStatus(90.0f, (int) (float) (90.0f) + "%");

				/**
				 * [tJava_17 begin ] stop
				 */

				/**
				 * [tJava_17 main ] start
				 */

				currentComponent = "tJava_17";

				tos_count_tJava_17++;

				/**
				 * [tJava_17 main ] stop
				 */

				/**
				 * [tJava_17 end ] start
				 */

				currentComponent = "tJava_17";

				ok_Hash.put("tJava_17", true);
				end_Hash.put("tJava_17", System.currentTimeMillis());

				/**
				 * [tJava_17 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_15Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_17 finally ] start
				 */

				currentComponent = "tJava_17";

				/**
				 * [tJava_17 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String secure_obj_token;

		public String getSecure_obj_token() {
			return this.secure_obj_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.secure_obj_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.secure_obj_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",secure_obj_token=" + secure_obj_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfouttStruct implements
			routines.system.IPersistableRow<copyOfouttStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String secure_obj_token;

		public String getSecure_obj_token() {
			return this.secure_obj_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.secure_obj_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.secure_obj_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",secure_obj_token=" + secure_obj_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfouttStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String secure_obj;

		public String getSecure_obj() {
			return this.secure_obj;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.secure_obj = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.secure_obj, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",secure_obj=" + secure_obj);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				copyOfouttStruct copyOfoutt = new copyOfouttStruct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tJDBCOutput_8 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_8", false);
				start_Hash.put("tJDBCOutput_8", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_8";

				int tos_count_tJDBCOutput_8 = 0;

				int updateKeyCount_tJDBCOutput_8 = 1;
				if (updateKeyCount_tJDBCOutput_8 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_8 = 0;
				int nb_line_update_tJDBCOutput_8 = 0;
				int nb_line_inserted_tJDBCOutput_8 = 0;
				int nb_line_deleted_tJDBCOutput_8 = 0;
				int nb_line_rejected_tJDBCOutput_8 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_8 = 0;

				int deletedCount_tJDBCOutput_8 = 0;
				int updatedCount_tJDBCOutput_8 = 0;
				int insertedCount_tJDBCOutput_8 = 0;
				int rejectedCount_tJDBCOutput_8 = 0;

				boolean whetherReject_tJDBCOutput_8 = false;

				java.sql.Connection connection_tJDBCOutput_8 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_8 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_8 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_8 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_8,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_8);

				resourceMap.put("conn_tJDBCOutput_8", connection_tJDBCOutput_8);
				connection_tJDBCOutput_8.setAutoCommit(false);
				int commitEvery_tJDBCOutput_8 = 100000;
				int commitCounter_tJDBCOutput_8 = 0;
				int batchSize_tJDBCOutput_8 = 10000;
				int batchSizeCounter_tJDBCOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_8 = connection_tJDBCOutput_8
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE C_FULLNAME = ?");
				String insert_tJDBCOutput_8 = "INSERT INTO "
						+ context.currentTable
						+ " (C_HLEVEL,C_FULLNAME,C_NAME,C_SYNONYM_CD,C_VISUALATTRIBUTES,C_TOTALNUM,C_BASECODE,C_METADATAXML,C_FACTTABLECOLUMN,C_TABLENAME,C_COLUMNNAME,C_COLUMNDATATYPE,C_OPERATOR,C_DIMCODE,C_COMMENT,C_TOOLTIP,M_APPLIED_PATH,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_EXCLUSION_CD,C_PATH,C_SYMBOL,secure_obj_token) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_8 = connection_tJDBCOutput_8
						.prepareStatement(insert_tJDBCOutput_8);
				String update_tJDBCOutput_8 = "UPDATE "
						+ context.currentTable
						+ " SET C_HLEVEL = ?,C_NAME = ?,C_SYNONYM_CD = ?,C_VISUALATTRIBUTES = ?,C_TOTALNUM = ?,C_BASECODE = ?,C_METADATAXML = ?,C_FACTTABLECOLUMN = ?,C_TABLENAME = ?,C_COLUMNNAME = ?,C_COLUMNDATATYPE = ?,C_OPERATOR = ?,C_DIMCODE = ?,C_COMMENT = ?,C_TOOLTIP = ?,M_APPLIED_PATH = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,VALUETYPE_CD = ?,M_EXCLUSION_CD = ?,C_PATH = ?,C_SYMBOL = ?,secure_obj_token = ? WHERE C_FULLNAME = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_8 = connection_tJDBCOutput_8
						.prepareStatement(update_tJDBCOutput_8);

				/**
				 * [tJDBCOutput_8 begin ] stop
				 */

				/**
				 * [tUniqRow_9 begin ] start
				 */

				ok_Hash.put("tUniqRow_9", false);
				start_Hash.put("tUniqRow_9", System.currentTimeMillis());

				currentComponent = "tUniqRow_9";

				int tos_count_tUniqRow_9 = 0;

				class KeyStruct_tUniqRow_9 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int C_HLEVEL;
					String C_FULLNAME;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.C_HLEVEL;

							result = prime
									* result
									+ ((this.C_FULLNAME == null) ? 0
											: this.C_FULLNAME.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;

						if (this.C_HLEVEL != other.C_HLEVEL)
							return false;

						if (this.C_FULLNAME == null) {
							if (other.C_FULLNAME != null)
								return false;

						} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_9 = 0;
				int nb_duplicates_tUniqRow_9 = 0;
				KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
				java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>();

				/**
				 * [tUniqRow_9 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfouttStruct copyOfoutt_tmp = new copyOfouttStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				int footer_tFileInputDelimited_15 = 0;
				int totalLinetFileInputDelimited_15 = 0;
				int limittFileInputDelimited_15 = -1;
				int lastLinetFileInputDelimited_15 = -1;

				char fieldSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_15 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_15 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_15 = /**
				 * Start field
				 * tFileInputDelimited_15:FILENAME
				 */
				context.folderMain + context.folderOutput + "ontology.csv"/**
				 * End
				 * field tFileInputDelimited_15:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_15 = null;

				try {

					String[] rowtFileInputDelimited_15 = null;
					int currentLinetFileInputDelimited_15 = 0;
					int outputLinetFileInputDelimited_15 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_15 = 0;
							if (footer_value_tFileInputDelimited_15 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_15,
									fieldSeparator_tFileInputDelimited_15[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_15)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_15[0]);
						}

						csvReadertFileInputDelimited_15
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
							csvReadertFileInputDelimited_15.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_15[0]);

						csvReadertFileInputDelimited_15.setQuoteChar('"');

						csvReadertFileInputDelimited_15
								.setEscapeChar(csvReadertFileInputDelimited_15
										.getQuoteChar());

						if (footer_tFileInputDelimited_15 > 0) {
							for (totalLinetFileInputDelimited_15 = 0; totalLinetFileInputDelimited_15 < 1; totalLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
							csvReadertFileInputDelimited_15
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_15.readNext()) {

								rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
										.getValues();
								if (!(rowtFileInputDelimited_15.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_15[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_15++;

								}

							}
							int lastLineTemptFileInputDelimited_15 = totalLinetFileInputDelimited_15
									- footer_tFileInputDelimited_15 < 0 ? 0
									: totalLinetFileInputDelimited_15
											- footer_tFileInputDelimited_15;
							if (lastLinetFileInputDelimited_15 > 0) {
								lastLinetFileInputDelimited_15 = lastLinetFileInputDelimited_15 < lastLineTemptFileInputDelimited_15 ? lastLinetFileInputDelimited_15
										: lastLineTemptFileInputDelimited_15;
							} else {
								lastLinetFileInputDelimited_15 = lastLineTemptFileInputDelimited_15;
							}

							csvReadertFileInputDelimited_15.close();
							if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_15,
										fieldSeparator_tFileInputDelimited_15[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_15)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_15[0]);
							}
							csvReadertFileInputDelimited_15
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
								csvReadertFileInputDelimited_15
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_15[0]);

							csvReadertFileInputDelimited_15.setQuoteChar('"');

							csvReadertFileInputDelimited_15
									.setEscapeChar(csvReadertFileInputDelimited_15
											.getQuoteChar());

						}

						if (limittFileInputDelimited_15 != 0) {
							for (currentLinetFileInputDelimited_15 = 0; currentLinetFileInputDelimited_15 < 1; currentLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
						}
						csvReadertFileInputDelimited_15
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_15 != 0
							&& csvReadertFileInputDelimited_15 != null
							&& csvReadertFileInputDelimited_15.readNext()) {

						rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
								.getValues();

						if (rowtFileInputDelimited_15.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_15[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_15++;

						if (lastLinetFileInputDelimited_15 > -1
								&& currentLinetFileInputDelimited_15 > lastLinetFileInputDelimited_15) {
							break;
						}
						outputLinetFileInputDelimited_15++;
						if (limittFileInputDelimited_15 > 0
								&& outputLinetFileInputDelimited_15 > limittFileInputDelimited_15) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_15_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_15_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_15.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_15[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.C_HLEVEL = 0;

								row4.C_FULLNAME = null;

								row4.C_NAME = null;

								row4.C_SYNONYM_CD = null;

								row4.C_VISUALATTRIBUTES = null;

								row4.C_TOTALNUM = null;

								row4.C_BASECODE = null;

								row4.C_METADATAXML = null;

								row4.C_FACTTABLECOLUMN = null;

								row4.C_TABLENAME = null;

								row4.C_COLUMNNAME = null;

								row4.C_COLUMNDATATYPE = null;

								row4.C_OPERATOR = null;

								row4.C_DIMCODE = null;

								row4.C_COMMENT = null;

								row4.C_TOOLTIP = null;

								row4.M_APPLIED_PATH = null;

								row4.UPDATE_DATE = null;

								row4.DOWNLOAD_DATE = null;

								row4.IMPORT_DATE = null;

								row4.SOURCESYSTEM_CD = null;

								row4.VALUETYPE_CD = null;

								row4.M_EXCLUSION_CD = null;

								row4.C_PATH = null;

								row4.C_SYMBOL = null;

								row4.secure_obj = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_15 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_15 = 0;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.C_HLEVEL = ParserUtils
												.parseTo_int(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row4.C_HLEVEL = 0;
									}

								} else {
									row4.C_HLEVEL = 0;
								}

								columnIndexWithD_tFileInputDelimited_15 = 1;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_FULLNAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 2;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_NAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 3;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_SYNONYM_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 4;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_VISUALATTRIBUTES = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 5;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.C_TOTALNUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row4.C_TOTALNUM = null;
									}

								} else {
									row4.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 6;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_BASECODE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 7;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_METADATAXML = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 8;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_FACTTABLECOLUMN = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 9;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_TABLENAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 10;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_COLUMNNAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 11;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_COLUMNDATATYPE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 12;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_OPERATOR = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 13;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_DIMCODE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 14;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_COMMENT = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 15;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_TOOLTIP = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 16;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.M_APPLIED_PATH = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 17;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row4.UPDATE_DATE = null;
									}

								} else {
									row4.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 18;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row4.DOWNLOAD_DATE = null;
									}

								} else {
									row4.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 19;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row4.IMPORT_DATE = null;
									}

								} else {
									row4.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 20;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.SOURCESYSTEM_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 21;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.VALUETYPE_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 22;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.M_EXCLUSION_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 23;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_PATH = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 24;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_SYMBOL = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_SYMBOL = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 25;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.secure_obj = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.secure_obj = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								copyOfoutt = null;

								// # Output table : 'copyOfoutt'
								// # Filter conditions
								if (

								row4.C_NAME.length() > 0

								) {
									copyOfoutt_tmp.C_HLEVEL = row4.C_HLEVEL - 1;
									copyOfoutt_tmp.C_FULLNAME = row4.C_FULLNAME;
									copyOfoutt_tmp.C_NAME = row4.C_NAME;
									copyOfoutt_tmp.C_SYNONYM_CD = row4.C_SYNONYM_CD;
									copyOfoutt_tmp.C_VISUALATTRIBUTES = row4.C_VISUALATTRIBUTES;
									copyOfoutt_tmp.C_TOTALNUM = row4.C_TOTALNUM;
									copyOfoutt_tmp.C_BASECODE = row4.C_BASECODE;
									copyOfoutt_tmp.C_METADATAXML = row4.C_METADATAXML;
									copyOfoutt_tmp.C_FACTTABLECOLUMN = row4.C_FACTTABLECOLUMN;
									copyOfoutt_tmp.C_TABLENAME = row4.C_TABLENAME;
									copyOfoutt_tmp.C_COLUMNNAME = row4.C_COLUMNNAME;
									copyOfoutt_tmp.C_COLUMNDATATYPE = row4.C_COLUMNDATATYPE;
									copyOfoutt_tmp.C_OPERATOR = row4.C_OPERATOR;
									copyOfoutt_tmp.C_DIMCODE = row4.C_DIMCODE;
									copyOfoutt_tmp.C_COMMENT = row4.C_COMMENT;
									copyOfoutt_tmp.C_TOOLTIP = row4.C_TOOLTIP;
									copyOfoutt_tmp.M_APPLIED_PATH = row4.M_APPLIED_PATH;
									copyOfoutt_tmp.UPDATE_DATE = row4.UPDATE_DATE;
									copyOfoutt_tmp.DOWNLOAD_DATE = row4.DOWNLOAD_DATE;
									copyOfoutt_tmp.IMPORT_DATE = row4.IMPORT_DATE;
									copyOfoutt_tmp.SOURCESYSTEM_CD = row4.SOURCESYSTEM_CD;
									copyOfoutt_tmp.VALUETYPE_CD = row4.VALUETYPE_CD;
									copyOfoutt_tmp.M_EXCLUSION_CD = row4.M_EXCLUSION_CD;
									copyOfoutt_tmp.C_PATH = row4.C_PATH;
									copyOfoutt_tmp.C_SYMBOL = row4.C_SYMBOL;
									copyOfoutt_tmp.secure_obj_token = (row4.C_HLEVEL > 1) ? ("Study:" + row4.secure_obj)
											: "EXP:PUBLIC";
									copyOfoutt = copyOfoutt_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "copyOfoutt"
							if (copyOfoutt != null) {

								/**
								 * [tUniqRow_9 main ] start
								 */

								currentComponent = "tUniqRow_9";

								row5 = null;
								finder_tUniqRow_9.C_HLEVEL = copyOfoutt.C_HLEVEL;
								finder_tUniqRow_9.C_FULLNAME = copyOfoutt.C_FULLNAME;
								finder_tUniqRow_9.hashCodeDirty = true;
								if (!keystUniqRow_9.contains(finder_tUniqRow_9)) {
									KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

									new_tUniqRow_9.C_HLEVEL = copyOfoutt.C_HLEVEL;
									new_tUniqRow_9.C_FULLNAME = copyOfoutt.C_FULLNAME;

									keystUniqRow_9.add(new_tUniqRow_9);
									if (row5 == null) {

										row5 = new row5Struct();
									}
									row5.C_HLEVEL = copyOfoutt.C_HLEVEL;
									row5.C_FULLNAME = copyOfoutt.C_FULLNAME;
									row5.C_NAME = copyOfoutt.C_NAME;
									row5.C_SYNONYM_CD = copyOfoutt.C_SYNONYM_CD;
									row5.C_VISUALATTRIBUTES = copyOfoutt.C_VISUALATTRIBUTES;
									row5.C_TOTALNUM = copyOfoutt.C_TOTALNUM;
									row5.C_BASECODE = copyOfoutt.C_BASECODE;
									row5.C_METADATAXML = copyOfoutt.C_METADATAXML;
									row5.C_FACTTABLECOLUMN = copyOfoutt.C_FACTTABLECOLUMN;
									row5.C_TABLENAME = copyOfoutt.C_TABLENAME;
									row5.C_COLUMNNAME = copyOfoutt.C_COLUMNNAME;
									row5.C_COLUMNDATATYPE = copyOfoutt.C_COLUMNDATATYPE;
									row5.C_OPERATOR = copyOfoutt.C_OPERATOR;
									row5.C_DIMCODE = copyOfoutt.C_DIMCODE;
									row5.C_COMMENT = copyOfoutt.C_COMMENT;
									row5.C_TOOLTIP = copyOfoutt.C_TOOLTIP;
									row5.M_APPLIED_PATH = copyOfoutt.M_APPLIED_PATH;
									row5.UPDATE_DATE = copyOfoutt.UPDATE_DATE;
									row5.DOWNLOAD_DATE = copyOfoutt.DOWNLOAD_DATE;
									row5.IMPORT_DATE = copyOfoutt.IMPORT_DATE;
									row5.SOURCESYSTEM_CD = copyOfoutt.SOURCESYSTEM_CD;
									row5.VALUETYPE_CD = copyOfoutt.VALUETYPE_CD;
									row5.M_EXCLUSION_CD = copyOfoutt.M_EXCLUSION_CD;
									row5.C_PATH = copyOfoutt.C_PATH;
									row5.C_SYMBOL = copyOfoutt.C_SYMBOL;
									row5.secure_obj_token = copyOfoutt.secure_obj_token;
									nb_uniques_tUniqRow_9++;
								} else {
									nb_duplicates_tUniqRow_9++;
								}

								tos_count_tUniqRow_9++;

								/**
								 * [tUniqRow_9 main ] stop
								 */
								// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tJDBCOutput_8 main ] start
									 */

									currentComponent = "tJDBCOutput_8";

									whetherReject_tJDBCOutput_8 = false;
									if (row5.C_FULLNAME == null) {
										pstmt_tJDBCOutput_8.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_8.setString(1,
												row5.C_FULLNAME);
									}

									java.sql.ResultSet rs_tJDBCOutput_8 = pstmt_tJDBCOutput_8
											.executeQuery();
									int checkCount_tJDBCOutput_8 = -1;
									while (rs_tJDBCOutput_8.next()) {
										checkCount_tJDBCOutput_8 = rs_tJDBCOutput_8
												.getInt(1);
									}
									if (checkCount_tJDBCOutput_8 > 0) {
										pstmtUpdate_tJDBCOutput_8.setInt(1,
												row5.C_HLEVEL);

										if (row5.C_NAME == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(2, row5.C_NAME);
										}

										if (row5.C_SYNONYM_CD == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(3,
															row5.C_SYNONYM_CD);
										}

										if (row5.C_VISUALATTRIBUTES == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(
															4,
															row5.C_VISUALATTRIBUTES);
										}

										pstmtUpdate_tJDBCOutput_8
												.setBigDecimal(5,
														row5.C_TOTALNUM);

										if (row5.C_BASECODE == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(6,
															row5.C_BASECODE);
										}

										if (row5.C_METADATAXML == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(7,
															row5.C_METADATAXML);
										}

										if (row5.C_FACTTABLECOLUMN == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(
															8,
															row5.C_FACTTABLECOLUMN);
										}

										if (row5.C_TABLENAME == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(9,
															row5.C_TABLENAME);
										}

										if (row5.C_COLUMNNAME == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(10,
															row5.C_COLUMNNAME);
										}

										if (row5.C_COLUMNDATATYPE == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(
															11,
															row5.C_COLUMNDATATYPE);
										}

										if (row5.C_OPERATOR == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(12,
															row5.C_OPERATOR);
										}

										if (row5.C_DIMCODE == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(13,
															row5.C_DIMCODE);
										}

										if (row5.C_COMMENT == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(14,
															row5.C_COMMENT);
										}

										if (row5.C_TOOLTIP == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(15,
															row5.C_TOOLTIP);
										}

										if (row5.M_APPLIED_PATH == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(16,
															row5.M_APPLIED_PATH);
										}

										if (row5.UPDATE_DATE != null) {
											pstmtUpdate_tJDBCOutput_8
													.setTimestamp(
															17,
															new java.sql.Timestamp(
																	row5.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_8.setNull(
													17, java.sql.Types.DATE);
										}

										if (row5.DOWNLOAD_DATE != null) {
											pstmtUpdate_tJDBCOutput_8
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	row5.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_8.setNull(
													18, java.sql.Types.DATE);
										}

										if (row5.IMPORT_DATE != null) {
											pstmtUpdate_tJDBCOutput_8
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	row5.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_8.setNull(
													19, java.sql.Types.DATE);
										}

										if (row5.SOURCESYSTEM_CD == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													20, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(
															20,
															row5.SOURCESYSTEM_CD);
										}

										if (row5.VALUETYPE_CD == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													21, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(21,
															row5.VALUETYPE_CD);
										}

										if (row5.M_EXCLUSION_CD == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													22, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(22,
															row5.M_EXCLUSION_CD);
										}

										if (row5.C_PATH == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(23, row5.C_PATH);
										}

										if (row5.C_SYMBOL == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													24, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(24,
															row5.C_SYMBOL);
										}

										if (row5.secure_obj_token == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													25, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(
															25,
															row5.secure_obj_token);
										}

										if (row5.C_FULLNAME == null) {
											pstmtUpdate_tJDBCOutput_8.setNull(
													26, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_8
													.setString(26,
															row5.C_FULLNAME);
										}

										try {
											updatedCount_tJDBCOutput_8 = updatedCount_tJDBCOutput_8
													+ pstmtUpdate_tJDBCOutput_8
															.executeUpdate();
											nb_line_tJDBCOutput_8++;

										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_8 = true;
											throw (e);
										}
									} else {
										pstmtInsert_tJDBCOutput_8.setInt(1,
												row5.C_HLEVEL);

										if (row5.C_FULLNAME == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(2,
															row5.C_FULLNAME);
										}

										if (row5.C_NAME == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(3, row5.C_NAME);
										}

										if (row5.C_SYNONYM_CD == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(4,
															row5.C_SYNONYM_CD);
										}

										if (row5.C_VISUALATTRIBUTES == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(
															5,
															row5.C_VISUALATTRIBUTES);
										}

										pstmtInsert_tJDBCOutput_8
												.setBigDecimal(6,
														row5.C_TOTALNUM);

										if (row5.C_BASECODE == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(7,
															row5.C_BASECODE);
										}

										if (row5.C_METADATAXML == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(8,
															row5.C_METADATAXML);
										}

										if (row5.C_FACTTABLECOLUMN == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(
															9,
															row5.C_FACTTABLECOLUMN);
										}

										if (row5.C_TABLENAME == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(10,
															row5.C_TABLENAME);
										}

										if (row5.C_COLUMNNAME == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(11,
															row5.C_COLUMNNAME);
										}

										if (row5.C_COLUMNDATATYPE == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(
															12,
															row5.C_COLUMNDATATYPE);
										}

										if (row5.C_OPERATOR == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(13,
															row5.C_OPERATOR);
										}

										if (row5.C_DIMCODE == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(14,
															row5.C_DIMCODE);
										}

										if (row5.C_COMMENT == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(15,
															row5.C_COMMENT);
										}

										if (row5.C_TOOLTIP == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(16,
															row5.C_TOOLTIP);
										}

										if (row5.M_APPLIED_PATH == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(17,
															row5.M_APPLIED_PATH);
										}

										if (row5.UPDATE_DATE != null) {
											pstmtInsert_tJDBCOutput_8
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	row5.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_8.setNull(
													18, java.sql.Types.DATE);
										}

										if (row5.DOWNLOAD_DATE != null) {
											pstmtInsert_tJDBCOutput_8
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	row5.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_8.setNull(
													19, java.sql.Types.DATE);
										}

										if (row5.IMPORT_DATE != null) {
											pstmtInsert_tJDBCOutput_8
													.setTimestamp(
															20,
															new java.sql.Timestamp(
																	row5.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_8.setNull(
													20, java.sql.Types.DATE);
										}

										if (row5.SOURCESYSTEM_CD == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(
															21,
															row5.SOURCESYSTEM_CD);
										}

										if (row5.VALUETYPE_CD == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(22,
															row5.VALUETYPE_CD);
										}

										if (row5.M_EXCLUSION_CD == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(23,
															row5.M_EXCLUSION_CD);
										}

										if (row5.C_PATH == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													24, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(24, row5.C_PATH);
										}

										if (row5.C_SYMBOL == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													25, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(25,
															row5.C_SYMBOL);
										}

										if (row5.secure_obj_token == null) {
											pstmtInsert_tJDBCOutput_8.setNull(
													26, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_8
													.setString(
															26,
															row5.secure_obj_token);
										}

										try {
											insertedCount_tJDBCOutput_8 = insertedCount_tJDBCOutput_8
													+ pstmtInsert_tJDBCOutput_8
															.executeUpdate();
											nb_line_tJDBCOutput_8++;
										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_8 = true;
											throw (e);
										}
									}
									if (batchSize_tJDBCOutput_8 <= batchSizeCounter_tJDBCOutput_8) {

									}

									commitCounter_tJDBCOutput_8++;
									if (commitEvery_tJDBCOutput_8 <= commitCounter_tJDBCOutput_8) {

										connection_tJDBCOutput_8.commit();
										commitCounter_tJDBCOutput_8 = 0;
									}

									tos_count_tJDBCOutput_8++;

									/**
									 * [tJDBCOutput_8 main ] stop
									 */

								} // End of branch "row5"

							} // End of branch "copyOfoutt"

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						nb_line_tFileInputDelimited_15++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_15 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_15 != null) {
							csvReadertFileInputDelimited_15.close();
						}
					}
					if (csvReadertFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								nb_line_tFileInputDelimited_15);
					}

				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tUniqRow_9 end ] start
				 */

				currentComponent = "tUniqRow_9";

				globalMap.put("tUniqRow_9_NB_UNIQUES", nb_uniques_tUniqRow_9);
				globalMap.put("tUniqRow_9_NB_DUPLICATES",
						nb_duplicates_tUniqRow_9);

				ok_Hash.put("tUniqRow_9", true);
				end_Hash.put("tUniqRow_9", System.currentTimeMillis());

				/**
				 * [tUniqRow_9 end ] stop
				 */

				/**
				 * [tJDBCOutput_8 end ] start
				 */

				currentComponent = "tJDBCOutput_8";

				if (pstmtUpdate_tJDBCOutput_8 != null) {

					pstmtUpdate_tJDBCOutput_8.close();

				}
				if (pstmtInsert_tJDBCOutput_8 != null) {

					pstmtInsert_tJDBCOutput_8.close();

				}
				if (pstmt_tJDBCOutput_8 != null) {

					pstmt_tJDBCOutput_8.close();

				}

				if (commitCounter_tJDBCOutput_8 > 0) {

					connection_tJDBCOutput_8.commit();

				}

				connection_tJDBCOutput_8.close();

				resourceMap.put("finish_tJDBCOutput_8", true);

				nb_line_deleted_tJDBCOutput_8 = nb_line_deleted_tJDBCOutput_8
						+ deletedCount_tJDBCOutput_8;
				nb_line_update_tJDBCOutput_8 = nb_line_update_tJDBCOutput_8
						+ updatedCount_tJDBCOutput_8;
				nb_line_inserted_tJDBCOutput_8 = nb_line_inserted_tJDBCOutput_8
						+ insertedCount_tJDBCOutput_8;
				nb_line_rejected_tJDBCOutput_8 = nb_line_rejected_tJDBCOutput_8
						+ rejectedCount_tJDBCOutput_8;

				globalMap.put("tJDBCOutput_8_NB_LINE", nb_line_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_8);

				ok_Hash.put("tJDBCOutput_8", true);
				end_Hash.put("tJDBCOutput_8", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_15 finally ] start
				 */

				currentComponent = "tFileInputDelimited_15";

				/**
				 * [tFileInputDelimited_15 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tUniqRow_9 finally ] start
				 */

				currentComponent = "tUniqRow_9";

				/**
				 * [tUniqRow_9 finally ] stop
				 */

				/**
				 * [tJDBCOutput_8 finally ] start
				 */

				currentComponent = "tJDBCOutput_8";

				if (resourceMap.get("finish_tJDBCOutput_8") == null) {
					if (resourceMap.get("conn_tJDBCOutput_8") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_8")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_8) {
							String errorMessage_tJDBCOutput_8 = "failed to close the connection in tJDBCOutput_8 :"
									+ sqlEx_tJDBCOutput_8.getMessage();

							System.err.println(errorMessage_tJDBCOutput_8);
						}
					}
				}

				/**
				 * [tJDBCOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public void tJava_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_16 begin ] start
				 */

				ok_Hash.put("tJava_16", false);
				start_Hash.put("tJava_16", System.currentTimeMillis());

				currentComponent = "tJava_16";

				int tos_count_tJava_16 = 0;

				context.currentTable = "i2b2metadata.table_access";
				StatusListener.setSubStatus(99.0f, (int) (float) (90.0f) + "%");

				/**
				 * [tJava_16 begin ] stop
				 */

				/**
				 * [tJava_16 main ] start
				 */

				currentComponent = "tJava_16";

				tos_count_tJava_16++;

				/**
				 * [tJava_16 main ] stop
				 */

				/**
				 * [tJava_16 end ] start
				 */

				currentComponent = "tJava_16";

				ok_Hash.put("tJava_16", true);
				end_Hash.put("tJava_16", System.currentTimeMillis());

				/**
				 * [tJava_16 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRowGenerator_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_16 finally ] start
				 */

				currentComponent = "tJava_16";

				/**
				 * [tJava_16 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String c_table_cd;

		public String getC_table_cd() {
			return this.c_table_cd;
		}

		public String c_table_name;

		public String getC_table_name() {
			return this.c_table_name;
		}

		public String c_protected_access;

		public String getC_protected_access() {
			return this.c_protected_access;
		}

		public Integer c_hlevel;

		public Integer getC_hlevel() {
			return this.c_hlevel;
		}

		public String c_fullname;

		public String getC_fullname() {
			return this.c_fullname;
		}

		public String c_name;

		public String getC_name() {
			return this.c_name;
		}

		public String c_synonym_cd;

		public String getC_synonym_cd() {
			return this.c_synonym_cd;
		}

		public String c_visualattributes;

		public String getC_visualattributes() {
			return this.c_visualattributes;
		}

		public Integer c_totalnum;

		public Integer getC_totalnum() {
			return this.c_totalnum;
		}

		public String c_basecode;

		public String getC_basecode() {
			return this.c_basecode;
		}

		public String c_metadataxml;

		public String getC_metadataxml() {
			return this.c_metadataxml;
		}

		public String c_facttablecolumn;

		public String getC_facttablecolumn() {
			return this.c_facttablecolumn;
		}

		public String c_dimtablename;

		public String getC_dimtablename() {
			return this.c_dimtablename;
		}

		public String c_columnname;

		public String getC_columnname() {
			return this.c_columnname;
		}

		public String c_columndatatype;

		public String getC_columndatatype() {
			return this.c_columndatatype;
		}

		public String c_operator;

		public String getC_operator() {
			return this.c_operator;
		}

		public String c_dimcode;

		public String getC_dimcode() {
			return this.c_dimcode;
		}

		public String c_comment;

		public String getC_comment() {
			return this.c_comment;
		}

		public String c_tooltip;

		public String getC_tooltip() {
			return this.c_tooltip;
		}

		public java.util.Date c_entry_date;

		public java.util.Date getC_entry_date() {
			return this.c_entry_date;
		}

		public java.util.Date c_change_date;

		public java.util.Date getC_change_date() {
			return this.c_change_date;
		}

		public String c_status_cd;

		public String getC_status_cd() {
			return this.c_status_cd;
		}

		public String valuetype_cd;

		public String getValuetype_cd() {
			return this.valuetype_cd;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.c_table_cd = readString(dis);

					this.c_table_name = readString(dis);

					this.c_protected_access = readString(dis);

					this.c_hlevel = readInteger(dis);

					this.c_fullname = readString(dis);

					this.c_name = readString(dis);

					this.c_synonym_cd = readString(dis);

					this.c_visualattributes = readString(dis);

					this.c_totalnum = readInteger(dis);

					this.c_basecode = readString(dis);

					this.c_metadataxml = readString(dis);

					this.c_facttablecolumn = readString(dis);

					this.c_dimtablename = readString(dis);

					this.c_columnname = readString(dis);

					this.c_columndatatype = readString(dis);

					this.c_operator = readString(dis);

					this.c_dimcode = readString(dis);

					this.c_comment = readString(dis);

					this.c_tooltip = readString(dis);

					this.c_entry_date = readDate(dis);

					this.c_change_date = readDate(dis);

					this.c_status_cd = readString(dis);

					this.valuetype_cd = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.c_table_cd, dos);

				// String

				writeString(this.c_table_name, dos);

				// String

				writeString(this.c_protected_access, dos);

				// Integer

				writeInteger(this.c_hlevel, dos);

				// String

				writeString(this.c_fullname, dos);

				// String

				writeString(this.c_name, dos);

				// String

				writeString(this.c_synonym_cd, dos);

				// String

				writeString(this.c_visualattributes, dos);

				// Integer

				writeInteger(this.c_totalnum, dos);

				// String

				writeString(this.c_basecode, dos);

				// String

				writeString(this.c_metadataxml, dos);

				// String

				writeString(this.c_facttablecolumn, dos);

				// String

				writeString(this.c_dimtablename, dos);

				// String

				writeString(this.c_columnname, dos);

				// String

				writeString(this.c_columndatatype, dos);

				// String

				writeString(this.c_operator, dos);

				// String

				writeString(this.c_dimcode, dos);

				// String

				writeString(this.c_comment, dos);

				// String

				writeString(this.c_tooltip, dos);

				// java.util.Date

				writeDate(this.c_entry_date, dos);

				// java.util.Date

				writeDate(this.c_change_date, dos);

				// String

				writeString(this.c_status_cd, dos);

				// String

				writeString(this.valuetype_cd, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("c_table_cd=" + c_table_cd);
			sb.append(",c_table_name=" + c_table_name);
			sb.append(",c_protected_access=" + c_protected_access);
			sb.append(",c_hlevel=" + String.valueOf(c_hlevel));
			sb.append(",c_fullname=" + c_fullname);
			sb.append(",c_name=" + c_name);
			sb.append(",c_synonym_cd=" + c_synonym_cd);
			sb.append(",c_visualattributes=" + c_visualattributes);
			sb.append(",c_totalnum=" + String.valueOf(c_totalnum));
			sb.append(",c_basecode=" + c_basecode);
			sb.append(",c_metadataxml=" + c_metadataxml);
			sb.append(",c_facttablecolumn=" + c_facttablecolumn);
			sb.append(",c_dimtablename=" + c_dimtablename);
			sb.append(",c_columnname=" + c_columnname);
			sb.append(",c_columndatatype=" + c_columndatatype);
			sb.append(",c_operator=" + c_operator);
			sb.append(",c_dimcode=" + c_dimcode);
			sb.append(",c_comment=" + c_comment);
			sb.append(",c_tooltip=" + c_tooltip);
			sb.append(",c_entry_date=" + String.valueOf(c_entry_date));
			sb.append(",c_change_date=" + String.valueOf(c_change_date));
			sb.append(",c_status_cd=" + c_status_cd);
			sb.append(",valuetype_cd=" + valuetype_cd);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tJDBCOutput_13 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_13", false);
				start_Hash.put("tJDBCOutput_13", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_13";

				int tos_count_tJDBCOutput_13 = 0;

				int updateKeyCount_tJDBCOutput_13 = 1;
				if (updateKeyCount_tJDBCOutput_13 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_13 = 0;
				int nb_line_update_tJDBCOutput_13 = 0;
				int nb_line_inserted_tJDBCOutput_13 = 0;
				int nb_line_deleted_tJDBCOutput_13 = 0;
				int nb_line_rejected_tJDBCOutput_13 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_13 = 0;

				int deletedCount_tJDBCOutput_13 = 0;
				int updatedCount_tJDBCOutput_13 = 0;
				int insertedCount_tJDBCOutput_13 = 0;
				int rejectedCount_tJDBCOutput_13 = 0;

				boolean whetherReject_tJDBCOutput_13 = false;

				java.sql.Connection connection_tJDBCOutput_13 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_13 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_13 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_13 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_13,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_13);

				resourceMap.put("conn_tJDBCOutput_13",
						connection_tJDBCOutput_13);
				connection_tJDBCOutput_13.setAutoCommit(false);
				int commitEvery_tJDBCOutput_13 = 100000;
				int commitCounter_tJDBCOutput_13 = 0;
				int batchSize_tJDBCOutput_13 = 10000;
				int batchSizeCounter_tJDBCOutput_13 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_13 = connection_tJDBCOutput_13
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE c_table_cd = ?");
				String insert_tJDBCOutput_13 = "INSERT INTO "
						+ context.currentTable
						+ " (c_table_cd,c_table_name,c_protected_access,c_hlevel,c_fullname,c_name,c_synonym_cd,c_visualattributes,c_totalnum,c_basecode,c_metadataxml,c_facttablecolumn,c_dimtablename,c_columnname,c_columndatatype,c_operator,c_dimcode,c_comment,c_tooltip,c_entry_date,c_change_date,c_status_cd,valuetype_cd) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_13 = connection_tJDBCOutput_13
						.prepareStatement(insert_tJDBCOutput_13);
				String update_tJDBCOutput_13 = "UPDATE "
						+ context.currentTable
						+ " SET c_table_name = ?,c_protected_access = ?,c_hlevel = ?,c_fullname = ?,c_name = ?,c_synonym_cd = ?,c_visualattributes = ?,c_totalnum = ?,c_basecode = ?,c_metadataxml = ?,c_facttablecolumn = ?,c_dimtablename = ?,c_columnname = ?,c_columndatatype = ?,c_operator = ?,c_dimcode = ?,c_comment = ?,c_tooltip = ?,c_entry_date = ?,c_change_date = ?,c_status_cd = ?,valuetype_cd = ? WHERE c_table_cd = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_13 = connection_tJDBCOutput_13
						.prepareStatement(update_tJDBCOutput_13);

				/**
				 * [tJDBCOutput_13 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 1;

				class tRowGenerator_1Randomizer {
					public String getRandomnewColumn() {

						return TalendString.getAsciiRandomString(6);

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row3.newColumn = randtRowGenerator_1.getRandomnewColumn();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */

					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						out1 = null;

						// # Output table : 'out1'
						out1_tmp.c_table_cd = "Private Studies";
						out1_tmp.c_table_name = "i2b2_secure";
						out1_tmp.c_protected_access = "N";
						out1_tmp.c_hlevel = -1;
						out1_tmp.c_fullname = "\\i2b2\\";
						out1_tmp.c_name = "Private Studies";
						out1_tmp.c_synonym_cd = "N";
						out1_tmp.c_visualattributes = "CA ";
						out1_tmp.c_totalnum = 0;
						out1_tmp.c_basecode = "";
						out1_tmp.c_metadataxml = "";
						out1_tmp.c_facttablecolumn = "concept-cd";
						out1_tmp.c_dimtablename = "concept_dimension";
						out1_tmp.c_columnname = "concept_path";
						out1_tmp.c_columndatatype = "T";
						out1_tmp.c_operator = "LIKE";
						out1_tmp.c_dimcode = "\\i2b2\\";
						out1_tmp.c_comment = "";
						out1_tmp.c_tooltip = "Private Studies";
						out1_tmp.c_entry_date = null;
						out1_tmp.c_change_date = null;
						out1_tmp.c_status_cd = null;
						out1_tmp.valuetype_cd = null;
						out1 = out1_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "out1"
					if (out1 != null) {

						/**
						 * [tJDBCOutput_13 main ] start
						 */

						currentComponent = "tJDBCOutput_13";

						whetherReject_tJDBCOutput_13 = false;
						if (out1.c_table_cd == null) {
							pstmt_tJDBCOutput_13.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_13.setString(1, out1.c_table_cd);
						}

						java.sql.ResultSet rs_tJDBCOutput_13 = pstmt_tJDBCOutput_13
								.executeQuery();
						int checkCount_tJDBCOutput_13 = -1;
						while (rs_tJDBCOutput_13.next()) {
							checkCount_tJDBCOutput_13 = rs_tJDBCOutput_13
									.getInt(1);
						}
						if (checkCount_tJDBCOutput_13 > 0) {
							if (out1.c_table_name == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(1,
										out1.c_table_name);
							}

							if (out1.c_protected_access == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(2,
										out1.c_protected_access);
							}

							if (out1.c_hlevel == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tJDBCOutput_13.setInt(3,
										out1.c_hlevel);
							}

							if (out1.c_fullname == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(4,
										out1.c_fullname);
							}

							if (out1.c_name == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(5,
										out1.c_name);
							}

							if (out1.c_synonym_cd == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(6,
										out1.c_synonym_cd);
							}

							if (out1.c_visualattributes == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(7,
										out1.c_visualattributes);
							}

							if (out1.c_totalnum == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tJDBCOutput_13.setInt(8,
										out1.c_totalnum);
							}

							if (out1.c_basecode == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(9,
										out1.c_basecode);
							}

							if (out1.c_metadataxml == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(10,
										out1.c_metadataxml);
							}

							if (out1.c_facttablecolumn == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(11,
										out1.c_facttablecolumn);
							}

							if (out1.c_dimtablename == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(12,
										out1.c_dimtablename);
							}

							if (out1.c_columnname == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(13,
										out1.c_columnname);
							}

							if (out1.c_columndatatype == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(14,
										out1.c_columndatatype);
							}

							if (out1.c_operator == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(15,
										out1.c_operator);
							}

							if (out1.c_dimcode == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(16,
										out1.c_dimcode);
							}

							if (out1.c_comment == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(17,
										out1.c_comment);
							}

							if (out1.c_tooltip == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(18,
										out1.c_tooltip);
							}

							if (out1.c_entry_date != null) {
								pstmtUpdate_tJDBCOutput_13.setTimestamp(19,
										new java.sql.Timestamp(
												out1.c_entry_date.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_13.setNull(19,
										java.sql.Types.DATE);
							}

							if (out1.c_change_date != null) {
								pstmtUpdate_tJDBCOutput_13.setTimestamp(20,
										new java.sql.Timestamp(
												out1.c_change_date.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_13.setNull(20,
										java.sql.Types.DATE);
							}

							if (out1.c_status_cd == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(21,
										out1.c_status_cd);
							}

							if (out1.valuetype_cd == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(22,
										out1.valuetype_cd);
							}

							if (out1.c_table_cd == null) {
								pstmtUpdate_tJDBCOutput_13.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_13.setString(23,
										out1.c_table_cd);
							}

							try {
								updatedCount_tJDBCOutput_13 = updatedCount_tJDBCOutput_13
										+ pstmtUpdate_tJDBCOutput_13
												.executeUpdate();
								nb_line_tJDBCOutput_13++;

							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_13 = true;
								throw (e);
							}
						} else {
							if (out1.c_table_cd == null) {
								pstmtInsert_tJDBCOutput_13.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(1,
										out1.c_table_cd);
							}

							if (out1.c_table_name == null) {
								pstmtInsert_tJDBCOutput_13.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(2,
										out1.c_table_name);
							}

							if (out1.c_protected_access == null) {
								pstmtInsert_tJDBCOutput_13.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(3,
										out1.c_protected_access);
							}

							if (out1.c_hlevel == null) {
								pstmtInsert_tJDBCOutput_13.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tJDBCOutput_13.setInt(4,
										out1.c_hlevel);
							}

							if (out1.c_fullname == null) {
								pstmtInsert_tJDBCOutput_13.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(5,
										out1.c_fullname);
							}

							if (out1.c_name == null) {
								pstmtInsert_tJDBCOutput_13.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(6,
										out1.c_name);
							}

							if (out1.c_synonym_cd == null) {
								pstmtInsert_tJDBCOutput_13.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(7,
										out1.c_synonym_cd);
							}

							if (out1.c_visualattributes == null) {
								pstmtInsert_tJDBCOutput_13.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(8,
										out1.c_visualattributes);
							}

							if (out1.c_totalnum == null) {
								pstmtInsert_tJDBCOutput_13.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tJDBCOutput_13.setInt(9,
										out1.c_totalnum);
							}

							if (out1.c_basecode == null) {
								pstmtInsert_tJDBCOutput_13.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(10,
										out1.c_basecode);
							}

							if (out1.c_metadataxml == null) {
								pstmtInsert_tJDBCOutput_13.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(11,
										out1.c_metadataxml);
							}

							if (out1.c_facttablecolumn == null) {
								pstmtInsert_tJDBCOutput_13.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(12,
										out1.c_facttablecolumn);
							}

							if (out1.c_dimtablename == null) {
								pstmtInsert_tJDBCOutput_13.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(13,
										out1.c_dimtablename);
							}

							if (out1.c_columnname == null) {
								pstmtInsert_tJDBCOutput_13.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(14,
										out1.c_columnname);
							}

							if (out1.c_columndatatype == null) {
								pstmtInsert_tJDBCOutput_13.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(15,
										out1.c_columndatatype);
							}

							if (out1.c_operator == null) {
								pstmtInsert_tJDBCOutput_13.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(16,
										out1.c_operator);
							}

							if (out1.c_dimcode == null) {
								pstmtInsert_tJDBCOutput_13.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(17,
										out1.c_dimcode);
							}

							if (out1.c_comment == null) {
								pstmtInsert_tJDBCOutput_13.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(18,
										out1.c_comment);
							}

							if (out1.c_tooltip == null) {
								pstmtInsert_tJDBCOutput_13.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(19,
										out1.c_tooltip);
							}

							if (out1.c_entry_date != null) {
								pstmtInsert_tJDBCOutput_13.setTimestamp(20,
										new java.sql.Timestamp(
												out1.c_entry_date.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_13.setNull(20,
										java.sql.Types.DATE);
							}

							if (out1.c_change_date != null) {
								pstmtInsert_tJDBCOutput_13.setTimestamp(21,
										new java.sql.Timestamp(
												out1.c_change_date.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_13.setNull(21,
										java.sql.Types.DATE);
							}

							if (out1.c_status_cd == null) {
								pstmtInsert_tJDBCOutput_13.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(22,
										out1.c_status_cd);
							}

							if (out1.valuetype_cd == null) {
								pstmtInsert_tJDBCOutput_13.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_13.setString(23,
										out1.valuetype_cd);
							}

							try {
								insertedCount_tJDBCOutput_13 = insertedCount_tJDBCOutput_13
										+ pstmtInsert_tJDBCOutput_13
												.executeUpdate();
								nb_line_tJDBCOutput_13++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_13 = true;
								throw (e);
							}
						}
						if (batchSize_tJDBCOutput_13 <= batchSizeCounter_tJDBCOutput_13) {

						}

						commitCounter_tJDBCOutput_13++;
						if (commitEvery_tJDBCOutput_13 <= commitCounter_tJDBCOutput_13) {

							connection_tJDBCOutput_13.commit();
							commitCounter_tJDBCOutput_13 = 0;
						}

						tos_count_tJDBCOutput_13++;

						/**
						 * [tJDBCOutput_13 main ] stop
						 */

					} // End of branch "out1"

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE",
						nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tJDBCOutput_13 end ] start
				 */

				currentComponent = "tJDBCOutput_13";

				if (pstmtUpdate_tJDBCOutput_13 != null) {

					pstmtUpdate_tJDBCOutput_13.close();

				}
				if (pstmtInsert_tJDBCOutput_13 != null) {

					pstmtInsert_tJDBCOutput_13.close();

				}
				if (pstmt_tJDBCOutput_13 != null) {

					pstmt_tJDBCOutput_13.close();

				}

				if (commitCounter_tJDBCOutput_13 > 0) {

					connection_tJDBCOutput_13.commit();

				}

				connection_tJDBCOutput_13.close();

				resourceMap.put("finish_tJDBCOutput_13", true);

				nb_line_deleted_tJDBCOutput_13 = nb_line_deleted_tJDBCOutput_13
						+ deletedCount_tJDBCOutput_13;
				nb_line_update_tJDBCOutput_13 = nb_line_update_tJDBCOutput_13
						+ updatedCount_tJDBCOutput_13;
				nb_line_inserted_tJDBCOutput_13 = nb_line_inserted_tJDBCOutput_13
						+ insertedCount_tJDBCOutput_13;
				nb_line_rejected_tJDBCOutput_13 = nb_line_rejected_tJDBCOutput_13
						+ rejectedCount_tJDBCOutput_13;

				globalMap.put("tJDBCOutput_13_NB_LINE", nb_line_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_13);

				ok_Hash.put("tJDBCOutput_13", true);
				end_Hash.put("tJDBCOutput_13", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_1 finally ] start
				 */

				currentComponent = "tRowGenerator_1";

				/**
				 * [tRowGenerator_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tJDBCOutput_13 finally ] start
				 */

				currentComponent = "tJDBCOutput_13";

				if (resourceMap.get("finish_tJDBCOutput_13") == null) {
					if (resourceMap.get("conn_tJDBCOutput_13") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_13")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_13) {
							String errorMessage_tJDBCOutput_13 = "failed to close the connection in tJDBCOutput_13 :"
									+ sqlEx_tJDBCOutput_13.getMessage();

							System.err.println(errorMessage_tJDBCOutput_13);
						}
					}
				}

				/**
				 * [tJDBCOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.bio_experiment_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.bio_experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tJava_19 begin ] start
				 */

				ok_Hash.put("tJava_19", false);
				start_Hash.put("tJava_19", System.currentTimeMillis());

				currentComponent = "tJava_19";

				int tos_count_tJava_19 = 0;

				String foo = "bar";

				/**
				 * [tJava_19 begin ] stop
				 */

				/**
				 * [tJDBCInput_5 begin ] start
				 */

				ok_Hash.put("tJDBCInput_5", false);
				start_Hash.put("tJDBCInput_5", System.currentTimeMillis());

				currentComponent = "tJDBCInput_5";

				int tos_count_tJDBCInput_5 = 0;

				int nb_line_tJDBCInput_5 = 0;
				java.sql.Connection conn_tJDBCInput_5 = null;
				conn_tJDBCInput_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_5 = conn_tJDBCInput_5
						.createStatement();

				String dbquery_tJDBCInput_5 = "select bio_experiment_id from biomart.bio_experiment where title = '"
						+ context.fileName + "'";

				globalMap.put("tJDBCInput_5_QUERY", dbquery_tJDBCInput_5);
				java.sql.ResultSet rs_tJDBCInput_5 = null;
				try {
					rs_tJDBCInput_5 = stmt_tJDBCInput_5
							.executeQuery(dbquery_tJDBCInput_5);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_5 = rs_tJDBCInput_5
							.getMetaData();
					int colQtyInRs_tJDBCInput_5 = rsmd_tJDBCInput_5
							.getColumnCount();

					String tmpContent_tJDBCInput_5 = null;

					while (rs_tJDBCInput_5.next()) {
						nb_line_tJDBCInput_5++;

						if (colQtyInRs_tJDBCInput_5 < 1) {
							row16.bio_experiment_id = null;
						} else {

							if (rs_tJDBCInput_5.getObject(1) != null) {
								row16.bio_experiment_id = rs_tJDBCInput_5
										.getInt(1);
							} else {
								row16.bio_experiment_id = null;
							}
						}

						/**
						 * [tJDBCInput_5 begin ] stop
						 */

						/**
						 * [tJDBCInput_5 main ] start
						 */

						currentComponent = "tJDBCInput_5";

						tos_count_tJDBCInput_5++;

						/**
						 * [tJDBCInput_5 main ] stop
						 */

						/**
						 * [tJava_19 main ] start
						 */

						currentComponent = "tJava_19";

						tos_count_tJava_19++;

						/**
						 * [tJava_19 main ] stop
						 */

						/**
						 * [tJDBCInput_5 end ] start
						 */

						currentComponent = "tJDBCInput_5";

					}
				} finally {
					if (rs_tJDBCInput_5 != null) {
						rs_tJDBCInput_5.close();
					}
					stmt_tJDBCInput_5.close();

				}
				globalMap.put("tJDBCInput_5_NB_LINE", nb_line_tJDBCInput_5);

				ok_Hash.put("tJDBCInput_5", true);
				end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

				/**
				 * [tJDBCInput_5 end ] stop
				 */

				/**
				 * [tJava_19 end ] start
				 */

				currentComponent = "tJava_19";

				ok_Hash.put("tJava_19", true);
				end_Hash.put("tJava_19", System.currentTimeMillis());

				if (row16.bio_experiment_id == null) {

					tJDBCInput_1Process(globalMap);
				}

				/**
				 * [tJava_19 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_5 finally ] start
				 */

				currentComponent = "tJDBCInput_5";

				/**
				 * [tJDBCInput_5 finally ] stop
				 */

				/**
				 * [tJava_19 finally ] start
				 */

				currentComponent = "tJava_19";

				/**
				 * [tJava_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		public String bio_experiment_type;

		public String getBio_experiment_type() {
			return this.bio_experiment_type;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String design;

		public String getDesign() {
			return this.design;
		}

		public java.util.Date start_date;

		public java.util.Date getStart_date() {
			return this.start_date;
		}

		public java.util.Date completion_date;

		public java.util.Date getCompletion_date() {
			return this.completion_date;
		}

		public String primary_investigator;

		public String getPrimary_investigator() {
			return this.primary_investigator;
		}

		public String contact_field;

		public String getContact_field() {
			return this.contact_field;
		}

		public String etl_id;

		public String getEtl_id() {
			return this.etl_id;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String overall_design;

		public String getOverall_design() {
			return this.overall_design;
		}

		public String accession;

		public String getAccession() {
			return this.accession;
		}

		public java.util.Date entrydt;

		public java.util.Date getEntrydt() {
			return this.entrydt;
		}

		public java.util.Date updated;

		public java.util.Date getUpdated() {
			return this.updated;
		}

		public String institution;

		public String getInstitution() {
			return this.institution;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String biomarker_type;

		public String getBiomarker_type() {
			return this.biomarker_type;
		}

		public String target;

		public String getTarget() {
			return this.target;
		}

		public String access_type;

		public String getAccess_type() {
			return this.access_type;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.bio_experiment_id = readInteger(dis);

					this.bio_experiment_type = readString(dis);

					this.title = readString(dis);

					this.description = readString(dis);

					this.design = readString(dis);

					this.start_date = readDate(dis);

					this.completion_date = readDate(dis);

					this.primary_investigator = readString(dis);

					this.contact_field = readString(dis);

					this.etl_id = readString(dis);

					this.status = readString(dis);

					this.overall_design = readString(dis);

					this.accession = readString(dis);

					this.entrydt = readDate(dis);

					this.updated = readDate(dis);

					this.institution = readString(dis);

					this.country = readString(dis);

					this.biomarker_type = readString(dis);

					this.target = readString(dis);

					this.access_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.bio_experiment_id, dos);

				// String

				writeString(this.bio_experiment_type, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.design, dos);

				// java.util.Date

				writeDate(this.start_date, dos);

				// java.util.Date

				writeDate(this.completion_date, dos);

				// String

				writeString(this.primary_investigator, dos);

				// String

				writeString(this.contact_field, dos);

				// String

				writeString(this.etl_id, dos);

				// String

				writeString(this.status, dos);

				// String

				writeString(this.overall_design, dos);

				// String

				writeString(this.accession, dos);

				// java.util.Date

				writeDate(this.entrydt, dos);

				// java.util.Date

				writeDate(this.updated, dos);

				// String

				writeString(this.institution, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.biomarker_type, dos);

				// String

				writeString(this.target, dos);

				// String

				writeString(this.access_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append(",bio_experiment_type=" + bio_experiment_type);
			sb.append(",title=" + title);
			sb.append(",description=" + description);
			sb.append(",design=" + design);
			sb.append(",start_date=" + String.valueOf(start_date));
			sb.append(",completion_date=" + String.valueOf(completion_date));
			sb.append(",primary_investigator=" + primary_investigator);
			sb.append(",contact_field=" + contact_field);
			sb.append(",etl_id=" + etl_id);
			sb.append(",status=" + status);
			sb.append(",overall_design=" + overall_design);
			sb.append(",accession=" + accession);
			sb.append(",entrydt=" + String.valueOf(entrydt));
			sb.append(",updated=" + String.valueOf(updated));
			sb.append(",institution=" + institution);
			sb.append(",country=" + country);
			sb.append(",biomarker_type=" + biomarker_type);
			sb.append(",target=" + target);
			sb.append(",access_type=" + access_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.bio_experiment_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.bio_experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.bio_experiment_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.bio_experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				row11Struct row11 = new row11Struct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();

				/**
				 * [tJDBCOutput_12 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_12", false);
				start_Hash.put("tJDBCOutput_12", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_12";

				int tos_count_tJDBCOutput_12 = 0;

				int nb_line_tJDBCOutput_12 = 0;
				int nb_line_update_tJDBCOutput_12 = 0;
				int nb_line_inserted_tJDBCOutput_12 = 0;
				int nb_line_deleted_tJDBCOutput_12 = 0;
				int nb_line_rejected_tJDBCOutput_12 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_12 = 0;

				int deletedCount_tJDBCOutput_12 = 0;
				int updatedCount_tJDBCOutput_12 = 0;
				int insertedCount_tJDBCOutput_12 = 0;
				int rejectedCount_tJDBCOutput_12 = 0;

				boolean whetherReject_tJDBCOutput_12 = false;

				java.sql.Connection connection_tJDBCOutput_12 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_12 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_12 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_12 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_12,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_12);

				resourceMap.put("conn_tJDBCOutput_12",
						connection_tJDBCOutput_12);
				connection_tJDBCOutput_12.setAutoCommit(false);
				int commitEvery_tJDBCOutput_12 = 100000;
				int commitCounter_tJDBCOutput_12 = 0;
				int batchSize_tJDBCOutput_12 = 10000;
				int batchSizeCounter_tJDBCOutput_12 = 0;

				String insert_tJDBCOutput_12 = "INSERT INTO "
						+ "biomart.bio_experiment"
						+ " (bio_experiment_id,bio_experiment_type,title,description,design,start_date,completion_date,primary_investigator,contact_field,etl_id,status,overall_design,accession,entrydt,updated,institution,country,biomarker_type,target,access_type) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_12 = connection_tJDBCOutput_12
						.prepareStatement(insert_tJDBCOutput_12);

				/**
				 * [tJDBCOutput_12 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "select max(bio_experiment_id) from biomart.bio_experiment";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);
				java.sql.ResultSet rs_tJDBCInput_1 = null;
				try {
					rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;

					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						if (colQtyInRs_tJDBCInput_1 < 1) {
							row12.bio_experiment_id = null;
						} else {

							if (rs_tJDBCInput_1.getObject(1) != null) {
								row12.bio_experiment_id = rs_tJDBCInput_1
										.getInt(1);
							} else {
								row12.bio_experiment_id = null;
							}
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */

						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tJavaRow_5 main ] start
						 */

						currentComponent = "tJavaRow_5";

						// Code generated according to input schema and output
						// schema
						System.out.println("row12.bio_experiment_id "
								+ row12.bio_experiment_id);

						row11.bio_experiment_id = row12.bio_experiment_id;
						context.bio_experiment_id = row12.bio_experiment_id;
						StatusListener.setSubStatus(99.0f,
								(int) (float) (90.0f) + "%");

						nb_line_tJavaRow_5++;

						tos_count_tJavaRow_5++;

						/**
						 * [tJavaRow_5 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							copyOfout1 = null;

							// # Output table : 'copyOfout1'
							copyOfout1_tmp.bio_experiment_id = row11.bio_experiment_id + 1;
							copyOfout1_tmp.bio_experiment_type = "Experiment";
							copyOfout1_tmp.title = context.fileName;
							copyOfout1_tmp.description = context.fileName;
							copyOfout1_tmp.design = context.fileName;
							copyOfout1_tmp.start_date = null;
							copyOfout1_tmp.completion_date = null;
							copyOfout1_tmp.primary_investigator = null;
							copyOfout1_tmp.contact_field = null;
							copyOfout1_tmp.etl_id = null;
							copyOfout1_tmp.status = null;
							copyOfout1_tmp.overall_design = null;
							copyOfout1_tmp.accession = context.fileName;
							copyOfout1_tmp.entrydt = null;
							copyOfout1_tmp.updated = null;
							copyOfout1_tmp.institution = null;
							copyOfout1_tmp.country = null;
							copyOfout1_tmp.biomarker_type = null;
							copyOfout1_tmp.target = null;
							copyOfout1_tmp.access_type = null;
							copyOfout1 = copyOfout1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */
						// Start of branch "copyOfout1"
						if (copyOfout1 != null) {

							/**
							 * [tJDBCOutput_12 main ] start
							 */

							currentComponent = "tJDBCOutput_12";

							whetherReject_tJDBCOutput_12 = false;
							if (copyOfout1.bio_experiment_id == null) {
								pstmt_tJDBCOutput_12.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_12.setInt(1,
										copyOfout1.bio_experiment_id);
							}

							if (copyOfout1.bio_experiment_type == null) {
								pstmt_tJDBCOutput_12.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(2,
										copyOfout1.bio_experiment_type);
							}

							if (copyOfout1.title == null) {
								pstmt_tJDBCOutput_12.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(3,
										copyOfout1.title);
							}

							if (copyOfout1.description == null) {
								pstmt_tJDBCOutput_12.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(4,
										copyOfout1.description);
							}

							if (copyOfout1.design == null) {
								pstmt_tJDBCOutput_12.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(5,
										copyOfout1.design);
							}

							if (copyOfout1.start_date != null) {
								pstmt_tJDBCOutput_12
										.setTimestamp(
												6,
												new java.sql.Timestamp(
														copyOfout1.start_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_12.setNull(6,
										java.sql.Types.DATE);
							}

							if (copyOfout1.completion_date != null) {
								pstmt_tJDBCOutput_12.setTimestamp(
										7,
										new java.sql.Timestamp(
												copyOfout1.completion_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_12.setNull(7,
										java.sql.Types.DATE);
							}

							if (copyOfout1.primary_investigator == null) {
								pstmt_tJDBCOutput_12.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(8,
										copyOfout1.primary_investigator);
							}

							if (copyOfout1.contact_field == null) {
								pstmt_tJDBCOutput_12.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(9,
										copyOfout1.contact_field);
							}

							if (copyOfout1.etl_id == null) {
								pstmt_tJDBCOutput_12.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(10,
										copyOfout1.etl_id);
							}

							if (copyOfout1.status == null) {
								pstmt_tJDBCOutput_12.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(11,
										copyOfout1.status);
							}

							if (copyOfout1.overall_design == null) {
								pstmt_tJDBCOutput_12.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(12,
										copyOfout1.overall_design);
							}

							if (copyOfout1.accession == null) {
								pstmt_tJDBCOutput_12.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(13,
										copyOfout1.accession);
							}

							if (copyOfout1.entrydt != null) {
								pstmt_tJDBCOutput_12.setTimestamp(14,
										new java.sql.Timestamp(
												copyOfout1.entrydt.getTime()));
							} else {
								pstmt_tJDBCOutput_12.setNull(14,
										java.sql.Types.DATE);
							}

							if (copyOfout1.updated != null) {
								pstmt_tJDBCOutput_12.setTimestamp(15,
										new java.sql.Timestamp(
												copyOfout1.updated.getTime()));
							} else {
								pstmt_tJDBCOutput_12.setNull(15,
										java.sql.Types.DATE);
							}

							if (copyOfout1.institution == null) {
								pstmt_tJDBCOutput_12.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(16,
										copyOfout1.institution);
							}

							if (copyOfout1.country == null) {
								pstmt_tJDBCOutput_12.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(17,
										copyOfout1.country);
							}

							if (copyOfout1.biomarker_type == null) {
								pstmt_tJDBCOutput_12.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(18,
										copyOfout1.biomarker_type);
							}

							if (copyOfout1.target == null) {
								pstmt_tJDBCOutput_12.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(19,
										copyOfout1.target);
							}

							if (copyOfout1.access_type == null) {
								pstmt_tJDBCOutput_12.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_12.setString(20,
										copyOfout1.access_type);
							}

							pstmt_tJDBCOutput_12.addBatch();
							nb_line_tJDBCOutput_12++;

							batchSizeCounter_tJDBCOutput_12++;
							if (batchSize_tJDBCOutput_12 <= batchSizeCounter_tJDBCOutput_12) {
								int[] status_tJDBCOutput_12 = null;
								int countSum_tJDBCOutput_12 = 0;
								try {
									batchSizeCounter_tJDBCOutput_12 = 0;

									status_tJDBCOutput_12 = pstmt_tJDBCOutput_12
											.executeBatch();

									for (int countEach_tJDBCOutput_12 : status_tJDBCOutput_12) {
										countSum_tJDBCOutput_12 += (countEach_tJDBCOutput_12 < 0 ? 0
												: countEach_tJDBCOutput_12);
									}
								} catch (java.sql.BatchUpdateException e) {

									throw (e);

								}
								try {
									tmp_batchUpdateCount_tJDBCOutput_12 = pstmt_tJDBCOutput_12
											.getUpdateCount();
								} catch (java.sql.SQLException e) {

								}
								tmp_batchUpdateCount_tJDBCOutput_12 = tmp_batchUpdateCount_tJDBCOutput_12 > countSum_tJDBCOutput_12 ? tmp_batchUpdateCount_tJDBCOutput_12
										: countSum_tJDBCOutput_12;

								insertedCount_tJDBCOutput_12 += tmp_batchUpdateCount_tJDBCOutput_12;

							}

							commitCounter_tJDBCOutput_12++;
							if (commitEvery_tJDBCOutput_12 <= commitCounter_tJDBCOutput_12) {

								connection_tJDBCOutput_12.commit();
								commitCounter_tJDBCOutput_12 = 0;
							}

							tos_count_tJDBCOutput_12++;

							/**
							 * [tJDBCOutput_12 main ] stop
							 */

						} // End of branch "copyOfout1"

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
				} finally {
					if (rs_tJDBCInput_1 != null) {
						rs_tJDBCInput_1.close();
					}
					stmt_tJDBCInput_1.close();

				}
				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tJDBCOutput_12 end ] start
				 */

				currentComponent = "tJDBCOutput_12";

				int[] status_tJDBCOutput_12 = null;
				int countSum_tJDBCOutput_12 = 0;
				try {
					if (pstmt_tJDBCOutput_12 != null
							&& batchSizeCounter_tJDBCOutput_12 > 0) {

						status_tJDBCOutput_12 = pstmt_tJDBCOutput_12
								.executeBatch();

						for (int countEach_tJDBCOutput_12 : status_tJDBCOutput_12) {
							countSum_tJDBCOutput_12 += (countEach_tJDBCOutput_12 < 0 ? 0
									: countEach_tJDBCOutput_12);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_12 != null
						&& batchSizeCounter_tJDBCOutput_12 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_12 = pstmt_tJDBCOutput_12
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_12 = tmp_batchUpdateCount_tJDBCOutput_12 > countSum_tJDBCOutput_12 ? tmp_batchUpdateCount_tJDBCOutput_12
							: countSum_tJDBCOutput_12;

					insertedCount_tJDBCOutput_12 += tmp_batchUpdateCount_tJDBCOutput_12;

				}
				if (pstmt_tJDBCOutput_12 != null) {

					pstmt_tJDBCOutput_12.close();

				}

				if (commitCounter_tJDBCOutput_12 > 0) {

					connection_tJDBCOutput_12.commit();

				}

				connection_tJDBCOutput_12.close();

				resourceMap.put("finish_tJDBCOutput_12", true);

				nb_line_deleted_tJDBCOutput_12 = nb_line_deleted_tJDBCOutput_12
						+ deletedCount_tJDBCOutput_12;
				nb_line_update_tJDBCOutput_12 = nb_line_update_tJDBCOutput_12
						+ updatedCount_tJDBCOutput_12;
				nb_line_inserted_tJDBCOutput_12 = nb_line_inserted_tJDBCOutput_12
						+ insertedCount_tJDBCOutput_12;
				nb_line_rejected_tJDBCOutput_12 = nb_line_rejected_tJDBCOutput_12
						+ rejectedCount_tJDBCOutput_12;

				globalMap.put("tJDBCOutput_12_NB_LINE", nb_line_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_12);

				ok_Hash.put("tJDBCOutput_12", true);
				end_Hash.put("tJDBCOutput_12", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_1 finally ] start
				 */

				currentComponent = "tJDBCInput_1";

				/**
				 * [tJDBCInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tJDBCOutput_12 finally ] start
				 */

				currentComponent = "tJDBCOutput_12";

				if (resourceMap.get("finish_tJDBCOutput_12") == null) {
					if (resourceMap.get("conn_tJDBCOutput_12") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_12")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_12) {
							String errorMessage_tJDBCOutput_12 = "failed to close the connection in tJDBCOutput_12 :"
									+ sqlEx_tJDBCOutput_12.getMessage();

							System.err.println(errorMessage_tJDBCOutput_12);
						}
					}
				}

				/**
				 * [tJDBCOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public Integer search_secure_object_id;

		public Integer getSearch_secure_object_id() {
			return this.search_secure_object_id;
		}

		public Integer bio_data_id;

		public Integer getBio_data_id() {
			return this.bio_data_id;
		}

		public String display_name;

		public String getDisplay_name() {
			return this.display_name;
		}

		public String data_type;

		public String getData_type() {
			return this.data_type;
		}

		public String bio_data_unique_id;

		public String getBio_data_unique_id() {
			return this.bio_data_unique_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.search_secure_object_id = readInteger(dis);

					this.bio_data_id = readInteger(dis);

					this.display_name = readString(dis);

					this.data_type = readString(dis);

					this.bio_data_unique_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.search_secure_object_id, dos);

				// Integer

				writeInteger(this.bio_data_id, dos);

				// String

				writeString(this.display_name, dos);

				// String

				writeString(this.data_type, dos);

				// String

				writeString(this.bio_data_unique_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("search_secure_object_id="
					+ String.valueOf(search_secure_object_id));
			sb.append(",bio_data_id=" + String.valueOf(bio_data_id));
			sb.append(",display_name=" + display_name);
			sb.append(",data_type=" + data_type);
			sb.append(",bio_data_unique_id=" + bio_data_unique_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public Integer search_secure_object_id;

		public Integer getSearch_secure_object_id() {
			return this.search_secure_object_id;
		}

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.search_secure_object_id = readInteger(dis);

					this.bio_experiment_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.search_secure_object_id, dos);

				// Integer

				writeInteger(this.bio_experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("search_secure_object_id="
					+ String.valueOf(search_secure_object_id));
			sb.append(",bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_IDRT_JDBC_Upload = new byte[0];

		public Integer search_secure_object_id;

		public Integer getSearch_secure_object_id() {
			return this.search_secure_object_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.search_secure_object_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.search_secure_object_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("search_secure_object_id="
					+ String.valueOf(search_secure_object_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();
				row15Struct row15 = new row15Struct();
				out2Struct out2 = new out2Struct();

				/**
				 * [tJDBCOutput_17 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_17", false);
				start_Hash.put("tJDBCOutput_17", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_17";

				int tos_count_tJDBCOutput_17 = 0;

				int updateKeyCount_tJDBCOutput_17 = 1;
				if (updateKeyCount_tJDBCOutput_17 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_17 = 0;
				int nb_line_update_tJDBCOutput_17 = 0;
				int nb_line_inserted_tJDBCOutput_17 = 0;
				int nb_line_deleted_tJDBCOutput_17 = 0;
				int nb_line_rejected_tJDBCOutput_17 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_17 = 0;

				int deletedCount_tJDBCOutput_17 = 0;
				int updatedCount_tJDBCOutput_17 = 0;
				int insertedCount_tJDBCOutput_17 = 0;
				int rejectedCount_tJDBCOutput_17 = 0;

				boolean whetherReject_tJDBCOutput_17 = false;

				java.sql.Connection connection_tJDBCOutput_17 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_17 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_17 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_17 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_17,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_17);

				resourceMap.put("conn_tJDBCOutput_17",
						connection_tJDBCOutput_17);
				connection_tJDBCOutput_17.setAutoCommit(false);
				int commitEvery_tJDBCOutput_17 = 100000;
				int commitCounter_tJDBCOutput_17 = 0;
				int batchSize_tJDBCOutput_17 = 10000;
				int batchSizeCounter_tJDBCOutput_17 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_17 = connection_tJDBCOutput_17
						.prepareStatement("SELECT COUNT(1) FROM "
								+ "searchapp.search_secure_object"
								+ " WHERE bio_data_id = ?");
				String insert_tJDBCOutput_17 = "INSERT INTO "
						+ "searchapp.search_secure_object"
						+ " (search_secure_object_id,bio_data_id,display_name,data_type,bio_data_unique_id) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_17 = connection_tJDBCOutput_17
						.prepareStatement(insert_tJDBCOutput_17);
				String update_tJDBCOutput_17 = "UPDATE "
						+ "searchapp.search_secure_object"
						+ " SET search_secure_object_id = ?,display_name = ?,data_type = ?,bio_data_unique_id = ? WHERE bio_data_id = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_17 = connection_tJDBCOutput_17
						.prepareStatement(update_tJDBCOutput_17);

				/**
				 * [tJDBCOutput_17 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = "select max(search_secure_object_id) from searchapp.search_secure_object";

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);
				java.sql.ResultSet rs_tJDBCInput_2 = null;
				try {
					rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;

					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						if (colQtyInRs_tJDBCInput_2 < 1) {
							row14.search_secure_object_id = null;
						} else {

							if (rs_tJDBCInput_2.getObject(1) != null) {
								row14.search_secure_object_id = rs_tJDBCInput_2
										.getInt(1);
							} else {
								row14.search_secure_object_id = null;
							}
						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */

						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tJavaRow_6 main ] start
						 */

						currentComponent = "tJavaRow_6";

						// Code generated according to input schema and output
						// schema
						if (row14.search_secure_object_id == null)
							row14.search_secure_object_id = 0;
						row15.search_secure_object_id = row14.search_secure_object_id + 1;

						row15.bio_experiment_id = context.bio_experiment_id + 1;

						StatusListener.setSubStatus(99.0f,
								(int) (float) (90.0f) + "%");

						nb_line_tJavaRow_6++;

						tos_count_tJavaRow_6++;

						/**
						 * [tJavaRow_6 main ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
							// ###############################
							// # Output tables

							out2 = null;

							// # Output table : 'out2'
							out2_tmp.search_secure_object_id = row15.search_secure_object_id;
							out2_tmp.bio_data_id = row15.bio_experiment_id;
							out2_tmp.display_name = context.fileName;
							out2_tmp.data_type = "Experiment";
							out2_tmp.bio_data_unique_id = "Study:"
									+ context.fileName;
							out2 = out2_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_6 = false;

						tos_count_tMap_6++;

						/**
						 * [tMap_6 main ] stop
						 */
						// Start of branch "out2"
						if (out2 != null) {

							/**
							 * [tJDBCOutput_17 main ] start
							 */

							currentComponent = "tJDBCOutput_17";

							whetherReject_tJDBCOutput_17 = false;
							if (out2.bio_data_id == null) {
								pstmt_tJDBCOutput_17.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_17
										.setInt(1, out2.bio_data_id);
							}

							java.sql.ResultSet rs_tJDBCOutput_17 = pstmt_tJDBCOutput_17
									.executeQuery();
							int checkCount_tJDBCOutput_17 = -1;
							while (rs_tJDBCOutput_17.next()) {
								checkCount_tJDBCOutput_17 = rs_tJDBCOutput_17
										.getInt(1);
							}
							if (checkCount_tJDBCOutput_17 > 0) {
								if (out2.search_secure_object_id == null) {
									pstmtUpdate_tJDBCOutput_17.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tJDBCOutput_17.setInt(1,
											out2.search_secure_object_id);
								}

								if (out2.display_name == null) {
									pstmtUpdate_tJDBCOutput_17.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_17.setString(2,
											out2.display_name);
								}

								if (out2.data_type == null) {
									pstmtUpdate_tJDBCOutput_17.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_17.setString(3,
											out2.data_type);
								}

								if (out2.bio_data_unique_id == null) {
									pstmtUpdate_tJDBCOutput_17.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_17.setString(4,
											out2.bio_data_unique_id);
								}

								if (out2.bio_data_id == null) {
									pstmtUpdate_tJDBCOutput_17.setNull(5,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tJDBCOutput_17.setInt(5,
											out2.bio_data_id);
								}

								try {
									updatedCount_tJDBCOutput_17 = updatedCount_tJDBCOutput_17
											+ pstmtUpdate_tJDBCOutput_17
													.executeUpdate();
									nb_line_tJDBCOutput_17++;

								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_17 = true;
									throw (e);
								}
							} else {
								if (out2.search_secure_object_id == null) {
									pstmtInsert_tJDBCOutput_17.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tJDBCOutput_17.setInt(1,
											out2.search_secure_object_id);
								}

								if (out2.bio_data_id == null) {
									pstmtInsert_tJDBCOutput_17.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tJDBCOutput_17.setInt(2,
											out2.bio_data_id);
								}

								if (out2.display_name == null) {
									pstmtInsert_tJDBCOutput_17.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_17.setString(3,
											out2.display_name);
								}

								if (out2.data_type == null) {
									pstmtInsert_tJDBCOutput_17.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_17.setString(4,
											out2.data_type);
								}

								if (out2.bio_data_unique_id == null) {
									pstmtInsert_tJDBCOutput_17.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_17.setString(5,
											out2.bio_data_unique_id);
								}

								try {
									insertedCount_tJDBCOutput_17 = insertedCount_tJDBCOutput_17
											+ pstmtInsert_tJDBCOutput_17
													.executeUpdate();
									nb_line_tJDBCOutput_17++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_17 = true;
									throw (e);
								}
							}
							if (batchSize_tJDBCOutput_17 <= batchSizeCounter_tJDBCOutput_17) {

							}

							commitCounter_tJDBCOutput_17++;
							if (commitEvery_tJDBCOutput_17 <= commitCounter_tJDBCOutput_17) {

								connection_tJDBCOutput_17.commit();
								commitCounter_tJDBCOutput_17 = 0;
							}

							tos_count_tJDBCOutput_17++;

							/**
							 * [tJDBCOutput_17 main ] stop
							 */

						} // End of branch "out2"

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
				} finally {
					if (rs_tJDBCInput_2 != null) {
						rs_tJDBCInput_2.close();
					}
					stmt_tJDBCInput_2.close();

				}
				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				/**
				 * [tJDBCInput_2 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tJDBCOutput_17 end ] start
				 */

				currentComponent = "tJDBCOutput_17";

				if (pstmtUpdate_tJDBCOutput_17 != null) {

					pstmtUpdate_tJDBCOutput_17.close();

				}
				if (pstmtInsert_tJDBCOutput_17 != null) {

					pstmtInsert_tJDBCOutput_17.close();

				}
				if (pstmt_tJDBCOutput_17 != null) {

					pstmt_tJDBCOutput_17.close();

				}

				if (commitCounter_tJDBCOutput_17 > 0) {

					connection_tJDBCOutput_17.commit();

				}

				connection_tJDBCOutput_17.close();

				resourceMap.put("finish_tJDBCOutput_17", true);

				nb_line_deleted_tJDBCOutput_17 = nb_line_deleted_tJDBCOutput_17
						+ deletedCount_tJDBCOutput_17;
				nb_line_update_tJDBCOutput_17 = nb_line_update_tJDBCOutput_17
						+ updatedCount_tJDBCOutput_17;
				nb_line_inserted_tJDBCOutput_17 = nb_line_inserted_tJDBCOutput_17
						+ insertedCount_tJDBCOutput_17;
				nb_line_rejected_tJDBCOutput_17 = nb_line_rejected_tJDBCOutput_17
						+ rejectedCount_tJDBCOutput_17;

				globalMap.put("tJDBCOutput_17_NB_LINE", nb_line_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_17);

				ok_Hash.put("tJDBCOutput_17", true);
				end_Hash.put("tJDBCOutput_17", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_2 finally ] start
				 */

				currentComponent = "tJDBCInput_2";

				/**
				 * [tJDBCInput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tJDBCOutput_17 finally ] start
				 */

				currentComponent = "tJDBCOutput_17";

				if (resourceMap.get("finish_tJDBCOutput_17") == null) {
					if (resourceMap.get("conn_tJDBCOutput_17") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_17")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_17) {
							String errorMessage_tJDBCOutput_17 = "failed to close the connection in tJDBCOutput_17 :"
									+ sqlEx_tJDBCOutput_17.getMessage();

							System.err.println(errorMessage_tJDBCOutput_17);
						}
					}
				}

				/**
				 * [tJDBCOutput_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_3 begin ] start
				 */

				ok_Hash.put("tJDBCRow_3", false);
				start_Hash.put("tJDBCRow_3", System.currentTimeMillis());

				currentComponent = "tJDBCRow_3";

				int tos_count_tJDBCRow_3 = 0;

				java.sql.Connection conn_tJDBCRow_3 = null;
				String query_tJDBCRow_3 = "";
				boolean whetherReject_tJDBCRow_3 = false;
				conn_tJDBCRow_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCRow_3 = conn_tJDBCRow_3
						.createStatement();

				/**
				 * [tJDBCRow_3 begin ] stop
				 */

				/**
				 * [tJDBCRow_3 main ] start
				 */

				currentComponent = "tJDBCRow_3";

				query_tJDBCRow_3 = "insert into i2b2metadata.table_access values ('Private Studies','i2b2_secure','N',-1,'\\i2b2\\','Private Studies','N','CA ',0,'','','concept-cd','concept_dimension','concept_path','T','LIKE','\\i2b2\\','','\\Private Studies\\')";
				whetherReject_tJDBCRow_3 = false;
				globalMap.put("tJDBCRow_3_QUERY", query_tJDBCRow_3);
				try {
					stmt_tJDBCRow_3.execute(query_tJDBCRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_3 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tJDBCRow_3++;

				/**
				 * [tJDBCRow_3 main ] stop
				 */

				/**
				 * [tJDBCRow_3 end ] start
				 */

				currentComponent = "tJDBCRow_3";

				stmt_tJDBCRow_3.close();

				ok_Hash.put("tJDBCRow_3", true);
				end_Hash.put("tJDBCRow_3", System.currentTimeMillis());

				/**
				 * [tJDBCRow_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_3 finally ] start
				 */

				currentComponent = "tJDBCRow_3";

				/**
				 * [tJDBCRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_1 begin ] start
				 */

				ok_Hash.put("tJDBCRow_1", false);
				start_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				currentComponent = "tJDBCRow_1";

				int tos_count_tJDBCRow_1 = 0;

				java.sql.Connection conn_tJDBCRow_1 = null;
				String query_tJDBCRow_1 = "";
				boolean whetherReject_tJDBCRow_1 = false;
				conn_tJDBCRow_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCRow_1 = conn_tJDBCRow_1
						.createStatement();

				/**
				 * [tJDBCRow_1 begin ] stop
				 */

				/**
				 * [tJDBCRow_1 main ] start
				 */

				currentComponent = "tJDBCRow_1";

				query_tJDBCRow_1 = ((String) globalMap
						.get("tForeach_1_CURRENT_VALUE"));
				whetherReject_tJDBCRow_1 = false;
				globalMap.put("tJDBCRow_1_QUERY", query_tJDBCRow_1);
				try {
					stmt_tJDBCRow_1.execute(query_tJDBCRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_1 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tJDBCRow_1++;

				/**
				 * [tJDBCRow_1 main ] stop
				 */

				/**
				 * [tJDBCRow_1 end ] start
				 */

				currentComponent = "tJDBCRow_1";

				stmt_tJDBCRow_1.close();

				ok_Hash.put("tJDBCRow_1", true);
				end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				/**
				 * [tJDBCRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_1 finally ] start
				 */

				currentComponent = "tJDBCRow_1";

				/**
				 * [tJDBCRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				// System.out.println("context.DB_StagingI2B2_jdbcurl " +
				// context.DB_StagingI2B2_jdbcurl);
				// System.out.println("context.DB_StagingI2B2_DriverClass " +
				// context.DB_StagingI2B2_DriverClass);
				// System.out.println("context.DB_StagingI2B2_Username " +
				// context.DB_StagingI2B2_Username);
				// System.out.println("context.DB_StagingI2B2_Password " +
				// context.DB_StagingI2B2_Password);
				context.counter = 0;

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String dbUser_tJDBCConnection_1 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCConnection_1 = context.DB_StagingI2B2_Password;
				String dbPwd_tJDBCConnection_1 = decryptedPassword_tJDBCConnection_1;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String driverClass_tJDBCConnection_1 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCConnection_1);

				conn_tJDBCConnection_1 = java.sql.DriverManager.getConnection(
						url_tJDBCConnection_1, dbUser_tJDBCConnection_1,
						dbPwd_tJDBCConnection_1);

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(true);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// dbUser_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// dbPwd_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */

				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */

				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk1",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_4Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk2",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCConnection_1 finally ] start
				 */

				currentComponent = "tJDBCConnection_1";

				/**
				 * [tJDBCConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				/*
				 * //log outputs to files java.io.File folder = new
				 * java.io.File("_logs/"); if (!folder.exists()) { if
				 * (folder.mkdir()) {
				 * System.out.println("Directory is created!");
				 * 
				 * } else { System.out.println("Failed to create directory!"); }
				 * } java.io.File logFile = new
				 * java.io.File("_logs/"+projectName
				 * +"-"+context.fileName+"-"+context.currentTable+".log");
				 * java.io.PrintStream ps = new java.io.PrintStream(new
				 * java.io.FileOutputStream(logFile)); System.setOut(ps);
				 * System.setErr(ps);
				 */

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("transmart")) {

					tForeach_1Process(globalMap);
				}

				if (!context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres")) {

					tForeach_2Process(globalMap);
				}

				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres")) {

					tForeach_5Process(globalMap);
				}

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2demodata.observation_fact"
						: (context.DB_StagingI2B2_Schema + ".observation_fact");
				System.out.println("Starting Import: Observation Fact; table: "
						+ context.currentTable);
				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_9Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2metadata.i2b2"
						: context.DB_StagingI2B2_Schema + ".i2b2";
				System.out.println("Starting Import: Ontology");
				StatusListener.setSubStatus(20.0f, (int) (float) (20.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_10Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2demodata.encounter_mapping"
						: (context.DB_StagingI2B2_Schema + ".encounter_mapping");
				System.out
						.println("Starting Import: Patient/Encounter Mapping/Dimension");
				StatusListener.setSubStatus(30.0f, (int) (float) (30.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_12Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());

				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2demodata.patient_mapping"
						: (context.DB_StagingI2B2_Schema + ".patient_mapping");
				StatusListener.setSubStatus(40.0f, (int) (float) (40.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_10 begin ] stop
				 */

				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */

				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_6Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_10 finally ] start
				 */

				currentComponent = "tJava_10";

				/**
				 * [tJava_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());

				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2demodata.patient_dimension"
						: (context.DB_StagingI2B2_Schema + ".patient_dimension");
				StatusListener.setSubStatus(50.0f, (int) (float) (50.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_11 begin ] stop
				 */

				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */

				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_7Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_11 finally ] start
				 */

				currentComponent = "tJava_11";

				/**
				 * [tJava_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());

				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2demodata.concept_dimension"
						: (context.DB_StagingI2B2_Schema + ".concept_dimension");
				StatusListener.setSubStatus(60.0f, (int) (float) (60.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_12 begin ] stop
				 */

				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */

				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_8Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_13Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_12 finally ] start
				 */

				currentComponent = "tJava_12";

				/**
				 * [tJava_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());

				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2demodata.modifier_dimension"
						: (context.DB_StagingI2B2_Schema + ".modifier_dimension");
				System.out.println("Starting Import: Modifier/Visit Dimension");
				StatusListener.setSubStatus(80.0f, (int) (float) (80.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_13 begin ] stop
				 */

				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */

				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_13:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_14Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_13:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_14Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_13 finally ] start
				 */

				currentComponent = "tJava_13";

				/**
				 * [tJava_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());

				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				context.currentTable = context.DB_StagingI2B2_WHType
						.equalsIgnoreCase("transmart") ? "i2b2demodata.visit_dimension"
						: (context.DB_StagingI2B2_Schema + ".visit_dimension");
				StatusListener.setSubStatus(90.0f, (int) (float) (90.0f) + "%");
				context.counter = 0;

				/**
				 * [tJava_14 begin ] stop
				 */

				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */

				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				/**
				 * [tJava_14 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_14:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_14 finally ] start
				 */

				currentComponent = "tJava_14";

				/**
				 * [tJava_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public void tForeach_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tForeach_2 begin ] start
				 */

				int NB_ITERATE_tJava_5 = 0; // for statistics

				ok_Hash.put("tForeach_2", false);
				start_Hash.put("tForeach_2", System.currentTimeMillis());

				currentComponent = "tForeach_2";

				int tos_count_tForeach_2 = 0;

				Object[] values_tForeach_2 = new Object[] {
						"ALTER TABLE " + context.DB_StagingI2B2_Schema
								+ ".I2B2 DROP CONSTRAINT I2B2_PK",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT DISABLE constraint OBSERVATION_FACT_PK",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 MODIFY  C_FULLNAME  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 MODIFY  C_BASECODE  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 MODIFY  C_DIMCODE  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".CONCEPT_DIMENSION MODIFY  CONCEPT_PATH  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".CONCEPT_DIMENSION MODIFY  CONCEPT_CD  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".MODIFIER_DIMENSION MODIFY  MODIFIER_PATH  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".MODIFIER_DIMENSION MODIFY  MODIFIER_CD  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT MODIFY  MODIFIER_CD  VARCHAR2(2800 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT MODIFY  CONCEPT_CD  VARCHAR2(2800 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".patient_mapping MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".patient_dimension MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".observation_fact MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_enc_collection MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_set_collection MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_set_collection MODIFY  PATIENT_NUM NUMBER(38)",
						"ALTER TABLE " + context.DB_StagingI2B2_Schema
								+ ".DX MODIFY ENCOUNTER_NUM  NUMBER(38)",
						"ALTER TABLE " + context.DB_StagingI2B2_Schema
								+ ".DX MODIFY PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".QUERY_GLOBAL_TEMP MODIFY CONCEPT_CD VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".QUERY_GLOBAL_TEMP MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".QUERY_GLOBAL_TEMP MODIFY ENCOUNTER_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT ENABLE constraint OBSERVATION_FACT_PK",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".PATIENT_MAPPING DROP CONSTRAINT PATIENT_MAPPING_PK",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".PATIENT_MAPPING ADD CONSTRAINT PATIENT_MAPPING_PK PRIMARY KEY (  PATIENT_IDE , PATIENT_IDE_SOURCE )USING INDEX PM_ENCPNUM_IDX ENABLE",
						"ALTER TABLE " + context.DB_StagingI2B2_Schema
								+ ".PATIENT_MAPPING MODIFY (PROJECT_ID NULL)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".ENCOUNTER_MAPPING DROP CONSTRAINT ENCOUNTER_MAPPING_PK",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".ENCOUNTER_MAPPING ADD CONSTRAINT ENCOUNTER_MAPPING_PK PRIMARY KEY (  ENCOUNTER_IDE , ENCOUNTER_IDE_SOURCE , PATIENT_IDE , PATIENT_IDE_SOURCE ) USING INDEX EM_IDX_ENCPATH ENABLE",
						"ALTER TABLE " + context.DB_StagingI2B2_Schema
								+ ".ENCOUNTER_MAPPING MODIFY (PROJECT_ID NULL)",
						"commit", };

				for (Object tmp_tForeach_2 : values_tForeach_2) {

					globalMap.put("tForeach_2_CURRENT_VALUE", tmp_tForeach_2);

					/**
					 * [tForeach_2 begin ] stop
					 */

					/**
					 * [tForeach_2 main ] start
					 */

					currentComponent = "tForeach_2";

					tos_count_tForeach_2++;

					/**
					 * [tForeach_2 main ] stop
					 */
					NB_ITERATE_tJava_5++;

					/**
					 * [tJava_5 begin ] start
					 */

					ok_Hash.put("tJava_5", false);
					start_Hash.put("tJava_5", System.currentTimeMillis());

					currentComponent = "tJava_5";

					int tos_count_tJava_5 = 0;

					System.out.println(((String) globalMap
							.get("tForeach_2_CURRENT_VALUE")));

					/**
					 * [tJava_5 begin ] stop
					 */

					/**
					 * [tJava_5 main ] start
					 */

					currentComponent = "tJava_5";

					tos_count_tJava_5++;

					/**
					 * [tJava_5 main ] stop
					 */

					/**
					 * [tJava_5 end ] start
					 */

					currentComponent = "tJava_5";

					ok_Hash.put("tJava_5", true);
					end_Hash.put("tJava_5", System.currentTimeMillis());

					tJDBCRow_2Process(globalMap);

					/**
					 * [tJava_5 end ] stop
					 */

					/**
					 * [tForeach_2 end ] start
					 */

					currentComponent = "tForeach_2";

				}

				ok_Hash.put("tForeach_2", true);
				end_Hash.put("tForeach_2", System.currentTimeMillis());

				/**
				 * [tForeach_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tForeach_2 finally ] start
				 */

				currentComponent = "tForeach_2";

				/**
				 * [tForeach_2 finally ] stop
				 */

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tForeach_2_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_2 begin ] start
				 */

				ok_Hash.put("tJDBCRow_2", false);
				start_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				currentComponent = "tJDBCRow_2";

				int tos_count_tJDBCRow_2 = 0;

				java.sql.Connection conn_tJDBCRow_2 = null;
				String query_tJDBCRow_2 = "";
				boolean whetherReject_tJDBCRow_2 = false;
				conn_tJDBCRow_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCRow_2 = conn_tJDBCRow_2
						.createStatement();

				/**
				 * [tJDBCRow_2 begin ] stop
				 */

				/**
				 * [tJDBCRow_2 main ] start
				 */

				currentComponent = "tJDBCRow_2";

				query_tJDBCRow_2 = ((String) globalMap
						.get("tForeach_2_CURRENT_VALUE"));
				whetherReject_tJDBCRow_2 = false;
				globalMap.put("tJDBCRow_2_QUERY", query_tJDBCRow_2);
				try {
					stmt_tJDBCRow_2.execute(query_tJDBCRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_2 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tJDBCRow_2++;

				/**
				 * [tJDBCRow_2 main ] stop
				 */

				/**
				 * [tJDBCRow_2 end ] start
				 */

				currentComponent = "tJDBCRow_2";

				stmt_tJDBCRow_2.close();

				ok_Hash.put("tJDBCRow_2", true);
				end_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				/**
				 * [tJDBCRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_2 finally ] start
				 */

				currentComponent = "tJDBCRow_2";

				/**
				 * [tJDBCRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 1);
	}

	public void tForeach_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tForeach_5 begin ] start
				 */

				int NB_ITERATE_tJava_26 = 0; // for statistics

				ok_Hash.put("tForeach_5", false);
				start_Hash.put("tForeach_5", System.currentTimeMillis());

				currentComponent = "tForeach_5";

				int tos_count_tForeach_5 = 0;

				Object[] values_tForeach_5 = new Object[] {
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 ALTER  C_FULLNAME TYPE character varying(2000)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 ALTER  C_BASECODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".CONCEPT_DIMENSION ALTER  CONCEPT_CD  TYPE character varying",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".MODIFIER_DIMENSION ALTER  MODIFIER_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT ALTER  MODIFIER_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT ALTER  CONCEPT_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".patient_mapping ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".patient_dimension ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".observation_fact ALTER  PATIENT_NUM  TYPE numeric(38,0)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_enc_collection ALTER  PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_set_collection ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".PATIENT_MAPPING DROP CONSTRAINT IF EXISTS PATIENT_MAPPING_PK",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".PATIENT_MAPPING ADD CONSTRAINT PATIENT_MAPPING_PK PRIMARY KEY (  PATIENT_IDE , PATIENT_IDE_SOURCE )",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".PATIENT_MAPPING alter column PROJECT_ID  drop not null",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".ENCOUNTER_MAPPING DROP CONSTRAINT IF EXISTS encounter_mapping_pk",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".ENCOUNTER_MAPPING ADD CONSTRAINT encounter_mapping_pk PRIMARY KEY (  ENCOUNTER_IDE , ENCOUNTER_IDE_SOURCE , PATIENT_IDE , PATIENT_IDE_SOURCE )",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".ENCOUNTER_MAPPING alter column PROJECT_ID  drop not null", };

				for (Object tmp_tForeach_5 : values_tForeach_5) {

					globalMap.put("tForeach_5_CURRENT_VALUE", tmp_tForeach_5);

					/**
					 * [tForeach_5 begin ] stop
					 */

					/**
					 * [tForeach_5 main ] start
					 */

					currentComponent = "tForeach_5";

					tos_count_tForeach_5++;

					/**
					 * [tForeach_5 main ] stop
					 */
					NB_ITERATE_tJava_26++;

					/**
					 * [tJava_26 begin ] start
					 */

					ok_Hash.put("tJava_26", false);
					start_Hash.put("tJava_26", System.currentTimeMillis());

					currentComponent = "tJava_26";

					int tos_count_tJava_26 = 0;

					System.out.println(((String) globalMap
							.get("tForeach_5_CURRENT_VALUE")));

					/**
					 * [tJava_26 begin ] stop
					 */

					/**
					 * [tJava_26 main ] start
					 */

					currentComponent = "tJava_26";

					tos_count_tJava_26++;

					/**
					 * [tJava_26 main ] stop
					 */

					/**
					 * [tJava_26 end ] start
					 */

					currentComponent = "tJava_26";

					ok_Hash.put("tJava_26", true);
					end_Hash.put("tJava_26", System.currentTimeMillis());

					tJDBCRow_5Process(globalMap);

					/**
					 * [tJava_26 end ] stop
					 */

					/**
					 * [tForeach_5 end ] start
					 */

					currentComponent = "tForeach_5";

				}

				ok_Hash.put("tForeach_5", true);
				end_Hash.put("tForeach_5", System.currentTimeMillis());

				/**
				 * [tForeach_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tForeach_5 finally ] start
				 */

				currentComponent = "tForeach_5";

				/**
				 * [tForeach_5 finally ] stop
				 */

				/**
				 * [tJava_26 finally ] start
				 */

				currentComponent = "tJava_26";

				/**
				 * [tJava_26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tForeach_5_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_5 begin ] start
				 */

				ok_Hash.put("tJDBCRow_5", false);
				start_Hash.put("tJDBCRow_5", System.currentTimeMillis());

				currentComponent = "tJDBCRow_5";

				int tos_count_tJDBCRow_5 = 0;

				java.sql.Connection conn_tJDBCRow_5 = null;
				String query_tJDBCRow_5 = "";
				boolean whetherReject_tJDBCRow_5 = false;
				conn_tJDBCRow_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCRow_5 = conn_tJDBCRow_5
						.createStatement();

				/**
				 * [tJDBCRow_5 begin ] stop
				 */

				/**
				 * [tJDBCRow_5 main ] start
				 */

				currentComponent = "tJDBCRow_5";

				query_tJDBCRow_5 = ((String) globalMap
						.get("tForeach_5_CURRENT_VALUE"));
				whetherReject_tJDBCRow_5 = false;
				globalMap.put("tJDBCRow_5_QUERY", query_tJDBCRow_5);
				try {
					stmt_tJDBCRow_5.execute(query_tJDBCRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_5 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tJDBCRow_5++;

				/**
				 * [tJDBCRow_5 main ] stop
				 */

				/**
				 * [tJDBCRow_5 end ] start
				 */

				currentComponent = "tJDBCRow_5";

				stmt_tJDBCRow_5.close();

				ok_Hash.put("tJDBCRow_5", true);
				end_Hash.put("tJDBCRow_5", System.currentTimeMillis());

				/**
				 * [tJDBCRow_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_5 finally ] start
				 */

				currentComponent = "tJDBCRow_5";

				/**
				 * [tJDBCRow_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());

				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				System.out.println("Upload complete!");
				StatusListener.setSubStatus(100.0f, (int) (float) (100.0f)
						+ "%");

				/**
				 * [tJava_15 begin ] stop
				 */

				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */

				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				/**
				 * [tJava_15 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_15 finally ] start
				 */

				currentComponent = "tJava_15";

				/**
				 * [tJava_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IDRT_JDBC_Upload IDRT_JDBC_UploadClass = new IDRT_JDBC_Upload();

		int exitCode = IDRT_JDBC_UploadClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IDRT_JDBC_Upload.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/idrt_jdbc_upload_1_0/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.patientDataFolder = (String) context
					.getProperty("patientDataFolder");
			try {
				context.counter = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("counter"));
			} catch (NumberFormatException e) {
				context.counter = null;
			}
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.currentTable = (String) context.getProperty("currentTable");
			try {
				context.bio_experiment_id = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("bio_experiment_id"));
			} catch (NumberFormatException e) {
				context.bio_experiment_id = null;
			}
			context.fileName = (String) context.getProperty("fileName");
			context.coding = (String) context.getProperty("coding");
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			String pwd_DB_StagingI2B2_Password_value = context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Password = null;
			if (pwd_DB_StagingI2B2_Password_value != null) {
				if (context_param.containsKey("DB_StagingI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_StagingI2B2_Password = pwd_DB_StagingI2B2_Password_value;
				} else if (!pwd_DB_StagingI2B2_Password_value.isEmpty()) {
					try {
						context.DB_StagingI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_StagingI2B2_Password_value);
						context.put("DB_StagingI2B2_Password",
								context.DB_StagingI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_StagingI2B2_WHType = (String) context
					.getProperty("DB_StagingI2B2_WHType");
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.currentFile = (String) context.getProperty("currentFile");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("patientDataFolder")) {
				context.patientDataFolder = (String) parentContextMap
						.get("patientDataFolder");
			}
			if (parentContextMap.containsKey("counter")) {
				context.counter = (Integer) parentContextMap.get("counter");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("currentTable")) {
				context.currentTable = (String) parentContextMap
						.get("currentTable");
			}
			if (parentContextMap.containsKey("bio_experiment_id")) {
				context.bio_experiment_id = (Integer) parentContextMap
						.get("bio_experiment_id");
			}
			if (parentContextMap.containsKey("fileName")) {
				context.fileName = (String) parentContextMap.get("fileName");
			}
			if (parentContextMap.containsKey("coding")) {
				context.coding = (String) parentContextMap.get("coding");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_WHType")) {
				context.DB_StagingI2B2_WHType = (String) parentContextMap
						.get("DB_StagingI2B2_WHType");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("DB_StagingI2B2_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

			e_tLibraryLoad_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : IDRT_JDBC_Upload");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tJDBCConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tJDBCConnection_1",
				globalMap.get("conn_tJDBCConnection_1"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1594027 characters generated by Talend Open Studio for Data Integration on
 * the March 10, 2015 3:56:14 PM CET
 ************************************************************************************************/
