// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.idrt_to_db_schema_1_0;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.enc_num_routine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_12
//import java.util.List;

//the import part of tJavaRow_14
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_1
//import java.util.List;
import java.util.HashMap;
import java.util.HashSet;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaRow_15
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

@SuppressWarnings("unused")
/**
 * Job: IDRT_to_DB_Schema Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class IDRT_to_DB_Schema implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (importTerms != null) {

				this.setProperty("importTerms", importTerms.toString());

			}

			if (lastPatient != null) {

				this.setProperty("lastPatient", lastPatient.toString());

			}

			if (patientDataFolder != null) {

				this.setProperty("patientDataFolder",
						patientDataFolder.toString());

			}

			if (uploadFolder != null) {

				this.setProperty("uploadFolder", uploadFolder.toString());

			}

			if (dataRows != null) {

				this.setProperty("dataRows", dataRows.toString());

			}

			if (ontRows != null) {

				this.setProperty("ontRows", ontRows.toString());

			}

			if (currentOntRow != null) {

				this.setProperty("currentOntRow", currentOntRow.toString());

			}

			if (currentDataRow != null) {

				this.setProperty("currentDataRow", currentDataRow.toString());

			}

			if (dataMod != null) {

				this.setProperty("dataMod", dataMod.toString());

			}

			if (ontMod != null) {

				this.setProperty("ontMod", ontMod.toString());

			}

			if (maxInstance != null) {

				this.setProperty("maxInstance", maxInstance.toString());

			}

			if (instanceMap != null) {

				this.setProperty("instanceMap", instanceMap.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (currentQuery != null) {

				this.setProperty("currentQuery", currentQuery.toString());

			}

			if (datePattern != null) {

				this.setProperty("datePattern", datePattern.toString());

			}

			if (fileName != null) {

				this.setProperty("fileName", fileName.toString());

			}

			if (cleanUp != null) {

				this.setProperty("cleanUp", cleanUp.toString());

			}

			if (coding != null) {

				this.setProperty("coding", coding.toString());

			}

			if (dbImport != null) {

				this.setProperty("dbImport", dbImport.toString());

			}

			if (exportDBConfig != null) {

				this.setProperty("exportDBConfig", exportDBConfig.toString());

			}

			if (FTPPassword != null) {

				this.setProperty("FTPPassword", FTPPassword.toString());

			}

			if (FTPUser != null) {

				this.setProperty("FTPUser", FTPUser.toString());

			}

			if (idFile != null) {

				this.setProperty("idFile", idFile.toString());

			}

			if (pidgen != null) {

				this.setProperty("pidgen", pidgen.toString());

			}

			if (PIDURL != null) {

				this.setProperty("PIDURL", PIDURL.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderODM != null) {

				this.setProperty("folderODM", folderODM.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (importSingleFile != null) {

				this.setProperty("importSingleFile",
						importSingleFile.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (ItemData != null) {

				this.setProperty("ItemData", ItemData.toString());

			}

			if (ItemDataAny != null) {

				this.setProperty("ItemDataAny", ItemDataAny.toString());

			}

			if (ItemDataBase64Binary != null) {

				this.setProperty("ItemDataBase64Binary",
						ItemDataBase64Binary.toString());

			}

			if (ItemDataBase64Float != null) {

				this.setProperty("ItemDataBase64Float",
						ItemDataBase64Float.toString());

			}

			if (ItemDataBoolean != null) {

				this.setProperty("ItemDataBoolean", ItemDataBoolean.toString());

			}

			if (ItemDataDate != null) {

				this.setProperty("ItemDataDate", ItemDataDate.toString());

			}

			if (ItemDataDatetime != null) {

				this.setProperty("ItemDataDatetime",
						ItemDataDatetime.toString());

			}

			if (ItemDataDouble != null) {

				this.setProperty("ItemDataDouble", ItemDataDouble.toString());

			}

			if (ItemDataDurationDatetime != null) {

				this.setProperty("ItemDataDurationDatetime",
						ItemDataDurationDatetime.toString());

			}

			if (ItemDataFloat != null) {

				this.setProperty("ItemDataFloat", ItemDataFloat.toString());

			}

			if (ItemDataHexBinary != null) {

				this.setProperty("ItemDataHexBinary",
						ItemDataHexBinary.toString());

			}

			if (ItemDataHexFloat != null) {

				this.setProperty("ItemDataHexFloat",
						ItemDataHexFloat.toString());

			}

			if (ItemDataIncompleteDatetime != null) {

				this.setProperty("ItemDataIncompleteDatetime",
						ItemDataIncompleteDatetime.toString());

			}

			if (ItemDataInteger != null) {

				this.setProperty("ItemDataInteger", ItemDataInteger.toString());

			}

			if (ItemDataIntervalDatetime != null) {

				this.setProperty("ItemDataIntervalDatetime",
						ItemDataIntervalDatetime.toString());

			}

			if (ItemDataPartialDate != null) {

				this.setProperty("ItemDataPartialDate",
						ItemDataPartialDate.toString());

			}

			if (ItemDataPartialDatetime != null) {

				this.setProperty("ItemDataPartialDatetime",
						ItemDataPartialDatetime.toString());

			}

			if (ItemDataPartialTime != null) {

				this.setProperty("ItemDataPartialTime",
						ItemDataPartialTime.toString());

			}

			if (ItemDataString != null) {

				this.setProperty("ItemDataString", ItemDataString.toString());

			}

			if (ItemDataTime != null) {

				this.setProperty("ItemDataTime", ItemDataTime.toString());

			}

			if (ItemDataURI != null) {

				this.setProperty("ItemDataURI", ItemDataURI.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

			if (xslt != null) {

				this.setProperty("xslt", xslt.toString());

			}

			if (xslt_namespace != null) {

				this.setProperty("xslt_namespace", xslt_namespace.toString());

			}

		}

		public Boolean importTerms;

		public Boolean getImportTerms() {
			return this.importTerms;
		}

		public Integer lastPatient;

		public Integer getLastPatient() {
			return this.lastPatient;
		}

		public String patientDataFolder;

		public String getPatientDataFolder() {
			return this.patientDataFolder;
		}

		public String uploadFolder;

		public String getUploadFolder() {
			return this.uploadFolder;
		}

		public Integer dataRows;

		public Integer getDataRows() {
			return this.dataRows;
		}

		public Integer ontRows;

		public Integer getOntRows() {
			return this.ontRows;
		}

		public Integer currentOntRow;

		public Integer getCurrentOntRow() {
			return this.currentOntRow;
		}

		public Integer currentDataRow;

		public Integer getCurrentDataRow() {
			return this.currentDataRow;
		}

		public Integer dataMod;

		public Integer getDataMod() {
			return this.dataMod;
		}

		public Integer ontMod;

		public Integer getOntMod() {
			return this.ontMod;
		}

		public BigDecimal maxInstance;

		public BigDecimal getMaxInstance() {
			return this.maxInstance;
		}

		public Object instanceMap;

		public Object getInstanceMap() {
			return this.instanceMap;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String currentQuery;

		public String getCurrentQuery() {
			return this.currentQuery;
		}

		public String datePattern;

		public String getDatePattern() {
			return this.datePattern;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		public Boolean cleanUp;

		public Boolean getCleanUp() {
			return this.cleanUp;
		}

		public String coding;

		public String getCoding() {
			return this.coding;
		}

		public Boolean dbImport;

		public Boolean getDbImport() {
			return this.dbImport;
		}

		public String exportDBConfig;

		public String getExportDBConfig() {
			return this.exportDBConfig;
		}

		public java.lang.String FTPPassword;

		public java.lang.String getFTPPassword() {
			return this.FTPPassword;
		}

		public String FTPUser;

		public String getFTPUser() {
			return this.FTPUser;
		}

		public String idFile;

		public String getIdFile() {
			return this.idFile;
		}

		public Boolean pidgen;

		public Boolean getPidgen() {
			return this.pidgen;
		}

		public String PIDURL;

		public String getPIDURL() {
			return this.PIDURL;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderODM;

		public String getFolderODM() {
			return this.folderODM;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean importSingleFile;

		public Boolean getImportSingleFile() {
			return this.importSingleFile;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String ItemData;

		public String getItemData() {
			return this.ItemData;
		}

		public String ItemDataAny;

		public String getItemDataAny() {
			return this.ItemDataAny;
		}

		public String ItemDataBase64Binary;

		public String getItemDataBase64Binary() {
			return this.ItemDataBase64Binary;
		}

		public String ItemDataBase64Float;

		public String getItemDataBase64Float() {
			return this.ItemDataBase64Float;
		}

		public String ItemDataBoolean;

		public String getItemDataBoolean() {
			return this.ItemDataBoolean;
		}

		public String ItemDataDate;

		public String getItemDataDate() {
			return this.ItemDataDate;
		}

		public String ItemDataDatetime;

		public String getItemDataDatetime() {
			return this.ItemDataDatetime;
		}

		public String ItemDataDouble;

		public String getItemDataDouble() {
			return this.ItemDataDouble;
		}

		public String ItemDataDurationDatetime;

		public String getItemDataDurationDatetime() {
			return this.ItemDataDurationDatetime;
		}

		public String ItemDataFloat;

		public String getItemDataFloat() {
			return this.ItemDataFloat;
		}

		public String ItemDataHexBinary;

		public String getItemDataHexBinary() {
			return this.ItemDataHexBinary;
		}

		public String ItemDataHexFloat;

		public String getItemDataHexFloat() {
			return this.ItemDataHexFloat;
		}

		public String ItemDataIncompleteDatetime;

		public String getItemDataIncompleteDatetime() {
			return this.ItemDataIncompleteDatetime;
		}

		public String ItemDataInteger;

		public String getItemDataInteger() {
			return this.ItemDataInteger;
		}

		public String ItemDataIntervalDatetime;

		public String getItemDataIntervalDatetime() {
			return this.ItemDataIntervalDatetime;
		}

		public String ItemDataPartialDate;

		public String getItemDataPartialDate() {
			return this.ItemDataPartialDate;
		}

		public String ItemDataPartialDatetime;

		public String getItemDataPartialDatetime() {
			return this.ItemDataPartialDatetime;
		}

		public String ItemDataPartialTime;

		public String getItemDataPartialTime() {
			return this.ItemDataPartialTime;
		}

		public String ItemDataString;

		public String getItemDataString() {
			return this.ItemDataString;
		}

		public String ItemDataTime;

		public String getItemDataTime() {
			return this.ItemDataTime;
		}

		public String ItemDataURI;

		public String getItemDataURI() {
			return this.ItemDataURI;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}

		public String xslt;

		public String getXslt() {
			return this.xslt;
		}

		public String xslt_namespace;

		public String getXslt_namespace() {
			return this.xslt_namespace;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "IDRT_to_DB_Schema";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IDRT_to_DB_Schema.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IDRT_to_DB_Schema.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSplitRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSplitRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_24_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_from_enc_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row36_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_24_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_UniqOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tUniqRow_2_UniqIn_error(exception, errorComponent, globalMap);

	}

	public void tUniqRow_2_UniqIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_12_UniqOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tUniqRow_12_UniqIn_error(exception, errorComponent, globalMap);

	}

	public void tUniqRow_12_UniqIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_5_UniqOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tUniqRow_5_UniqIn_error(exception, errorComponent, globalMap);

	}

	public void tUniqRow_5_UniqIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_7_UniqOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tUniqRow_7_UniqIn_error(exception, errorComponent, globalMap);

	}

	public void tUniqRow_7_UniqIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_20_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_24_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_17_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_21_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class copyOfout6Struct implements
			routines.system.IPersistableRow<copyOfout6Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String secure_obj;

		public String getSecure_obj() {
			return this.secure_obj;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.secure_obj = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.secure_obj, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",secure_obj=" + secure_obj);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toCD6Struct implements
			routines.system.IPersistableRow<toCD6Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toCD6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String dimcode;

		public String getDimcode() {
			return this.dimcode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.dimcode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.dimcode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",dimcode=" + dimcode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row101Struct implements
			routines.system.IPersistableRow<row101Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row101Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_7Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_7Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_6Process(globalMap);

				row101Struct row101 = new row101Struct();
				row10Struct row10 = new row10Struct();
				copyOfout6Struct copyOfout6 = new copyOfout6Struct();
				toCD6Struct toCD6 = new toCD6Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "ontology.csv")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[26];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {

						dir_tFileOutputDelimited_2.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}

				CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_2,
												false), context.coding)));
				CsvWritertFileOutputDelimited_2
						.setSeparator(csvSettings_tFileOutputDelimited_2
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_2
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_2.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_2.getRowDelim());
				}

				if (filetFileOutputDelimited_2.length() == 0) {

					headColutFileOutputDelimited_2[0] = "C_HLEVEL";

					headColutFileOutputDelimited_2[1] = "C_FULLNAME";

					headColutFileOutputDelimited_2[2] = "C_NAME";

					headColutFileOutputDelimited_2[3] = "C_SYNONYM_CD";

					headColutFileOutputDelimited_2[4] = "C_VISUALATTRIBUTES";

					headColutFileOutputDelimited_2[5] = "C_TOTALNUM";

					headColutFileOutputDelimited_2[6] = "C_BASECODE";

					headColutFileOutputDelimited_2[7] = "C_METADATAXML";

					headColutFileOutputDelimited_2[8] = "C_FACTTABLECOLUMN";

					headColutFileOutputDelimited_2[9] = "C_TABLENAME";

					headColutFileOutputDelimited_2[10] = "C_COLUMNNAME";

					headColutFileOutputDelimited_2[11] = "C_COLUMNDATATYPE";

					headColutFileOutputDelimited_2[12] = "C_OPERATOR";

					headColutFileOutputDelimited_2[13] = "C_DIMCODE";

					headColutFileOutputDelimited_2[14] = "C_COMMENT";

					headColutFileOutputDelimited_2[15] = "C_TOOLTIP";

					headColutFileOutputDelimited_2[16] = "M_APPLIED_PATH";

					headColutFileOutputDelimited_2[17] = "UPDATE_DATE";

					headColutFileOutputDelimited_2[18] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_2[19] = "IMPORT_DATE";

					headColutFileOutputDelimited_2[20] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_2[21] = "VALUETYPE_CD";

					headColutFileOutputDelimited_2[22] = "M_EXCLUSION_CD";

					headColutFileOutputDelimited_2[23] = "C_PATH";

					headColutFileOutputDelimited_2[24] = "C_SYMBOL";

					headColutFileOutputDelimited_2[25] = "secure_obj";

					CsvWritertFileOutputDelimited_2
							.writeNext(headColutFileOutputDelimited_2);
					CsvWritertFileOutputDelimited_2.flush();

				}

				CsvWritertFileOutputDelimited_2
						.setEscapeChar(csvSettings_tFileOutputDelimited_2
								.getEscapeChar());
				CsvWritertFileOutputDelimited_2
						.setQuoteChar(csvSettings_tFileOutputDelimited_2
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_2
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_2",
						CsvWritertFileOutputDelimited_2);

				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_25 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_25", false);
				start_Hash.put("tFileOutputDelimited_25",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_25";

				int tos_count_tFileOutputDelimited_25 = 0;

				String fileName_tFileOutputDelimited_25 = "";
				fileName_tFileOutputDelimited_25 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "concept_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_25 = null;
				String extension_tFileOutputDelimited_25 = null;
				String directory_tFileOutputDelimited_25 = null;
				if ((fileName_tFileOutputDelimited_25.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_25.lastIndexOf(".") < fileName_tFileOutputDelimited_25
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
						extension_tFileOutputDelimited_25 = "";
					} else {
						fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
								.substring(0, fileName_tFileOutputDelimited_25
										.lastIndexOf("."));
						extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
								.substring(fileName_tFileOutputDelimited_25
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
							.substring(0, fileName_tFileOutputDelimited_25
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_25.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
								.substring(0, fileName_tFileOutputDelimited_25
										.lastIndexOf("."));
						extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
								.substring(fileName_tFileOutputDelimited_25
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
						extension_tFileOutputDelimited_25 = "";
					}
					directory_tFileOutputDelimited_25 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_25 = true;
				java.io.File filetFileOutputDelimited_25 = new java.io.File(
						fileName_tFileOutputDelimited_25);
				globalMap.put("tFileOutputDelimited_25_FILE_NAME",
						fileName_tFileOutputDelimited_25);

				if (filetFileOutputDelimited_25.exists()) {
					isFileGenerated_tFileOutputDelimited_25 = false;
				}

				int nb_line_tFileOutputDelimited_25 = 0;
				int splitEvery_tFileOutputDelimited_25 = 1000;
				int splitedFileNo_tFileOutputDelimited_25 = 0;
				int currentRow_tFileOutputDelimited_25 = 0;

				final String OUT_DELIM_tFileOutputDelimited_25 = /**
				 * Start field
				 * tFileOutputDelimited_25:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_25:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_25 = /**
				 * Start
				 * field tFileOutputDelimited_25:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_25:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_25 != null
						&& directory_tFileOutputDelimited_25.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_25 = new java.io.File(
							directory_tFileOutputDelimited_25);
					if (!dir_tFileOutputDelimited_25.exists()) {

						dir_tFileOutputDelimited_25.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_25 = null;

				outtFileOutputDelimited_25 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_25, true),
								context.coding));

				if (filetFileOutputDelimited_25.length() == 0) {

					outtFileOutputDelimited_25.write("CONCEPT_PATH");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("CONCEPT_CD");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("NAME_CHAR");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("CONCEPT_BLOB");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("UPDATE_DATE");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("DOWNLOAD_DATE");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("IMPORT_DATE");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("SOURCESYSTEM_CD");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_tFileOutputDelimited_25);

					outtFileOutputDelimited_25.write("UPLOAD_ID");

					outtFileOutputDelimited_25
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_25);
					outtFileOutputDelimited_25.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_25",
						outtFileOutputDelimited_25);

				resourceMap.put("nb_line_tFileOutputDelimited_25",
						nb_line_tFileOutputDelimited_25);

				/**
				 * [tFileOutputDelimited_25 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
					boolean var1;
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout6Struct copyOfout6_tmp = new copyOfout6Struct();
				toCD6Struct toCD6_tmp = new toCD6Struct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tJavaRow_10 begin ] start
				 */

				ok_Hash.put("tJavaRow_10", false);
				start_Hash.put("tJavaRow_10", System.currentTimeMillis());

				currentComponent = "tJavaRow_10";

				int tos_count_tJavaRow_10 = 0;

				int nb_line_tJavaRow_10 = 0;

				/**
				 * [tJavaRow_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				context.folderMain + context.folderOutput + "ont.csv"/**
				 * End field
				 * tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row101 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row101 = new row101Struct();
						try {

							char fieldSeparator_tFileInputDelimited_7_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_7_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row101.HLEVEL = null;

								row101.Name = null;

								row101.Path = null;

								row101.DataType = null;

								row101.Update_Date = null;

								row101.Import_Date = null;

								row101.Download_Date = null;

								row101.PathID = null;

								row101.visual = null;

								row101.codeList = null;

								row101.source = null;

								row101.xml = null;

								row101.m_applied_path = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row101.HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row101.HLEVEL = null;
									}

								} else {
									row101.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.Name = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.Path = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.DataType = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row101.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row101.Update_Date = null;
									}

								} else {
									row101.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row101.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row101.Import_Date = null;
									}

								} else {
									row101.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row101.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row101.Download_Date = null;
									}

								} else {
									row101.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.PathID = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.visual = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.codeList = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.codeList = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.source = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.source = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 11;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.xml = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 12;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row101.m_applied_path = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row101.m_applied_path = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row101"
						if (row101 != null) {

							/**
							 * [tJavaRow_10 main ] start
							 */

							currentComponent = "tJavaRow_10";

							// Code generated according to input schema and
							// output schema
							context.currentOntRow++;

							if (context.currentOntRow % (context.ontMod) == 0) {
								StatusListener
										.setSubStatus(
												(float) context.currentOntRow
														/ context.ontRows,
												(int) ((float) context.currentOntRow / context.ontRows)
														+ "%");
							}
							row10.HLEVEL = row101.HLEVEL;
							row10.Name = row101.Name;
							row10.Path = row101.Path;
							row10.DataType = row101.DataType;
							row10.Update_Date = row101.Update_Date;
							row10.Import_Date = row101.Import_Date;
							row10.Download_Date = row101.Download_Date;
							row10.PathID = row101.PathID;
							if (row101.visual.equalsIgnoreCase("lae"))
								row101.visual = "LA ";
							else if (row101.visual.equalsIgnoreCase("rae"))
								row101.visual = "RA ";
							else if (row101.visual.equalsIgnoreCase("fae"))
								row101.visual = "FA ";
							else if (row101.visual.equalsIgnoreCase("dae"))
								row101.visual = "DA ";
							row10.visual = row101.visual;
							row10.codeList = row101.codeList;
							row10.source = row101.source;
							row10.xml = row101.xml;
							row10.m_applied_path = row101.m_applied_path;
							row10.dimcode = "";

							if (row101.m_applied_path.equalsIgnoreCase("@")) {
								row10.dimcode = row101.Path.replaceAll("\\\\",
										"|");
								// System.out.println("IF1: " + row10.dimcode);
							} else {
								row10.dimcode = row101.m_applied_path
										.replaceAll("\\\\", "|");
								row10.dimcode = row10.dimcode;// +
																// row101.PathID.replaceAll("\\\\","|");
								// System.out.println("ELSE1: " +
								// row10.dimcode);
							}
							// row10.dimcode = row10.dimcode +
							// row101.PathID.replaceAll("\\\\","|");
							// if
							// (row101.visual.equalsIgnoreCase("la")||row101.visual.equalsIgnoreCase("ra")||row101.visual.equalsIgnoreCase("lae")||row101.visual.equalsIgnoreCase("rae"))
							// row10.dimcode =
							// row10.dimcode+"|"+(row101.Name.length()>10?row101.Name.hashCode():row101.Name);
							// }

							if (row10.dimcode.endsWith("|")) {
								row10.dimcode = row10.dimcode.substring(0,
										row10.dimcode.length() - 1);
								// System.out.println("IF2: " + row10.dimcode);
							}
							if (row10.visual.equalsIgnoreCase("la")
									|| row10.visual.equalsIgnoreCase("ra")
									|| row10.visual.equalsIgnoreCase("la ")
									|| row10.visual.equalsIgnoreCase("ra ")) {
								StringBuilder b = new StringBuilder(
										row10.dimcode);
								b.replace(row10.dimcode.lastIndexOf("|"),
										row10.dimcode.lastIndexOf("|") + 1, ":");
								row10.dimcode = b.toString();
								// System.out.println("IF3: " + row10.dimcode);
							}

							nb_line_tJavaRow_10++;

							tos_count_tJavaRow_10++;

							/**
							 * [tJavaRow_10 main ] stop
							 */

							/**
							 * [tMap_8 main ] start
							 */

							currentComponent = "tMap_8";

							boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_8 = false;
							boolean mainRowRejected_tMap_8 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row17"
							// /////////////////////////////////////////////

							boolean forceLooprow17 = false;

							row17Struct row17ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_8 = false;

								row17HashKey.C_HLEVEL = new BigDecimal(
										row10.HLEVEL);

								row17HashKey.c_fullname = row10.Path;

								row17HashKey.hashCodeDirty = true;

								tHash_Lookup_row17.lookup(row17HashKey);

								if (!tHash_Lookup_row17.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_8 = true;

									forceLooprow17 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow17 = true;
							} // G 21

							row17Struct row17 = null;

							while ((tHash_Lookup_row17 != null && tHash_Lookup_row17
									.hasNext()) || forceLooprow17) { // G_TM_M_043

								// CALL close loop of lookup 'row17'

								row17Struct fromLookup_row17 = null;
								row17 = row17Default;

								if (!forceLooprow17) { // G 46

									fromLookup_row17 = tHash_Lookup_row17
											.next();

									if (fromLookup_row17 != null) {
										row17 = fromLookup_row17;
									}

								} // G 46

								forceLooprow17 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_8__Struct Var = Var__tMap_8;
									Var.var1 = row10.xml.equals("xml");// ###############################
									// ###############################
									// # Output tables

									toCD6 = null;
									copyOfout6 = null;

									if (!rejectedInnerJoin_tMap_8) {

										// # Output table : 'toCD6'
										// # Filter conditions
										if (

										row10.m_applied_path.equals("@")
												&& row10.visual.equals("DHE")

										) {
											toCD6_tmp.CONCEPT_PATH = "\\i2b2\\OBJECTID\\";
											toCD6_tmp.CONCEPT_CD = "IDRT:OBJECTID";
											toCD6_tmp.NAME_CHAR = "OBJECTID";
											toCD6_tmp.CONCEPT_BLOB = null;
											toCD6_tmp.UPDATE_DATE = TalendDate
													.getCurrentDate();
											toCD6_tmp.DOWNLOAD_DATE = null;
											toCD6_tmp.IMPORT_DATE = TalendDate
													.getCurrentDate();
											toCD6_tmp.SOURCESYSTEM_CD = null;
											toCD6_tmp.UPLOAD_ID = null;
											toCD6 = toCD6_tmp;
										} // closing filter/reject
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'copyOfout6'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_8) {
										copyOfout6_tmp.C_HLEVEL = new BigDecimal(
												row10.HLEVEL);
										copyOfout6_tmp.C_FULLNAME = row10.Path;
										copyOfout6_tmp.C_NAME = row10.Name
												.length() > 1900 ? row10.Name
												.replace("&", "and").substring(
														0, 1900) : row10.Name
												.replace("&", "and");
										copyOfout6_tmp.C_SYNONYM_CD = "N";
										copyOfout6_tmp.C_VISUALATTRIBUTES = row10.visual;
										copyOfout6_tmp.C_TOTALNUM = null;
										copyOfout6_tmp.C_BASECODE = row10.dimcode;
										copyOfout6_tmp.C_METADATAXML = Var.var1 ? "<?xml version=\"1.0\"?><ValueMetadata><Version>3.02</Version><CreationDateTime>"
												+ TalendDate
														.getDate("YYYY-MM-DD")
												+ "</CreationDateTime><TestID>U/UTP</TestID><TestName>"
												+ row10.Name
												+ "</TestName><DataType>Integer</DataType><Flagstouse>HL</Flagstouse><Oktousevalues>Y</Oktousevalues><UnitValues><NormalUnits></NormalUnits><EqualUnits>"
												+ row10.Name
												+ "</EqualUnits><ExcludingUnits/><ConvertingUnits><Units/><MultiplyingFactor/></ConvertingUnits></UnitValues><Analysis><Enums /><Counts /><New/></Analysis><i2b2><sourceDataType>durationDateTime</sourceDataType></i2b2></ValueMetadata>"
												: "";
										copyOfout6_tmp.C_FACTTABLECOLUMN = row10.m_applied_path
												.equals("@") ? "concept_cd"
												: "modifier_cd";
										copyOfout6_tmp.C_TABLENAME = row10.m_applied_path
												.equals("@") ? "concept_dimension"
												: "modifier_dimension";
										copyOfout6_tmp.C_COLUMNNAME = row10.m_applied_path
												.equals("@") ? "concept_path"
												: "modifier_path";
										copyOfout6_tmp.C_COLUMNDATATYPE = "T";
										copyOfout6_tmp.C_OPERATOR = "LIKE";
										copyOfout6_tmp.C_DIMCODE = row10.Path;
										copyOfout6_tmp.C_COMMENT = "";
										copyOfout6_tmp.C_TOOLTIP = row10.Name
												.length() > 800 ? row10.Name
												.replace("&", "and").substring(
														0, 800) : row10.Name
												.replace("&", "and");
										copyOfout6_tmp.M_APPLIED_PATH = row10.m_applied_path;
										copyOfout6_tmp.UPDATE_DATE = TalendDate
												.getCurrentDate();
										copyOfout6_tmp.DOWNLOAD_DATE = row10.Download_Date;
										copyOfout6_tmp.IMPORT_DATE = TalendDate
												.getCurrentDate();
										copyOfout6_tmp.SOURCESYSTEM_CD = row10.source;
										copyOfout6_tmp.VALUETYPE_CD = Var.var1 ? "N"
												: "T";
										copyOfout6_tmp.M_EXCLUSION_CD = null;
										copyOfout6_tmp.C_PATH = row10.Path;
										copyOfout6_tmp.C_SYMBOL = null;
										copyOfout6_tmp.secure_obj = context.fileName;
										copyOfout6 = copyOfout6_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_8 = false;

								tos_count_tMap_8++;

								/**
								 * [tMap_8 main ] stop
								 */
								// Start of branch "copyOfout6"
								if (copyOfout6 != null) {

									/**
									 * [tFileOutputDelimited_2 main ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									String[] rowtFileOutputDelimited_2 = new String[26];

									rowtFileOutputDelimited_2[0] = copyOfout6.C_HLEVEL == null ? ""
											: copyOfout6.C_HLEVEL
													.setScale(
															0,
															java.math.RoundingMode.HALF_UP)
													.toPlainString();

									rowtFileOutputDelimited_2[1] = copyOfout6.C_FULLNAME == null ? ""
											: copyOfout6.C_FULLNAME;

									rowtFileOutputDelimited_2[2] = copyOfout6.C_NAME == null ? ""
											: copyOfout6.C_NAME;

									rowtFileOutputDelimited_2[3] = copyOfout6.C_SYNONYM_CD == null ? ""
											: copyOfout6.C_SYNONYM_CD;

									rowtFileOutputDelimited_2[4] = copyOfout6.C_VISUALATTRIBUTES == null ? ""
											: copyOfout6.C_VISUALATTRIBUTES;

									rowtFileOutputDelimited_2[5] = copyOfout6.C_TOTALNUM == null ? ""
											: copyOfout6.C_TOTALNUM
													.setScale(
															0,
															java.math.RoundingMode.HALF_UP)
													.toPlainString();

									rowtFileOutputDelimited_2[6] = copyOfout6.C_BASECODE == null ? ""
											: copyOfout6.C_BASECODE;

									rowtFileOutputDelimited_2[7] = copyOfout6.C_METADATAXML == null ? ""
											: copyOfout6.C_METADATAXML;

									rowtFileOutputDelimited_2[8] = copyOfout6.C_FACTTABLECOLUMN == null ? ""
											: copyOfout6.C_FACTTABLECOLUMN;

									rowtFileOutputDelimited_2[9] = copyOfout6.C_TABLENAME == null ? ""
											: copyOfout6.C_TABLENAME;

									rowtFileOutputDelimited_2[10] = copyOfout6.C_COLUMNNAME == null ? ""
											: copyOfout6.C_COLUMNNAME;

									rowtFileOutputDelimited_2[11] = copyOfout6.C_COLUMNDATATYPE == null ? ""
											: copyOfout6.C_COLUMNDATATYPE;

									rowtFileOutputDelimited_2[12] = copyOfout6.C_OPERATOR == null ? ""
											: copyOfout6.C_OPERATOR;

									rowtFileOutputDelimited_2[13] = copyOfout6.C_DIMCODE == null ? ""
											: copyOfout6.C_DIMCODE;

									rowtFileOutputDelimited_2[14] = copyOfout6.C_COMMENT == null ? ""
											: copyOfout6.C_COMMENT;

									rowtFileOutputDelimited_2[15] = copyOfout6.C_TOOLTIP == null ? ""
											: copyOfout6.C_TOOLTIP;

									rowtFileOutputDelimited_2[16] = copyOfout6.M_APPLIED_PATH == null ? ""
											: copyOfout6.M_APPLIED_PATH;

									rowtFileOutputDelimited_2[17] = copyOfout6.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													copyOfout6.UPDATE_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_2[18] = copyOfout6.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													copyOfout6.DOWNLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_2[19] = copyOfout6.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													copyOfout6.IMPORT_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_2[20] = copyOfout6.SOURCESYSTEM_CD == null ? ""
											: copyOfout6.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_2[21] = copyOfout6.VALUETYPE_CD == null ? ""
											: copyOfout6.VALUETYPE_CD;

									rowtFileOutputDelimited_2[22] = copyOfout6.M_EXCLUSION_CD == null ? ""
											: copyOfout6.M_EXCLUSION_CD;

									rowtFileOutputDelimited_2[23] = copyOfout6.C_PATH == null ? ""
											: copyOfout6.C_PATH;

									rowtFileOutputDelimited_2[24] = copyOfout6.C_SYMBOL == null ? ""
											: copyOfout6.C_SYMBOL;

									rowtFileOutputDelimited_2[25] = copyOfout6.secure_obj == null ? ""
											: copyOfout6.secure_obj;

									nb_line_tFileOutputDelimited_2++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_2",
											nb_line_tFileOutputDelimited_2);
									CsvWritertFileOutputDelimited_2
											.writeNext(rowtFileOutputDelimited_2);

									tos_count_tFileOutputDelimited_2++;

									/**
									 * [tFileOutputDelimited_2 main ] stop
									 */

								} // End of branch "copyOfout6"

								// Start of branch "toCD6"
								if (toCD6 != null) {

									/**
									 * [tFileOutputDelimited_25 main ] start
									 */

									currentComponent = "tFileOutputDelimited_25";

									StringBuilder sb_tFileOutputDelimited_25 = new StringBuilder();

									if (toCD6.CONCEPT_PATH != null) {

										sb_tFileOutputDelimited_25.append(

										toCD6.CONCEPT_PATH

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.CONCEPT_CD != null) {

										sb_tFileOutputDelimited_25.append(

										toCD6.CONCEPT_CD

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.NAME_CHAR != null) {

										sb_tFileOutputDelimited_25.append(

										toCD6.NAME_CHAR

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.CONCEPT_BLOB != null) {

										sb_tFileOutputDelimited_25.append(

										toCD6.CONCEPT_BLOB

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.UPDATE_DATE != null) {

										sb_tFileOutputDelimited_25.append(

										FormatterUtils
												.format_Date(toCD6.UPDATE_DATE,
														"yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.DOWNLOAD_DATE != null) {

										sb_tFileOutputDelimited_25.append(

										FormatterUtils.format_Date(
												toCD6.DOWNLOAD_DATE,
												"yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.IMPORT_DATE != null) {

										sb_tFileOutputDelimited_25.append(

										FormatterUtils
												.format_Date(toCD6.IMPORT_DATE,
														"yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.SOURCESYSTEM_CD != null) {

										sb_tFileOutputDelimited_25.append(

										toCD6.SOURCESYSTEM_CD

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_tFileOutputDelimited_25);

									if (toCD6.UPLOAD_ID != null) {

										sb_tFileOutputDelimited_25.append(

										toCD6.UPLOAD_ID

										);

									}

									sb_tFileOutputDelimited_25
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_25);

									nb_line_tFileOutputDelimited_25++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_25",
											nb_line_tFileOutputDelimited_25);

									outtFileOutputDelimited_25
											.write(sb_tFileOutputDelimited_25
													.toString());

									tos_count_tFileOutputDelimited_25++;

									/**
									 * [tFileOutputDelimited_25 main ] stop
									 */

								} // End of branch "toCD6"

							} // close loop of lookup 'row17' // G_TM_M_043

						} // End of branch "row101"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}

				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tJavaRow_10 end ] start
				 */

				currentComponent = "tJavaRow_10";

				globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

				ok_Hash.put("tJavaRow_10", true);
				end_Hash.put("tJavaRow_10", System.currentTimeMillis());

				/**
				 * [tJavaRow_10 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row17 != null) {
					tHash_Lookup_row17.endGet();
				}
				globalMap.remove("tHash_Lookup_row17");

				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (CsvWritertFileOutputDelimited_2 != null) {
					CsvWritertFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_25 end ] start
				 */

				currentComponent = "tFileOutputDelimited_25";

				if (outtFileOutputDelimited_25 != null) {
					outtFileOutputDelimited_25.flush();
					outtFileOutputDelimited_25.close();
				}

				globalMap.put("tFileOutputDelimited_25_NB_LINE",
						nb_line_tFileOutputDelimited_25);
				globalMap.put("tFileOutputDelimited_25_FILE_NAME",
						fileName_tFileOutputDelimited_25);

				resourceMap.put("finish_tFileOutputDelimited_25", true);

				ok_Hash.put("tFileOutputDelimited_25", true);
				end_Hash.put("tFileOutputDelimited_25",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_25 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row17");

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tJavaRow_10 finally ] start
				 */

				currentComponent = "tJavaRow_10";

				/**
				 * [tJavaRow_10 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_2");

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_25 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_25";

				if (resourceMap.get("finish_tFileOutputDelimited_25") == null) {

					java.io.Writer outtFileOutputDelimited_25 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_25");
					if (outtFileOutputDelimited_25 != null) {
						outtFileOutputDelimited_25.flush();
						outtFileOutputDelimited_25.close();
					}

				}

				/**
				 * [tFileOutputDelimited_25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_obsStruct implements
			routines.system.IPersistableRow<copyOfto_obsStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_obsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SICtoOBS2Struct implements
			routines.system.IPersistableRow<SICtoOBS2Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SICtoOBS2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public Integer SubjectKey;

		public Integer getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readInteger(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// Integer

				writeInteger(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + String.valueOf(SubjectKey));
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out12Struct implements
			routines.system.IPersistableRow<out12Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out9Struct implements
			routines.system.IPersistableRow<out9Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_patDimStruct implements
			routines.system.IPersistableRow<to_patDimStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_patDimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class gdStruct implements
			routines.system.IPersistableRow<gdStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(gdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public Integer PATIENT_NUM;

		public Integer getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = readInteger(dis);

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// Integer

				writeInteger(this.PATIENT_NUM, dos);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdStruct implements
			routines.system.IPersistableRow<asdStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public Integer PATIENT_NUM;

		public Integer getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = readInteger(dis);

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// Integer

				writeInteger(this.PATIENT_NUM, dos);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class iut1Struct implements
			routines.system.IPersistableRow<iut1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(iut1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row61Struct implements
			routines.system.IPersistableRow<row61Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row61Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toPatDimMapStruct implements
			routines.system.IPersistableRow<toPatDimMapStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toPatDimMapStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.SubjectKey = readString(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.FormRepeatKey = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SubjectKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SubjectKey=" + SubjectKey);
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row222Struct implements
			routines.system.IPersistableRow<row222Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.SubjectKey = readString(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.FormRepeatKey = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SubjectKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SubjectKey=" + SubjectKey);
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row222Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out7Struct implements
			routines.system.IPersistableRow<out7Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.SubjectKey = readString(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.FormRepeatKey = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SubjectKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SubjectKey=" + SubjectKey);
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out4Struct implements
			routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class subjKey_GT_0Struct implements
			routines.system.IPersistableRow<subjKey_GT_0Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(subjKey_GT_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noSubjKeyStruct implements
			routines.system.IPersistableRow<noSubjKeyStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noSubjKeyStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toCDStruct implements
			routines.system.IPersistableRow<toCDStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toCDStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toMDStruct implements
			routines.system.IPersistableRow<toMDStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toMDStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class patientDataStruct implements
			routines.system.IPersistableRow<patientDataStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(patientDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String endDate;

		public String getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readString(dis);

					this.endDate = readString(dis);

					this.source = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + startDate);
			sb.append(",endDate=" + endDate);
			sb.append(",source=" + source);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String endDate;

		public String getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readString(dis);

					this.endDate = readString(dis);

					this.source = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + startDate);
			sb.append(",endDate=" + endDate);
			sb.append(",source=" + source);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_13Process(globalMap);
				tFileInputDelimited_11Process(globalMap);
				tFileInputDelimited_20Process(globalMap);
				tFileInputDelimited_24Process(globalMap);

				row15Struct row15 = new row15Struct();
				patientDataStruct patientData = new patientDataStruct();
				toCDStruct toCD = new toCDStruct();
				toMDStruct toMD = new toMDStruct();
				out2Struct out2 = new out2Struct();
				subjKey_GT_0Struct subjKey_GT_0 = new subjKey_GT_0Struct();
				out7Struct out7 = new out7Struct();
				row222Struct row222 = new row222Struct();
				row2Struct row2 = new row2Struct();
				row61Struct row61 = new row61Struct();
				row6Struct row6 = new row6Struct();
				row9Struct row9 = new row9Struct();
				iut1Struct iut1 = new iut1Struct();
				asdStruct asd = new asdStruct();
				row37Struct row37 = new row37Struct();
				toPatDimMapStruct toPatDimMap = new toPatDimMapStruct();
				gdStruct gd = new gdStruct();
				row4Struct row4 = new row4Struct();
				row3Struct row3 = new row3Struct();
				out9Struct out9 = new out9Struct();
				to_patDimStruct to_patDim = new to_patDimStruct();
				out4Struct out4 = new out4Struct();
				noSubjKeyStruct noSubjKey = new noSubjKeyStruct();
				out3Struct out3 = new out3Struct();
				row5Struct row5 = new row5Struct();
				copyOfto_obsStruct copyOfto_obs = new copyOfto_obsStruct();
				SICtoOBS2Struct SICtoOBS2 = new SICtoOBS2Struct();
				out12Struct out12 = new out12Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "concept_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}

				String[] headColutFileOutputDelimited_1 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {

						dir_tFileOutputDelimited_1.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_1,
												true), context.coding)));
				CsvWritertFileOutputDelimited_1
						.setSeparator(csvSettings_tFileOutputDelimited_1
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_1
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_1.getRowDelim());
				}

				if (filetFileOutputDelimited_1.length() == 0) {

					headColutFileOutputDelimited_1[0] = "CONCEPT_PATH";

					headColutFileOutputDelimited_1[1] = "CONCEPT_CD";

					headColutFileOutputDelimited_1[2] = "NAME_CHAR";

					headColutFileOutputDelimited_1[3] = "CONCEPT_BLOB";

					headColutFileOutputDelimited_1[4] = "UPDATE_DATE";

					headColutFileOutputDelimited_1[5] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_1[6] = "IMPORT_DATE";

					headColutFileOutputDelimited_1[7] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_1[8] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_1
							.writeNext(headColutFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1.flush();

				}

				CsvWritertFileOutputDelimited_1
						.setEscapeChar(csvSettings_tFileOutputDelimited_1
								.getEscapeChar());
				CsvWritertFileOutputDelimited_1
						.setQuoteChar(csvSettings_tFileOutputDelimited_1
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_1
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1",
						CsvWritertFileOutputDelimited_1);

				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_13", false);
				start_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_13";

				int tos_count_tFileOutputDelimited_13 = 0;

				String fileName_tFileOutputDelimited_13 = "";
				fileName_tFileOutputDelimited_13 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "modifier_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_13 = null;
				String extension_tFileOutputDelimited_13 = null;
				String directory_tFileOutputDelimited_13 = null;
				if ((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
							.substring(0, fileName_tFileOutputDelimited_13
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					}
					directory_tFileOutputDelimited_13 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_13 = true;
				java.io.File filetFileOutputDelimited_13 = new java.io.File(
						fileName_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME",
						fileName_tFileOutputDelimited_13);

				String[] headColutFileOutputDelimited_13 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_13 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_13[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_13 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_13[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_13[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_13 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_13[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_13[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_13 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_13[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_13 = 0;
				int splitEvery_tFileOutputDelimited_13 = 1000;
				int splitedFileNo_tFileOutputDelimited_13 = 0;
				int currentRow_tFileOutputDelimited_13 = 0;

				CSVBasicSet_tFileOutputDelimited_13 csvSettings_tFileOutputDelimited_13 = new CSVBasicSet_tFileOutputDelimited_13();
				csvSettings_tFileOutputDelimited_13.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_13.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_13.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_13 != null
						&& directory_tFileOutputDelimited_13.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_13 = new java.io.File(
							directory_tFileOutputDelimited_13);
					if (!dir_tFileOutputDelimited_13.exists()) {

						dir_tFileOutputDelimited_13.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = null;

				java.io.File fileToDelete_tFileOutputDelimited_13 = new java.io.File(
						fileName_tFileOutputDelimited_13);
				if (fileToDelete_tFileOutputDelimited_13.exists()) {
					fileToDelete_tFileOutputDelimited_13.delete();
				}

				CsvWritertFileOutputDelimited_13 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_13,
												false), context.coding)));
				CsvWritertFileOutputDelimited_13
						.setSeparator(csvSettings_tFileOutputDelimited_13
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_13
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_13.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_13.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_13
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_13
											.getRowDelim());
				}

				if (filetFileOutputDelimited_13.length() == 0) {

					headColutFileOutputDelimited_13[0] = "MODIFIER_PATH";

					headColutFileOutputDelimited_13[1] = "MODIFIER_CD";

					headColutFileOutputDelimited_13[2] = "NAME_CHAR";

					headColutFileOutputDelimited_13[3] = "MODIFIER_BLOB";

					headColutFileOutputDelimited_13[4] = "UPDATE_DATE";

					headColutFileOutputDelimited_13[5] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_13[6] = "IMPORT_DATE";

					headColutFileOutputDelimited_13[7] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_13[8] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_13
							.writeNext(headColutFileOutputDelimited_13);
					CsvWritertFileOutputDelimited_13.flush();

				}

				CsvWritertFileOutputDelimited_13
						.setEscapeChar(csvSettings_tFileOutputDelimited_13
								.getEscapeChar());
				CsvWritertFileOutputDelimited_13
						.setQuoteChar(csvSettings_tFileOutputDelimited_13
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_13
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_13",
						CsvWritertFileOutputDelimited_13);

				resourceMap.put("nb_line_tFileOutputDelimited_13",
						nb_line_tFileOutputDelimited_13);

				/**
				 * [tFileOutputDelimited_13 begin ] stop
				 */

				/**
				 * [tUniqRow_2_UniqOut begin ] start
				 */

				ok_Hash.put("tUniqRow_2_UniqOut", false);
				start_Hash
						.put("tUniqRow_2_UniqOut", System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_2";

				currentComponent = "tUniqRow_2_UniqOut";

				int tos_count_tUniqRow_2_UniqOut = 0;

				// ////////////////////////
				int nb_tUniqRow_2 = 0;

				int bufferSize_tUniqRow_2 = 2000000;

				class rowStruct_tUniqRow_2 extends out7Struct {

					int id_tUniqRow_2;

					@Override
					public void readData(ObjectInputStream dis) {
						super.readData(dis);
						try {
							this.id_tUniqRow_2 = dis.readInt();
						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					@Override
					public String toString() {
						return "{" + super.toString() + "\t" + id_tUniqRow_2
								+ "}";
					}

					@Override
					public void writeData(ObjectOutputStream dos) {
						super.writeData(dos);
						try {
							// Integer
							dos.writeInt(this.id_tUniqRow_2);

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean duplicateTo(rowStruct_tUniqRow_2 other) {

						if (this.SubjectKey == null) {
							if (other.SubjectKey != null) {
								return false;
							}
						} else {
							if (other.SubjectKey == null) {
								return false;
							} else {
								if (!this.SubjectKey
										.equalsIgnoreCase(other.SubjectKey)) {
									return false;
								}
							}
						}

						if (this.itemGroupRepeatKey == null) {
							if (other.itemGroupRepeatKey != null) {
								return false;
							}
						} else {
							if (other.itemGroupRepeatKey == null) {
								return false;
							} else {
								if (!this.itemGroupRepeatKey
										.equals(other.itemGroupRepeatKey)) {
									return false;
								}
							}
						}

						if (this.StudyEventRepeatKey == null) {
							if (other.StudyEventRepeatKey != null) {
								return false;
							}
						} else {
							if (other.StudyEventRepeatKey == null) {
								return false;
							} else {
								if (!this.StudyEventRepeatKey
										.equals(other.StudyEventRepeatKey)) {
									return false;
								}
							}
						}

						return true;
					}

				}

				// comparator for first sort
				class Comparator_1_tUniqRow_2 implements
						Comparator<rowStruct_tUniqRow_2> {

					public int compare(rowStruct_tUniqRow_2 arg0,
							rowStruct_tUniqRow_2 arg1) {
						int compare = 0;
						if (arg0.SubjectKey == null) {
							if (arg1.SubjectKey != null) {
								return -1;
							}
						} else {
							if (arg1.SubjectKey == null) {
								return 1;
							} else {
								compare = arg0.SubjectKey
										.compareToIgnoreCase(arg1.SubjectKey);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.itemGroupRepeatKey == null) {
							if (arg1.itemGroupRepeatKey != null) {
								return -1;
							}
						} else {
							if (arg1.itemGroupRepeatKey == null) {
								return 1;
							} else {
								compare = arg0.itemGroupRepeatKey
										.compareTo(arg1.itemGroupRepeatKey);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.StudyEventRepeatKey == null) {
							if (arg1.StudyEventRepeatKey != null) {
								return -1;
							}
						} else {
							if (arg1.StudyEventRepeatKey == null) {
								return 1;
							} else {
								compare = arg0.StudyEventRepeatKey
										.compareTo(arg1.StudyEventRepeatKey);
								if (compare != 0) {
									return compare;
								}
							}
						}

						return arg0.id_tUniqRow_2 - arg1.id_tUniqRow_2;
					}

				}

				int bufferSize_1_tUniqRow_2 = bufferSize_tUniqRow_2;

				rowStruct_tUniqRow_2[] buffer_1_tUniqRow_2 = new rowStruct_tUniqRow_2[bufferSize_1_tUniqRow_2];

				for (int i_tUniqRow_2 = 0; i_tUniqRow_2 < buffer_1_tUniqRow_2.length; i_tUniqRow_2++) {
					buffer_1_tUniqRow_2[i_tUniqRow_2] = new rowStruct_tUniqRow_2();
				}

				int rowsInBuffer_1_tUniqRow_2 = 0;

				Comparator<rowStruct_tUniqRow_2> comparator_1_tUniqRow_2 = new Comparator_1_tUniqRow_2();

				java.util.ArrayList<java.io.File> files_1_tUniqRow_2 = new java.util.ArrayList<java.io.File>();

				String workDirectory_tUniqRow_2 = context.folderMain
						+ context.folderTmp;

				/**
				 * [tUniqRow_2_UniqOut begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_11", false);
				start_Hash.put("tFileOutputDelimited_11",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_11";

				int tos_count_tFileOutputDelimited_11 = 0;

				String fileName_tFileOutputDelimited_11 = "";
				fileName_tFileOutputDelimited_11 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_11 = null;
				String extension_tFileOutputDelimited_11 = null;
				String directory_tFileOutputDelimited_11 = null;
				if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") < fileName_tFileOutputDelimited_11
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(0, fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
							.substring(0, fileName_tFileOutputDelimited_11
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(0, fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					}
					directory_tFileOutputDelimited_11 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_11 = true;
				java.io.File filetFileOutputDelimited_11 = new java.io.File(
						fileName_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME",
						fileName_tFileOutputDelimited_11);

				String[] headColutFileOutputDelimited_11 = new String[21];
				class CSVBasicSet_tFileOutputDelimited_11 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_11[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_11 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_11[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_11[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_11 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_11[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_11[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_11 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_11[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_11 = 0;
				int splitEvery_tFileOutputDelimited_11 = 1000;
				int splitedFileNo_tFileOutputDelimited_11 = 0;
				int currentRow_tFileOutputDelimited_11 = 0;

				CSVBasicSet_tFileOutputDelimited_11 csvSettings_tFileOutputDelimited_11 = new CSVBasicSet_tFileOutputDelimited_11();
				csvSettings_tFileOutputDelimited_11.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_11.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_11.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_11 != null
						&& directory_tFileOutputDelimited_11.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_11 = new java.io.File(
							directory_tFileOutputDelimited_11);
					if (!dir_tFileOutputDelimited_11.exists()) {

						dir_tFileOutputDelimited_11.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_11 = null;

				java.io.File fileToDelete_tFileOutputDelimited_11 = new java.io.File(
						fileName_tFileOutputDelimited_11);
				if (fileToDelete_tFileOutputDelimited_11.exists()) {
					fileToDelete_tFileOutputDelimited_11.delete();
				}

				CsvWritertFileOutputDelimited_11 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_11,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_11
						.setSeparator(csvSettings_tFileOutputDelimited_11
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_11
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_11.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_11.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_11
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_11
											.getRowDelim());
				}

				CsvWritertFileOutputDelimited_11
						.setEscapeChar(csvSettings_tFileOutputDelimited_11
								.getEscapeChar());
				CsvWritertFileOutputDelimited_11
						.setQuoteChar(csvSettings_tFileOutputDelimited_11
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_11
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_11",
						CsvWritertFileOutputDelimited_11);

				resourceMap.put("nb_line_tFileOutputDelimited_11",
						nb_line_tFileOutputDelimited_11);

				/**
				 * [tFileOutputDelimited_11 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out7Struct out7_tmp = new out7Struct();
				out4Struct out4_tmp = new out4Struct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_14", false);
				start_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_14";

				int tos_count_tFileOutputDelimited_14 = 0;

				String fileName_tFileOutputDelimited_14 = "";
				fileName_tFileOutputDelimited_14 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "patient_data.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_14 = null;
				String extension_tFileOutputDelimited_14 = null;
				String directory_tFileOutputDelimited_14 = null;
				if ((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
							.substring(0, fileName_tFileOutputDelimited_14
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					}
					directory_tFileOutputDelimited_14 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_14 = true;
				java.io.File filetFileOutputDelimited_14 = new java.io.File(
						fileName_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME",
						fileName_tFileOutputDelimited_14);

				int nb_line_tFileOutputDelimited_14 = 0;
				int splitEvery_tFileOutputDelimited_14 = 1000;
				int splitedFileNo_tFileOutputDelimited_14 = 0;
				int currentRow_tFileOutputDelimited_14 = 0;

				final String OUT_DELIM_tFileOutputDelimited_14 = /**
				 * Start field
				 * tFileOutputDelimited_14:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_14:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_14 = /**
				 * Start
				 * field tFileOutputDelimited_14:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_14:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_14 != null
						&& directory_tFileOutputDelimited_14.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_14 = new java.io.File(
							directory_tFileOutputDelimited_14);
					if (!dir_tFileOutputDelimited_14.exists()) {

						dir_tFileOutputDelimited_14.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_14 = null;

				java.io.File fileToDelete_tFileOutputDelimited_14 = new java.io.File(
						fileName_tFileOutputDelimited_14);
				if (fileToDelete_tFileOutputDelimited_14.exists()) {
					fileToDelete_tFileOutputDelimited_14.delete();
				}

				outtFileOutputDelimited_14 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_14, false),
								context.coding));

				if (filetFileOutputDelimited_14.length() == 0) {

					outtFileOutputDelimited_14.write("ENCOUNTER_NUM");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("PATIENT_NUM");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("CONCEPT_CD");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("PROVIDER_ID");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("START_DATE");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("MODIFIER_CD");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("INSTANCE_NUM");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("VALTYPE_CD");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("TVAL_CHAR");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("NVAL_NUM");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("VALUEFLAG_CD");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("QUANTITY_NUM");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("UNITS_CD");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("END_DATE");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("LOCATION_CD");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("OBSERVATION_BLOB");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("CONFIDENCE_NUM");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("UPDATE_DATE");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("DOWNLOAD_DATE");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("IMPORT_DATE");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("SOURCESYSTEM_CD");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_tFileOutputDelimited_14);

					outtFileOutputDelimited_14.write("UPLOAD_ID");

					outtFileOutputDelimited_14
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_14",
						outtFileOutputDelimited_14);

				resourceMap.put("nb_line_tFileOutputDelimited_14",
						nb_line_tFileOutputDelimited_14);

				/**
				 * [tFileOutputDelimited_14 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_21 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_21", false);
				start_Hash.put("tFileOutputDelimited_21",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_21";

				int tos_count_tFileOutputDelimited_21 = 0;

				String fileName_tFileOutputDelimited_21 = "";
				fileName_tFileOutputDelimited_21 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_7_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_21 = null;
				String extension_tFileOutputDelimited_21 = null;
				String directory_tFileOutputDelimited_21 = null;
				if ((fileName_tFileOutputDelimited_21.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_21.lastIndexOf(".") < fileName_tFileOutputDelimited_21
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
						extension_tFileOutputDelimited_21 = "";
					} else {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(0, fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
						extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
							.substring(0, fileName_tFileOutputDelimited_21
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_21.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(0, fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
						extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
						extension_tFileOutputDelimited_21 = "";
					}
					directory_tFileOutputDelimited_21 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_21 = true;
				java.io.File filetFileOutputDelimited_21 = new java.io.File(
						fileName_tFileOutputDelimited_21);
				globalMap.put("tFileOutputDelimited_21_FILE_NAME",
						fileName_tFileOutputDelimited_21);

				int nb_line_tFileOutputDelimited_21 = 0;
				int splitEvery_tFileOutputDelimited_21 = 1000;
				int splitedFileNo_tFileOutputDelimited_21 = 0;
				int currentRow_tFileOutputDelimited_21 = 0;

				final String OUT_DELIM_tFileOutputDelimited_21 = /**
				 * Start field
				 * tFileOutputDelimited_21:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_21:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_21 = /**
				 * Start
				 * field tFileOutputDelimited_21:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_21:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_21 != null
						&& directory_tFileOutputDelimited_21.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_21 = new java.io.File(
							directory_tFileOutputDelimited_21);
					if (!dir_tFileOutputDelimited_21.exists()) {

						dir_tFileOutputDelimited_21.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_21 = null;

				java.io.File fileToDelete_tFileOutputDelimited_21 = new java.io.File(
						fileName_tFileOutputDelimited_21);
				if (fileToDelete_tFileOutputDelimited_21.exists()) {
					fileToDelete_tFileOutputDelimited_21.delete();
				}

				outtFileOutputDelimited_21 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_21, false),
								context.coding));

				resourceMap.put("out_tFileOutputDelimited_21",
						outtFileOutputDelimited_21);

				resourceMap.put("nb_line_tFileOutputDelimited_21",
						nb_line_tFileOutputDelimited_21);

				/**
				 * [tFileOutputDelimited_21 begin ] stop
				 */

				/**
				 * [tMap_22 begin ] start
				 */

				ok_Hash.put("tMap_22", false);
				start_Hash.put("tMap_22", System.currentTimeMillis());

				currentComponent = "tMap_22";

				int tos_count_tMap_22 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) globalMap
						.get("tHash_Lookup_row31"));

				row31Struct row31HashKey = new row31Struct();
				row31Struct row31Default = new row31Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_22__Struct {
					boolean var2;
				}
				Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfto_obsStruct copyOfto_obs_tmp = new copyOfto_obsStruct();
				SICtoOBS2Struct SICtoOBS2_tmp = new SICtoOBS2Struct();
				// ###############################

				List<copyOfto_obsStruct> copyOfto_obs_List = new java.util.ArrayList<copyOfto_obsStruct>();

				/**
				 * [tMap_22 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row5Struct row5_tmp = new row5Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tUniqRow_7_UniqOut begin ] start
				 */

				ok_Hash.put("tUniqRow_7_UniqOut", false);
				start_Hash
						.put("tUniqRow_7_UniqOut", System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_7";

				currentComponent = "tUniqRow_7_UniqOut";

				int tos_count_tUniqRow_7_UniqOut = 0;

				// ////////////////////////
				int nb_tUniqRow_7 = 0;

				int bufferSize_tUniqRow_7 = 1000000;

				class rowStruct_tUniqRow_7 extends out12Struct {

					int id_tUniqRow_7;

					@Override
					public void readData(ObjectInputStream dis) {
						super.readData(dis);
						try {
							this.id_tUniqRow_7 = dis.readInt();
						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					@Override
					public String toString() {
						return "{" + super.toString() + "\t" + id_tUniqRow_7
								+ "}";
					}

					@Override
					public void writeData(ObjectOutputStream dos) {
						super.writeData(dos);
						try {
							// Integer
							dos.writeInt(this.id_tUniqRow_7);

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean duplicateTo(rowStruct_tUniqRow_7 other) {

						if (this.StudyEventRepeatKey == null) {
							if (other.StudyEventRepeatKey != null) {
								return false;
							}
						} else {
							if (other.StudyEventRepeatKey == null) {
								return false;
							} else {
								if (!this.StudyEventRepeatKey
										.equals(other.StudyEventRepeatKey)) {
									return false;
								}
							}
						}

						return true;
					}

				}

				// comparator for first sort
				class Comparator_1_tUniqRow_7 implements
						Comparator<rowStruct_tUniqRow_7> {

					public int compare(rowStruct_tUniqRow_7 arg0,
							rowStruct_tUniqRow_7 arg1) {
						int compare = 0;
						if (arg0.StudyEventRepeatKey == null) {
							if (arg1.StudyEventRepeatKey != null) {
								return -1;
							}
						} else {
							if (arg1.StudyEventRepeatKey == null) {
								return 1;
							} else {
								compare = arg0.StudyEventRepeatKey
										.compareTo(arg1.StudyEventRepeatKey);
								if (compare != 0) {
									return compare;
								}
							}
						}

						return arg0.id_tUniqRow_7 - arg1.id_tUniqRow_7;
					}

				}

				int bufferSize_1_tUniqRow_7 = bufferSize_tUniqRow_7;

				rowStruct_tUniqRow_7[] buffer_1_tUniqRow_7 = new rowStruct_tUniqRow_7[bufferSize_1_tUniqRow_7];

				for (int i_tUniqRow_7 = 0; i_tUniqRow_7 < buffer_1_tUniqRow_7.length; i_tUniqRow_7++) {
					buffer_1_tUniqRow_7[i_tUniqRow_7] = new rowStruct_tUniqRow_7();
				}

				int rowsInBuffer_1_tUniqRow_7 = 0;

				Comparator<rowStruct_tUniqRow_7> comparator_1_tUniqRow_7 = new Comparator_1_tUniqRow_7();

				java.util.ArrayList<java.io.File> files_1_tUniqRow_7 = new java.util.ArrayList<java.io.File>();

				String workDirectory_tUniqRow_7 = context.folderMain
						+ context.folderTmp;

				/**
				 * [tUniqRow_7_UniqOut begin ] stop
				 */

				/**
				 * [tMap_16 begin ] start
				 */

				ok_Hash.put("tMap_16", false);
				start_Hash.put("tMap_16", System.currentTimeMillis());

				currentComponent = "tMap_16";

				int tos_count_tMap_16 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_encStruct> tHash_Lookup_from_enc = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_encStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_encStruct>) globalMap
						.get("tHash_Lookup_from_enc"));

				from_encStruct from_encHashKey = new from_encStruct();
				from_encStruct from_encDefault = new from_encStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_16__Struct {
				}
				Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out3Struct out3_tmp = new out3Struct();
				out12Struct out12_tmp = new out12Struct();
				// ###############################

				/**
				 * [tMap_16 begin ] stop
				 */

				/**
				 * [tMap_17 begin ] start
				 */

				ok_Hash.put("tMap_17", false);
				start_Hash.put("tMap_17", System.currentTimeMillis());

				currentComponent = "tMap_17";

				int tos_count_tMap_17 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_17__Struct {
				}
				Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				subjKey_GT_0Struct subjKey_GT_0_tmp = new subjKey_GT_0Struct();
				noSubjKeyStruct noSubjKey_tmp = new noSubjKeyStruct();
				// ###############################

				/**
				 * [tMap_17 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				toCDStruct toCD_tmp = new toCDStruct();
				toMDStruct toMD_tmp = new toMDStruct();
				out2Struct out2_tmp = new out2Struct();
				// ###############################

				List<toCDStruct> toCD_List = new java.util.ArrayList<toCDStruct>();

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.folderMain + context.folderOutput + "data.csv"/**
				 * End
				 * field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row15 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row15 = new row15Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row15.itemID = null;

								row15.Value = null;

								row15.VisitID = null;

								row15.FormID = null;

								row15.SubjectKey = null;

								row15.Path = null;

								row15.PathID = null;

								row15.DataType = null;

								row15.Update_Date = null;

								row15.Import_Date = null;

								row15.Download_Date = null;

								row15.StudyEventRepeatKey = null;

								row15.FormRepeatKey = null;

								row15.itemGroupRepeatKey = null;

								row15.startDate = null;

								row15.endDate = null;

								row15.source = null;

								row15.sic = null;

								row15.m_applied_path = null;

								row15.mod_path = null;

								row15.mod_item = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.itemID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.itemID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.Value = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.Value = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.VisitID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.VisitID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.FormID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.FormID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.SubjectKey = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.SubjectKey = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.Path = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.PathID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.DataType = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.Update_Date = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.Import_Date = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.Download_Date = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row15.StudyEventRepeatKey = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row15.StudyEventRepeatKey = null;
									}

								} else {
									row15.StudyEventRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row15.FormRepeatKey = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row15.FormRepeatKey = null;
									}

								} else {
									row15.FormRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row15.itemGroupRepeatKey = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row15.itemGroupRepeatKey = null;
									}

								} else {
									row15.itemGroupRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.startDate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.startDate = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.endDate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.endDate = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.source = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.source = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.sic = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.sic = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.m_applied_path = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.m_applied_path = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.mod_path = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.mod_path = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row15.mod_item = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row15.mod_item = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tJavaRow_5 main ] start
							 */

							currentComponent = "tJavaRow_5";

							// Code generated according to input schema and
							// output schema

							patientData.FormRepeatKey = row15.FormRepeatKey;
							context.currentDataRow++;
							if (context.currentDataRow % (context.dataMod) == 0) {

								StatusListener.setSubStatus(
										(float) context.currentDataRow
												/ context.dataRows * 100,
										(int) ((float) context.currentDataRow
												/ context.dataRows * 100)
												+ "%");
							}
							patientData.itemID = row15.itemID;
							if (row15.Value.length() > 200) {
								patientData.Value = row15.Value.substring(0,
										199);
								StatusListener
										.addError(
												"String Value too long for observation_fact.tval_char",
												row15.Value);
								// StatusListener.addLog(row15.Value, "");
							} else
								patientData.Value = row15.Value;
							patientData.VisitID = row15.VisitID;
							patientData.FormID = row15.FormID;
							patientData.SubjectKey = row15.SubjectKey;
							patientData.Path = row15.Path;
							patientData.PathID = row15.PathID;
							patientData.DataType = row15.DataType;
							if (!row15.Update_Date.equals(""))
								patientData.Update_Date = TalendDate.parseDate(
										"yyyy-MM-dd", row15.Update_Date);
							else
								patientData.Update_Date = null;

							if (!row15.Import_Date.equals(""))
								patientData.Import_Date = TalendDate.parseDate(
										"yyyy-MM-dd", row15.Import_Date);
							else
								patientData.Import_Date = null;

							if (!row15.Download_Date.equals(""))
								patientData.Download_Date = TalendDate
										.parseDate("yyyy-MM-dd",
												row15.Download_Date);
							else
								patientData.Download_Date = null;

							patientData.StudyEventRepeatKey = row15.StudyEventRepeatKey;
							if (row15.itemGroupRepeatKey != null)
								patientData.itemGroupRepeatKey = row15.itemGroupRepeatKey;
							else
								patientData.itemGroupRepeatKey = 0;

							if (!row15.startDate.equals("")) {
								if (row15.startDate.toLowerCase().contains("t")) {
									row15.startDate = row15.startDate
											.substring(0, row15.startDate
													.toLowerCase().indexOf("t"));
								} else if (row15.startDate.length() == 7) {
									patientData.startDate = TalendDate
											.parseDate("yyyy-MM",
													row15.startDate);
								} else if (row15.startDate.length() == 4) {
									patientData.startDate = TalendDate
											.parseDate("yyyy", row15.startDate);
								} else
									patientData.startDate = TalendDate
											.parseDate("yyyy-MM-dd",
													row15.startDate);
							} else
								patientData.startDate = null;

							if (!row15.endDate.equals("")) {
								if (row15.endDate.toLowerCase().contains("t")) {
									row15.endDate = row15.endDate.substring(0,
											row15.endDate.indexOf("t"));
								}
								patientData.endDate = TalendDate.parseDate(
										"yyyy-MM-dd", row15.endDate);
							} else
								patientData.endDate = null;

							patientData.source = row15.source;

							if (row15.m_applied_path.equalsIgnoreCase("@")) {
								String tmp0 = row15.Path
										.replaceAll("\\\\", "|");
								String tmp1 = tmp0.substring(0,
										tmp0.lastIndexOf("|"));
								String tmp2 = tmp1.substring(
										tmp1.lastIndexOf("|") + 1,
										tmp1.length());
								String tmp3 = tmp1.substring(0,
										tmp1.lastIndexOf("|"));
								// tmp3= tmp3.substring(6);
								patientData.CONCEPT_CD = tmp3 + ":" + tmp2;
								patientData.MODIFIER_CD = "@";
							} else {
								String tmp0 = row15.m_applied_path.replaceAll(
										"\\\\", "|");
								String tmp1 = tmp0.substring(0,
										tmp0.lastIndexOf("|"));
								String tmp2 = tmp1.substring(
										tmp1.lastIndexOf("|") + 1,
										tmp1.length());
								String tmp3 = tmp1.substring(0,
										tmp1.lastIndexOf("|"));
								// tmp3= tmp3.substring(6);

								String tmp11 = row15.mod_path.replaceAll(
										"\\\\", "|");
								if (tmp11.endsWith("|"))
									tmp11 = tmp11.substring(0,
											tmp11.length() - 1);
								tmp1 = tmp0.substring(0, tmp0.lastIndexOf("|"));
								patientData.CONCEPT_CD = tmp0;
								patientData.MODIFIER_CD = tmp1
										+ tmp11
										+ ":"
										+ (row15.mod_item.length() > 10 ? row15.mod_item
												.hashCode() : row15.mod_item);
							}

							// System.out.println("patientData.MODIFIER_CD: " +
							// patientData.MODIFIER_CD);
							patientData.sic = row15.sic;
							patientData.m_applied_path = row15.m_applied_path;

							nb_line_tJavaRow_5++;

							tos_count_tJavaRow_5++;

							/**
							 * [tJavaRow_5 main ] stop
							 */

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								toCD = null;
								toCD_List.clear();
								toMD = null;
								out2 = null;

								// # Output table : 'toCD'
								// # Filter conditions
								if (

								patientData.m_applied_path.equals("@")

								) {
									toCD_tmp.CONCEPT_PATH = patientData.Path;
									toCD_tmp.CONCEPT_CD = patientData.CONCEPT_CD;
									toCD_tmp.NAME_CHAR = patientData.Value
											.replaceAll(";", " ");
									toCD_tmp.CONCEPT_BLOB = null;
									toCD_tmp.UPDATE_DATE = patientData.Update_Date;
									toCD_tmp.DOWNLOAD_DATE = patientData.Download_Date;
									toCD_tmp.IMPORT_DATE = patientData.Import_Date;
									toCD_tmp.SOURCESYSTEM_CD = patientData.source;
									toCD_tmp.UPLOAD_ID = null;
									toCD_List.add(toCD_tmp);
									toCD = toCD_tmp;
								} // closing filter/reject

								// # Output table : 'toCDMD'
								// # Filter conditions
								if (

								!patientData.m_applied_path.equals("@")

								) {
									toCD_tmp = new toCDStruct();

									toCD_tmp.CONCEPT_PATH = patientData.m_applied_path;
									toCD_tmp.CONCEPT_CD = patientData.CONCEPT_CD;
									toCD_tmp.NAME_CHAR = patientData.Value
											.replaceAll(";", " ");
									toCD_tmp.CONCEPT_BLOB = null;
									toCD_tmp.UPDATE_DATE = patientData.Update_Date;
									toCD_tmp.DOWNLOAD_DATE = patientData.Download_Date;
									toCD_tmp.IMPORT_DATE = patientData.Import_Date;
									toCD_tmp.SOURCESYSTEM_CD = patientData.source;
									toCD_tmp.UPLOAD_ID = null;
									toCD_List.add(toCD_tmp);
									toCD = toCD_tmp;
								} // closing filter/reject

								// # Output table : 'toMD'
								// # Filter conditions
								if (

								!patientData.m_applied_path.equals("@")

								) {
									toMD_tmp.MODIFIER_PATH = patientData.Path;
									toMD_tmp.MODIFIER_CD = patientData.MODIFIER_CD;
									toMD_tmp.NAME_CHAR = patientData.Value
											.replaceAll(";", " ");
									toMD_tmp.MODIFIER_BLOB = null;
									toMD_tmp.UPDATE_DATE = patientData.Update_Date;
									toMD_tmp.DOWNLOAD_DATE = patientData.Download_Date;
									toMD_tmp.IMPORT_DATE = patientData.Import_Date;
									toMD_tmp.SOURCESYSTEM_CD = patientData.source;
									toMD_tmp.UPLOAD_ID = null;
									toMD = toMD_tmp;
								} // closing filter/reject

								// # Output table : 'out2'
								out2_tmp.itemID = patientData.itemID;
								out2_tmp.Value = patientData.Value;
								out2_tmp.VisitID = patientData.VisitID;
								out2_tmp.FormID = patientData.FormID;
								out2_tmp.SubjectKey = patientData.SubjectKey;
								out2_tmp.Path = patientData.Path;
								out2_tmp.PathID = patientData.PathID;
								out2_tmp.DataType = patientData.DataType;
								out2_tmp.Update_Date = patientData.Update_Date;
								out2_tmp.Import_Date = patientData.Import_Date;
								out2_tmp.Download_Date = patientData.Download_Date;
								out2_tmp.StudyEventRepeatKey = patientData.StudyEventRepeatKey;
								out2_tmp.FormRepeatKey = patientData.FormRepeatKey;
								out2_tmp.itemGroupRepeatKey = patientData.itemGroupRepeatKey;
								out2_tmp.startDate = patientData.startDate;
								out2_tmp.endDate = patientData.endDate;
								out2_tmp.source = patientData.source;
								out2_tmp.CONCEPT_CD = patientData.CONCEPT_CD;
								out2_tmp.MODIFIER_CD = patientData.MODIFIER_CD;
								out2_tmp.m_applied_path = patientData.m_applied_path;
								out2_tmp.sic = patientData.sic;
								out2 = out2_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "toCD"
							if (toCD != null) {
								// start of joined table loop
								for (toCDStruct cur_toCD : toCD_List) {
									toCD = cur_toCD;

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									String[] rowtFileOutputDelimited_1 = new String[9];

									rowtFileOutputDelimited_1[0] = toCD.CONCEPT_PATH == null ? ""
											: toCD.CONCEPT_PATH;

									rowtFileOutputDelimited_1[1] = toCD.CONCEPT_CD == null ? ""
											: toCD.CONCEPT_CD;

									rowtFileOutputDelimited_1[2] = toCD.NAME_CHAR == null ? ""
											: toCD.NAME_CHAR;

									rowtFileOutputDelimited_1[3] = toCD.CONCEPT_BLOB == null ? ""
											: toCD.CONCEPT_BLOB;

									rowtFileOutputDelimited_1[4] = toCD.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													toCD.UPDATE_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_1[5] = toCD.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													toCD.DOWNLOAD_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_1[6] = toCD.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													toCD.IMPORT_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_1[7] = toCD.SOURCESYSTEM_CD == null ? ""
											: toCD.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_1[8] = toCD.UPLOAD_ID == null ? ""
											: toCD.UPLOAD_ID;

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_1",
											nb_line_tFileOutputDelimited_1);
									CsvWritertFileOutputDelimited_1
											.writeNext(rowtFileOutputDelimited_1);

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */
								} // end of joined table loop
								toCD_List.clear();

							} // End of branch "toCD"

							// Start of branch "toMD"
							if (toMD != null) {

								/**
								 * [tFileOutputDelimited_13 main ] start
								 */

								currentComponent = "tFileOutputDelimited_13";

								String[] rowtFileOutputDelimited_13 = new String[9];

								rowtFileOutputDelimited_13[0] = toMD.MODIFIER_PATH == null ? ""
										: toMD.MODIFIER_PATH;

								rowtFileOutputDelimited_13[1] = toMD.MODIFIER_CD == null ? ""
										: toMD.MODIFIER_CD;

								rowtFileOutputDelimited_13[2] = toMD.NAME_CHAR == null ? ""
										: toMD.NAME_CHAR;

								rowtFileOutputDelimited_13[3] = toMD.MODIFIER_BLOB == null ? ""
										: toMD.MODIFIER_BLOB;

								rowtFileOutputDelimited_13[4] = toMD.UPDATE_DATE == null ? ""
										: FormatterUtils.format_Date(
												toMD.UPDATE_DATE, "yyyy-MM-dd");

								rowtFileOutputDelimited_13[5] = toMD.DOWNLOAD_DATE == null ? ""
										: FormatterUtils.format_Date(
												toMD.DOWNLOAD_DATE,
												"yyyy-MM-dd");

								rowtFileOutputDelimited_13[6] = toMD.IMPORT_DATE == null ? ""
										: FormatterUtils.format_Date(
												toMD.IMPORT_DATE, "yyyy-MM-dd");

								rowtFileOutputDelimited_13[7] = toMD.SOURCESYSTEM_CD == null ? ""
										: toMD.SOURCESYSTEM_CD;

								rowtFileOutputDelimited_13[8] = toMD.UPLOAD_ID == null ? ""
										: toMD.UPLOAD_ID;

								nb_line_tFileOutputDelimited_13++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_13",
										nb_line_tFileOutputDelimited_13);
								CsvWritertFileOutputDelimited_13
										.writeNext(rowtFileOutputDelimited_13);

								tos_count_tFileOutputDelimited_13++;

								/**
								 * [tFileOutputDelimited_13 main ] stop
								 */

							} // End of branch "toMD"

							// Start of branch "out2"
							if (out2 != null) {

								/**
								 * [tMap_17 main ] start
								 */

								currentComponent = "tMap_17";

								boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_17 = false;
								boolean mainRowRejected_tMap_17 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
									// ###############################
									// # Output tables

									subjKey_GT_0 = null;
									noSubjKey = null;

									boolean rejected_tMap_17 = true;

									// # Output table : 'subjKey_GT_0'
									// # Filter conditions
									if (

									out2.SubjectKey.length() > 0

									) {
										rejected_tMap_17 = false;
										subjKey_GT_0_tmp.itemID = out2.itemID;
										subjKey_GT_0_tmp.Value = out2.Value;
										subjKey_GT_0_tmp.VisitID = out2.VisitID;
										subjKey_GT_0_tmp.FormID = out2.FormID;
										subjKey_GT_0_tmp.SubjectKey = out2.SubjectKey;
										subjKey_GT_0_tmp.Path = out2.Path;
										subjKey_GT_0_tmp.PathID = out2.PathID;
										subjKey_GT_0_tmp.DataType = out2.DataType;
										subjKey_GT_0_tmp.Update_Date = out2.Update_Date;
										subjKey_GT_0_tmp.Import_Date = out2.Import_Date;
										subjKey_GT_0_tmp.Download_Date = out2.Download_Date;
										subjKey_GT_0_tmp.StudyEventRepeatKey = out2.StudyEventRepeatKey;
										subjKey_GT_0_tmp.FormRepeatKey = out2.FormRepeatKey;
										subjKey_GT_0_tmp.itemGroupRepeatKey = out2.itemGroupRepeatKey;
										subjKey_GT_0_tmp.startDate = out2.startDate;
										subjKey_GT_0_tmp.endDate = out2.endDate;
										subjKey_GT_0_tmp.source = out2.source;
										subjKey_GT_0_tmp.CONCEPT_CD = out2.CONCEPT_CD;
										subjKey_GT_0_tmp.MODIFIER_CD = out2.MODIFIER_CD;
										subjKey_GT_0_tmp.m_applied_path = out2.m_applied_path;
										subjKey_GT_0_tmp.sic = out2.sic;
										subjKey_GT_0 = subjKey_GT_0_tmp;
									} // closing filter/reject
										// ###### START REJECTS #####

									// # Output reject table : 'noSubjKey'
									// # Filter conditions
									if (rejected_tMap_17) {
										noSubjKey_tmp.itemID = out2.itemID;
										noSubjKey_tmp.Value = out2.Value;
										noSubjKey_tmp.VisitID = out2.VisitID;
										noSubjKey_tmp.FormID = out2.FormID;
										noSubjKey_tmp.SubjectKey = out2.SubjectKey;
										noSubjKey_tmp.Path = out2.Path;
										noSubjKey_tmp.PathID = out2.PathID;
										noSubjKey_tmp.DataType = out2.DataType;
										noSubjKey_tmp.Update_Date = out2.Update_Date;
										noSubjKey_tmp.Import_Date = out2.Import_Date;
										noSubjKey_tmp.Download_Date = out2.Download_Date;
										noSubjKey_tmp.StudyEventRepeatKey = out2.StudyEventRepeatKey;
										noSubjKey_tmp.FormRepeatKey = out2.FormRepeatKey;
										noSubjKey_tmp.itemGroupRepeatKey = out2.itemGroupRepeatKey;
										noSubjKey_tmp.startDate = out2.startDate;
										noSubjKey_tmp.endDate = out2.endDate;
										noSubjKey_tmp.source = out2.source;
										noSubjKey_tmp.CONCEPT_CD = out2.CONCEPT_CD;
										noSubjKey_tmp.MODIFIER_CD = out2.MODIFIER_CD;
										noSubjKey_tmp.m_applied_path = out2.m_applied_path;
										noSubjKey_tmp.sic = out2.sic;
										noSubjKey = noSubjKey_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_17 = false;

								tos_count_tMap_17++;

								/**
								 * [tMap_17 main ] stop
								 */
								// Start of branch "subjKey_GT_0"
								if (subjKey_GT_0 != null) {

									/**
									 * [tMap_14 main ] start
									 */

									currentComponent = "tMap_14";

									boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_14 = false;
									boolean mainRowRejected_tMap_14 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
										// ###############################
										// # Output tables

										out7 = null;
										out4 = null;

										// # Output table : 'out7'
										out7_tmp.SubjectKey = subjKey_GT_0.SubjectKey;
										out7_tmp.itemGroupRepeatKey = subjKey_GT_0.itemGroupRepeatKey;
										out7_tmp.Update_Date = subjKey_GT_0.Update_Date;
										out7_tmp.Import_Date = subjKey_GT_0.Import_Date;
										out7_tmp.Download_Date = subjKey_GT_0.Download_Date;
										out7_tmp.StudyEventRepeatKey = subjKey_GT_0.StudyEventRepeatKey;
										out7_tmp.startDate = subjKey_GT_0.startDate;
										out7_tmp.endDate = subjKey_GT_0.endDate;
										out7_tmp.source = subjKey_GT_0.source;
										out7_tmp.FormRepeatKey = subjKey_GT_0.FormRepeatKey;
										out7 = out7_tmp;

										// # Output table : 'out4'
										out4_tmp.itemID = subjKey_GT_0.itemID;
										out4_tmp.Value = subjKey_GT_0.Value;
										out4_tmp.VisitID = subjKey_GT_0.VisitID;
										out4_tmp.FormID = subjKey_GT_0.FormID;
										out4_tmp.SubjectKey = subjKey_GT_0.SubjectKey;
										out4_tmp.Path = subjKey_GT_0.Path;
										out4_tmp.PathID = subjKey_GT_0.PathID;
										out4_tmp.DataType = subjKey_GT_0.DataType;
										out4_tmp.Update_Date = subjKey_GT_0.Update_Date;
										out4_tmp.Import_Date = subjKey_GT_0.Import_Date;
										out4_tmp.Download_Date = subjKey_GT_0.Download_Date;
										out4_tmp.StudyEventRepeatKey = subjKey_GT_0.StudyEventRepeatKey;
										out4_tmp.FormRepeatKey = subjKey_GT_0.FormRepeatKey;
										out4_tmp.itemGroupRepeatKey = subjKey_GT_0.itemGroupRepeatKey;
										out4_tmp.startDate = subjKey_GT_0.startDate;
										out4_tmp.endDate = subjKey_GT_0.endDate;
										out4_tmp.source = subjKey_GT_0.source;
										out4_tmp.CONCEPT_CD = subjKey_GT_0.CONCEPT_CD;
										out4_tmp.MODIFIER_CD = subjKey_GT_0.MODIFIER_CD;
										out4_tmp.m_applied_path = subjKey_GT_0.m_applied_path;
										out4_tmp.sic = subjKey_GT_0.sic;
										out4 = out4_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_14 = false;

									tos_count_tMap_14++;

									/**
									 * [tMap_14 main ] stop
									 */
									// Start of branch "out7"
									if (out7 != null) {

										/**
										 * [tUniqRow_2_UniqOut main ] start
										 */

										currentVirtualComponent = "tUniqRow_2";

										currentComponent = "tUniqRow_2_UniqOut";

										if (rowsInBuffer_1_tUniqRow_2 >= bufferSize_1_tUniqRow_2) {// buffer
																									// is
																									// full
																									// do
																									// sort
																									// and

											java.util.Arrays
													.<rowStruct_tUniqRow_2> sort(
															buffer_1_tUniqRow_2,
															0,
															bufferSize_1_tUniqRow_2,
															comparator_1_tUniqRow_2);

											java.io.File file_tUniqRow_2 = new java.io.File(
													workDirectory_tUniqRow_2
															+ "/tUniqRow_2_TEMP_"
															+ files_1_tUniqRow_2
																	.size());

											file_tUniqRow_2.deleteOnExit();

											java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
													new java.io.BufferedOutputStream(
															new java.io.FileOutputStream(
																	file_tUniqRow_2)));

											for (int i_tUniqRow_2 = 0; i_tUniqRow_2 < bufferSize_1_tUniqRow_2; i_tUniqRow_2++) {
												buffer_1_tUniqRow_2[i_tUniqRow_2]
														.writeData(rw);
											}

											rw.close();

											files_1_tUniqRow_2
													.add(file_tUniqRow_2);

											rowsInBuffer_1_tUniqRow_2 = 0;
										}
										rowStruct_tUniqRow_2 row_tUniqRow_2 = buffer_1_tUniqRow_2[rowsInBuffer_1_tUniqRow_2++];
										row_tUniqRow_2.id_tUniqRow_2 = ++nb_tUniqRow_2;
										row_tUniqRow_2.SubjectKey = out7.SubjectKey;

										row_tUniqRow_2.itemGroupRepeatKey = out7.itemGroupRepeatKey;

										row_tUniqRow_2.Update_Date = out7.Update_Date;

										row_tUniqRow_2.Import_Date = out7.Import_Date;

										row_tUniqRow_2.Download_Date = out7.Download_Date;

										row_tUniqRow_2.StudyEventRepeatKey = out7.StudyEventRepeatKey;

										row_tUniqRow_2.startDate = out7.startDate;

										row_tUniqRow_2.endDate = out7.endDate;

										row_tUniqRow_2.source = out7.source;

										row_tUniqRow_2.FormRepeatKey = out7.FormRepeatKey;

										tos_count_tUniqRow_2_UniqOut++;

										/**
										 * [tUniqRow_2_UniqOut main ] stop
										 */

									} // End of branch "out7"

									// Start of branch "out4"
									if (out4 != null) {

										/**
										 * [tFileOutputDelimited_11 main ] start
										 */

										currentComponent = "tFileOutputDelimited_11";

										String[] rowtFileOutputDelimited_11 = new String[21];

										rowtFileOutputDelimited_11[0] = out4.itemID == null ? ""
												: out4.itemID;

										rowtFileOutputDelimited_11[1] = out4.Value == null ? ""
												: out4.Value;

										rowtFileOutputDelimited_11[2] = out4.VisitID == null ? ""
												: out4.VisitID;

										rowtFileOutputDelimited_11[3] = out4.FormID == null ? ""
												: out4.FormID;

										rowtFileOutputDelimited_11[4] = out4.SubjectKey == null ? ""
												: out4.SubjectKey;

										rowtFileOutputDelimited_11[5] = out4.Path == null ? ""
												: out4.Path;

										rowtFileOutputDelimited_11[6] = out4.PathID == null ? ""
												: out4.PathID;

										rowtFileOutputDelimited_11[7] = out4.DataType == null ? ""
												: out4.DataType;

										rowtFileOutputDelimited_11[8] = out4.Update_Date == null ? ""
												: FormatterUtils.format_Date(
														out4.Update_Date,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_11[9] = out4.Import_Date == null ? ""
												: FormatterUtils.format_Date(
														out4.Import_Date,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_11[10] = out4.Download_Date == null ? ""
												: FormatterUtils.format_Date(
														out4.Download_Date,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_11[11] = out4.StudyEventRepeatKey == null ? ""
												: String.valueOf(out4.StudyEventRepeatKey);

										rowtFileOutputDelimited_11[12] = out4.FormRepeatKey == null ? ""
												: String.valueOf(out4.FormRepeatKey);

										rowtFileOutputDelimited_11[13] = out4.itemGroupRepeatKey == null ? ""
												: String.valueOf(out4.itemGroupRepeatKey);

										rowtFileOutputDelimited_11[14] = out4.startDate == null ? ""
												: FormatterUtils.format_Date(
														out4.startDate,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_11[15] = out4.endDate == null ? ""
												: FormatterUtils.format_Date(
														out4.endDate,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_11[16] = out4.source == null ? ""
												: out4.source;

										rowtFileOutputDelimited_11[17] = out4.CONCEPT_CD == null ? ""
												: out4.CONCEPT_CD;

										rowtFileOutputDelimited_11[18] = out4.MODIFIER_CD == null ? ""
												: out4.MODIFIER_CD;

										rowtFileOutputDelimited_11[19] = out4.m_applied_path == null ? ""
												: out4.m_applied_path;

										rowtFileOutputDelimited_11[20] = out4.sic == null ? ""
												: out4.sic;

										nb_line_tFileOutputDelimited_11++;
										resourceMap
												.put("nb_line_tFileOutputDelimited_11",
														nb_line_tFileOutputDelimited_11);
										CsvWritertFileOutputDelimited_11
												.writeNext(rowtFileOutputDelimited_11);

										tos_count_tFileOutputDelimited_11++;

										/**
										 * [tFileOutputDelimited_11 main ] stop
										 */

									} // End of branch "out4"

								} // End of branch "subjKey_GT_0"

								// Start of branch "noSubjKey"
								if (noSubjKey != null) {

									/**
									 * [tMap_16 main ] start
									 */

									currentComponent = "tMap_16";

									boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_16 = false;
									boolean mainRowRejected_tMap_16 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "from_enc"
									// /////////////////////////////////////////////

									boolean forceLoopfrom_enc = false;

									from_encStruct from_encObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_16) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_16 = false;

										from_encHashKey.ENCOUNTER_IDE = ""
												+ noSubjKey.StudyEventRepeatKey;

										from_encHashKey.hashCodeDirty = true;

										tHash_Lookup_from_enc
												.lookup(from_encHashKey);

										if (!tHash_Lookup_from_enc.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_16 = true;

											forceLoopfrom_enc = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLoopfrom_enc = true;
									} // G 21

									from_encStruct from_enc = null;

									while ((tHash_Lookup_from_enc != null && tHash_Lookup_from_enc
											.hasNext()) || forceLoopfrom_enc) { // G_TM_M_043

										// CALL close loop of lookup 'from_enc'

										from_encStruct fromLookup_from_enc = null;
										from_enc = from_encDefault;

										if (!forceLoopfrom_enc) { // G 46

											fromLookup_from_enc = tHash_Lookup_from_enc
													.next();

											if (fromLookup_from_enc != null) {
												from_enc = fromLookup_from_enc;
											}

										} // G 46

										forceLoopfrom_enc = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
											// ###############################
											// # Output tables

											out3 = null;
											out12 = null;

											if (!rejectedInnerJoin_tMap_16) {

												// # Output table : 'out3'
												out3_tmp.itemID = noSubjKey.itemID;
												out3_tmp.Value = noSubjKey.Value;
												out3_tmp.VisitID = noSubjKey.VisitID;
												out3_tmp.FormID = noSubjKey.FormID;
												out3_tmp.SubjectKey = from_enc.PATIENT_IDE;
												out3_tmp.Path = noSubjKey.Path;
												out3_tmp.PathID = noSubjKey.PathID;
												out3_tmp.DataType = noSubjKey.DataType;
												out3_tmp.Update_Date = noSubjKey.Update_Date;
												out3_tmp.Import_Date = noSubjKey.Import_Date;
												out3_tmp.Download_Date = noSubjKey.Download_Date;
												out3_tmp.StudyEventRepeatKey = from_enc.ENCOUNTER_NUM;
												out3_tmp.FormRepeatKey = noSubjKey.FormRepeatKey;
												out3_tmp.itemGroupRepeatKey = noSubjKey.itemGroupRepeatKey;
												out3_tmp.startDate = noSubjKey.startDate;
												out3_tmp.endDate = noSubjKey.endDate;
												out3_tmp.source = noSubjKey.source;
												out3_tmp.CONCEPT_CD = noSubjKey.CONCEPT_CD;
												out3_tmp.MODIFIER_CD = noSubjKey.MODIFIER_CD;
												out3_tmp.m_applied_path = noSubjKey.m_applied_path;
												out3_tmp.sic = noSubjKey.sic;
												out3 = out3_tmp;
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table : 'out12'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_16) {
												out12_tmp.itemID = noSubjKey.itemID;
												out12_tmp.Value = noSubjKey.Value;
												out12_tmp.VisitID = noSubjKey.VisitID;
												out12_tmp.FormID = noSubjKey.FormID;
												out12_tmp.SubjectKey = noSubjKey.SubjectKey;
												out12_tmp.Path = noSubjKey.Path;
												out12_tmp.PathID = noSubjKey.PathID;
												out12_tmp.DataType = noSubjKey.DataType;
												out12_tmp.Update_Date = noSubjKey.Update_Date;
												out12_tmp.Import_Date = noSubjKey.Import_Date;
												out12_tmp.Download_Date = noSubjKey.Download_Date;
												out12_tmp.StudyEventRepeatKey = noSubjKey.StudyEventRepeatKey;
												out12_tmp.FormRepeatKey = noSubjKey.FormRepeatKey;
												out12_tmp.itemGroupRepeatKey = noSubjKey.itemGroupRepeatKey;
												out12_tmp.startDate = noSubjKey.startDate;
												out12_tmp.endDate = noSubjKey.endDate;
												out12_tmp.source = noSubjKey.source;
												out12_tmp.CONCEPT_CD = noSubjKey.CONCEPT_CD;
												out12_tmp.MODIFIER_CD = noSubjKey.MODIFIER_CD;
												out12_tmp.m_applied_path = noSubjKey.m_applied_path;
												out12_tmp.sic = noSubjKey.sic;
												out12 = out12_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_16 = false;

										tos_count_tMap_16++;

										/**
										 * [tMap_16 main ] stop
										 */
										// Start of branch "out3"
										if (out3 != null) {

											/**
											 * [tMap_3 main ] start
											 */

											currentComponent = "tMap_3";

											boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_3 = false;
											boolean mainRowRejected_tMap_3 = false;

											// /////////////////////////////////////////////
											// Starting Lookup Table "row1"
											// /////////////////////////////////////////////

											boolean forceLooprow1 = false;

											row1Struct row1ObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_3 = false;

												row1HashKey.PATIENT_IDE = out3.SubjectKey;

												row1HashKey.hashCodeDirty = true;

												tHash_Lookup_row1
														.lookup(row1HashKey);

											} // G_TM_M_020

											if (tHash_Lookup_row1 != null
													&& tHash_Lookup_row1
															.getCount(row1HashKey) > 1) { // G
																							// 071

												// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.PATIENT_IDE = '"
												// + row1HashKey.PATIENT_IDE +
												// "'");
											} // G 071

											row1Struct row1 = null;

											row1Struct fromLookup_row1 = null;
											row1 = row1Default;

											if (tHash_Lookup_row1 != null
													&& tHash_Lookup_row1
															.hasNext()) { // G
																			// 099

												fromLookup_row1 = tHash_Lookup_row1
														.next();

											} // G 099

											if (fromLookup_row1 != null) {
												row1 = fromLookup_row1;
											}

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
												// ###############################
												// # Output tables

												row5 = null;

												// # Output table : 'row5'
												row5_tmp.itemID = out3.itemID;
												row5_tmp.Value = out3.Value;
												row5_tmp.VisitID = out3.VisitID;
												row5_tmp.FormID = out3.FormID;
												row5_tmp.SubjectKey = row1.PATIENT_NUM;
												row5_tmp.Path = out3.Path;
												row5_tmp.PathID = out3.PathID;
												row5_tmp.DataType = out3.DataType;
												row5_tmp.Update_Date = out3.Update_Date;
												row5_tmp.Import_Date = out3.Import_Date;
												row5_tmp.Download_Date = out3.Download_Date;
												row5_tmp.StudyEventRepeatKey = out3.StudyEventRepeatKey;
												row5_tmp.FormRepeatKey = out3.FormRepeatKey;
												row5_tmp.itemGroupRepeatKey = out3.itemGroupRepeatKey;
												row5_tmp.startDate = out3.startDate;
												row5_tmp.endDate = out3.endDate;
												row5_tmp.source = out3.source;
												row5_tmp.CONCEPT_CD = out3.CONCEPT_CD;
												row5_tmp.MODIFIER_CD = out3.MODIFIER_CD;
												row5_tmp.m_applied_path = out3.m_applied_path;
												row5_tmp.sic = out3.sic;
												row5 = row5_tmp;
												// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_3 = false;

											tos_count_tMap_3++;

											/**
											 * [tMap_3 main ] stop
											 */
											// Start of branch "row5"
											if (row5 != null) {

												/**
												 * [tMap_22 main ] start
												 */

												currentComponent = "tMap_22";

												boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_22 = false;
												boolean mainRowRejected_tMap_22 = false;

												// /////////////////////////////////////////////
												// Starting Lookup Table "row31"
												// /////////////////////////////////////////////

												boolean forceLooprow31 = false;

												row31Struct row31ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_22) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_22 = false;

													Object exprKeyValue_row31__PATIENT_NUM = row5.SubjectKey;
													if (exprKeyValue_row31__PATIENT_NUM == null) {
														hasCasePrimitiveKeyWithNull_tMap_22 = true;
													} else {
														row31HashKey.PATIENT_NUM = (int) (Integer) exprKeyValue_row31__PATIENT_NUM;
													}

													row31HashKey.TVAL_CHAR = row5.sic;

													row31HashKey.hashCodeDirty = true;

													if (!hasCasePrimitiveKeyWithNull_tMap_22) { // G_TM_M_091

														tHash_Lookup_row31
																.lookup(row31HashKey);

													} // G_TM_M_091

													if (hasCasePrimitiveKeyWithNull_tMap_22
															|| !tHash_Lookup_row31
																	.hasNext()) { // G_TM_M_090

														rejectedInnerJoin_tMap_22 = true;

													} // G_TM_M_090

												} // G_TM_M_020

												if (tHash_Lookup_row31 != null
														&& tHash_Lookup_row31
																.getCount(row31HashKey) > 1) { // G
																								// 071

													// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row31' and it contains more one result from keys :  row31.PATIENT_NUM = '"
													// +
													// row31HashKey.PATIENT_NUM
													// +
													// "', row31.TVAL_CHAR = '"
													// + row31HashKey.TVAL_CHAR
													// + "'");
												} // G 071

												row31Struct row31 = null;

												row31Struct fromLookup_row31 = null;
												row31 = row31Default;

												if (tHash_Lookup_row31 != null
														&& tHash_Lookup_row31
																.hasNext()) { // G
																				// 099

													fromLookup_row31 = tHash_Lookup_row31
															.next();

												} // G 099

												if (fromLookup_row31 != null) {
													row31 = fromLookup_row31;
												}

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_22__Struct Var = Var__tMap_22;
													Var.var2 = row5.DataType
															.toLowerCase()
															.equals("float")
															|| row5.DataType
																	.toLowerCase()
																	.equals("integer");// ###############################
													// ###############################
													// # Output tables

													copyOfto_obs = null;
													copyOfto_obs_List.clear();
													SICtoOBS2 = null;

													if (!rejectedInnerJoin_tMap_22) {

														// # Output table :
														// 'copyOfto_obs'
														copyOfto_obs_tmp.ENCOUNTER_NUM = new BigDecimal(
																IDRTHelper
																		.convertAlphanumericPIDtoNumber(""
																				+ row5.StudyEventRepeatKey));
														copyOfto_obs_tmp.PATIENT_NUM = new BigDecimal(
																row5.SubjectKey);
														copyOfto_obs_tmp.CONCEPT_CD = row5.m_applied_path
																.equals("@") ? row5.CONCEPT_CD
																: row5.CONCEPT_CD
																		.substring(
																				0,
																				row5.CONCEPT_CD
																						.indexOf(":"));
														copyOfto_obs_tmp.PROVIDER_ID = "IDRT";
														copyOfto_obs_tmp.START_DATE = row5.startDate != null ? row5.startDate
																: TalendDate
																		.parseDate(
																				"yyyy-MM-dd",
																				"1900-01-01");
														copyOfto_obs_tmp.MODIFIER_CD = row5.m_applied_path
																.equals("@") ? "@"
																: row5.MODIFIER_CD;
														copyOfto_obs_tmp.INSTANCE_NUM = ""
																+ row31.INSTANCE_NUM;
														copyOfto_obs_tmp.VALTYPE_CD = Var.var2 ? "N"
																: "T";
														copyOfto_obs_tmp.TVAL_CHAR = Var.var2 ? "E"
																: row5.Value
																		.length() > 254 ? row5.Value
																		.replaceAll(
																				";",
																				" ")
																		.substring(
																				0,
																				253)
																		: row5.Value
																				.replaceAll(
																						";",
																						" ");
														copyOfto_obs_tmp.NVAL_NUM = Var.var2
																&& row5.Value
																		.length() > 0 ? Float
																.parseFloat(row5.Value
																		.replace(
																				",",
																				"."))
																: null;
														copyOfto_obs_tmp.VALUEFLAG_CD = null;
														copyOfto_obs_tmp.QUANTITY_NUM = null;
														copyOfto_obs_tmp.UNITS_CD = null;
														copyOfto_obs_tmp.END_DATE = row5.endDate != null ? row5.endDate
																: row5.startDate;
														copyOfto_obs_tmp.LOCATION_CD = null;
														copyOfto_obs_tmp.OBSERVATION_BLOB = null;
														copyOfto_obs_tmp.CONFIDENCE_NUM = null;
														copyOfto_obs_tmp.UPDATE_DATE = row5.Update_Date;
														copyOfto_obs_tmp.DOWNLOAD_DATE = row5.Download_Date;
														copyOfto_obs_tmp.IMPORT_DATE = row5.Import_Date;
														copyOfto_obs_tmp.SOURCESYSTEM_CD = null;
														copyOfto_obs_tmp.UPLOAD_ID = null;
														copyOfto_obs_List
																.add(copyOfto_obs_tmp);
														copyOfto_obs = copyOfto_obs_tmp;

														// # Output table :
														// 'SICtoOBS2'
														SICtoOBS2_tmp.ENCOUNTER_NUM = new BigDecimal(
																IDRTHelper
																		.convertAlphanumericPIDtoNumber(row5.StudyEventRepeatKey
																				.toString()));
														SICtoOBS2_tmp.PATIENT_NUM = new BigDecimal(
																row5.SubjectKey);
														SICtoOBS2_tmp.CONCEPT_CD = "IDRT:OBJECTIDENTIFIER";
														SICtoOBS2_tmp.PROVIDER_ID = "IDRT";
														SICtoOBS2_tmp.START_DATE = row5.startDate != null ? row5.startDate
																: TalendDate
																		.parseDate(
																				"yyyy-MM-dd",
																				"1900-01-01");
														SICtoOBS2_tmp.MODIFIER_CD = "@";
														SICtoOBS2_tmp.INSTANCE_NUM = ""
																+ (row5.StudyEventRepeatKey * 1000)
																+ ""
																+ (row5.itemGroupRepeatKey * 1000)
																+ ""
																+ (row5.FormRepeatKey + 1);
														SICtoOBS2_tmp.VALTYPE_CD = "T";
														SICtoOBS2_tmp.TVAL_CHAR = row5.sic;
														SICtoOBS2_tmp.NVAL_NUM = null;
														SICtoOBS2_tmp.VALUEFLAG_CD = null;
														SICtoOBS2_tmp.QUANTITY_NUM = null;
														SICtoOBS2_tmp.UNITS_CD = null;
														SICtoOBS2_tmp.END_DATE = row5.endDate;
														SICtoOBS2_tmp.LOCATION_CD = null;
														SICtoOBS2_tmp.OBSERVATION_BLOB = null;
														SICtoOBS2_tmp.CONFIDENCE_NUM = null;
														SICtoOBS2_tmp.UPDATE_DATE = row5.Update_Date;
														SICtoOBS2_tmp.DOWNLOAD_DATE = row5.Download_Date;
														SICtoOBS2_tmp.IMPORT_DATE = row5.Import_Date;
														SICtoOBS2_tmp.SOURCESYSTEM_CD = null;
														SICtoOBS2_tmp.UPLOAD_ID = null;
														SICtoOBS2 = SICtoOBS2_tmp;
													} // closing inner join
														// bracket (1)
														// ###### START REJECTS
														// #####

													// # Output reject table :
													// 'out6'
													// # Filter conditions
													if (rejectedInnerJoin_tMap_22) {
														copyOfto_obs_tmp = new copyOfto_obsStruct();

														copyOfto_obs_tmp.ENCOUNTER_NUM = new BigDecimal(
																IDRTHelper
																		.convertAlphanumericPIDtoNumber(""
																				+ row5.StudyEventRepeatKey));
														copyOfto_obs_tmp.PATIENT_NUM = new BigDecimal(
																row5.SubjectKey);
														copyOfto_obs_tmp.CONCEPT_CD = row5.m_applied_path
																.equals("@") ? row5.CONCEPT_CD
																: row5.CONCEPT_CD
																		.substring(
																				0,
																				row5.CONCEPT_CD
																						.indexOf(":"));
														copyOfto_obs_tmp.PROVIDER_ID = "IDRT";
														copyOfto_obs_tmp.START_DATE = row5.startDate != null ? row5.startDate
																: TalendDate
																		.parseDate(
																				"yyyy-MM-dd",
																				"1900-01-01");
														copyOfto_obs_tmp.MODIFIER_CD = row5.m_applied_path
																.equals("@") ? "@"
																: row5.MODIFIER_CD;
														copyOfto_obs_tmp.INSTANCE_NUM = ""
																+ (row5.StudyEventRepeatKey * 1000)
																+ ""
																+ (row5.itemGroupRepeatKey * 1000)
																+ ""
																+ (row5.FormRepeatKey + 1);
														copyOfto_obs_tmp.VALTYPE_CD = Var.var2 ? "N"
																: "T";
														copyOfto_obs_tmp.TVAL_CHAR = Var.var2 ? "E"
																: row5.Value
																		.length() > 254 ? row5.Value
																		.replaceAll(
																				";",
																				" ")
																		.substring(
																				0,
																				253)
																		: row5.Value
																				.replaceAll(
																						";",
																						" ");
														copyOfto_obs_tmp.NVAL_NUM = Var.var2
																&& row5.Value
																		.length() > 0 ? Float
																.parseFloat(row5.Value
																		.replace(
																				",",
																				"."))
																: null;
														copyOfto_obs_tmp.VALUEFLAG_CD = null;
														copyOfto_obs_tmp.QUANTITY_NUM = null;
														copyOfto_obs_tmp.UNITS_CD = null;
														copyOfto_obs_tmp.END_DATE = row5.endDate != null ? row5.endDate
																: row5.startDate;
														copyOfto_obs_tmp.LOCATION_CD = null;
														copyOfto_obs_tmp.OBSERVATION_BLOB = null;
														copyOfto_obs_tmp.CONFIDENCE_NUM = null;
														copyOfto_obs_tmp.UPDATE_DATE = row5.Update_Date;
														copyOfto_obs_tmp.DOWNLOAD_DATE = row5.Download_Date;
														copyOfto_obs_tmp.IMPORT_DATE = row5.Import_Date;
														copyOfto_obs_tmp.SOURCESYSTEM_CD = null;
														copyOfto_obs_tmp.UPLOAD_ID = null;
														copyOfto_obs_List
																.add(copyOfto_obs_tmp);
														copyOfto_obs = copyOfto_obs_tmp;
													} // closing filter/reject
														// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_22 = false;

												tos_count_tMap_22++;

												/**
												 * [tMap_22 main ] stop
												 */
												// Start of branch
												// "copyOfto_obs"
												if (copyOfto_obs != null) {
													// start of joined table
													// loop
													for (copyOfto_obsStruct cur_copyOfto_obs : copyOfto_obs_List) {
														copyOfto_obs = cur_copyOfto_obs;

														/**
														 * [
														 * tFileOutputDelimited_14
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_14";

														StringBuilder sb_tFileOutputDelimited_14 = new StringBuilder();

														if (copyOfto_obs.ENCOUNTER_NUM != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.ENCOUNTER_NUM
																			.toPlainString()

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.PATIENT_NUM != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.PATIENT_NUM
																			.toPlainString()

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.CONCEPT_CD != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.CONCEPT_CD

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.PROVIDER_ID != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.PROVIDER_ID

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.START_DATE != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	FormatterUtils
																			.format_Date(
																					copyOfto_obs.START_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.MODIFIER_CD != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.MODIFIER_CD

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.INSTANCE_NUM != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.INSTANCE_NUM

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.VALTYPE_CD != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.VALTYPE_CD

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.TVAL_CHAR != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.TVAL_CHAR

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.NVAL_NUM != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.NVAL_NUM

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.VALUEFLAG_CD != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.VALUEFLAG_CD

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.QUANTITY_NUM != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.QUANTITY_NUM

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.UNITS_CD != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.UNITS_CD

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.END_DATE != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	FormatterUtils
																			.format_Date(
																					copyOfto_obs.END_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.LOCATION_CD != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.LOCATION_CD

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.OBSERVATION_BLOB != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.OBSERVATION_BLOB

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.CONFIDENCE_NUM != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.CONFIDENCE_NUM

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.UPDATE_DATE != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	FormatterUtils
																			.format_Date(
																					copyOfto_obs.UPDATE_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.DOWNLOAD_DATE != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	FormatterUtils
																			.format_Date(
																					copyOfto_obs.DOWNLOAD_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.IMPORT_DATE != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	FormatterUtils
																			.format_Date(
																					copyOfto_obs.IMPORT_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.SOURCESYSTEM_CD != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.SOURCESYSTEM_CD

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_tFileOutputDelimited_14);

														if (copyOfto_obs.UPLOAD_ID != null) {

															sb_tFileOutputDelimited_14
																	.append(

																	copyOfto_obs.UPLOAD_ID

																	);

														}

														sb_tFileOutputDelimited_14
																.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);

														nb_line_tFileOutputDelimited_14++;
														resourceMap
																.put("nb_line_tFileOutputDelimited_14",
																		nb_line_tFileOutputDelimited_14);

														outtFileOutputDelimited_14
																.write(sb_tFileOutputDelimited_14
																		.toString());

														tos_count_tFileOutputDelimited_14++;

														/**
														 * [
														 * tFileOutputDelimited_14
														 * main ] stop
														 */
													} // end of joined table
														// loop
													copyOfto_obs_List.clear();

												} // End of branch
													// "copyOfto_obs"

												// Start of branch "SICtoOBS2"
												if (SICtoOBS2 != null) {

													/**
													 * [tFileOutputDelimited_21
													 * main ] start
													 */

													currentComponent = "tFileOutputDelimited_21";

													StringBuilder sb_tFileOutputDelimited_21 = new StringBuilder();

													if (SICtoOBS2.ENCOUNTER_NUM != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.ENCOUNTER_NUM
																		.toPlainString()

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.PATIENT_NUM != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.PATIENT_NUM
																		.toPlainString()

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.CONCEPT_CD != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.CONCEPT_CD

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.PROVIDER_ID != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.PROVIDER_ID

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.START_DATE != null) {

														sb_tFileOutputDelimited_21
																.append(

																FormatterUtils
																		.format_Date(
																				SICtoOBS2.START_DATE,
																				"yyyy-MM-dd")

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.MODIFIER_CD != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.MODIFIER_CD

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.INSTANCE_NUM != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.INSTANCE_NUM

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.VALTYPE_CD != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.VALTYPE_CD

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.TVAL_CHAR != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.TVAL_CHAR

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.NVAL_NUM != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.NVAL_NUM

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.VALUEFLAG_CD != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.VALUEFLAG_CD

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.QUANTITY_NUM != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.QUANTITY_NUM

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.UNITS_CD != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.UNITS_CD

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.END_DATE != null) {

														sb_tFileOutputDelimited_21
																.append(

																FormatterUtils
																		.format_Date(
																				SICtoOBS2.END_DATE,
																				"yyyy-MM-dd")

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.LOCATION_CD != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.LOCATION_CD

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.OBSERVATION_BLOB != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.OBSERVATION_BLOB

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.CONFIDENCE_NUM != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.CONFIDENCE_NUM

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.UPDATE_DATE != null) {

														sb_tFileOutputDelimited_21
																.append(

																FormatterUtils
																		.format_Date(
																				SICtoOBS2.UPDATE_DATE,
																				"yyyy-MM-dd")

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.DOWNLOAD_DATE != null) {

														sb_tFileOutputDelimited_21
																.append(

																FormatterUtils
																		.format_Date(
																				SICtoOBS2.DOWNLOAD_DATE,
																				"yyyy-MM-dd")

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.IMPORT_DATE != null) {

														sb_tFileOutputDelimited_21
																.append(

																FormatterUtils
																		.format_Date(
																				SICtoOBS2.IMPORT_DATE,
																				"yyyy-MM-dd")

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.SOURCESYSTEM_CD != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.SOURCESYSTEM_CD

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_tFileOutputDelimited_21);

													if (SICtoOBS2.UPLOAD_ID != null) {

														sb_tFileOutputDelimited_21
																.append(

																SICtoOBS2.UPLOAD_ID

																);

													}

													sb_tFileOutputDelimited_21
															.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_21);

													nb_line_tFileOutputDelimited_21++;
													resourceMap
															.put("nb_line_tFileOutputDelimited_21",
																	nb_line_tFileOutputDelimited_21);

													outtFileOutputDelimited_21
															.write(sb_tFileOutputDelimited_21
																	.toString());

													tos_count_tFileOutputDelimited_21++;

													/**
													 * [tFileOutputDelimited_21
													 * main ] stop
													 */

												} // End of branch "SICtoOBS2"

											} // End of branch "row5"

										} // End of branch "out3"

										// Start of branch "out12"
										if (out12 != null) {

											/**
											 * [tUniqRow_7_UniqOut main ] start
											 */

											currentVirtualComponent = "tUniqRow_7";

											currentComponent = "tUniqRow_7_UniqOut";

											if (rowsInBuffer_1_tUniqRow_7 >= bufferSize_1_tUniqRow_7) {// buffer
																										// is
																										// full
																										// do
																										// sort
																										// and

												java.util.Arrays
														.<rowStruct_tUniqRow_7> sort(
																buffer_1_tUniqRow_7,
																0,
																bufferSize_1_tUniqRow_7,
																comparator_1_tUniqRow_7);

												java.io.File file_tUniqRow_7 = new java.io.File(
														workDirectory_tUniqRow_7
																+ "/tUniqRow_7_TEMP_"
																+ files_1_tUniqRow_7
																		.size());

												file_tUniqRow_7.deleteOnExit();

												java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
														new java.io.BufferedOutputStream(
																new java.io.FileOutputStream(
																		file_tUniqRow_7)));

												for (int i_tUniqRow_7 = 0; i_tUniqRow_7 < bufferSize_1_tUniqRow_7; i_tUniqRow_7++) {
													buffer_1_tUniqRow_7[i_tUniqRow_7]
															.writeData(rw);
												}

												rw.close();

												files_1_tUniqRow_7
														.add(file_tUniqRow_7);

												rowsInBuffer_1_tUniqRow_7 = 0;
											}
											rowStruct_tUniqRow_7 row_tUniqRow_7 = buffer_1_tUniqRow_7[rowsInBuffer_1_tUniqRow_7++];
											row_tUniqRow_7.id_tUniqRow_7 = ++nb_tUniqRow_7;
											row_tUniqRow_7.itemID = out12.itemID;

											row_tUniqRow_7.Value = out12.Value;

											row_tUniqRow_7.VisitID = out12.VisitID;

											row_tUniqRow_7.FormID = out12.FormID;

											row_tUniqRow_7.SubjectKey = out12.SubjectKey;

											row_tUniqRow_7.Path = out12.Path;

											row_tUniqRow_7.PathID = out12.PathID;

											row_tUniqRow_7.DataType = out12.DataType;

											row_tUniqRow_7.Update_Date = out12.Update_Date;

											row_tUniqRow_7.Import_Date = out12.Import_Date;

											row_tUniqRow_7.Download_Date = out12.Download_Date;

											row_tUniqRow_7.StudyEventRepeatKey = out12.StudyEventRepeatKey;

											row_tUniqRow_7.FormRepeatKey = out12.FormRepeatKey;

											row_tUniqRow_7.itemGroupRepeatKey = out12.itemGroupRepeatKey;

											row_tUniqRow_7.startDate = out12.startDate;

											row_tUniqRow_7.endDate = out12.endDate;

											row_tUniqRow_7.source = out12.source;

											row_tUniqRow_7.CONCEPT_CD = out12.CONCEPT_CD;

											row_tUniqRow_7.MODIFIER_CD = out12.MODIFIER_CD;

											row_tUniqRow_7.m_applied_path = out12.m_applied_path;

											row_tUniqRow_7.sic = out12.sic;

											tos_count_tUniqRow_7_UniqOut++;

											/**
											 * [tUniqRow_7_UniqOut main ] stop
											 */

										} // End of branch "out12"

									} // close loop of lookup 'from_enc' //
										// G_TM_M_043

								} // End of branch "noSubjKey"

							} // End of branch "out2"

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 end ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (CsvWritertFileOutputDelimited_13 != null) {
					CsvWritertFileOutputDelimited_13.close();
				}

				globalMap.put("tFileOutputDelimited_13_NB_LINE",
						nb_line_tFileOutputDelimited_13);

				resourceMap.put("finish_tFileOutputDelimited_13", true);

				ok_Hash.put("tFileOutputDelimited_13", true);
				end_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_13 end ] stop
				 */

				/**
				 * [tMap_17 end ] start
				 */

				currentComponent = "tMap_17";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_17", true);
				end_Hash.put("tMap_17", System.currentTimeMillis());

				/**
				 * [tMap_17 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tUniqRow_2_UniqOut end ] start
				 */

				currentVirtualComponent = "tUniqRow_2";

				currentComponent = "tUniqRow_2_UniqOut";

				if (rowsInBuffer_1_tUniqRow_2 > 0) {
					java.util.Arrays.<rowStruct_tUniqRow_2> sort(
							buffer_1_tUniqRow_2, 0, rowsInBuffer_1_tUniqRow_2,
							comparator_1_tUniqRow_2);

					java.io.File file_tUniqRow_2 = new java.io.File(
							workDirectory_tUniqRow_2 + "/tUniqRow_2_TEMP_"
									+ files_1_tUniqRow_2.size());

					file_tUniqRow_2.deleteOnExit();

					java.io.ObjectOutputStream rw_tUniqRow_2 = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tUniqRow_2)));
					for (int i = 0; i < rowsInBuffer_1_tUniqRow_2; i++) {
						buffer_1_tUniqRow_2[i].writeData(rw_tUniqRow_2);
					}

					rw_tUniqRow_2.close();

					files_1_tUniqRow_2.add(file_tUniqRow_2);

					rowsInBuffer_1_tUniqRow_2 = 0;
				}
				buffer_1_tUniqRow_2 = null;

				// ////////////////////////////////////
				class FileRowIterator_tUniqRow_2 implements
						java.util.Iterator<rowStruct_tUniqRow_2> {

					boolean isEndOfFile = false;

					rowStruct_tUniqRow_2[] buffer;

					ObjectInputStream ois;

					java.io.BufferedInputStream bis;

					rowStruct_tUniqRow_2 tempRow;

					int count = 0;

					int index = 0;

					public FileRowIterator_tUniqRow_2(java.io.File file,
							int bufferSize) throws IOException {
						isEndOfFile = false;
						tempRow = null;
						bis = new java.io.BufferedInputStream(
								new java.io.FileInputStream(file));
						ois = new java.io.ObjectInputStream(bis);
						buffer = new rowStruct_tUniqRow_2[bufferSize];
					}

					private void load() {
						count = 0;
						index = 0;
						try {
							if (tempRow != null) {
								buffer[count++] = tempRow;
								tempRow = null;
							}
							while (!isEndOfFile && count < buffer.length) {
								buffer[count] = new rowStruct_tUniqRow_2();
								buffer[count].readData(ois);
								count++;
							}
							if (!isEndOfFile && count >= buffer.length
									&& bis.available() == 0) {
								tempRow = new rowStruct_tUniqRow_2();
								tempRow.readData(ois);
							}
						} catch (java.lang.Exception e) {
							if (e.getCause() instanceof java.io.EOFException) {
								this.isEndOfFile = true; // the EOFException
								tempRow = null;
							} else {
								throw new RuntimeException(e);
							}
						}
					}

					public boolean hasNext() {
						return index < count || !isEndOfFile;
					}

					public rowStruct_tUniqRow_2 next() {
						if (index >= count) {
							load();
						}

						return buffer[index++];
					}

					public void remove() {
						throw new UnsupportedOperationException();
					}

					public void close() throws IOException {
						if (ois != null) {
							ois.close();
							ois = null;
						}
					}
				}

				ok_Hash.put("tUniqRow_2_UniqOut", true);
				end_Hash.put("tUniqRow_2_UniqOut", System.currentTimeMillis());

				/**
				 * [tUniqRow_2_UniqOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "encounter_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);

				String[] headColutFileOutputDelimited_5 = new String[12];
				class CSVBasicSet_tFileOutputDelimited_5 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_5[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_5 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_5[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_5 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_5[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_5[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
				csvSettings_tFileOutputDelimited_5.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_5.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {

						dir_tFileOutputDelimited_5.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}

				CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_5,
												false), context.coding)));
				CsvWritertFileOutputDelimited_5
						.setSeparator(csvSettings_tFileOutputDelimited_5
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_5
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_5.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_5.getRowDelim());
				}

				if (filetFileOutputDelimited_5.length() == 0) {

					headColutFileOutputDelimited_5[0] = "ENCOUNTER_IDE";

					headColutFileOutputDelimited_5[1] = "ENCOUNTER_IDE_SOURCE";

					headColutFileOutputDelimited_5[2] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_5[3] = "PATIENT_IDE";

					headColutFileOutputDelimited_5[4] = "PATIENT_IDE_SOURCE";

					headColutFileOutputDelimited_5[5] = "ENCOUNTER_IDE_STATUS";

					headColutFileOutputDelimited_5[6] = "UPLOAD_DATE";

					headColutFileOutputDelimited_5[7] = "UPDATE_DATE";

					headColutFileOutputDelimited_5[8] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_5[9] = "IMPORT_DATE";

					headColutFileOutputDelimited_5[10] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_5[11] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_5
							.writeNext(headColutFileOutputDelimited_5);
					CsvWritertFileOutputDelimited_5.flush();

				}

				CsvWritertFileOutputDelimited_5
						.setEscapeChar(csvSettings_tFileOutputDelimited_5
								.getEscapeChar());
				CsvWritertFileOutputDelimited_5
						.setQuoteChar(csvSettings_tFileOutputDelimited_5
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_5
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_5",
						CsvWritertFileOutputDelimited_5);

				resourceMap.put("nb_line_tFileOutputDelimited_5",
						nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tSplitRow_1 begin ] start
				 */

				ok_Hash.put("tSplitRow_1", false);
				start_Hash.put("tSplitRow_1", System.currentTimeMillis());

				currentComponent = "tSplitRow_1";

				int tos_count_tSplitRow_1 = 0;

				int nb_line_tSplitRow_1 = 0;

				/**
				 * [tSplitRow_1 begin ] stop
				 */

				/**
				 * [tUniqRow_12_UniqOut begin ] start
				 */

				ok_Hash.put("tUniqRow_12_UniqOut", false);
				start_Hash.put("tUniqRow_12_UniqOut",
						System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_12";

				currentComponent = "tUniqRow_12_UniqOut";

				int tos_count_tUniqRow_12_UniqOut = 0;

				// ////////////////////////
				int nb_tUniqRow_12 = 0;

				int bufferSize_tUniqRow_12 = 1000000;

				class rowStruct_tUniqRow_12 extends asdStruct {

					int id_tUniqRow_12;

					@Override
					public void readData(ObjectInputStream dis) {
						super.readData(dis);
						try {
							this.id_tUniqRow_12 = dis.readInt();
						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					@Override
					public String toString() {
						return "{" + super.toString() + "\t" + id_tUniqRow_12
								+ "}";
					}

					@Override
					public void writeData(ObjectOutputStream dos) {
						super.writeData(dos);
						try {
							// Integer
							dos.writeInt(this.id_tUniqRow_12);

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean duplicateTo(rowStruct_tUniqRow_12 other) {

						if (this.ENCOUNTER_NUM == null) {
							if (other.ENCOUNTER_NUM != null) {
								return false;
							}
						} else {
							if (other.ENCOUNTER_NUM == null) {
								return false;
							} else {
								if (!this.ENCOUNTER_NUM
										.equals(other.ENCOUNTER_NUM)) {
									return false;
								}
							}
						}

						if (this.PATIENT_NUM == null) {
							if (other.PATIENT_NUM != null) {
								return false;
							}
						} else {
							if (other.PATIENT_NUM == null) {
								return false;
							} else {
								if (!this.PATIENT_NUM.equals(other.PATIENT_NUM)) {
									return false;
								}
							}
						}

						return true;
					}

				}

				// comparator for first sort
				class Comparator_1_tUniqRow_12 implements
						Comparator<rowStruct_tUniqRow_12> {

					public int compare(rowStruct_tUniqRow_12 arg0,
							rowStruct_tUniqRow_12 arg1) {
						int compare = 0;
						if (arg0.ENCOUNTER_NUM == null) {
							if (arg1.ENCOUNTER_NUM != null) {
								return -1;
							}
						} else {
							if (arg1.ENCOUNTER_NUM == null) {
								return 1;
							} else {
								compare = arg0.ENCOUNTER_NUM
										.compareTo(arg1.ENCOUNTER_NUM);
								if (compare != 0) {
									return compare;
								}
							}
						}

						if (arg0.PATIENT_NUM == null) {
							if (arg1.PATIENT_NUM != null) {
								return -1;
							}
						} else {
							if (arg1.PATIENT_NUM == null) {
								return 1;
							} else {
								compare = arg0.PATIENT_NUM
										.compareTo(arg1.PATIENT_NUM);
								if (compare != 0) {
									return compare;
								}
							}
						}

						return arg0.id_tUniqRow_12 - arg1.id_tUniqRow_12;
					}

				}

				int bufferSize_1_tUniqRow_12 = bufferSize_tUniqRow_12;

				rowStruct_tUniqRow_12[] buffer_1_tUniqRow_12 = new rowStruct_tUniqRow_12[bufferSize_1_tUniqRow_12];

				for (int i_tUniqRow_12 = 0; i_tUniqRow_12 < buffer_1_tUniqRow_12.length; i_tUniqRow_12++) {
					buffer_1_tUniqRow_12[i_tUniqRow_12] = new rowStruct_tUniqRow_12();
				}

				int rowsInBuffer_1_tUniqRow_12 = 0;

				Comparator<rowStruct_tUniqRow_12> comparator_1_tUniqRow_12 = new Comparator_1_tUniqRow_12();

				java.util.ArrayList<java.io.File> files_1_tUniqRow_12 = new java.util.ArrayList<java.io.File>();

				String workDirectory_tUniqRow_12 = context.folderMain
						+ context.folderTmp;

				/**
				 * [tUniqRow_12_UniqOut begin ] stop
				 */

				/**
				 * [tMap_28 begin ] start
				 */

				ok_Hash.put("tMap_28", false);
				start_Hash.put("tMap_28", System.currentTimeMillis());

				currentComponent = "tMap_28";

				int tos_count_tMap_28 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) globalMap
						.get("tHash_Lookup_row36"));

				row36Struct row36HashKey = new row36Struct();
				row36Struct row36Default = new row36Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_28__Struct {
				}
				Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				asdStruct asd_tmp = new asdStruct();
				// ###############################

				/**
				 * [tMap_28 begin ] stop
				 */

				/**
				 * [tMap_20 begin ] start
				 */

				ok_Hash.put("tMap_20", false);
				start_Hash.put("tMap_20", System.currentTimeMillis());

				currentComponent = "tMap_20";

				int tos_count_tMap_20 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
						.get("tHash_Lookup_row20"));

				row20Struct row20HashKey = new row20Struct();
				row20Struct row20Default = new row20Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_20__Struct {
				}
				Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row6Struct row6_tmp = new row6Struct();
				iut1Struct iut1_tmp = new iut1Struct();
				// ###############################

				/**
				 * [tMap_20 begin ] stop
				 */

				/**
				 * [tUniqRow_5_UniqOut begin ] start
				 */

				ok_Hash.put("tUniqRow_5_UniqOut", false);
				start_Hash
						.put("tUniqRow_5_UniqOut", System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_5";

				currentComponent = "tUniqRow_5_UniqOut";

				int tos_count_tUniqRow_5_UniqOut = 0;

				// ////////////////////////
				int nb_tUniqRow_5 = 0;

				int bufferSize_tUniqRow_5 = 1000000;

				class rowStruct_tUniqRow_5 extends gdStruct {

					int id_tUniqRow_5;

					@Override
					public void readData(ObjectInputStream dis) {
						super.readData(dis);
						try {
							this.id_tUniqRow_5 = dis.readInt();
						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					@Override
					public String toString() {
						return "{" + super.toString() + "\t" + id_tUniqRow_5
								+ "}";
					}

					@Override
					public void writeData(ObjectOutputStream dos) {
						super.writeData(dos);
						try {
							// Integer
							dos.writeInt(this.id_tUniqRow_5);

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean duplicateTo(rowStruct_tUniqRow_5 other) {

						if (this.PATIENT_IDE == null) {
							if (other.PATIENT_IDE != null) {
								return false;
							}
						} else {
							if (other.PATIENT_IDE == null) {
								return false;
							} else {
								if (!this.PATIENT_IDE
										.equalsIgnoreCase(other.PATIENT_IDE)) {
									return false;
								}
							}
						}

						return true;
					}

				}

				// comparator for first sort
				class Comparator_1_tUniqRow_5 implements
						Comparator<rowStruct_tUniqRow_5> {

					public int compare(rowStruct_tUniqRow_5 arg0,
							rowStruct_tUniqRow_5 arg1) {
						int compare = 0;
						if (arg0.PATIENT_IDE == null) {
							if (arg1.PATIENT_IDE != null) {
								return -1;
							}
						} else {
							if (arg1.PATIENT_IDE == null) {
								return 1;
							} else {
								compare = arg0.PATIENT_IDE
										.compareToIgnoreCase(arg1.PATIENT_IDE);
								if (compare != 0) {
									return compare;
								}
							}
						}

						return arg0.id_tUniqRow_5 - arg1.id_tUniqRow_5;
					}

				}

				int bufferSize_1_tUniqRow_5 = bufferSize_tUniqRow_5;

				rowStruct_tUniqRow_5[] buffer_1_tUniqRow_5 = new rowStruct_tUniqRow_5[bufferSize_1_tUniqRow_5];

				for (int i_tUniqRow_5 = 0; i_tUniqRow_5 < buffer_1_tUniqRow_5.length; i_tUniqRow_5++) {
					buffer_1_tUniqRow_5[i_tUniqRow_5] = new rowStruct_tUniqRow_5();
				}

				int rowsInBuffer_1_tUniqRow_5 = 0;

				Comparator<rowStruct_tUniqRow_5> comparator_1_tUniqRow_5 = new Comparator_1_tUniqRow_5();

				java.util.ArrayList<java.io.File> files_1_tUniqRow_5 = new java.util.ArrayList<java.io.File>();

				String workDirectory_tUniqRow_5 = context.folderMain
						+ context.folderTmp;

				/**
				 * [tUniqRow_5_UniqOut begin ] stop
				 */

				/**
				 * [tMap_21 begin ] start
				 */

				ok_Hash.put("tMap_21", false);
				start_Hash.put("tMap_21", System.currentTimeMillis());

				currentComponent = "tMap_21";

				int tos_count_tMap_21 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_21__Struct {
				}
				Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				gdStruct gd_tmp = new gdStruct();
				// ###############################

				/**
				 * [tMap_21 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row61Struct row61_tmp = new row61Struct();
				toPatDimMapStruct toPatDimMap_tmp = new toPatDimMapStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tUniqRow_2_UniqIn begin ] start
				 */

				ok_Hash.put("tUniqRow_2_UniqIn", false);
				start_Hash.put("tUniqRow_2_UniqIn", System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_2";

				currentComponent = "tUniqRow_2_UniqIn";

				int tos_count_tUniqRow_2_UniqIn = 0;

				int bufferSizePerFile_tUniqRow_2 = 10000;

				java.util.List<FileRowIterator_tUniqRow_2> rowFileList_1_tUniqRow_2 = new java.util.ArrayList<FileRowIterator_tUniqRow_2>();
				java.util.List<rowStruct_tUniqRow_2> rowList_1_tUniqRow_2 = new java.util.ArrayList<rowStruct_tUniqRow_2>();

				for (java.io.File file : files_1_tUniqRow_2) {
					FileRowIterator_tUniqRow_2 fri = new FileRowIterator_tUniqRow_2(
							file, bufferSizePerFile_tUniqRow_2);
					rowFileList_1_tUniqRow_2.add(fri);
					rowList_1_tUniqRow_2.add(fri.next());
				}

				// comparator for second sort
				class Comparator_2_tUniqRow_2 implements
						Comparator<rowStruct_tUniqRow_2> {

					public int compare(rowStruct_tUniqRow_2 arg0,
							rowStruct_tUniqRow_2 arg1) {
						return arg0.id_tUniqRow_2 - arg1.id_tUniqRow_2;
					}

				}

				// For second sort init begin
				int bufferSize_2_tUniqRow_2 = bufferSize_tUniqRow_2;
				rowStruct_tUniqRow_2[] buffer_2_tUniqRow_2 = new rowStruct_tUniqRow_2[bufferSize_1_tUniqRow_2];
				int rowsInBuffer_2_tUniqRow_2 = 0;
				Comparator<rowStruct_tUniqRow_2> comparator_2_tUniqRow_2 = new Comparator_2_tUniqRow_2();

				java.util.ArrayList<java.io.File> files_2_tUniqRow_2 = new java.util.ArrayList<java.io.File>();
				// For second sort init end

				while (rowList_1_tUniqRow_2.size() > 0) {
					int minIndex_tUniqRow_2 = 0;
					if (rowList_1_tUniqRow_2.size() > 1) {
						for (int i = 1; i < rowList_1_tUniqRow_2.size(); i++) {
							if (comparator_1_tUniqRow_2.compare(
									rowList_1_tUniqRow_2
											.get(minIndex_tUniqRow_2),
									rowList_1_tUniqRow_2.get(i)) > 0) {
								minIndex_tUniqRow_2 = i;
							}
						}
					}

					// /////////////
					if (rowsInBuffer_2_tUniqRow_2 >= bufferSize_2_tUniqRow_2) {// buffer
																				// is
																				// full
																				// do
																				// sort
																				// and

						java.util.Arrays.<rowStruct_tUniqRow_2> sort(
								buffer_2_tUniqRow_2, 0,
								bufferSize_2_tUniqRow_2,
								comparator_2_tUniqRow_2);
						java.io.File file = new java.io.File(
								workDirectory_tUniqRow_2
										+ "/tUniqRow_2_TEMP_uniq_"
										+ files_2_tUniqRow_2.size());
						file.deleteOnExit();
						java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
								new java.io.BufferedOutputStream(
										new java.io.FileOutputStream(file)));
						for (int i = 0; i < bufferSize_2_tUniqRow_2; i++) {
							buffer_2_tUniqRow_2[i].writeData(rw);
						}
						rw.close();

						files_2_tUniqRow_2.add(file);

						rowsInBuffer_2_tUniqRow_2 = 0;
					}
					rowStruct_tUniqRow_2 minItem = rowList_1_tUniqRow_2
							.get(minIndex_tUniqRow_2);
					buffer_2_tUniqRow_2[rowsInBuffer_2_tUniqRow_2++] = minItem;
					FileRowIterator_tUniqRow_2 fri = rowFileList_1_tUniqRow_2
							.get(minIndex_tUniqRow_2);
					if (fri.hasNext()) {
						rowList_1_tUniqRow_2.set(minIndex_tUniqRow_2,
								fri.next());
					} else {
						fri.close();
						rowFileList_1_tUniqRow_2.remove(minIndex_tUniqRow_2);
						rowList_1_tUniqRow_2.remove(minIndex_tUniqRow_2);
					}

					// skip duplicates....begin-->this case is suitable for no
					// duplicate connection
					for (int i = 0; i < rowList_1_tUniqRow_2.size();) {
						if (rowList_1_tUniqRow_2.get(i).duplicateTo(minItem)) {
							rowStruct_tUniqRow_2 noDuplicateItem = null;
							FileRowIterator_tUniqRow_2 fri2 = rowFileList_1_tUniqRow_2
									.get(i);
							while (fri2.hasNext()) {
								rowStruct_tUniqRow_2 current = fri2.next();
								if (!minItem.duplicateTo(current)) {
									noDuplicateItem = current;
									break;
								}
							}
							if (noDuplicateItem == null) {
								fri2.close();
								rowFileList_1_tUniqRow_2.remove(i);
								rowList_1_tUniqRow_2.remove(i);
							} else {
								rowList_1_tUniqRow_2.set(i, noDuplicateItem);
								i++;
							}
						} else {
							i++;
						}
					}
					// skip duplicates....end
				}

				if (rowsInBuffer_2_tUniqRow_2 > 0) {

					java.util.Arrays.<rowStruct_tUniqRow_2> sort(
							buffer_2_tUniqRow_2, 0, rowsInBuffer_2_tUniqRow_2,
							comparator_2_tUniqRow_2);

					java.io.File file = new java.io.File(
							workDirectory_tUniqRow_2 + "/tUniqRow_2_TEMP_uniq_"
									+ files_2_tUniqRow_2.size());

					file.deleteOnExit();

					java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(file)));

					for (int i = 0; i < rowsInBuffer_2_tUniqRow_2; i++) {
						buffer_2_tUniqRow_2[i].writeData(rw);
					}

					rw.close();

					files_2_tUniqRow_2.add(file);

					rowsInBuffer_2_tUniqRow_2 = 0;
				}
				buffer_2_tUniqRow_2 = null;
				java.util.List<FileRowIterator_tUniqRow_2> rowFileList_2_tUniqRow_2 = new java.util.ArrayList<FileRowIterator_tUniqRow_2>();
				java.util.List<rowStruct_tUniqRow_2> rowList_2_tUniqRow_2 = new java.util.ArrayList<rowStruct_tUniqRow_2>();

				for (java.io.File file : files_2_tUniqRow_2) {
					FileRowIterator_tUniqRow_2 fri = new FileRowIterator_tUniqRow_2(
							file, bufferSizePerFile_tUniqRow_2);
					rowFileList_2_tUniqRow_2.add(fri);
					rowList_2_tUniqRow_2.add(fri.next());
				}

				int nb_uniq_tUniqRow_2 = 0;
				while (rowList_2_tUniqRow_2.size() > 0) {
					int minIndex_tUniqRow_2 = 0;
					if (rowList_2_tUniqRow_2.size() > 1) {
						for (int i = 1; i < rowList_2_tUniqRow_2.size(); i++) {
							if (comparator_2_tUniqRow_2.compare(
									rowList_2_tUniqRow_2
											.get(minIndex_tUniqRow_2),
									rowList_2_tUniqRow_2.get(i)) > 0) {
								minIndex_tUniqRow_2 = i;
							}
						}
					}

					// /////////////

					rowStruct_tUniqRow_2 current = rowList_2_tUniqRow_2
							.get(minIndex_tUniqRow_2);

					// ////////////
					FileRowIterator_tUniqRow_2 fri = rowFileList_2_tUniqRow_2
							.get(minIndex_tUniqRow_2);
					if (fri.hasNext()) {
						rowList_2_tUniqRow_2.set(minIndex_tUniqRow_2,
								fri.next());
					} else {
						fri.close();
						rowFileList_2_tUniqRow_2.remove(minIndex_tUniqRow_2);
						rowList_2_tUniqRow_2.remove(minIndex_tUniqRow_2);
					}
					row222.SubjectKey = current.SubjectKey;

					row222.itemGroupRepeatKey = current.itemGroupRepeatKey;

					row222.Update_Date = current.Update_Date;

					row222.Import_Date = current.Import_Date;

					row222.Download_Date = current.Download_Date;

					row222.StudyEventRepeatKey = current.StudyEventRepeatKey;

					row222.startDate = current.startDate;

					row222.endDate = current.endDate;

					row222.source = current.source;

					row222.FormRepeatKey = current.FormRepeatKey;

					nb_uniq_tUniqRow_2++;

					/**
					 * [tUniqRow_2_UniqIn begin ] stop
					 */
					/**
					 * [tUniqRow_2_UniqIn main ] start
					 */

					currentVirtualComponent = "tUniqRow_2";

					currentComponent = "tUniqRow_2_UniqIn";

					tos_count_tUniqRow_2_UniqIn++;

					/**
					 * [tUniqRow_2_UniqIn main ] stop
					 */
					// Start of branch "row222"
					if (row222 != null) {

						/**
						 * [tJavaRow_7 main ] start
						 */

						currentComponent = "tJavaRow_7";

						// Code generated according to input schema and output
						// schema
						context.lastPatient++;
						row2.SubjectKey = row222.SubjectKey;
						row2.itemGroupRepeatKey = row222.itemGroupRepeatKey;
						row2.Update_Date = row222.Update_Date;
						row2.Import_Date = row222.Import_Date;
						row2.Download_Date = row222.Download_Date;
						row2.StudyEventRepeatKey = row222.StudyEventRepeatKey;
						row2.startDate = row222.startDate;
						row2.endDate = row222.endDate;
						row2.source = row222.source;
						row2.FormRepeatKey = row222.FormRepeatKey;

						nb_line_tJavaRow_7++;

						tos_count_tJavaRow_7++;

						/**
						 * [tJavaRow_7 main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							row61 = null;
							toPatDimMap = null;

							// # Output table : 'row61'
							row61_tmp.ENCOUNTER_IDE = row2.StudyEventRepeatKey != null ? ""
									+ (row2.StudyEventRepeatKey.hashCode() + row2.SubjectKey
											.hashCode())
									: "" + (row2.SubjectKey.hashCode());
							row61_tmp.ENCOUNTER_IDE_SOURCE = "HIVE";
							row61_tmp.ENCOUNTER_NUM = row2.StudyEventRepeatKey != null ? new BigDecimal(
									row2.StudyEventRepeatKey.hashCode()
											+ row2.SubjectKey.hashCode())
									: new BigDecimal(row2.SubjectKey.hashCode());
							row61_tmp.PATIENT_IDE = row2.SubjectKey;
							row61_tmp.PATIENT_IDE_SOURCE = "HIVE";
							row61_tmp.ENCOUNTER_IDE_STATUS = "A";
							row61_tmp.UPLOAD_DATE = TalendDate.getCurrentDate();
							row61_tmp.UPDATE_DATE = row2.Update_Date;
							row61_tmp.DOWNLOAD_DATE = row2.Download_Date;
							row61_tmp.IMPORT_DATE = row2.Import_Date;
							row61_tmp.SOURCESYSTEM_CD = row2.source;
							row61_tmp.UPLOAD_ID = null;
							row61_tmp.startDate = row2.startDate;
							row61_tmp.endDate = row2.endDate;
							row61 = row61_tmp;

							// # Output table : 'toPatDimMap'
							toPatDimMap_tmp.PATIENT_IDE = row2.SubjectKey;
							toPatDimMap_tmp.PATIENT_NUM = new BigDecimal(
									context.lastPatient);
							toPatDimMap_tmp.PATIENT_IDE_STATUS = null;
							toPatDimMap_tmp.UPLOAD_DATE = TalendDate
									.getCurrentDate();
							toPatDimMap_tmp.UPDATE_DATE = row2.Update_Date;
							toPatDimMap_tmp.DOWNLOAD_DATE = row2.Download_Date;
							toPatDimMap_tmp.IMPORT_DATE = row2.Import_Date;
							toPatDimMap_tmp.SOURCESYSTEM_CD = null;
							toPatDimMap_tmp.UPLOAD_ID = null;
							toPatDimMap = toPatDimMap_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "row61"
						if (row61 != null) {

							/**
							 * [tMap_20 main ] start
							 */

							currentComponent = "tMap_20";

							boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_20 = false;
							boolean mainRowRejected_tMap_20 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row20"
							// /////////////////////////////////////////////

							boolean forceLooprow20 = false;

							row20Struct row20ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_20) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_20 = false;

								row20HashKey.ENCOUNTER_NUM = row61.ENCOUNTER_NUM;

								row20HashKey.PATIENT_IDE = row61.PATIENT_IDE;

								row20HashKey.hashCodeDirty = true;

								tHash_Lookup_row20.lookup(row20HashKey);

								if (!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_20 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row20 != null
									&& tHash_Lookup_row20
											.getCount(row20HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.ENCOUNTER_NUM = '"
								// + row20HashKey.ENCOUNTER_NUM +
								// "', row20.PATIENT_IDE = '" +
								// row20HashKey.PATIENT_IDE + "'");
							} // G 071

							row20Struct row20 = null;

							row20Struct fromLookup_row20 = null;
							row20 = row20Default;

							if (tHash_Lookup_row20 != null
									&& tHash_Lookup_row20.hasNext()) { // G 099

								fromLookup_row20 = tHash_Lookup_row20.next();

							} // G 099

							if (fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
								// ###############################
								// # Output tables

								row6 = null;
								iut1 = null;

								if (!rejectedInnerJoin_tMap_20) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'row6'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_20) {
									row6_tmp.ENCOUNTER_IDE = row61.ENCOUNTER_IDE;
									row6_tmp.ENCOUNTER_IDE_SOURCE = row61.ENCOUNTER_IDE_SOURCE;
									row6_tmp.ENCOUNTER_NUM = row61.ENCOUNTER_NUM;
									row6_tmp.PATIENT_IDE = row61.PATIENT_IDE;
									row6_tmp.PATIENT_IDE_SOURCE = row61.PATIENT_IDE_SOURCE;
									row6_tmp.ENCOUNTER_IDE_STATUS = row61.ENCOUNTER_IDE_STATUS;
									row6_tmp.UPLOAD_DATE = row61.UPLOAD_DATE;
									row6_tmp.UPDATE_DATE = row61.UPDATE_DATE;
									row6_tmp.DOWNLOAD_DATE = row61.DOWNLOAD_DATE;
									row6_tmp.IMPORT_DATE = row61.IMPORT_DATE;
									row6_tmp.SOURCESYSTEM_CD = row61.SOURCESYSTEM_CD;
									row6_tmp.UPLOAD_ID = row61.UPLOAD_ID;
									row6 = row6_tmp;
								} // closing filter/reject

								// # Output reject table : 'iut1'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_20) {
									iut1_tmp.ENCOUNTER_NUM = row61.ENCOUNTER_NUM;
									iut1_tmp.PATIENT_IDE = row61.PATIENT_IDE;
									iut1_tmp.ACTIVE_STATUS_CD = null;
									iut1_tmp.START_DATE = row61.startDate;
									iut1_tmp.END_DATE = row61.endDate;
									iut1_tmp.INOUT_CD = null;
									iut1_tmp.LOCATION_CD = null;
									iut1_tmp.LOCATION_PATH = null;
									iut1_tmp.LENGTH_OF_STAY = null;
									iut1_tmp.VISIT_BLOB = null;
									iut1_tmp.UPDATE_DATE = row61.UPDATE_DATE;
									iut1_tmp.DOWNLOAD_DATE = row61.DOWNLOAD_DATE;
									iut1_tmp.IMPORT_DATE = row61.IMPORT_DATE;
									iut1_tmp.SOURCESYSTEM_CD = row61.SOURCESYSTEM_CD;
									iut1_tmp.UPLOAD_ID = row61.UPLOAD_ID;
									iut1 = iut1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_20 = false;

							tos_count_tMap_20++;

							/**
							 * [tMap_20 main ] stop
							 */
							// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tSplitRow_1 main ] start
								 */

								currentComponent = "tSplitRow_1";

								java.util.List<row9Struct> rows_tSplitRow_1 = new java.util.ArrayList<row9Struct>(
										2);
								row9Struct rowTmp_tSplitRow_1 = null;

								// cache output rows for the loop
								rowTmp_tSplitRow_1 = new row9Struct();

								rowTmp_tSplitRow_1.ENCOUNTER_IDE = row6.ENCOUNTER_NUM
										.toString();
								rowTmp_tSplitRow_1.ENCOUNTER_IDE_SOURCE = "HIVE";
								rowTmp_tSplitRow_1.ENCOUNTER_NUM = row6.ENCOUNTER_NUM;
								rowTmp_tSplitRow_1.PATIENT_IDE = row6.PATIENT_IDE;
								rowTmp_tSplitRow_1.PATIENT_IDE_SOURCE = "HIVE";
								rowTmp_tSplitRow_1.ENCOUNTER_IDE_STATUS = "A";
								rowTmp_tSplitRow_1.UPLOAD_DATE = row6.UPLOAD_DATE;
								rowTmp_tSplitRow_1.UPDATE_DATE = row6.UPDATE_DATE;
								rowTmp_tSplitRow_1.DOWNLOAD_DATE = row6.DOWNLOAD_DATE;
								rowTmp_tSplitRow_1.IMPORT_DATE = row6.IMPORT_DATE;
								rowTmp_tSplitRow_1.SOURCESYSTEM_CD = row6.SOURCESYSTEM_CD;
								rowTmp_tSplitRow_1.UPLOAD_ID = row6.UPLOAD_ID;
								rows_tSplitRow_1.add(rowTmp_tSplitRow_1);
								nb_line_tSplitRow_1++;
								rowTmp_tSplitRow_1 = new row9Struct();

								rowTmp_tSplitRow_1.ENCOUNTER_IDE = row6.ENCOUNTER_IDE;
								rowTmp_tSplitRow_1.ENCOUNTER_IDE_SOURCE = "IDRT";
								rowTmp_tSplitRow_1.ENCOUNTER_NUM = row6.ENCOUNTER_NUM;
								rowTmp_tSplitRow_1.PATIENT_IDE = row6.PATIENT_IDE;
								rowTmp_tSplitRow_1.PATIENT_IDE_SOURCE = "HIVE";
								rowTmp_tSplitRow_1.ENCOUNTER_IDE_STATUS = "A";
								rowTmp_tSplitRow_1.UPLOAD_DATE = row6.UPLOAD_DATE;
								rowTmp_tSplitRow_1.UPDATE_DATE = row6.UPDATE_DATE;
								rowTmp_tSplitRow_1.DOWNLOAD_DATE = row6.DOWNLOAD_DATE;
								rowTmp_tSplitRow_1.IMPORT_DATE = row6.IMPORT_DATE;
								rowTmp_tSplitRow_1.SOURCESYSTEM_CD = row6.SOURCESYSTEM_CD;
								rowTmp_tSplitRow_1.UPLOAD_ID = row6.UPLOAD_ID;
								rows_tSplitRow_1.add(rowTmp_tSplitRow_1);
								nb_line_tSplitRow_1++;

								for (row9Struct row_tSplitRow_1 : rows_tSplitRow_1) {// C_01
									row9 = row_tSplitRow_1;

									tos_count_tSplitRow_1++;

									/**
									 * [tSplitRow_1 main ] stop
									 */
									// Start of branch "row9"
									if (row9 != null) {

										/**
										 * [tFileOutputDelimited_5 main ] start
										 */

										currentComponent = "tFileOutputDelimited_5";

										String[] rowtFileOutputDelimited_5 = new String[12];

										rowtFileOutputDelimited_5[0] = row9.ENCOUNTER_IDE == null ? ""
												: row9.ENCOUNTER_IDE;

										rowtFileOutputDelimited_5[1] = row9.ENCOUNTER_IDE_SOURCE == null ? ""
												: row9.ENCOUNTER_IDE_SOURCE;

										rowtFileOutputDelimited_5[2] = row9.ENCOUNTER_NUM == null ? ""
												: row9.ENCOUNTER_NUM
														.toPlainString();

										rowtFileOutputDelimited_5[3] = row9.PATIENT_IDE == null ? ""
												: row9.PATIENT_IDE;

										rowtFileOutputDelimited_5[4] = row9.PATIENT_IDE_SOURCE == null ? ""
												: row9.PATIENT_IDE_SOURCE;

										rowtFileOutputDelimited_5[5] = row9.ENCOUNTER_IDE_STATUS == null ? ""
												: row9.ENCOUNTER_IDE_STATUS;

										rowtFileOutputDelimited_5[6] = row9.UPLOAD_DATE == null ? ""
												: FormatterUtils.format_Date(
														row9.UPLOAD_DATE,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_5[7] = row9.UPDATE_DATE == null ? ""
												: FormatterUtils.format_Date(
														row9.UPDATE_DATE,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_5[8] = row9.DOWNLOAD_DATE == null ? ""
												: FormatterUtils.format_Date(
														row9.DOWNLOAD_DATE,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_5[9] = row9.IMPORT_DATE == null ? ""
												: FormatterUtils.format_Date(
														row9.IMPORT_DATE,
														"dd-MM-yyyy");

										rowtFileOutputDelimited_5[10] = row9.SOURCESYSTEM_CD == null ? ""
												: row9.SOURCESYSTEM_CD;

										rowtFileOutputDelimited_5[11] = row9.UPLOAD_ID == null ? ""
												: row9.UPLOAD_ID;

										nb_line_tFileOutputDelimited_5++;
										resourceMap
												.put("nb_line_tFileOutputDelimited_5",
														nb_line_tFileOutputDelimited_5);
										CsvWritertFileOutputDelimited_5
												.writeNext(rowtFileOutputDelimited_5);

										tos_count_tFileOutputDelimited_5++;

										/**
										 * [tFileOutputDelimited_5 main ] stop
										 */

									} // End of branch "row9"

								} // C_01

							} // End of branch "row6"

							// Start of branch "iut1"
							if (iut1 != null) {

								/**
								 * [tMap_28 main ] start
								 */

								currentComponent = "tMap_28";

								boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_28 = false;
								boolean mainRowRejected_tMap_28 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row36"
								// /////////////////////////////////////////////

								boolean forceLooprow36 = false;

								row36Struct row36ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_28) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_28 = false;

									row36HashKey.PATIENT_IDE = iut1.PATIENT_IDE;

									row36HashKey.hashCodeDirty = true;

									tHash_Lookup_row36.lookup(row36HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row36 != null
										&& tHash_Lookup_row36
												.getCount(row36HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row36' and it contains more one result from keys :  row36.PATIENT_IDE = '"
									// + row36HashKey.PATIENT_IDE + "'");
								} // G 071

								row36Struct row36 = null;

								row36Struct fromLookup_row36 = null;
								row36 = row36Default;

								if (tHash_Lookup_row36 != null
										&& tHash_Lookup_row36.hasNext()) { // G
																			// 099

									fromLookup_row36 = tHash_Lookup_row36
											.next();

								} // G 099

								if (fromLookup_row36 != null) {
									row36 = fromLookup_row36;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
									// ###############################
									// # Output tables

									asd = null;

									// # Output table : 'asd'
									asd_tmp.ENCOUNTER_NUM = iut1.ENCOUNTER_NUM;
									asd_tmp.PATIENT_NUM = context.lastPatient;
									asd_tmp.ACTIVE_STATUS_CD = iut1.ACTIVE_STATUS_CD;
									asd_tmp.START_DATE = iut1.START_DATE;
									asd_tmp.END_DATE = iut1.END_DATE;
									asd_tmp.INOUT_CD = iut1.INOUT_CD;
									asd_tmp.LOCATION_CD = iut1.LOCATION_CD;
									asd_tmp.LOCATION_PATH = iut1.LOCATION_PATH;
									asd_tmp.LENGTH_OF_STAY = iut1.LENGTH_OF_STAY;
									asd_tmp.VISIT_BLOB = iut1.VISIT_BLOB;
									asd_tmp.UPDATE_DATE = iut1.UPDATE_DATE;
									asd_tmp.DOWNLOAD_DATE = iut1.DOWNLOAD_DATE;
									asd_tmp.IMPORT_DATE = iut1.IMPORT_DATE;
									asd_tmp.SOURCESYSTEM_CD = iut1.SOURCESYSTEM_CD;
									asd_tmp.UPLOAD_ID = iut1.UPLOAD_ID;
									asd = asd_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_28 = false;

								tos_count_tMap_28++;

								/**
								 * [tMap_28 main ] stop
								 */
								// Start of branch "asd"
								if (asd != null) {

									/**
									 * [tUniqRow_12_UniqOut main ] start
									 */

									currentVirtualComponent = "tUniqRow_12";

									currentComponent = "tUniqRow_12_UniqOut";

									if (rowsInBuffer_1_tUniqRow_12 >= bufferSize_1_tUniqRow_12) {// buffer
																									// is
																									// full
																									// do
																									// sort
																									// and

										java.util.Arrays
												.<rowStruct_tUniqRow_12> sort(
														buffer_1_tUniqRow_12,
														0,
														bufferSize_1_tUniqRow_12,
														comparator_1_tUniqRow_12);

										java.io.File file_tUniqRow_12 = new java.io.File(
												workDirectory_tUniqRow_12
														+ "/tUniqRow_12_TEMP_"
														+ files_1_tUniqRow_12
																.size());

										file_tUniqRow_12.deleteOnExit();

										java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
												new java.io.BufferedOutputStream(
														new java.io.FileOutputStream(
																file_tUniqRow_12)));

										for (int i_tUniqRow_12 = 0; i_tUniqRow_12 < bufferSize_1_tUniqRow_12; i_tUniqRow_12++) {
											buffer_1_tUniqRow_12[i_tUniqRow_12]
													.writeData(rw);
										}

										rw.close();

										files_1_tUniqRow_12
												.add(file_tUniqRow_12);

										rowsInBuffer_1_tUniqRow_12 = 0;
									}
									rowStruct_tUniqRow_12 row_tUniqRow_12 = buffer_1_tUniqRow_12[rowsInBuffer_1_tUniqRow_12++];
									row_tUniqRow_12.id_tUniqRow_12 = ++nb_tUniqRow_12;
									row_tUniqRow_12.ENCOUNTER_NUM = asd.ENCOUNTER_NUM;

									row_tUniqRow_12.PATIENT_NUM = asd.PATIENT_NUM;

									row_tUniqRow_12.ACTIVE_STATUS_CD = asd.ACTIVE_STATUS_CD;

									row_tUniqRow_12.START_DATE = asd.START_DATE;

									row_tUniqRow_12.END_DATE = asd.END_DATE;

									row_tUniqRow_12.INOUT_CD = asd.INOUT_CD;

									row_tUniqRow_12.LOCATION_CD = asd.LOCATION_CD;

									row_tUniqRow_12.LOCATION_PATH = asd.LOCATION_PATH;

									row_tUniqRow_12.LENGTH_OF_STAY = asd.LENGTH_OF_STAY;

									row_tUniqRow_12.VISIT_BLOB = asd.VISIT_BLOB;

									row_tUniqRow_12.UPDATE_DATE = asd.UPDATE_DATE;

									row_tUniqRow_12.DOWNLOAD_DATE = asd.DOWNLOAD_DATE;

									row_tUniqRow_12.IMPORT_DATE = asd.IMPORT_DATE;

									row_tUniqRow_12.SOURCESYSTEM_CD = asd.SOURCESYSTEM_CD;

									row_tUniqRow_12.UPLOAD_ID = asd.UPLOAD_ID;

									tos_count_tUniqRow_12_UniqOut++;

									/**
									 * [tUniqRow_12_UniqOut main ] stop
									 */

								} // End of branch "asd"

							} // End of branch "iut1"

						} // End of branch "row61"

						// Start of branch "toPatDimMap"
						if (toPatDimMap != null) {

							/**
							 * [tMap_21 main ] start
							 */

							currentComponent = "tMap_21";

							boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_21 = false;
							boolean mainRowRejected_tMap_21 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row18"
							// /////////////////////////////////////////////

							boolean forceLooprow18 = false;

							row18Struct row18ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_21) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_21 = false;

								row18HashKey.PATIENT_IDE = toPatDimMap.PATIENT_IDE;

								row18HashKey.hashCodeDirty = true;

								tHash_Lookup_row18.lookup(row18HashKey);

								if (!tHash_Lookup_row18.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_21 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18
											.getCount(row18HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.PATIENT_IDE = '"
								// + row18HashKey.PATIENT_IDE + "'");
							} // G 071

							row18Struct row18 = null;

							row18Struct fromLookup_row18 = null;
							row18 = row18Default;

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18.hasNext()) { // G 099

								fromLookup_row18 = tHash_Lookup_row18.next();

							} // G 099

							if (fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
								// ###############################
								// # Output tables

								gd = null;

								if (!rejectedInnerJoin_tMap_21) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'gd'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_21) {
									gd_tmp.PATIENT_IDE = toPatDimMap.PATIENT_IDE;
									gd_tmp.PATIENT_NUM = toPatDimMap.PATIENT_NUM;
									gd_tmp.PATIENT_IDE_STATUS = toPatDimMap.PATIENT_IDE_STATUS;
									gd_tmp.UPLOAD_DATE = toPatDimMap.UPLOAD_DATE;
									gd_tmp.UPDATE_DATE = toPatDimMap.UPDATE_DATE;
									gd_tmp.DOWNLOAD_DATE = toPatDimMap.DOWNLOAD_DATE;
									gd_tmp.IMPORT_DATE = toPatDimMap.IMPORT_DATE;
									gd_tmp.SOURCESYSTEM_CD = toPatDimMap.SOURCESYSTEM_CD;
									gd_tmp.UPLOAD_ID = toPatDimMap.UPLOAD_ID;
									gd = gd_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_21 = false;

							tos_count_tMap_21++;

							/**
							 * [tMap_21 main ] stop
							 */
							// Start of branch "gd"
							if (gd != null) {

								/**
								 * [tUniqRow_5_UniqOut main ] start
								 */

								currentVirtualComponent = "tUniqRow_5";

								currentComponent = "tUniqRow_5_UniqOut";

								if (rowsInBuffer_1_tUniqRow_5 >= bufferSize_1_tUniqRow_5) {// buffer
																							// is
																							// full
																							// do
																							// sort
																							// and

									java.util.Arrays
											.<rowStruct_tUniqRow_5> sort(
													buffer_1_tUniqRow_5, 0,
													bufferSize_1_tUniqRow_5,
													comparator_1_tUniqRow_5);

									java.io.File file_tUniqRow_5 = new java.io.File(
											workDirectory_tUniqRow_5
													+ "/tUniqRow_5_TEMP_"
													+ files_1_tUniqRow_5.size());

									file_tUniqRow_5.deleteOnExit();

									java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
											new java.io.BufferedOutputStream(
													new java.io.FileOutputStream(
															file_tUniqRow_5)));

									for (int i_tUniqRow_5 = 0; i_tUniqRow_5 < bufferSize_1_tUniqRow_5; i_tUniqRow_5++) {
										buffer_1_tUniqRow_5[i_tUniqRow_5]
												.writeData(rw);
									}

									rw.close();

									files_1_tUniqRow_5.add(file_tUniqRow_5);

									rowsInBuffer_1_tUniqRow_5 = 0;
								}
								rowStruct_tUniqRow_5 row_tUniqRow_5 = buffer_1_tUniqRow_5[rowsInBuffer_1_tUniqRow_5++];
								row_tUniqRow_5.id_tUniqRow_5 = ++nb_tUniqRow_5;
								row_tUniqRow_5.PATIENT_IDE = gd.PATIENT_IDE;

								row_tUniqRow_5.PATIENT_NUM = gd.PATIENT_NUM;

								row_tUniqRow_5.PATIENT_IDE_STATUS = gd.PATIENT_IDE_STATUS;

								row_tUniqRow_5.UPLOAD_DATE = gd.UPLOAD_DATE;

								row_tUniqRow_5.UPDATE_DATE = gd.UPDATE_DATE;

								row_tUniqRow_5.DOWNLOAD_DATE = gd.DOWNLOAD_DATE;

								row_tUniqRow_5.IMPORT_DATE = gd.IMPORT_DATE;

								row_tUniqRow_5.SOURCESYSTEM_CD = gd.SOURCESYSTEM_CD;

								row_tUniqRow_5.UPLOAD_ID = gd.UPLOAD_ID;

								tos_count_tUniqRow_5_UniqOut++;

								/**
								 * [tUniqRow_5_UniqOut main ] stop
								 */

							} // End of branch "gd"

						} // End of branch "toPatDimMap"

					} // End of branch "row222"

					/**
					 * [tUniqRow_2_UniqIn end ] start
					 */

					currentVirtualComponent = "tUniqRow_2";

					currentComponent = "tUniqRow_2_UniqIn";

				}
				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniq_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_tUniqRow_2
						- nb_uniq_tUniqRow_2);

				ok_Hash.put("tUniqRow_2_UniqIn", true);
				end_Hash.put("tUniqRow_2_UniqIn", System.currentTimeMillis());

				/**
				 * [tUniqRow_2_UniqIn end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMap_20 end ] start
				 */

				currentComponent = "tMap_20";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row20 != null) {
					tHash_Lookup_row20.endGet();
				}
				globalMap.remove("tHash_Lookup_row20");

				// ###############################

				ok_Hash.put("tMap_20", true);
				end_Hash.put("tMap_20", System.currentTimeMillis());

				/**
				 * [tMap_20 end ] stop
				 */

				/**
				 * [tSplitRow_1 end ] start
				 */

				currentComponent = "tSplitRow_1";

				globalMap.put("tSplitRow_1_NB_LINE", nb_line_tSplitRow_1);

				ok_Hash.put("tSplitRow_1", true);
				end_Hash.put("tSplitRow_1", System.currentTimeMillis());

				/**
				 * [tSplitRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (CsvWritertFileOutputDelimited_5 != null) {
					CsvWritertFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE",
						nb_line_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_28 end ] start
				 */

				currentComponent = "tMap_28";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row36 != null) {
					tHash_Lookup_row36.endGet();
				}
				globalMap.remove("tHash_Lookup_row36");

				// ###############################

				ok_Hash.put("tMap_28", true);
				end_Hash.put("tMap_28", System.currentTimeMillis());

				/**
				 * [tMap_28 end ] stop
				 */

				/**
				 * [tUniqRow_12_UniqOut end ] start
				 */

				currentVirtualComponent = "tUniqRow_12";

				currentComponent = "tUniqRow_12_UniqOut";

				if (rowsInBuffer_1_tUniqRow_12 > 0) {
					java.util.Arrays.<rowStruct_tUniqRow_12> sort(
							buffer_1_tUniqRow_12, 0,
							rowsInBuffer_1_tUniqRow_12,
							comparator_1_tUniqRow_12);

					java.io.File file_tUniqRow_12 = new java.io.File(
							workDirectory_tUniqRow_12 + "/tUniqRow_12_TEMP_"
									+ files_1_tUniqRow_12.size());

					file_tUniqRow_12.deleteOnExit();

					java.io.ObjectOutputStream rw_tUniqRow_12 = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tUniqRow_12)));
					for (int i = 0; i < rowsInBuffer_1_tUniqRow_12; i++) {
						buffer_1_tUniqRow_12[i].writeData(rw_tUniqRow_12);
					}

					rw_tUniqRow_12.close();

					files_1_tUniqRow_12.add(file_tUniqRow_12);

					rowsInBuffer_1_tUniqRow_12 = 0;
				}
				buffer_1_tUniqRow_12 = null;

				// ////////////////////////////////////
				class FileRowIterator_tUniqRow_12 implements
						java.util.Iterator<rowStruct_tUniqRow_12> {

					boolean isEndOfFile = false;

					rowStruct_tUniqRow_12[] buffer;

					ObjectInputStream ois;

					java.io.BufferedInputStream bis;

					rowStruct_tUniqRow_12 tempRow;

					int count = 0;

					int index = 0;

					public FileRowIterator_tUniqRow_12(java.io.File file,
							int bufferSize) throws IOException {
						isEndOfFile = false;
						tempRow = null;
						bis = new java.io.BufferedInputStream(
								new java.io.FileInputStream(file));
						ois = new java.io.ObjectInputStream(bis);
						buffer = new rowStruct_tUniqRow_12[bufferSize];
					}

					private void load() {
						count = 0;
						index = 0;
						try {
							if (tempRow != null) {
								buffer[count++] = tempRow;
								tempRow = null;
							}
							while (!isEndOfFile && count < buffer.length) {
								buffer[count] = new rowStruct_tUniqRow_12();
								buffer[count].readData(ois);
								count++;
							}
							if (!isEndOfFile && count >= buffer.length
									&& bis.available() == 0) {
								tempRow = new rowStruct_tUniqRow_12();
								tempRow.readData(ois);
							}
						} catch (java.lang.Exception e) {
							if (e.getCause() instanceof java.io.EOFException) {
								this.isEndOfFile = true; // the EOFException
								tempRow = null;
							} else {
								throw new RuntimeException(e);
							}
						}
					}

					public boolean hasNext() {
						return index < count || !isEndOfFile;
					}

					public rowStruct_tUniqRow_12 next() {
						if (index >= count) {
							load();
						}

						return buffer[index++];
					}

					public void remove() {
						throw new UnsupportedOperationException();
					}

					public void close() throws IOException {
						if (ois != null) {
							ois.close();
							ois = null;
						}
					}
				}

				ok_Hash.put("tUniqRow_12_UniqOut", true);
				end_Hash.put("tUniqRow_12_UniqOut", System.currentTimeMillis());

				/**
				 * [tUniqRow_12_UniqOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_26 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_26", false);
				start_Hash.put("tFileOutputDelimited_26",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_26";

				int tos_count_tFileOutputDelimited_26 = 0;

				String fileName_tFileOutputDelimited_26 = "";
				fileName_tFileOutputDelimited_26 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "visit_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_26 = null;
				String extension_tFileOutputDelimited_26 = null;
				String directory_tFileOutputDelimited_26 = null;
				if ((fileName_tFileOutputDelimited_26.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_26.lastIndexOf(".") < fileName_tFileOutputDelimited_26
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
						extension_tFileOutputDelimited_26 = "";
					} else {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(0, fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
						extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
							.substring(0, fileName_tFileOutputDelimited_26
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_26.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(0, fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
						extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
						extension_tFileOutputDelimited_26 = "";
					}
					directory_tFileOutputDelimited_26 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_26 = true;
				java.io.File filetFileOutputDelimited_26 = new java.io.File(
						fileName_tFileOutputDelimited_26);
				globalMap.put("tFileOutputDelimited_26_FILE_NAME",
						fileName_tFileOutputDelimited_26);

				String[] headColutFileOutputDelimited_26 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_26 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_26[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_26 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_26[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_26[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_26 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_26[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_26[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_26 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_26[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_26 = 0;
				int splitEvery_tFileOutputDelimited_26 = 1000;
				int splitedFileNo_tFileOutputDelimited_26 = 0;
				int currentRow_tFileOutputDelimited_26 = 0;

				CSVBasicSet_tFileOutputDelimited_26 csvSettings_tFileOutputDelimited_26 = new CSVBasicSet_tFileOutputDelimited_26();
				csvSettings_tFileOutputDelimited_26.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_26.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_26.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_26 != null
						&& directory_tFileOutputDelimited_26.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_26 = new java.io.File(
							directory_tFileOutputDelimited_26);
					if (!dir_tFileOutputDelimited_26.exists()) {

						dir_tFileOutputDelimited_26.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_26 = null;

				java.io.File fileToDelete_tFileOutputDelimited_26 = new java.io.File(
						fileName_tFileOutputDelimited_26);
				if (fileToDelete_tFileOutputDelimited_26.exists()) {
					fileToDelete_tFileOutputDelimited_26.delete();
				}

				CsvWritertFileOutputDelimited_26 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_26,
												false), context.coding)));
				CsvWritertFileOutputDelimited_26
						.setSeparator(csvSettings_tFileOutputDelimited_26
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_26
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_26.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_26.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_26
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_26
											.getRowDelim());
				}

				if (filetFileOutputDelimited_26.length() == 0) {

					headColutFileOutputDelimited_26[0] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_26[1] = "PATIENT_NUM";

					headColutFileOutputDelimited_26[2] = "ACTIVE_STATUS_CD";

					headColutFileOutputDelimited_26[3] = "START_DATE";

					headColutFileOutputDelimited_26[4] = "END_DATE";

					headColutFileOutputDelimited_26[5] = "INOUT_CD";

					headColutFileOutputDelimited_26[6] = "LOCATION_CD";

					headColutFileOutputDelimited_26[7] = "LOCATION_PATH";

					headColutFileOutputDelimited_26[8] = "LENGTH_OF_STAY";

					headColutFileOutputDelimited_26[9] = "VISIT_BLOB";

					headColutFileOutputDelimited_26[10] = "UPDATE_DATE";

					headColutFileOutputDelimited_26[11] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_26[12] = "IMPORT_DATE";

					headColutFileOutputDelimited_26[13] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_26[14] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_26
							.writeNext(headColutFileOutputDelimited_26);
					CsvWritertFileOutputDelimited_26.flush();

				}

				CsvWritertFileOutputDelimited_26
						.setEscapeChar(csvSettings_tFileOutputDelimited_26
								.getEscapeChar());
				CsvWritertFileOutputDelimited_26
						.setQuoteChar(csvSettings_tFileOutputDelimited_26
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_26
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_26",
						CsvWritertFileOutputDelimited_26);

				resourceMap.put("nb_line_tFileOutputDelimited_26",
						nb_line_tFileOutputDelimited_26);

				/**
				 * [tFileOutputDelimited_26 begin ] stop
				 */

				/**
				 * [tUniqRow_12_UniqIn begin ] start
				 */

				ok_Hash.put("tUniqRow_12_UniqIn", false);
				start_Hash
						.put("tUniqRow_12_UniqIn", System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_12";

				currentComponent = "tUniqRow_12_UniqIn";

				int tos_count_tUniqRow_12_UniqIn = 0;

				int bufferSizePerFile_tUniqRow_12 = 10000;

				java.util.List<FileRowIterator_tUniqRow_12> rowFileList_1_tUniqRow_12 = new java.util.ArrayList<FileRowIterator_tUniqRow_12>();
				java.util.List<rowStruct_tUniqRow_12> rowList_1_tUniqRow_12 = new java.util.ArrayList<rowStruct_tUniqRow_12>();

				for (java.io.File file : files_1_tUniqRow_12) {
					FileRowIterator_tUniqRow_12 fri = new FileRowIterator_tUniqRow_12(
							file, bufferSizePerFile_tUniqRow_12);
					rowFileList_1_tUniqRow_12.add(fri);
					rowList_1_tUniqRow_12.add(fri.next());
				}

				// comparator for second sort
				class Comparator_2_tUniqRow_12 implements
						Comparator<rowStruct_tUniqRow_12> {

					public int compare(rowStruct_tUniqRow_12 arg0,
							rowStruct_tUniqRow_12 arg1) {
						return arg0.id_tUniqRow_12 - arg1.id_tUniqRow_12;
					}

				}

				// For second sort init begin
				int bufferSize_2_tUniqRow_12 = bufferSize_tUniqRow_12;
				rowStruct_tUniqRow_12[] buffer_2_tUniqRow_12 = new rowStruct_tUniqRow_12[bufferSize_1_tUniqRow_12];
				int rowsInBuffer_2_tUniqRow_12 = 0;
				Comparator<rowStruct_tUniqRow_12> comparator_2_tUniqRow_12 = new Comparator_2_tUniqRow_12();

				java.util.ArrayList<java.io.File> files_2_tUniqRow_12 = new java.util.ArrayList<java.io.File>();
				// For second sort init end

				while (rowList_1_tUniqRow_12.size() > 0) {
					int minIndex_tUniqRow_12 = 0;
					if (rowList_1_tUniqRow_12.size() > 1) {
						for (int i = 1; i < rowList_1_tUniqRow_12.size(); i++) {
							if (comparator_1_tUniqRow_12.compare(
									rowList_1_tUniqRow_12
											.get(minIndex_tUniqRow_12),
									rowList_1_tUniqRow_12.get(i)) > 0) {
								minIndex_tUniqRow_12 = i;
							}
						}
					}

					// /////////////
					if (rowsInBuffer_2_tUniqRow_12 >= bufferSize_2_tUniqRow_12) {// buffer
																					// is
																					// full
																					// do
																					// sort
																					// and

						java.util.Arrays.<rowStruct_tUniqRow_12> sort(
								buffer_2_tUniqRow_12, 0,
								bufferSize_2_tUniqRow_12,
								comparator_2_tUniqRow_12);
						java.io.File file = new java.io.File(
								workDirectory_tUniqRow_12
										+ "/tUniqRow_12_TEMP_uniq_"
										+ files_2_tUniqRow_12.size());
						file.deleteOnExit();
						java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
								new java.io.BufferedOutputStream(
										new java.io.FileOutputStream(file)));
						for (int i = 0; i < bufferSize_2_tUniqRow_12; i++) {
							buffer_2_tUniqRow_12[i].writeData(rw);
						}
						rw.close();

						files_2_tUniqRow_12.add(file);

						rowsInBuffer_2_tUniqRow_12 = 0;
					}
					rowStruct_tUniqRow_12 minItem = rowList_1_tUniqRow_12
							.get(minIndex_tUniqRow_12);
					buffer_2_tUniqRow_12[rowsInBuffer_2_tUniqRow_12++] = minItem;
					FileRowIterator_tUniqRow_12 fri = rowFileList_1_tUniqRow_12
							.get(minIndex_tUniqRow_12);
					if (fri.hasNext()) {
						rowList_1_tUniqRow_12.set(minIndex_tUniqRow_12,
								fri.next());
					} else {
						fri.close();
						rowFileList_1_tUniqRow_12.remove(minIndex_tUniqRow_12);
						rowList_1_tUniqRow_12.remove(minIndex_tUniqRow_12);
					}

					// skip duplicates....begin-->this case is suitable for no
					// duplicate connection
					for (int i = 0; i < rowList_1_tUniqRow_12.size();) {
						if (rowList_1_tUniqRow_12.get(i).duplicateTo(minItem)) {
							rowStruct_tUniqRow_12 noDuplicateItem = null;
							FileRowIterator_tUniqRow_12 fri2 = rowFileList_1_tUniqRow_12
									.get(i);
							while (fri2.hasNext()) {
								rowStruct_tUniqRow_12 current = fri2.next();
								if (!minItem.duplicateTo(current)) {
									noDuplicateItem = current;
									break;
								}
							}
							if (noDuplicateItem == null) {
								fri2.close();
								rowFileList_1_tUniqRow_12.remove(i);
								rowList_1_tUniqRow_12.remove(i);
							} else {
								rowList_1_tUniqRow_12.set(i, noDuplicateItem);
								i++;
							}
						} else {
							i++;
						}
					}
					// skip duplicates....end
				}

				if (rowsInBuffer_2_tUniqRow_12 > 0) {

					java.util.Arrays.<rowStruct_tUniqRow_12> sort(
							buffer_2_tUniqRow_12, 0,
							rowsInBuffer_2_tUniqRow_12,
							comparator_2_tUniqRow_12);

					java.io.File file = new java.io.File(
							workDirectory_tUniqRow_12
									+ "/tUniqRow_12_TEMP_uniq_"
									+ files_2_tUniqRow_12.size());

					file.deleteOnExit();

					java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(file)));

					for (int i = 0; i < rowsInBuffer_2_tUniqRow_12; i++) {
						buffer_2_tUniqRow_12[i].writeData(rw);
					}

					rw.close();

					files_2_tUniqRow_12.add(file);

					rowsInBuffer_2_tUniqRow_12 = 0;
				}
				buffer_2_tUniqRow_12 = null;
				java.util.List<FileRowIterator_tUniqRow_12> rowFileList_2_tUniqRow_12 = new java.util.ArrayList<FileRowIterator_tUniqRow_12>();
				java.util.List<rowStruct_tUniqRow_12> rowList_2_tUniqRow_12 = new java.util.ArrayList<rowStruct_tUniqRow_12>();

				for (java.io.File file : files_2_tUniqRow_12) {
					FileRowIterator_tUniqRow_12 fri = new FileRowIterator_tUniqRow_12(
							file, bufferSizePerFile_tUniqRow_12);
					rowFileList_2_tUniqRow_12.add(fri);
					rowList_2_tUniqRow_12.add(fri.next());
				}

				int nb_uniq_tUniqRow_12 = 0;
				while (rowList_2_tUniqRow_12.size() > 0) {
					int minIndex_tUniqRow_12 = 0;
					if (rowList_2_tUniqRow_12.size() > 1) {
						for (int i = 1; i < rowList_2_tUniqRow_12.size(); i++) {
							if (comparator_2_tUniqRow_12.compare(
									rowList_2_tUniqRow_12
											.get(minIndex_tUniqRow_12),
									rowList_2_tUniqRow_12.get(i)) > 0) {
								minIndex_tUniqRow_12 = i;
							}
						}
					}

					// /////////////

					rowStruct_tUniqRow_12 current = rowList_2_tUniqRow_12
							.get(minIndex_tUniqRow_12);

					// ////////////
					FileRowIterator_tUniqRow_12 fri = rowFileList_2_tUniqRow_12
							.get(minIndex_tUniqRow_12);
					if (fri.hasNext()) {
						rowList_2_tUniqRow_12.set(minIndex_tUniqRow_12,
								fri.next());
					} else {
						fri.close();
						rowFileList_2_tUniqRow_12.remove(minIndex_tUniqRow_12);
						rowList_2_tUniqRow_12.remove(minIndex_tUniqRow_12);
					}
					row37.ENCOUNTER_NUM = current.ENCOUNTER_NUM;

					row37.PATIENT_NUM = current.PATIENT_NUM;

					row37.ACTIVE_STATUS_CD = current.ACTIVE_STATUS_CD;

					row37.START_DATE = current.START_DATE;

					row37.END_DATE = current.END_DATE;

					row37.INOUT_CD = current.INOUT_CD;

					row37.LOCATION_CD = current.LOCATION_CD;

					row37.LOCATION_PATH = current.LOCATION_PATH;

					row37.LENGTH_OF_STAY = current.LENGTH_OF_STAY;

					row37.VISIT_BLOB = current.VISIT_BLOB;

					row37.UPDATE_DATE = current.UPDATE_DATE;

					row37.DOWNLOAD_DATE = current.DOWNLOAD_DATE;

					row37.IMPORT_DATE = current.IMPORT_DATE;

					row37.SOURCESYSTEM_CD = current.SOURCESYSTEM_CD;

					row37.UPLOAD_ID = current.UPLOAD_ID;

					nb_uniq_tUniqRow_12++;

					/**
					 * [tUniqRow_12_UniqIn begin ] stop
					 */
					/**
					 * [tUniqRow_12_UniqIn main ] start
					 */

					currentVirtualComponent = "tUniqRow_12";

					currentComponent = "tUniqRow_12_UniqIn";

					tos_count_tUniqRow_12_UniqIn++;

					/**
					 * [tUniqRow_12_UniqIn main ] stop
					 */
					// Start of branch "row37"
					if (row37 != null) {

						/**
						 * [tFileOutputDelimited_26 main ] start
						 */

						currentComponent = "tFileOutputDelimited_26";

						String[] rowtFileOutputDelimited_26 = new String[15];

						rowtFileOutputDelimited_26[0] = row37.ENCOUNTER_NUM == null ? ""
								: row37.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_26[1] = row37.PATIENT_NUM == null ? ""
								: String.valueOf(row37.PATIENT_NUM);

						rowtFileOutputDelimited_26[2] = row37.ACTIVE_STATUS_CD == null ? ""
								: row37.ACTIVE_STATUS_CD;

						rowtFileOutputDelimited_26[3] = row37.START_DATE == null ? ""
								: FormatterUtils.format_Date(row37.START_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_26[4] = row37.END_DATE == null ? ""
								: FormatterUtils.format_Date(row37.END_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_26[5] = row37.INOUT_CD == null ? ""
								: row37.INOUT_CD;

						rowtFileOutputDelimited_26[6] = row37.LOCATION_CD == null ? ""
								: row37.LOCATION_CD;

						rowtFileOutputDelimited_26[7] = row37.LOCATION_PATH == null ? ""
								: row37.LOCATION_PATH;

						rowtFileOutputDelimited_26[8] = row37.LENGTH_OF_STAY == null ? ""
								: String.valueOf(row37.LENGTH_OF_STAY);

						rowtFileOutputDelimited_26[9] = row37.VISIT_BLOB == null ? ""
								: row37.VISIT_BLOB;

						rowtFileOutputDelimited_26[10] = row37.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row37.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_26[11] = row37.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row37.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_26[12] = row37.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row37.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_26[13] = row37.SOURCESYSTEM_CD == null ? ""
								: row37.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_26[14] = row37.UPLOAD_ID == null ? ""
								: row37.UPLOAD_ID;

						nb_line_tFileOutputDelimited_26++;
						resourceMap.put("nb_line_tFileOutputDelimited_26",
								nb_line_tFileOutputDelimited_26);
						CsvWritertFileOutputDelimited_26
								.writeNext(rowtFileOutputDelimited_26);

						tos_count_tFileOutputDelimited_26++;

						/**
						 * [tFileOutputDelimited_26 main ] stop
						 */

					} // End of branch "row37"

					/**
					 * [tUniqRow_12_UniqIn end ] start
					 */

					currentVirtualComponent = "tUniqRow_12";

					currentComponent = "tUniqRow_12_UniqIn";

				}
				globalMap.put("tUniqRow_12_NB_UNIQUES", nb_uniq_tUniqRow_12);
				globalMap.put("tUniqRow_12_NB_DUPLICATES", nb_tUniqRow_12
						- nb_uniq_tUniqRow_12);

				ok_Hash.put("tUniqRow_12_UniqIn", true);
				end_Hash.put("tUniqRow_12_UniqIn", System.currentTimeMillis());

				/**
				 * [tUniqRow_12_UniqIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_26 end ] start
				 */

				currentComponent = "tFileOutputDelimited_26";

				if (CsvWritertFileOutputDelimited_26 != null) {
					CsvWritertFileOutputDelimited_26.close();
				}

				globalMap.put("tFileOutputDelimited_26_NB_LINE",
						nb_line_tFileOutputDelimited_26);

				resourceMap.put("finish_tFileOutputDelimited_26", true);

				ok_Hash.put("tFileOutputDelimited_26", true);
				end_Hash.put("tFileOutputDelimited_26",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_26 end ] stop
				 */

				/**
				 * [tMap_21 end ] start
				 */

				currentComponent = "tMap_21";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				// ###############################

				ok_Hash.put("tMap_21", true);
				end_Hash.put("tMap_21", System.currentTimeMillis());

				/**
				 * [tMap_21 end ] stop
				 */

				/**
				 * [tUniqRow_5_UniqOut end ] start
				 */

				currentVirtualComponent = "tUniqRow_5";

				currentComponent = "tUniqRow_5_UniqOut";

				if (rowsInBuffer_1_tUniqRow_5 > 0) {
					java.util.Arrays.<rowStruct_tUniqRow_5> sort(
							buffer_1_tUniqRow_5, 0, rowsInBuffer_1_tUniqRow_5,
							comparator_1_tUniqRow_5);

					java.io.File file_tUniqRow_5 = new java.io.File(
							workDirectory_tUniqRow_5 + "/tUniqRow_5_TEMP_"
									+ files_1_tUniqRow_5.size());

					file_tUniqRow_5.deleteOnExit();

					java.io.ObjectOutputStream rw_tUniqRow_5 = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tUniqRow_5)));
					for (int i = 0; i < rowsInBuffer_1_tUniqRow_5; i++) {
						buffer_1_tUniqRow_5[i].writeData(rw_tUniqRow_5);
					}

					rw_tUniqRow_5.close();

					files_1_tUniqRow_5.add(file_tUniqRow_5);

					rowsInBuffer_1_tUniqRow_5 = 0;
				}
				buffer_1_tUniqRow_5 = null;

				// ////////////////////////////////////
				class FileRowIterator_tUniqRow_5 implements
						java.util.Iterator<rowStruct_tUniqRow_5> {

					boolean isEndOfFile = false;

					rowStruct_tUniqRow_5[] buffer;

					ObjectInputStream ois;

					java.io.BufferedInputStream bis;

					rowStruct_tUniqRow_5 tempRow;

					int count = 0;

					int index = 0;

					public FileRowIterator_tUniqRow_5(java.io.File file,
							int bufferSize) throws IOException {
						isEndOfFile = false;
						tempRow = null;
						bis = new java.io.BufferedInputStream(
								new java.io.FileInputStream(file));
						ois = new java.io.ObjectInputStream(bis);
						buffer = new rowStruct_tUniqRow_5[bufferSize];
					}

					private void load() {
						count = 0;
						index = 0;
						try {
							if (tempRow != null) {
								buffer[count++] = tempRow;
								tempRow = null;
							}
							while (!isEndOfFile && count < buffer.length) {
								buffer[count] = new rowStruct_tUniqRow_5();
								buffer[count].readData(ois);
								count++;
							}
							if (!isEndOfFile && count >= buffer.length
									&& bis.available() == 0) {
								tempRow = new rowStruct_tUniqRow_5();
								tempRow.readData(ois);
							}
						} catch (java.lang.Exception e) {
							if (e.getCause() instanceof java.io.EOFException) {
								this.isEndOfFile = true; // the EOFException
								tempRow = null;
							} else {
								throw new RuntimeException(e);
							}
						}
					}

					public boolean hasNext() {
						return index < count || !isEndOfFile;
					}

					public rowStruct_tUniqRow_5 next() {
						if (index >= count) {
							load();
						}

						return buffer[index++];
					}

					public void remove() {
						throw new UnsupportedOperationException();
					}

					public void close() throws IOException {
						if (ois != null) {
							ois.close();
							ois = null;
						}
					}
				}

				ok_Hash.put("tUniqRow_5_UniqOut", true);
				end_Hash.put("tUniqRow_5_UniqOut", System.currentTimeMillis());

				/**
				 * [tUniqRow_5_UniqOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "patient_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				String[] headColutFileOutputDelimited_6 = new String[10];
				class CSVBasicSet_tFileOutputDelimited_6 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_6[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_6 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_6[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_6 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_6[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_6[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_6 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
				csvSettings_tFileOutputDelimited_6.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_6.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {

						dir_tFileOutputDelimited_6.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_6 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}

				outtFileOutputDelimited_6 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_6, false),
								context.coding));
				java.io.StringWriter strWritertFileOutputDelimited_6 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_6);
				CsvWritertFileOutputDelimited_6
						.setSeparator(csvSettings_tFileOutputDelimited_6
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_6
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_6.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_6.getRowDelim());
				}

				if (filetFileOutputDelimited_6.length() == 0) {

					headColutFileOutputDelimited_6[0] = "PATIENT_IDE";

					headColutFileOutputDelimited_6[1] = "PATIENT_IDE_SOURCE";

					headColutFileOutputDelimited_6[2] = "PATIENT_NUM";

					headColutFileOutputDelimited_6[3] = "PATIENT_IDE_STATUS";

					headColutFileOutputDelimited_6[4] = "UPLOAD_DATE";

					headColutFileOutputDelimited_6[5] = "UPDATE_DATE";

					headColutFileOutputDelimited_6[6] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_6[7] = "IMPORT_DATE";

					headColutFileOutputDelimited_6[8] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_6[9] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_6
							.writeNext(headColutFileOutputDelimited_6);
					CsvWritertFileOutputDelimited_6.flush();

					outtFileOutputDelimited_6
							.write(strWritertFileOutputDelimited_6.getBuffer()
									.toString());
					outtFileOutputDelimited_6.flush();
					strWritertFileOutputDelimited_6.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_6.getBuffer()
									.length());

				}

				CsvWritertFileOutputDelimited_6
						.setEscapeChar(csvSettings_tFileOutputDelimited_6
								.getEscapeChar());
				CsvWritertFileOutputDelimited_6
						.setQuoteChar(csvSettings_tFileOutputDelimited_6
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_6
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_6",
						CsvWritertFileOutputDelimited_6);

				resourceMap.put("out_tFileOutputDelimited_6",
						outtFileOutputDelimited_6);

				resourceMap.put("nb_line_tFileOutputDelimited_6",
						nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "patient_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				String[] headColutFileOutputDelimited_4 = new String[19];
				class CSVBasicSet_tFileOutputDelimited_4 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_4[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_4 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_4[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_4 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_4[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_4[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
				csvSettings_tFileOutputDelimited_4.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_4.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_4.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {

						dir_tFileOutputDelimited_4.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}

				CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_4,
												false), context.coding)));
				CsvWritertFileOutputDelimited_4
						.setSeparator(csvSettings_tFileOutputDelimited_4
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_4
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_4.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_4.getRowDelim());
				}

				if (filetFileOutputDelimited_4.length() == 0) {

					headColutFileOutputDelimited_4[0] = "PATIENT_NUM";

					headColutFileOutputDelimited_4[1] = "VITAL_STATUS_CD";

					headColutFileOutputDelimited_4[2] = "BIRTH_DATE";

					headColutFileOutputDelimited_4[3] = "DEATH_DATE";

					headColutFileOutputDelimited_4[4] = "SEX_CD";

					headColutFileOutputDelimited_4[5] = "AGE_IN_YEARS_NUM";

					headColutFileOutputDelimited_4[6] = "LANGUAGE_CD";

					headColutFileOutputDelimited_4[7] = "RACE_CD";

					headColutFileOutputDelimited_4[8] = "MARITAL_STATUS_CD";

					headColutFileOutputDelimited_4[9] = "RELIGION_CD";

					headColutFileOutputDelimited_4[10] = "ZIP_CD";

					headColutFileOutputDelimited_4[11] = "STATECITYZIP_PATH";

					headColutFileOutputDelimited_4[12] = "INCOME_CD";

					headColutFileOutputDelimited_4[13] = "PATIENT_BLOB";

					headColutFileOutputDelimited_4[14] = "UPDATE_DATE";

					headColutFileOutputDelimited_4[15] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_4[16] = "IMPORT_DATE";

					headColutFileOutputDelimited_4[17] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_4[18] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_4
							.writeNext(headColutFileOutputDelimited_4);
					CsvWritertFileOutputDelimited_4.flush();

				}

				CsvWritertFileOutputDelimited_4
						.setEscapeChar(csvSettings_tFileOutputDelimited_4
								.getEscapeChar());
				CsvWritertFileOutputDelimited_4
						.setQuoteChar(csvSettings_tFileOutputDelimited_4
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_4
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_4",
						CsvWritertFileOutputDelimited_4);

				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				int tos_count_tMap_15 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out9Struct out9_tmp = new out9Struct();
				to_patDimStruct to_patDim_tmp = new to_patDimStruct();
				// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tSplitRow_2 begin ] start
				 */

				ok_Hash.put("tSplitRow_2", false);
				start_Hash.put("tSplitRow_2", System.currentTimeMillis());

				currentComponent = "tSplitRow_2";

				int tos_count_tSplitRow_2 = 0;

				int nb_line_tSplitRow_2 = 0;

				/**
				 * [tSplitRow_2 begin ] stop
				 */

				/**
				 * [tUniqRow_5_UniqIn begin ] start
				 */

				ok_Hash.put("tUniqRow_5_UniqIn", false);
				start_Hash.put("tUniqRow_5_UniqIn", System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_5";

				currentComponent = "tUniqRow_5_UniqIn";

				int tos_count_tUniqRow_5_UniqIn = 0;

				int bufferSizePerFile_tUniqRow_5 = 10000;

				java.util.List<FileRowIterator_tUniqRow_5> rowFileList_1_tUniqRow_5 = new java.util.ArrayList<FileRowIterator_tUniqRow_5>();
				java.util.List<rowStruct_tUniqRow_5> rowList_1_tUniqRow_5 = new java.util.ArrayList<rowStruct_tUniqRow_5>();

				for (java.io.File file : files_1_tUniqRow_5) {
					FileRowIterator_tUniqRow_5 fri = new FileRowIterator_tUniqRow_5(
							file, bufferSizePerFile_tUniqRow_5);
					rowFileList_1_tUniqRow_5.add(fri);
					rowList_1_tUniqRow_5.add(fri.next());
				}

				// comparator for second sort
				class Comparator_2_tUniqRow_5 implements
						Comparator<rowStruct_tUniqRow_5> {

					public int compare(rowStruct_tUniqRow_5 arg0,
							rowStruct_tUniqRow_5 arg1) {
						return arg0.id_tUniqRow_5 - arg1.id_tUniqRow_5;
					}

				}

				// For second sort init begin
				int bufferSize_2_tUniqRow_5 = bufferSize_tUniqRow_5;
				rowStruct_tUniqRow_5[] buffer_2_tUniqRow_5 = new rowStruct_tUniqRow_5[bufferSize_1_tUniqRow_5];
				int rowsInBuffer_2_tUniqRow_5 = 0;
				Comparator<rowStruct_tUniqRow_5> comparator_2_tUniqRow_5 = new Comparator_2_tUniqRow_5();

				java.util.ArrayList<java.io.File> files_2_tUniqRow_5 = new java.util.ArrayList<java.io.File>();
				// For second sort init end

				while (rowList_1_tUniqRow_5.size() > 0) {
					int minIndex_tUniqRow_5 = 0;
					if (rowList_1_tUniqRow_5.size() > 1) {
						for (int i = 1; i < rowList_1_tUniqRow_5.size(); i++) {
							if (comparator_1_tUniqRow_5.compare(
									rowList_1_tUniqRow_5
											.get(minIndex_tUniqRow_5),
									rowList_1_tUniqRow_5.get(i)) > 0) {
								minIndex_tUniqRow_5 = i;
							}
						}
					}

					// /////////////
					if (rowsInBuffer_2_tUniqRow_5 >= bufferSize_2_tUniqRow_5) {// buffer
																				// is
																				// full
																				// do
																				// sort
																				// and

						java.util.Arrays.<rowStruct_tUniqRow_5> sort(
								buffer_2_tUniqRow_5, 0,
								bufferSize_2_tUniqRow_5,
								comparator_2_tUniqRow_5);
						java.io.File file = new java.io.File(
								workDirectory_tUniqRow_5
										+ "/tUniqRow_5_TEMP_uniq_"
										+ files_2_tUniqRow_5.size());
						file.deleteOnExit();
						java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
								new java.io.BufferedOutputStream(
										new java.io.FileOutputStream(file)));
						for (int i = 0; i < bufferSize_2_tUniqRow_5; i++) {
							buffer_2_tUniqRow_5[i].writeData(rw);
						}
						rw.close();

						files_2_tUniqRow_5.add(file);

						rowsInBuffer_2_tUniqRow_5 = 0;
					}
					rowStruct_tUniqRow_5 minItem = rowList_1_tUniqRow_5
							.get(minIndex_tUniqRow_5);
					buffer_2_tUniqRow_5[rowsInBuffer_2_tUniqRow_5++] = minItem;
					FileRowIterator_tUniqRow_5 fri = rowFileList_1_tUniqRow_5
							.get(minIndex_tUniqRow_5);
					if (fri.hasNext()) {
						rowList_1_tUniqRow_5.set(minIndex_tUniqRow_5,
								fri.next());
					} else {
						fri.close();
						rowFileList_1_tUniqRow_5.remove(minIndex_tUniqRow_5);
						rowList_1_tUniqRow_5.remove(minIndex_tUniqRow_5);
					}

					// skip duplicates....begin-->this case is suitable for no
					// duplicate connection
					for (int i = 0; i < rowList_1_tUniqRow_5.size();) {
						if (rowList_1_tUniqRow_5.get(i).duplicateTo(minItem)) {
							rowStruct_tUniqRow_5 noDuplicateItem = null;
							FileRowIterator_tUniqRow_5 fri2 = rowFileList_1_tUniqRow_5
									.get(i);
							while (fri2.hasNext()) {
								rowStruct_tUniqRow_5 current = fri2.next();
								if (!minItem.duplicateTo(current)) {
									noDuplicateItem = current;
									break;
								}
							}
							if (noDuplicateItem == null) {
								fri2.close();
								rowFileList_1_tUniqRow_5.remove(i);
								rowList_1_tUniqRow_5.remove(i);
							} else {
								rowList_1_tUniqRow_5.set(i, noDuplicateItem);
								i++;
							}
						} else {
							i++;
						}
					}
					// skip duplicates....end
				}

				if (rowsInBuffer_2_tUniqRow_5 > 0) {

					java.util.Arrays.<rowStruct_tUniqRow_5> sort(
							buffer_2_tUniqRow_5, 0, rowsInBuffer_2_tUniqRow_5,
							comparator_2_tUniqRow_5);

					java.io.File file = new java.io.File(
							workDirectory_tUniqRow_5 + "/tUniqRow_5_TEMP_uniq_"
									+ files_2_tUniqRow_5.size());

					file.deleteOnExit();

					java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(file)));

					for (int i = 0; i < rowsInBuffer_2_tUniqRow_5; i++) {
						buffer_2_tUniqRow_5[i].writeData(rw);
					}

					rw.close();

					files_2_tUniqRow_5.add(file);

					rowsInBuffer_2_tUniqRow_5 = 0;
				}
				buffer_2_tUniqRow_5 = null;
				java.util.List<FileRowIterator_tUniqRow_5> rowFileList_2_tUniqRow_5 = new java.util.ArrayList<FileRowIterator_tUniqRow_5>();
				java.util.List<rowStruct_tUniqRow_5> rowList_2_tUniqRow_5 = new java.util.ArrayList<rowStruct_tUniqRow_5>();

				for (java.io.File file : files_2_tUniqRow_5) {
					FileRowIterator_tUniqRow_5 fri = new FileRowIterator_tUniqRow_5(
							file, bufferSizePerFile_tUniqRow_5);
					rowFileList_2_tUniqRow_5.add(fri);
					rowList_2_tUniqRow_5.add(fri.next());
				}

				int nb_uniq_tUniqRow_5 = 0;
				while (rowList_2_tUniqRow_5.size() > 0) {
					int minIndex_tUniqRow_5 = 0;
					if (rowList_2_tUniqRow_5.size() > 1) {
						for (int i = 1; i < rowList_2_tUniqRow_5.size(); i++) {
							if (comparator_2_tUniqRow_5.compare(
									rowList_2_tUniqRow_5
											.get(minIndex_tUniqRow_5),
									rowList_2_tUniqRow_5.get(i)) > 0) {
								minIndex_tUniqRow_5 = i;
							}
						}
					}

					// /////////////

					rowStruct_tUniqRow_5 current = rowList_2_tUniqRow_5
							.get(minIndex_tUniqRow_5);

					// ////////////
					FileRowIterator_tUniqRow_5 fri = rowFileList_2_tUniqRow_5
							.get(minIndex_tUniqRow_5);
					if (fri.hasNext()) {
						rowList_2_tUniqRow_5.set(minIndex_tUniqRow_5,
								fri.next());
					} else {
						fri.close();
						rowFileList_2_tUniqRow_5.remove(minIndex_tUniqRow_5);
						rowList_2_tUniqRow_5.remove(minIndex_tUniqRow_5);
					}
					row4.PATIENT_IDE = current.PATIENT_IDE;

					row4.PATIENT_NUM = current.PATIENT_NUM;

					row4.PATIENT_IDE_STATUS = current.PATIENT_IDE_STATUS;

					row4.UPLOAD_DATE = current.UPLOAD_DATE;

					row4.UPDATE_DATE = current.UPDATE_DATE;

					row4.DOWNLOAD_DATE = current.DOWNLOAD_DATE;

					row4.IMPORT_DATE = current.IMPORT_DATE;

					row4.SOURCESYSTEM_CD = current.SOURCESYSTEM_CD;

					row4.UPLOAD_ID = current.UPLOAD_ID;

					nb_uniq_tUniqRow_5++;

					/**
					 * [tUniqRow_5_UniqIn begin ] stop
					 */
					/**
					 * [tUniqRow_5_UniqIn main ] start
					 */

					currentVirtualComponent = "tUniqRow_5";

					currentComponent = "tUniqRow_5_UniqIn";

					tos_count_tUniqRow_5_UniqIn++;

					/**
					 * [tUniqRow_5_UniqIn main ] stop
					 */
					// Start of branch "row4"
					if (row4 != null) {

						/**
						 * [tSplitRow_2 main ] start
						 */

						currentComponent = "tSplitRow_2";

						java.util.List<row3Struct> rows_tSplitRow_2 = new java.util.ArrayList<row3Struct>(
								2);
						row3Struct rowTmp_tSplitRow_2 = null;

						// cache output rows for the loop
						rowTmp_tSplitRow_2 = new row3Struct();

						rowTmp_tSplitRow_2.PATIENT_IDE = row4.PATIENT_NUM
								.toString();
						rowTmp_tSplitRow_2.PATIENT_IDE_SOURCE = "HIVE";
						rowTmp_tSplitRow_2.PATIENT_NUM = row4.PATIENT_NUM;
						rowTmp_tSplitRow_2.PATIENT_IDE_STATUS = "A";
						rowTmp_tSplitRow_2.UPLOAD_DATE = TalendDate
								.getCurrentDate();
						rowTmp_tSplitRow_2.UPDATE_DATE = row4.UPDATE_DATE;
						rowTmp_tSplitRow_2.DOWNLOAD_DATE = row4.DOWNLOAD_DATE;
						rowTmp_tSplitRow_2.IMPORT_DATE = row4.IMPORT_DATE;
						rowTmp_tSplitRow_2.SOURCESYSTEM_CD = row4.SOURCESYSTEM_CD;
						rowTmp_tSplitRow_2.UPLOAD_ID = row4.UPLOAD_ID;
						rows_tSplitRow_2.add(rowTmp_tSplitRow_2);
						nb_line_tSplitRow_2++;
						rowTmp_tSplitRow_2 = new row3Struct();

						rowTmp_tSplitRow_2.PATIENT_IDE = row4.PATIENT_IDE
								.length() > 0 ? row4.PATIENT_IDE
								: row4.PATIENT_NUM.toString();
						rowTmp_tSplitRow_2.PATIENT_IDE_SOURCE = "IDRT";
						rowTmp_tSplitRow_2.PATIENT_NUM = row4.PATIENT_NUM;
						rowTmp_tSplitRow_2.PATIENT_IDE_STATUS = "A";
						rowTmp_tSplitRow_2.UPLOAD_DATE = TalendDate
								.getCurrentDate();
						rowTmp_tSplitRow_2.UPDATE_DATE = row4.UPDATE_DATE;
						rowTmp_tSplitRow_2.DOWNLOAD_DATE = row4.DOWNLOAD_DATE;
						rowTmp_tSplitRow_2.IMPORT_DATE = row4.IMPORT_DATE;
						rowTmp_tSplitRow_2.SOURCESYSTEM_CD = row4.SOURCESYSTEM_CD;
						rowTmp_tSplitRow_2.UPLOAD_ID = row4.UPLOAD_ID;
						rows_tSplitRow_2.add(rowTmp_tSplitRow_2);
						nb_line_tSplitRow_2++;

						for (row3Struct row_tSplitRow_2 : rows_tSplitRow_2) {// C_01
							row3 = row_tSplitRow_2;

							tos_count_tSplitRow_2++;

							/**
							 * [tSplitRow_2 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_15 main ] start
								 */

								currentComponent = "tMap_15";

								boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_15 = false;
								boolean mainRowRejected_tMap_15 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
									// ###############################
									// # Output tables

									out9 = null;
									to_patDim = null;

									// # Output table : 'out9'
									out9_tmp.PATIENT_IDE = row3.PATIENT_IDE;
									out9_tmp.PATIENT_IDE_SOURCE = row3.PATIENT_IDE_SOURCE;
									out9_tmp.PATIENT_NUM = row3.PATIENT_NUM;
									out9_tmp.PATIENT_IDE_STATUS = row3.PATIENT_IDE_STATUS;
									out9_tmp.UPLOAD_DATE = row3.UPLOAD_DATE;
									out9_tmp.UPDATE_DATE = row3.UPDATE_DATE;
									out9_tmp.DOWNLOAD_DATE = row3.DOWNLOAD_DATE;
									out9_tmp.IMPORT_DATE = row3.IMPORT_DATE;
									out9_tmp.SOURCESYSTEM_CD = row3.SOURCESYSTEM_CD;
									out9_tmp.UPLOAD_ID = row3.UPLOAD_ID;
									out9 = out9_tmp;

									// # Output table : 'to_patDim'
									to_patDim_tmp.PATIENT_NUM = row3.PATIENT_NUM;
									to_patDim_tmp.VITAL_STATUS_CD = "N";
									to_patDim_tmp.BIRTH_DATE = null;
									to_patDim_tmp.DEATH_DATE = null;
									to_patDim_tmp.SEX_CD = null;
									to_patDim_tmp.AGE_IN_YEARS_NUM = null;
									to_patDim_tmp.LANGUAGE_CD = null;
									to_patDim_tmp.RACE_CD = null;
									to_patDim_tmp.MARITAL_STATUS_CD = null;
									to_patDim_tmp.RELIGION_CD = null;
									to_patDim_tmp.ZIP_CD = null;
									to_patDim_tmp.STATECITYZIP_PATH = null;
									to_patDim_tmp.INCOME_CD = null;
									to_patDim_tmp.PATIENT_BLOB = null;
									to_patDim_tmp.UPDATE_DATE = row3.UPDATE_DATE;
									to_patDim_tmp.DOWNLOAD_DATE = row3.DOWNLOAD_DATE;
									to_patDim_tmp.IMPORT_DATE = row3.IMPORT_DATE;
									to_patDim_tmp.SOURCESYSTEM_CD = null;
									to_patDim_tmp.UPLOAD_ID = null;
									to_patDim = to_patDim_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_15 = false;

								tos_count_tMap_15++;

								/**
								 * [tMap_15 main ] stop
								 */
								// Start of branch "out9"
								if (out9 != null) {

									/**
									 * [tFileOutputDelimited_6 main ] start
									 */

									currentComponent = "tFileOutputDelimited_6";

									String[] rowtFileOutputDelimited_6 = new String[10];

									rowtFileOutputDelimited_6[0] = out9.PATIENT_IDE == null ? ""
											: out9.PATIENT_IDE;

									rowtFileOutputDelimited_6[1] = out9.PATIENT_IDE_SOURCE == null ? ""
											: out9.PATIENT_IDE_SOURCE;

									rowtFileOutputDelimited_6[2] = out9.PATIENT_NUM == null ? ""
											: out9.PATIENT_NUM.toPlainString();

									rowtFileOutputDelimited_6[3] = out9.PATIENT_IDE_STATUS == null ? ""
											: out9.PATIENT_IDE_STATUS;

									rowtFileOutputDelimited_6[4] = out9.UPLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													out9.UPLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_6[5] = out9.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													out9.UPDATE_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_6[6] = out9.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													out9.DOWNLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_6[7] = out9.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													out9.IMPORT_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_6[8] = out9.SOURCESYSTEM_CD == null ? ""
											: out9.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_6[9] = out9.UPLOAD_ID == null ? ""
											: out9.UPLOAD_ID;

									nb_line_tFileOutputDelimited_6++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_6",
											nb_line_tFileOutputDelimited_6);
									CsvWritertFileOutputDelimited_6
											.writeNext(rowtFileOutputDelimited_6);

									outtFileOutputDelimited_6
											.write(strWritertFileOutputDelimited_6
													.getBuffer().toString());
									strWritertFileOutputDelimited_6.getBuffer()
											.delete(0,
													strWritertFileOutputDelimited_6
															.getBuffer()
															.length());

									tos_count_tFileOutputDelimited_6++;

									/**
									 * [tFileOutputDelimited_6 main ] stop
									 */

								} // End of branch "out9"

								// Start of branch "to_patDim"
								if (to_patDim != null) {

									/**
									 * [tFileOutputDelimited_4 main ] start
									 */

									currentComponent = "tFileOutputDelimited_4";

									String[] rowtFileOutputDelimited_4 = new String[19];

									rowtFileOutputDelimited_4[0] = to_patDim.PATIENT_NUM == null ? ""
											: to_patDim.PATIENT_NUM
													.toPlainString();

									rowtFileOutputDelimited_4[1] = to_patDim.VITAL_STATUS_CD == null ? ""
											: to_patDim.VITAL_STATUS_CD;

									rowtFileOutputDelimited_4[2] = to_patDim.BIRTH_DATE == null ? ""
											: to_patDim.BIRTH_DATE;

									rowtFileOutputDelimited_4[3] = to_patDim.DEATH_DATE == null ? ""
											: to_patDim.DEATH_DATE;

									rowtFileOutputDelimited_4[4] = to_patDim.SEX_CD == null ? ""
											: to_patDim.SEX_CD;

									rowtFileOutputDelimited_4[5] = to_patDim.AGE_IN_YEARS_NUM == null ? ""
											: to_patDim.AGE_IN_YEARS_NUM;

									rowtFileOutputDelimited_4[6] = to_patDim.LANGUAGE_CD == null ? ""
											: to_patDim.LANGUAGE_CD;

									rowtFileOutputDelimited_4[7] = to_patDim.RACE_CD == null ? ""
											: to_patDim.RACE_CD;

									rowtFileOutputDelimited_4[8] = to_patDim.MARITAL_STATUS_CD == null ? ""
											: to_patDim.MARITAL_STATUS_CD;

									rowtFileOutputDelimited_4[9] = to_patDim.RELIGION_CD == null ? ""
											: to_patDim.RELIGION_CD;

									rowtFileOutputDelimited_4[10] = to_patDim.ZIP_CD == null ? ""
											: to_patDim.ZIP_CD;

									rowtFileOutputDelimited_4[11] = to_patDim.STATECITYZIP_PATH == null ? ""
											: to_patDim.STATECITYZIP_PATH;

									rowtFileOutputDelimited_4[12] = to_patDim.INCOME_CD == null ? ""
											: to_patDim.INCOME_CD;

									rowtFileOutputDelimited_4[13] = to_patDim.PATIENT_BLOB == null ? ""
											: to_patDim.PATIENT_BLOB;

									rowtFileOutputDelimited_4[14] = to_patDim.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_patDim.UPDATE_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_4[15] = to_patDim.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_patDim.DOWNLOAD_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_4[16] = to_patDim.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_patDim.IMPORT_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_4[17] = to_patDim.SOURCESYSTEM_CD == null ? ""
											: to_patDim.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_4[18] = to_patDim.UPLOAD_ID == null ? ""
											: to_patDim.UPLOAD_ID;

									nb_line_tFileOutputDelimited_4++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_4",
											nb_line_tFileOutputDelimited_4);
									CsvWritertFileOutputDelimited_4
											.writeNext(rowtFileOutputDelimited_4);

									tos_count_tFileOutputDelimited_4++;

									/**
									 * [tFileOutputDelimited_4 main ] stop
									 */

								} // End of branch "to_patDim"

							} // End of branch "row3"

						} // C_01

					} // End of branch "row4"

					/**
					 * [tUniqRow_5_UniqIn end ] start
					 */

					currentVirtualComponent = "tUniqRow_5";

					currentComponent = "tUniqRow_5_UniqIn";

				}
				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniq_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES", nb_tUniqRow_5
						- nb_uniq_tUniqRow_5);

				ok_Hash.put("tUniqRow_5_UniqIn", true);
				end_Hash.put("tUniqRow_5_UniqIn", System.currentTimeMillis());

				/**
				 * [tUniqRow_5_UniqIn end ] stop
				 */

				/**
				 * [tSplitRow_2 end ] start
				 */

				currentComponent = "tSplitRow_2";

				globalMap.put("tSplitRow_2_NB_LINE", nb_line_tSplitRow_2);

				ok_Hash.put("tSplitRow_2", true);
				end_Hash.put("tSplitRow_2", System.currentTimeMillis());

				/**
				 * [tSplitRow_2 end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (CsvWritertFileOutputDelimited_6 != null) {
					CsvWritertFileOutputDelimited_6.close();
				}

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE",
						nb_line_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (CsvWritertFileOutputDelimited_4 != null) {
					CsvWritertFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 end ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (CsvWritertFileOutputDelimited_11 != null) {
					CsvWritertFileOutputDelimited_11.close();
				}

				globalMap.put("tFileOutputDelimited_11_NB_LINE",
						nb_line_tFileOutputDelimited_11);

				resourceMap.put("finish_tFileOutputDelimited_11", true);

				ok_Hash.put("tFileOutputDelimited_11", true);
				end_Hash.put("tFileOutputDelimited_11",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_11 end ] stop
				 */

				/**
				 * [tMap_16 end ] start
				 */

				currentComponent = "tMap_16";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_from_enc != null) {
					tHash_Lookup_from_enc.endGet();
				}
				globalMap.remove("tHash_Lookup_from_enc");

				// ###############################

				ok_Hash.put("tMap_16", true);
				end_Hash.put("tMap_16", System.currentTimeMillis());

				/**
				 * [tMap_16 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_22 end ] start
				 */

				currentComponent = "tMap_22";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row31 != null) {
					tHash_Lookup_row31.endGet();
				}
				globalMap.remove("tHash_Lookup_row31");

				// ###############################

				ok_Hash.put("tMap_22", true);
				end_Hash.put("tMap_22", System.currentTimeMillis());

				/**
				 * [tMap_22 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 end ] start
				 */

				currentComponent = "tFileOutputDelimited_14";

				if (outtFileOutputDelimited_14 != null) {
					outtFileOutputDelimited_14.flush();
					outtFileOutputDelimited_14.close();
				}

				globalMap.put("tFileOutputDelimited_14_NB_LINE",
						nb_line_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME",
						fileName_tFileOutputDelimited_14);

				resourceMap.put("finish_tFileOutputDelimited_14", true);

				ok_Hash.put("tFileOutputDelimited_14", true);
				end_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_14 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_21 end ] start
				 */

				currentComponent = "tFileOutputDelimited_21";

				if (outtFileOutputDelimited_21 != null) {
					outtFileOutputDelimited_21.flush();
					outtFileOutputDelimited_21.close();
				}

				globalMap.put("tFileOutputDelimited_21_NB_LINE",
						nb_line_tFileOutputDelimited_21);
				globalMap.put("tFileOutputDelimited_21_FILE_NAME",
						fileName_tFileOutputDelimited_21);

				resourceMap.put("finish_tFileOutputDelimited_21", true);

				ok_Hash.put("tFileOutputDelimited_21", true);
				end_Hash.put("tFileOutputDelimited_21",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_21 end ] stop
				 */

				/**
				 * [tUniqRow_7_UniqOut end ] start
				 */

				currentVirtualComponent = "tUniqRow_7";

				currentComponent = "tUniqRow_7_UniqOut";

				if (rowsInBuffer_1_tUniqRow_7 > 0) {
					java.util.Arrays.<rowStruct_tUniqRow_7> sort(
							buffer_1_tUniqRow_7, 0, rowsInBuffer_1_tUniqRow_7,
							comparator_1_tUniqRow_7);

					java.io.File file_tUniqRow_7 = new java.io.File(
							workDirectory_tUniqRow_7 + "/tUniqRow_7_TEMP_"
									+ files_1_tUniqRow_7.size());

					file_tUniqRow_7.deleteOnExit();

					java.io.ObjectOutputStream rw_tUniqRow_7 = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tUniqRow_7)));
					for (int i = 0; i < rowsInBuffer_1_tUniqRow_7; i++) {
						buffer_1_tUniqRow_7[i].writeData(rw_tUniqRow_7);
					}

					rw_tUniqRow_7.close();

					files_1_tUniqRow_7.add(file_tUniqRow_7);

					rowsInBuffer_1_tUniqRow_7 = 0;
				}
				buffer_1_tUniqRow_7 = null;

				// ////////////////////////////////////
				class FileRowIterator_tUniqRow_7 implements
						java.util.Iterator<rowStruct_tUniqRow_7> {

					boolean isEndOfFile = false;

					rowStruct_tUniqRow_7[] buffer;

					ObjectInputStream ois;

					java.io.BufferedInputStream bis;

					rowStruct_tUniqRow_7 tempRow;

					int count = 0;

					int index = 0;

					public FileRowIterator_tUniqRow_7(java.io.File file,
							int bufferSize) throws IOException {
						isEndOfFile = false;
						tempRow = null;
						bis = new java.io.BufferedInputStream(
								new java.io.FileInputStream(file));
						ois = new java.io.ObjectInputStream(bis);
						buffer = new rowStruct_tUniqRow_7[bufferSize];
					}

					private void load() {
						count = 0;
						index = 0;
						try {
							if (tempRow != null) {
								buffer[count++] = tempRow;
								tempRow = null;
							}
							while (!isEndOfFile && count < buffer.length) {
								buffer[count] = new rowStruct_tUniqRow_7();
								buffer[count].readData(ois);
								count++;
							}
							if (!isEndOfFile && count >= buffer.length
									&& bis.available() == 0) {
								tempRow = new rowStruct_tUniqRow_7();
								tempRow.readData(ois);
							}
						} catch (java.lang.Exception e) {
							if (e.getCause() instanceof java.io.EOFException) {
								this.isEndOfFile = true; // the EOFException
								tempRow = null;
							} else {
								throw new RuntimeException(e);
							}
						}
					}

					public boolean hasNext() {
						return index < count || !isEndOfFile;
					}

					public rowStruct_tUniqRow_7 next() {
						if (index >= count) {
							load();
						}

						return buffer[index++];
					}

					public void remove() {
						throw new UnsupportedOperationException();
					}

					public void close() throws IOException {
						if (ois != null) {
							ois.close();
							ois = null;
						}
					}
				}

				ok_Hash.put("tUniqRow_7_UniqOut", true);
				end_Hash.put("tUniqRow_7_UniqOut", System.currentTimeMillis());

				/**
				 * [tUniqRow_7_UniqOut end ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tUniqRow_7_UniqIn begin ] start
				 */

				ok_Hash.put("tUniqRow_7_UniqIn", false);
				start_Hash.put("tUniqRow_7_UniqIn", System.currentTimeMillis());

				currentVirtualComponent = "tUniqRow_7";

				currentComponent = "tUniqRow_7_UniqIn";

				int tos_count_tUniqRow_7_UniqIn = 0;

				int bufferSizePerFile_tUniqRow_7 = 10000;

				java.util.List<FileRowIterator_tUniqRow_7> rowFileList_1_tUniqRow_7 = new java.util.ArrayList<FileRowIterator_tUniqRow_7>();
				java.util.List<rowStruct_tUniqRow_7> rowList_1_tUniqRow_7 = new java.util.ArrayList<rowStruct_tUniqRow_7>();

				for (java.io.File file : files_1_tUniqRow_7) {
					FileRowIterator_tUniqRow_7 fri = new FileRowIterator_tUniqRow_7(
							file, bufferSizePerFile_tUniqRow_7);
					rowFileList_1_tUniqRow_7.add(fri);
					rowList_1_tUniqRow_7.add(fri.next());
				}

				// comparator for second sort
				class Comparator_2_tUniqRow_7 implements
						Comparator<rowStruct_tUniqRow_7> {

					public int compare(rowStruct_tUniqRow_7 arg0,
							rowStruct_tUniqRow_7 arg1) {
						return arg0.id_tUniqRow_7 - arg1.id_tUniqRow_7;
					}

				}

				// For second sort init begin
				int bufferSize_2_tUniqRow_7 = bufferSize_tUniqRow_7;
				rowStruct_tUniqRow_7[] buffer_2_tUniqRow_7 = new rowStruct_tUniqRow_7[bufferSize_1_tUniqRow_7];
				int rowsInBuffer_2_tUniqRow_7 = 0;
				Comparator<rowStruct_tUniqRow_7> comparator_2_tUniqRow_7 = new Comparator_2_tUniqRow_7();

				java.util.ArrayList<java.io.File> files_2_tUniqRow_7 = new java.util.ArrayList<java.io.File>();
				// For second sort init end

				while (rowList_1_tUniqRow_7.size() > 0) {
					int minIndex_tUniqRow_7 = 0;
					if (rowList_1_tUniqRow_7.size() > 1) {
						for (int i = 1; i < rowList_1_tUniqRow_7.size(); i++) {
							if (comparator_1_tUniqRow_7.compare(
									rowList_1_tUniqRow_7
											.get(minIndex_tUniqRow_7),
									rowList_1_tUniqRow_7.get(i)) > 0) {
								minIndex_tUniqRow_7 = i;
							}
						}
					}

					// /////////////
					if (rowsInBuffer_2_tUniqRow_7 >= bufferSize_2_tUniqRow_7) {// buffer
																				// is
																				// full
																				// do
																				// sort
																				// and

						java.util.Arrays.<rowStruct_tUniqRow_7> sort(
								buffer_2_tUniqRow_7, 0,
								bufferSize_2_tUniqRow_7,
								comparator_2_tUniqRow_7);
						java.io.File file = new java.io.File(
								workDirectory_tUniqRow_7
										+ "/tUniqRow_7_TEMP_uniq_"
										+ files_2_tUniqRow_7.size());
						file.deleteOnExit();
						java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
								new java.io.BufferedOutputStream(
										new java.io.FileOutputStream(file)));
						for (int i = 0; i < bufferSize_2_tUniqRow_7; i++) {
							buffer_2_tUniqRow_7[i].writeData(rw);
						}
						rw.close();

						files_2_tUniqRow_7.add(file);

						rowsInBuffer_2_tUniqRow_7 = 0;
					}
					rowStruct_tUniqRow_7 minItem = rowList_1_tUniqRow_7
							.get(minIndex_tUniqRow_7);
					buffer_2_tUniqRow_7[rowsInBuffer_2_tUniqRow_7++] = minItem;
					FileRowIterator_tUniqRow_7 fri = rowFileList_1_tUniqRow_7
							.get(minIndex_tUniqRow_7);
					if (fri.hasNext()) {
						rowList_1_tUniqRow_7.set(minIndex_tUniqRow_7,
								fri.next());
					} else {
						fri.close();
						rowFileList_1_tUniqRow_7.remove(minIndex_tUniqRow_7);
						rowList_1_tUniqRow_7.remove(minIndex_tUniqRow_7);
					}

					// skip duplicates....begin-->this case is suitable for no
					// duplicate connection
					for (int i = 0; i < rowList_1_tUniqRow_7.size();) {
						if (rowList_1_tUniqRow_7.get(i).duplicateTo(minItem)) {
							rowStruct_tUniqRow_7 noDuplicateItem = null;
							FileRowIterator_tUniqRow_7 fri2 = rowFileList_1_tUniqRow_7
									.get(i);
							while (fri2.hasNext()) {
								rowStruct_tUniqRow_7 current = fri2.next();
								if (!minItem.duplicateTo(current)) {
									noDuplicateItem = current;
									break;
								}
							}
							if (noDuplicateItem == null) {
								fri2.close();
								rowFileList_1_tUniqRow_7.remove(i);
								rowList_1_tUniqRow_7.remove(i);
							} else {
								rowList_1_tUniqRow_7.set(i, noDuplicateItem);
								i++;
							}
						} else {
							i++;
						}
					}
					// skip duplicates....end
				}

				if (rowsInBuffer_2_tUniqRow_7 > 0) {

					java.util.Arrays.<rowStruct_tUniqRow_7> sort(
							buffer_2_tUniqRow_7, 0, rowsInBuffer_2_tUniqRow_7,
							comparator_2_tUniqRow_7);

					java.io.File file = new java.io.File(
							workDirectory_tUniqRow_7 + "/tUniqRow_7_TEMP_uniq_"
									+ files_2_tUniqRow_7.size());

					file.deleteOnExit();

					java.io.ObjectOutputStream rw = new java.io.ObjectOutputStream(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(file)));

					for (int i = 0; i < rowsInBuffer_2_tUniqRow_7; i++) {
						buffer_2_tUniqRow_7[i].writeData(rw);
					}

					rw.close();

					files_2_tUniqRow_7.add(file);

					rowsInBuffer_2_tUniqRow_7 = 0;
				}
				buffer_2_tUniqRow_7 = null;
				java.util.List<FileRowIterator_tUniqRow_7> rowFileList_2_tUniqRow_7 = new java.util.ArrayList<FileRowIterator_tUniqRow_7>();
				java.util.List<rowStruct_tUniqRow_7> rowList_2_tUniqRow_7 = new java.util.ArrayList<rowStruct_tUniqRow_7>();

				for (java.io.File file : files_2_tUniqRow_7) {
					FileRowIterator_tUniqRow_7 fri = new FileRowIterator_tUniqRow_7(
							file, bufferSizePerFile_tUniqRow_7);
					rowFileList_2_tUniqRow_7.add(fri);
					rowList_2_tUniqRow_7.add(fri.next());
				}

				int nb_uniq_tUniqRow_7 = 0;
				while (rowList_2_tUniqRow_7.size() > 0) {
					int minIndex_tUniqRow_7 = 0;
					if (rowList_2_tUniqRow_7.size() > 1) {
						for (int i = 1; i < rowList_2_tUniqRow_7.size(); i++) {
							if (comparator_2_tUniqRow_7.compare(
									rowList_2_tUniqRow_7
											.get(minIndex_tUniqRow_7),
									rowList_2_tUniqRow_7.get(i)) > 0) {
								minIndex_tUniqRow_7 = i;
							}
						}
					}

					// /////////////

					rowStruct_tUniqRow_7 current = rowList_2_tUniqRow_7
							.get(minIndex_tUniqRow_7);

					// ////////////
					FileRowIterator_tUniqRow_7 fri = rowFileList_2_tUniqRow_7
							.get(minIndex_tUniqRow_7);
					if (fri.hasNext()) {
						rowList_2_tUniqRow_7.set(minIndex_tUniqRow_7,
								fri.next());
					} else {
						fri.close();
						rowFileList_2_tUniqRow_7.remove(minIndex_tUniqRow_7);
						rowList_2_tUniqRow_7.remove(minIndex_tUniqRow_7);
					}
					row8.itemID = current.itemID;

					row8.Value = current.Value;

					row8.VisitID = current.VisitID;

					row8.FormID = current.FormID;

					row8.SubjectKey = current.SubjectKey;

					row8.Path = current.Path;

					row8.PathID = current.PathID;

					row8.DataType = current.DataType;

					row8.Update_Date = current.Update_Date;

					row8.Import_Date = current.Import_Date;

					row8.Download_Date = current.Download_Date;

					row8.StudyEventRepeatKey = current.StudyEventRepeatKey;

					row8.FormRepeatKey = current.FormRepeatKey;

					row8.itemGroupRepeatKey = current.itemGroupRepeatKey;

					row8.startDate = current.startDate;

					row8.endDate = current.endDate;

					row8.source = current.source;

					row8.CONCEPT_CD = current.CONCEPT_CD;

					row8.MODIFIER_CD = current.MODIFIER_CD;

					row8.m_applied_path = current.m_applied_path;

					row8.sic = current.sic;

					nb_uniq_tUniqRow_7++;

					/**
					 * [tUniqRow_7_UniqIn begin ] stop
					 */
					/**
					 * [tUniqRow_7_UniqIn main ] start
					 */

					currentVirtualComponent = "tUniqRow_7";

					currentComponent = "tUniqRow_7_UniqIn";

					tos_count_tUniqRow_7_UniqIn++;

					/**
					 * [tUniqRow_7_UniqIn main ] stop
					 */
					// Start of branch "row8"
					if (row8 != null) {

						/**
						 * [tJavaRow_6 main ] start
						 */

						currentComponent = "tJavaRow_6";

						// code sample:
						//
						// multiply by 2 the row identifier
						// output_row.id = row8.id * 2;
						//
						// lowercase the name
						// output_row.name = row8.name.toLowerCase();
						StatusListener.addError(
								"Cannot find PID for EncounterID: "
										+ row8.StudyEventRepeatKey
										+ ". Check Importdata",
								context.currentFile);
						// System.out.println("Cannot find PID for EncounterID: "
						// + row8.StudyEventRepeatKey+ ". Check Importdata: "+
						// context.currentFile);

						nb_line_tJavaRow_6++;

						tos_count_tJavaRow_6++;

						/**
						 * [tJavaRow_6 main ] stop
						 */

					} // End of branch "row8"

					/**
					 * [tUniqRow_7_UniqIn end ] start
					 */

					currentVirtualComponent = "tUniqRow_7";

					currentComponent = "tUniqRow_7_UniqIn";

				}
				globalMap.put("tUniqRow_7_NB_UNIQUES", nb_uniq_tUniqRow_7);
				globalMap.put("tUniqRow_7_NB_DUPLICATES", nb_tUniqRow_7
						- nb_uniq_tUniqRow_7);

				ok_Hash.put("tUniqRow_7_UniqIn", true);
				end_Hash.put("tUniqRow_7_UniqIn", System.currentTimeMillis());

				/**
				 * [tUniqRow_7_UniqIn end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_22"
			globalMap.remove("tHash_Lookup_row31");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row1");

			// free memory for "tMap_16"
			globalMap.remove("tHash_Lookup_from_enc");

			// free memory for "tMap_21"
			globalMap.remove("tHash_Lookup_row18");

			// free memory for "tMap_28"
			globalMap.remove("tHash_Lookup_row36");

			// free memory for "tMap_20"
			globalMap.remove("tHash_Lookup_row20");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (resourceMap.get("finish_tFileOutputDelimited_13") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_13");

					if (CsvWritertFileOutputDelimited_13 != null) {
						CsvWritertFileOutputDelimited_13.close();
					}

				}

				/**
				 * [tFileOutputDelimited_13 finally ] stop
				 */

				/**
				 * [tMap_17 finally ] start
				 */

				currentComponent = "tMap_17";

				/**
				 * [tMap_17 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tUniqRow_2_UniqOut finally ] start
				 */

				currentVirtualComponent = "tUniqRow_2";

				currentComponent = "tUniqRow_2_UniqOut";

				/**
				 * [tUniqRow_2_UniqOut finally ] stop
				 */

				/**
				 * [tUniqRow_2_UniqIn finally ] start
				 */

				currentVirtualComponent = "tUniqRow_2";

				currentComponent = "tUniqRow_2_UniqIn";

				/**
				 * [tUniqRow_2_UniqIn finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMap_20 finally ] start
				 */

				currentComponent = "tMap_20";

				/**
				 * [tMap_20 finally ] stop
				 */

				/**
				 * [tSplitRow_1 finally ] start
				 */

				currentComponent = "tSplitRow_1";

				/**
				 * [tSplitRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_5");

					if (CsvWritertFileOutputDelimited_5 != null) {
						CsvWritertFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_28 finally ] start
				 */

				currentComponent = "tMap_28";

				/**
				 * [tMap_28 finally ] stop
				 */

				/**
				 * [tUniqRow_12_UniqOut finally ] start
				 */

				currentVirtualComponent = "tUniqRow_12";

				currentComponent = "tUniqRow_12_UniqOut";

				/**
				 * [tUniqRow_12_UniqOut finally ] stop
				 */

				/**
				 * [tUniqRow_12_UniqIn finally ] start
				 */

				currentVirtualComponent = "tUniqRow_12";

				currentComponent = "tUniqRow_12_UniqIn";

				/**
				 * [tUniqRow_12_UniqIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_26 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_26";

				if (resourceMap.get("finish_tFileOutputDelimited_26") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_26 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_26");

					if (CsvWritertFileOutputDelimited_26 != null) {
						CsvWritertFileOutputDelimited_26.close();
					}

				}

				/**
				 * [tFileOutputDelimited_26 finally ] stop
				 */

				/**
				 * [tMap_21 finally ] start
				 */

				currentComponent = "tMap_21";

				/**
				 * [tMap_21 finally ] stop
				 */

				/**
				 * [tUniqRow_5_UniqOut finally ] start
				 */

				currentVirtualComponent = "tUniqRow_5";

				currentComponent = "tUniqRow_5_UniqOut";

				/**
				 * [tUniqRow_5_UniqOut finally ] stop
				 */

				/**
				 * [tUniqRow_5_UniqIn finally ] start
				 */

				currentVirtualComponent = "tUniqRow_5";

				currentComponent = "tUniqRow_5_UniqIn";

				/**
				 * [tUniqRow_5_UniqIn finally ] stop
				 */

				/**
				 * [tSplitRow_2 finally ] start
				 */

				currentComponent = "tSplitRow_2";

				/**
				 * [tSplitRow_2 finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_6");

					if (CsvWritertFileOutputDelimited_6 != null) {
						CsvWritertFileOutputDelimited_6.close();
					}

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_4");

					if (CsvWritertFileOutputDelimited_4 != null) {
						CsvWritertFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (resourceMap.get("finish_tFileOutputDelimited_11") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_11 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_11");

					if (CsvWritertFileOutputDelimited_11 != null) {
						CsvWritertFileOutputDelimited_11.close();
					}

				}

				/**
				 * [tFileOutputDelimited_11 finally ] stop
				 */

				/**
				 * [tMap_16 finally ] start
				 */

				currentComponent = "tMap_16";

				/**
				 * [tMap_16 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMap_22 finally ] start
				 */

				currentComponent = "tMap_22";

				/**
				 * [tMap_22 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_14";

				if (resourceMap.get("finish_tFileOutputDelimited_14") == null) {

					java.io.Writer outtFileOutputDelimited_14 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_14");
					if (outtFileOutputDelimited_14 != null) {
						outtFileOutputDelimited_14.flush();
						outtFileOutputDelimited_14.close();
					}

				}

				/**
				 * [tFileOutputDelimited_14 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_21 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_21";

				if (resourceMap.get("finish_tFileOutputDelimited_21") == null) {

					java.io.Writer outtFileOutputDelimited_21 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_21");
					if (outtFileOutputDelimited_21 != null) {
						outtFileOutputDelimited_21.flush();
						outtFileOutputDelimited_21.close();
					}

				}

				/**
				 * [tFileOutputDelimited_21 finally ] stop
				 */

				/**
				 * [tUniqRow_7_UniqOut finally ] start
				 */

				currentVirtualComponent = "tUniqRow_7";

				currentComponent = "tUniqRow_7_UniqOut";

				/**
				 * [tUniqRow_7_UniqOut finally ] stop
				 */

				/**
				 * [tUniqRow_7_UniqIn finally ] start
				 */

				currentVirtualComponent = "tUniqRow_7";

				currentComponent = "tUniqRow_7_UniqIn";

				/**
				 * [tUniqRow_7_UniqIn finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_obsStruct implements
			routines.system.IPersistableRow<to_obsStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_obsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public BigDecimal SubjectKey;

		public BigDecimal getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String SubjectKey_1;

		public String getSubjectKey_1() {
			return this.SubjectKey_1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = (BigDecimal) dis.readObject();

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

					this.SubjectKey_1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// BigDecimal

				dos.writeObject(this.SubjectKey);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.SubjectKey_1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + String.valueOf(SubjectKey));
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append(",SubjectKey_1=" + SubjectKey_1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row66Struct implements
			routines.system.IPersistableRow<row66Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public BigDecimal SubjectKey;

		public BigDecimal getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String SubjectKey_1;

		public String getSubjectKey_1() {
			return this.SubjectKey_1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = (BigDecimal) dis.readObject();

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

					this.SubjectKey_1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// BigDecimal

				dos.writeObject(this.SubjectKey);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.SubjectKey_1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + String.valueOf(SubjectKey));
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append(",SubjectKey_1=" + SubjectKey_1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row66Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromStruct implements
			routines.system.IPersistableRow<fromStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public BigDecimal EncounterNum;

		public BigDecimal getEncounterNum() {
			return this.EncounterNum;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.EncounterNum = (BigDecimal) dis.readObject();

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// BigDecimal

				dos.writeObject(this.EncounterNum);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",EncounterNum=" + String.valueOf(EncounterNum));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromDataStruct implements
			routines.system.IPersistableRow<fromDataStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_4Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_4Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public Integer StudyEventRepeatKey;

		public Integer getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer FormRepeatKey;

		public Integer getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public java.util.Date startDate;

		public java.util.Date getStartDate() {
			return this.startDate;
		}

		public java.util.Date endDate;

		public java.util.Date getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readInteger(dis);

					this.FormRepeatKey = readInteger(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readDate(dis);

					this.endDate = readDate(dis);

					this.source = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.m_applied_path = readString(dis);

					this.sic = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// Integer

				writeInteger(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.FormRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// java.util.Date

				writeDate(this.startDate, dos);

				// java.util.Date

				writeDate(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.sic, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey="
					+ String.valueOf(StudyEventRepeatKey));
			sb.append(",FormRepeatKey=" + String.valueOf(FormRepeatKey));
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + String.valueOf(startDate));
			sb.append(",endDate=" + String.valueOf(endDate));
			sb.append(",source=" + source);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",sic=" + sic);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_14Process(globalMap);
				tFileInputDelimited_5Process(globalMap);
				tFileInputDelimited_21Process(globalMap);

				fromDataStruct fromData = new fromDataStruct();
				fromStruct from = new fromStruct();
				row66Struct row66 = new row66Struct();
				row7Struct row7 = new row7Struct();
				to_obsStruct to_obs = new to_obsStruct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "patient_data.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}

				String[] headColutFileOutputDelimited_3 = new String[23];
				class CSVBasicSet_tFileOutputDelimited_3 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_3[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_3 = fieldSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_3[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_3 = rowSep
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_3[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {

							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_3[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
									.toCharArray();
						} else {

							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
				csvSettings_tFileOutputDelimited_3.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {

						dir_tFileOutputDelimited_3.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;

				CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_3,
												true), context.coding)));
				CsvWritertFileOutputDelimited_3
						.setSeparator(csvSettings_tFileOutputDelimited_3
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_3
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_3.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_3.getRowDelim());
				}

				if (filetFileOutputDelimited_3.length() == 0) {

					headColutFileOutputDelimited_3[0] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_3[1] = "PATIENT_NUM";

					headColutFileOutputDelimited_3[2] = "CONCEPT_CD";

					headColutFileOutputDelimited_3[3] = "PROVIDER_ID";

					headColutFileOutputDelimited_3[4] = "START_DATE";

					headColutFileOutputDelimited_3[5] = "MODIFIER_CD";

					headColutFileOutputDelimited_3[6] = "INSTANCE_NUM";

					headColutFileOutputDelimited_3[7] = "VALTYPE_CD";

					headColutFileOutputDelimited_3[8] = "TVAL_CHAR";

					headColutFileOutputDelimited_3[9] = "NVAL_NUM";

					headColutFileOutputDelimited_3[10] = "VALUEFLAG_CD";

					headColutFileOutputDelimited_3[11] = "QUANTITY_NUM";

					headColutFileOutputDelimited_3[12] = "UNITS_CD";

					headColutFileOutputDelimited_3[13] = "END_DATE";

					headColutFileOutputDelimited_3[14] = "LOCATION_CD";

					headColutFileOutputDelimited_3[15] = "OBSERVATION_BLOB";

					headColutFileOutputDelimited_3[16] = "CONFIDENCE_NUM";

					headColutFileOutputDelimited_3[17] = "UPDATE_DATE";

					headColutFileOutputDelimited_3[18] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_3[19] = "IMPORT_DATE";

					headColutFileOutputDelimited_3[20] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_3[21] = "UPLOAD_ID";

					headColutFileOutputDelimited_3[22] = "m_applied_path";

					CsvWritertFileOutputDelimited_3
							.writeNext(headColutFileOutputDelimited_3);
					CsvWritertFileOutputDelimited_3.flush();

				}

				CsvWritertFileOutputDelimited_3
						.setEscapeChar(csvSettings_tFileOutputDelimited_3
								.getEscapeChar());
				CsvWritertFileOutputDelimited_3
						.setQuoteChar(csvSettings_tFileOutputDelimited_3
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_3
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_3",
						CsvWritertFileOutputDelimited_3);

				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tJavaRow_14 begin ] start
				 */

				ok_Hash.put("tJavaRow_14", false);
				start_Hash.put("tJavaRow_14", System.currentTimeMillis());

				currentComponent = "tJavaRow_14";

				int tos_count_tJavaRow_14 = 0;

				int nb_line_tJavaRow_14 = 0;

				/**
				 * [tJavaRow_14 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) globalMap
						.get("tHash_Lookup_row32"));

				row32Struct row32HashKey = new row32Struct();
				row32Struct row32Default = new row32Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
					boolean var2;
					boolean var1;
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				to_obsStruct to_obs_tmp = new to_obsStruct();
				// ###############################

				List<to_obsStruct> to_obs_List = new java.util.ArrayList<to_obsStruct>();

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tJavaRow_12 begin ] start
				 */

				ok_Hash.put("tJavaRow_12", false);
				start_Hash.put("tJavaRow_12", System.currentTimeMillis());

				currentComponent = "tJavaRow_12";

				int tos_count_tJavaRow_12 = 0;

				int nb_line_tJavaRow_12 = 0;

				/**
				 * [tJavaRow_12 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) globalMap
						.get("tHash_Lookup_row27"));

				row27Struct row27HashKey = new row27Struct();
				row27Struct row27Default = new row27Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row66Struct row66_tmp = new row66Struct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) globalMap
						.get("tHash_Lookup_row25"));

				row25Struct row25HashKey = new row25Struct();
				row25Struct row25Default = new row25Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				fromStruct from_tmp = new fromStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) ";")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 0; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 0; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						fromData = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						fromData = new fromDataStruct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) ";")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								fromData.itemID = null;

								fromData.Value = null;

								fromData.VisitID = null;

								fromData.FormID = null;

								fromData.SubjectKey = null;

								fromData.Path = null;

								fromData.PathID = null;

								fromData.DataType = null;

								fromData.Update_Date = null;

								fromData.Import_Date = null;

								fromData.Download_Date = null;

								fromData.StudyEventRepeatKey = null;

								fromData.FormRepeatKey = null;

								fromData.itemGroupRepeatKey = null;

								fromData.startDate = null;

								fromData.endDate = null;

								fromData.source = null;

								fromData.CONCEPT_CD = null;

								fromData.MODIFIER_CD = null;

								fromData.m_applied_path = null;

								fromData.sic = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.itemID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.itemID = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.Value = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.Value = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.VisitID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.VisitID = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.FormID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.FormID = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.SubjectKey = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.SubjectKey = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.Path = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.PathID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.DataType = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										fromData.Update_Date = null;
									}

								} else {
									fromData.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										fromData.Import_Date = null;
									}

								} else {
									fromData.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										fromData.Download_Date = null;
									}

								} else {
									fromData.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 11;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.StudyEventRepeatKey = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										fromData.StudyEventRepeatKey = null;
									}

								} else {
									fromData.StudyEventRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 12;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.FormRepeatKey = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										fromData.FormRepeatKey = null;
									}

								} else {
									fromData.FormRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 13;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.itemGroupRepeatKey = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

									} else {
										fromData.itemGroupRepeatKey = null;
									}

								} else {
									fromData.itemGroupRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 14;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.startDate = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										fromData.startDate = null;
									}

								} else {
									fromData.startDate = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 15;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										fromData.endDate = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										fromData.endDate = null;
									}

								} else {
									fromData.endDate = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 16;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.source = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.source = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 17;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.CONCEPT_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 18;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.MODIFIER_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 19;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.m_applied_path = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.m_applied_path = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 20;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									fromData.sic = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									fromData.sic = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							fromData = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "fromData"
						if (fromData != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row25"
							// /////////////////////////////////////////////

							boolean forceLooprow25 = false;

							row25Struct row25ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row25HashKey.PATIENT_IDE = fromData.SubjectKey;

								row25HashKey.hashCodeDirty = true;

								tHash_Lookup_row25.lookup(row25HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row25 != null
									&& tHash_Lookup_row25
											.getCount(row25HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.PATIENT_IDE = '"
								// + row25HashKey.PATIENT_IDE + "'");
							} // G 071

							row25Struct row25 = null;

							row25Struct fromLookup_row25 = null;
							row25 = row25Default;

							if (tHash_Lookup_row25 != null
									&& tHash_Lookup_row25.hasNext()) { // G 099

								fromLookup_row25 = tHash_Lookup_row25.next();

							} // G 099

							if (fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								from = null;

								// # Output table : 'from'
								from_tmp.itemID = fromData.itemID;
								from_tmp.Value = fromData.Value;
								from_tmp.VisitID = fromData.VisitID;
								from_tmp.FormID = fromData.FormID;
								from_tmp.SubjectKey = fromData.SubjectKey;
								from_tmp.Path = fromData.Path;
								from_tmp.PathID = fromData.PathID;
								from_tmp.DataType = fromData.DataType;
								from_tmp.Update_Date = fromData.Update_Date;
								from_tmp.Import_Date = fromData.Import_Date;
								from_tmp.Download_Date = fromData.Download_Date;
								from_tmp.StudyEventRepeatKey = fromData.StudyEventRepeatKey;
								from_tmp.FormRepeatKey = fromData.FormRepeatKey;
								from_tmp.EncounterNum = row25.ENCOUNTER_NUM;
								from_tmp.itemGroupRepeatKey = fromData.itemGroupRepeatKey;
								from_tmp.startDate = fromData.startDate;
								from_tmp.endDate = fromData.endDate;
								from_tmp.source = fromData.source;
								from_tmp.CONCEPT_CD = fromData.CONCEPT_CD;
								from_tmp.MODIFIER_CD = fromData.MODIFIER_CD;
								from_tmp.m_applied_path = fromData.m_applied_path;
								from_tmp.sic = fromData.sic;
								from = from_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "from"
							if (from != null) {

								/**
								 * [tMap_11 main ] start
								 */

								currentComponent = "tMap_11";

								boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_11 = false;
								boolean mainRowRejected_tMap_11 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row27"
								// /////////////////////////////////////////////

								boolean forceLooprow27 = false;

								row27Struct row27ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_11 = false;

									row27HashKey.PATIENT_IDE = from.SubjectKey;

									row27HashKey.hashCodeDirty = true;

									tHash_Lookup_row27.lookup(row27HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row27 != null
										&& tHash_Lookup_row27
												.getCount(row27HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.PATIENT_IDE = '"
									// + row27HashKey.PATIENT_IDE + "'");
								} // G 071

								row27Struct row27 = null;

								row27Struct fromLookup_row27 = null;
								row27 = row27Default;

								if (tHash_Lookup_row27 != null
										&& tHash_Lookup_row27.hasNext()) { // G
																			// 099

									fromLookup_row27 = tHash_Lookup_row27
											.next();

								} // G 099

								if (fromLookup_row27 != null) {
									row27 = fromLookup_row27;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
									// ###############################
									// # Output tables

									row66 = null;

									// # Output table : 'row66'
									row66_tmp.itemID = from.itemID;
									row66_tmp.Value = from.Value;
									row66_tmp.VisitID = from.VisitID;
									row66_tmp.FormID = from.FormID;
									row66_tmp.SubjectKey = row27.PATIENT_NUM;
									row66_tmp.Path = from.Path;
									row66_tmp.PathID = from.PathID;
									row66_tmp.DataType = from.DataType;
									row66_tmp.Update_Date = from.Update_Date;
									row66_tmp.Import_Date = from.Import_Date;
									row66_tmp.Download_Date = from.Download_Date;
									row66_tmp.StudyEventRepeatKey = from.StudyEventRepeatKey;
									row66_tmp.FormRepeatKey = from.FormRepeatKey;
									row66_tmp.itemGroupRepeatKey = from.itemGroupRepeatKey;
									row66_tmp.startDate = from.startDate;
									row66_tmp.endDate = from.endDate;
									row66_tmp.source = from.source;
									row66_tmp.CONCEPT_CD = from.CONCEPT_CD;
									row66_tmp.MODIFIER_CD = from.MODIFIER_CD;
									row66_tmp.m_applied_path = from.m_applied_path;
									row66_tmp.sic = from.sic;
									row66_tmp.SubjectKey_1 = from.SubjectKey;
									row66 = row66_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_11 = false;

								tos_count_tMap_11++;

								/**
								 * [tMap_11 main ] stop
								 */
								// Start of branch "row66"
								if (row66 != null) {

									/**
									 * [tJavaRow_12 main ] start
									 */

									currentComponent = "tJavaRow_12";

									// Code generated according to input schema
									// and output schema
									row7.itemID = row66.itemID;
									row7.Value = row66.Value;
									row7.VisitID = row66.VisitID;
									row7.FormID = row66.FormID;
									row7.SubjectKey = row66.SubjectKey;
									row7.Path = row66.Path;
									row7.PathID = row66.PathID;
									row7.DataType = row66.DataType;
									row7.Update_Date = row66.Update_Date;
									row7.Import_Date = row66.Import_Date;
									row7.Download_Date = row66.Download_Date;

									row7.startDate = row66.startDate;
									row7.endDate = row66.endDate;
									row7.source = row66.source;
									row7.CONCEPT_CD = row66.CONCEPT_CD;
									row7.MODIFIER_CD = row66.MODIFIER_CD;
									row7.m_applied_path = row66.m_applied_path;
									row7.sic = row66.sic;
									row7.SubjectKey_1 = row66.SubjectKey_1;

									row7.StudyEventRepeatKey = "";
									for (int i = 3; i >= 0; i--) {
										if (row66.StudyEventRepeatKey < Math
												.pow(10, i)) {
											row7.StudyEventRepeatKey = "0"
													+ row7.StudyEventRepeatKey;
										} else {
											row7.StudyEventRepeatKey = row7.StudyEventRepeatKey
													+ ""
													+ row66.StudyEventRepeatKey;
											break;
										}

									}

									row7.FormRepeatKey = "";
									for (int i = 3; i >= 0; i--) {
										if (row66.FormRepeatKey < Math.pow(10,
												i)) {
											row7.FormRepeatKey = "0"
													+ row7.FormRepeatKey;
										} else {
											row7.FormRepeatKey = row7.FormRepeatKey
													+ "" + row66.FormRepeatKey;
											break;
										}

									}
									row7.itemGroupRepeatKey = "";
									for (int i = 3; i >= 0; i--) {
										if (row66.itemGroupRepeatKey < Math
												.pow(10, i)) {
											row7.itemGroupRepeatKey = "0"
													+ row7.itemGroupRepeatKey;
										} else {
											row7.itemGroupRepeatKey = row7.itemGroupRepeatKey
													+ ""
													+ row66.itemGroupRepeatKey;
											break;
										}

									}

									nb_line_tJavaRow_12++;

									tos_count_tJavaRow_12++;

									/**
									 * [tJavaRow_12 main ] stop
									 */

									/**
									 * [tMap_7 main ] start
									 */

									currentComponent = "tMap_7";

									boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_7 = false;
									boolean mainRowRejected_tMap_7 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row32"
									// /////////////////////////////////////////////

									boolean forceLooprow32 = false;

									row32Struct row32ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_7 = false;

										row32HashKey.PATIENT_NUM = row7.SubjectKey;

										row32HashKey.TVAL_CHAR = row7.sic;

										row32HashKey.hashCodeDirty = true;

										tHash_Lookup_row32.lookup(row32HashKey);

										if (!tHash_Lookup_row32.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_7 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row32 != null
											&& tHash_Lookup_row32
													.getCount(row32HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.PATIENT_NUM = '"
										// + row32HashKey.PATIENT_NUM +
										// "', row32.TVAL_CHAR = '" +
										// row32HashKey.TVAL_CHAR + "'");
									} // G 071

									row32Struct row32 = null;

									row32Struct fromLookup_row32 = null;
									row32 = row32Default;

									if (tHash_Lookup_row32 != null
											&& tHash_Lookup_row32.hasNext()) { // G
																				// 099

										fromLookup_row32 = tHash_Lookup_row32
												.next();

									} // G 099

									if (fromLookup_row32 != null) {
										row32 = fromLookup_row32;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_7__Struct Var = Var__tMap_7;
										Var.var2 = row7.DataType.toLowerCase()
												.equals("float")
												|| row7.DataType.toLowerCase()
														.equals("integer");
										Var.var1 = row7.StudyEventRepeatKey != null;// ###############################
										// ###############################
										// # Output tables

										to_obs = null;
										to_obs_List.clear();

										if (!rejectedInnerJoin_tMap_7) {

											// # Output table : 'to_obs'
											to_obs_tmp.ENCOUNTER_NUM = Var.var1 ? new BigDecimal(
													row7.StudyEventRepeatKey
															.hashCode()
															+ row32.PATIENT_NUM
																	.hashCode())
													: new BigDecimal(
															row32.PATIENT_NUM
																	.hashCode());
											to_obs_tmp.PATIENT_NUM = row7.SubjectKey;
											to_obs_tmp.CONCEPT_CD = row7.m_applied_path
													.equals("@") ? row7.CONCEPT_CD
													: row7.CONCEPT_CD;
											to_obs_tmp.PROVIDER_ID = "IDRT";
											to_obs_tmp.START_DATE = row7.startDate != null ? row7.startDate
													: TalendDate.parseDate(
															"yyyy-MM-dd",
															"1900-01-01");
											to_obs_tmp.MODIFIER_CD = row7.m_applied_path
													.equals("@") ? "@"
													: row7.MODIFIER_CD;
											to_obs_tmp.INSTANCE_NUM = ""
													+ row32.INSTANCE_NUM;
											to_obs_tmp.VALTYPE_CD = Var.var2 ? "N"
													: "T";
											to_obs_tmp.TVAL_CHAR = Var.var2 ? "E"
													: row7.Value.length() > 254 ? row7.Value
															.replaceAll(";",
																	" ")
															.substring(0, 253)
															: row7.Value
																	.replaceAll(
																			";",
																			" ");
											to_obs_tmp.NVAL_NUM = Var.var2
													&& row7.Value.length() > 0 ? Float
													.parseFloat(row7.Value
															.replace(",", "."))
													: null;
											to_obs_tmp.VALUEFLAG_CD = null;
											to_obs_tmp.QUANTITY_NUM = null;
											to_obs_tmp.UNITS_CD = null;
											to_obs_tmp.END_DATE = row7.endDate != null ? row7.endDate
													: row7.startDate;
											to_obs_tmp.LOCATION_CD = null;
											to_obs_tmp.OBSERVATION_BLOB = null;
											to_obs_tmp.CONFIDENCE_NUM = null;
											to_obs_tmp.UPDATE_DATE = row7.Update_Date;
											to_obs_tmp.DOWNLOAD_DATE = row7.Download_Date;
											to_obs_tmp.IMPORT_DATE = row7.Import_Date;
											to_obs_tmp.SOURCESYSTEM_CD = null;
											to_obs_tmp.UPLOAD_ID = null;
											to_obs_tmp.m_applied_path = row7.m_applied_path;
											to_obs_List.add(to_obs_tmp);
											to_obs = to_obs_tmp;
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table : 'out8'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_7) {
											to_obs_tmp = new to_obsStruct();

											to_obs_tmp.ENCOUNTER_NUM = Var.var1 ? new BigDecimal(
													row7.StudyEventRepeatKey
															.hashCode()
															+ row7.SubjectKey_1
																	.hashCode())
													: new BigDecimal(
															row7.SubjectKey_1
																	.hashCode());
											to_obs_tmp.PATIENT_NUM = row7.SubjectKey;
											to_obs_tmp.CONCEPT_CD = row7.m_applied_path
													.equals("@") ? row7.CONCEPT_CD
													: row7.CONCEPT_CD;
											to_obs_tmp.PROVIDER_ID = "IDRT";
											to_obs_tmp.START_DATE = row7.startDate != null ? row7.startDate
													: TalendDate.parseDate(
															"yyyy-MM-dd",
															"1900-01-01");
											to_obs_tmp.MODIFIER_CD = row7.m_applied_path
													.equals("@") ? "@"
													: row7.MODIFIER_CD;
											to_obs_tmp.INSTANCE_NUM = row7.m_applied_path
													.equals("@") ? "0" : ""
													+ row7.StudyEventRepeatKey
													+ "" + row7.FormRepeatKey
													+ ""
													+ row7.itemGroupRepeatKey
													+ 1;
											to_obs_tmp.VALTYPE_CD = Var.var2 ? "N"
													: "T";
											to_obs_tmp.TVAL_CHAR = Var.var2 ? "E"
													: row7.Value.length() > 254 ? row7.Value
															.replaceAll(";",
																	" ")
															.substring(0, 253)
															: row7.Value
																	.replaceAll(
																			";",
																			" ");
											to_obs_tmp.NVAL_NUM = Var.var2
													&& row7.Value.length() > 0 ? Float
													.parseFloat(row7.Value
															.replace(",", "."))
													: null;
											to_obs_tmp.VALUEFLAG_CD = null;
											to_obs_tmp.QUANTITY_NUM = null;
											to_obs_tmp.UNITS_CD = null;
											to_obs_tmp.END_DATE = row7.endDate != null ? row7.endDate
													: row7.startDate;
											to_obs_tmp.LOCATION_CD = null;
											to_obs_tmp.OBSERVATION_BLOB = null;
											to_obs_tmp.CONFIDENCE_NUM = null;
											to_obs_tmp.UPDATE_DATE = row7.Update_Date;
											to_obs_tmp.DOWNLOAD_DATE = row7.Download_Date;
											to_obs_tmp.IMPORT_DATE = row7.Import_Date;
											to_obs_tmp.SOURCESYSTEM_CD = null;
											to_obs_tmp.UPLOAD_ID = null;
											to_obs_tmp.m_applied_path = row7.m_applied_path;
											to_obs_List.add(to_obs_tmp);
											to_obs = to_obs_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_7 = false;

									tos_count_tMap_7++;

									/**
									 * [tMap_7 main ] stop
									 */
									// Start of branch "to_obs"
									if (to_obs != null) {
										// start of joined table loop
										for (to_obsStruct cur_to_obs : to_obs_List) {
											to_obs = cur_to_obs;

											/**
											 * [tJavaRow_14 main ] start
											 */

											currentComponent = "tJavaRow_14";

											// Code generated according to input
											// schema and output schema
											row11.ENCOUNTER_NUM = to_obs.ENCOUNTER_NUM;
											row11.PATIENT_NUM = to_obs.PATIENT_NUM;
											row11.CONCEPT_CD = to_obs.CONCEPT_CD;
											row11.PROVIDER_ID = to_obs.PROVIDER_ID;
											row11.START_DATE = to_obs.START_DATE;
											row11.MODIFIER_CD = to_obs.MODIFIER_CD;

											// System.out.println("*****************************");
											if (!to_obs.m_applied_path
													.equalsIgnoreCase("@")) {
												if (((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
														.containsKey(to_obs.PATIENT_NUM)) {
													if (((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
															.get(to_obs.PATIENT_NUM)
															.containsKey(
																	to_obs.m_applied_path)) {
														if (((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
																.get(to_obs.PATIENT_NUM)
																.get(to_obs.m_applied_path)
																.containsKey(
																		to_obs.INSTANCE_NUM)) {
															row11.INSTANCE_NUM = ((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
																	.get(to_obs.PATIENT_NUM)
																	.get(to_obs.m_applied_path)
																	.get(to_obs.INSTANCE_NUM)
																	.toString();
															// System.out.println("IF1");
														} else {
															row11.INSTANCE_NUM = context.maxInstance
																	.add(new BigDecimal(
																			1))
																	.toString();
															context.maxInstance = new BigDecimal(
																	row11.INSTANCE_NUM);
															((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
																	.get(to_obs.PATIENT_NUM)
																	.get(to_obs.m_applied_path)
																	.put(to_obs.INSTANCE_NUM,
																			new BigDecimal(
																					row11.INSTANCE_NUM));// .put(CONCEPT_CD).put(INSTANCE_NUM,
																											// maxInstance);
															// System.out.println("ELSE1");
														}
													} else {
														((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
																.get(to_obs.PATIENT_NUM)
																.put(to_obs.m_applied_path,
																		new HashMap<String, BigDecimal>());
														row11.INSTANCE_NUM = context.maxInstance
																.add(new BigDecimal(
																		1))
																.toString();
														context.maxInstance = new BigDecimal(
																row11.INSTANCE_NUM);
														((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
																.get(to_obs.PATIENT_NUM)
																.get(to_obs.m_applied_path)
																.put(to_obs.INSTANCE_NUM,
																		new BigDecimal(
																				row11.INSTANCE_NUM));
														// System.out.println("ELSE2");
													}
												} else {
													((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
															.put(to_obs.PATIENT_NUM,
																	new HashMap<String, HashMap<String, BigDecimal>>());
													((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
															.get(to_obs.PATIENT_NUM)
															.put(to_obs.m_applied_path,
																	new HashMap<String, BigDecimal>());
													row11.INSTANCE_NUM = context.maxInstance
															.add(new BigDecimal(
																	1))
															.toString();

													context.maxInstance = new BigDecimal(
															row11.INSTANCE_NUM);
													((HashMap<BigDecimal, HashMap<String, HashMap<String, BigDecimal>>>) context.instanceMap)
															.get(to_obs.PATIENT_NUM)
															.get(to_obs.m_applied_path)
															.put(to_obs.INSTANCE_NUM,
																	new BigDecimal(
																			row11.INSTANCE_NUM));
													// System.out.println("ELSE3");
												}
												// System.out.println("MPATH: "
												// + to_obs.m_applied_path
												// +" INSTANCE: " +
												// to_obs.INSTANCE_NUM + " " +
												// row11.INSTANCE_NUM + " PID "
												// + to_obs.PATIENT_NUM);
											} else {
												row11.INSTANCE_NUM = "0";
											}
											int a = Integer
													.parseInt(row11.INSTANCE_NUM) + 1;
											row11.INSTANCE_NUM = "" + a;
											row11.VALTYPE_CD = to_obs.VALTYPE_CD;
											row11.TVAL_CHAR = to_obs.TVAL_CHAR;
											row11.NVAL_NUM = to_obs.NVAL_NUM;
											row11.VALUEFLAG_CD = to_obs.VALUEFLAG_CD;
											row11.QUANTITY_NUM = to_obs.QUANTITY_NUM;
											row11.UNITS_CD = to_obs.UNITS_CD;
											row11.END_DATE = to_obs.END_DATE;
											row11.LOCATION_CD = to_obs.LOCATION_CD;
											row11.OBSERVATION_BLOB = to_obs.OBSERVATION_BLOB;
											row11.CONFIDENCE_NUM = to_obs.CONFIDENCE_NUM;
											row11.UPDATE_DATE = to_obs.UPDATE_DATE;
											row11.DOWNLOAD_DATE = to_obs.DOWNLOAD_DATE;
											row11.IMPORT_DATE = to_obs.IMPORT_DATE;
											row11.SOURCESYSTEM_CD = to_obs.SOURCESYSTEM_CD;
											row11.UPLOAD_ID = to_obs.UPLOAD_ID;
											row11.m_applied_path = to_obs.m_applied_path;

											nb_line_tJavaRow_14++;

											tos_count_tJavaRow_14++;

											/**
											 * [tJavaRow_14 main ] stop
											 */

											/**
											 * [tFileOutputDelimited_3 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_3";

											String[] rowtFileOutputDelimited_3 = new String[23];

											rowtFileOutputDelimited_3[0] = row11.ENCOUNTER_NUM == null ? ""
													: row11.ENCOUNTER_NUM
															.toPlainString();

											rowtFileOutputDelimited_3[1] = row11.PATIENT_NUM == null ? ""
													: row11.PATIENT_NUM
															.toPlainString();

											rowtFileOutputDelimited_3[2] = row11.CONCEPT_CD == null ? ""
													: row11.CONCEPT_CD;

											rowtFileOutputDelimited_3[3] = row11.PROVIDER_ID == null ? ""
													: row11.PROVIDER_ID;

											rowtFileOutputDelimited_3[4] = row11.START_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row11.START_DATE,
																	"yyyy-MM-dd");

											rowtFileOutputDelimited_3[5] = row11.MODIFIER_CD == null ? ""
													: row11.MODIFIER_CD;

											rowtFileOutputDelimited_3[6] = row11.INSTANCE_NUM == null ? ""
													: row11.INSTANCE_NUM;

											rowtFileOutputDelimited_3[7] = row11.VALTYPE_CD == null ? ""
													: row11.VALTYPE_CD;

											rowtFileOutputDelimited_3[8] = row11.TVAL_CHAR == null ? ""
													: row11.TVAL_CHAR;

											rowtFileOutputDelimited_3[9] = row11.NVAL_NUM == null ? ""
													: String.valueOf(row11.NVAL_NUM);

											rowtFileOutputDelimited_3[10] = row11.VALUEFLAG_CD == null ? ""
													: row11.VALUEFLAG_CD;

											rowtFileOutputDelimited_3[11] = row11.QUANTITY_NUM == null ? ""
													: row11.QUANTITY_NUM;

											rowtFileOutputDelimited_3[12] = row11.UNITS_CD == null ? ""
													: row11.UNITS_CD;

											rowtFileOutputDelimited_3[13] = row11.END_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row11.END_DATE,
																	"yyyy-MM-dd");

											rowtFileOutputDelimited_3[14] = row11.LOCATION_CD == null ? ""
													: row11.LOCATION_CD;

											rowtFileOutputDelimited_3[15] = row11.OBSERVATION_BLOB == null ? ""
													: row11.OBSERVATION_BLOB;

											rowtFileOutputDelimited_3[16] = row11.CONFIDENCE_NUM == null ? ""
													: row11.CONFIDENCE_NUM;

											rowtFileOutputDelimited_3[17] = row11.UPDATE_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row11.UPDATE_DATE,
																	"yyyy-MM-dd");

											rowtFileOutputDelimited_3[18] = row11.DOWNLOAD_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row11.DOWNLOAD_DATE,
																	"yyyy-MM-dd");

											rowtFileOutputDelimited_3[19] = row11.IMPORT_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row11.IMPORT_DATE,
																	"yyyy-MM-dd");

											rowtFileOutputDelimited_3[20] = row11.SOURCESYSTEM_CD == null ? ""
													: row11.SOURCESYSTEM_CD;

											rowtFileOutputDelimited_3[21] = row11.UPLOAD_ID == null ? ""
													: row11.UPLOAD_ID;

											rowtFileOutputDelimited_3[22] = row11.m_applied_path == null ? ""
													: row11.m_applied_path;

											nb_line_tFileOutputDelimited_3++;
											resourceMap
													.put("nb_line_tFileOutputDelimited_3",
															nb_line_tFileOutputDelimited_3);
											CsvWritertFileOutputDelimited_3
													.writeNext(rowtFileOutputDelimited_3);

											tos_count_tFileOutputDelimited_3++;

											/**
											 * [tFileOutputDelimited_3 main ]
											 * stop
											 */

										} // end of joined table loop
										to_obs_List.clear();

									} // End of branch "to_obs"

								} // End of branch "row66"

							} // End of branch "from"

						} // End of branch "fromData"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row25 != null) {
					tHash_Lookup_row25.endGet();
				}
				globalMap.remove("tHash_Lookup_row25");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row27 != null) {
					tHash_Lookup_row27.endGet();
				}
				globalMap.remove("tHash_Lookup_row27");

				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tJavaRow_12 end ] start
				 */

				currentComponent = "tJavaRow_12";

				globalMap.put("tJavaRow_12_NB_LINE", nb_line_tJavaRow_12);

				ok_Hash.put("tJavaRow_12", true);
				end_Hash.put("tJavaRow_12", System.currentTimeMillis());

				/**
				 * [tJavaRow_12 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row32 != null) {
					tHash_Lookup_row32.endGet();
				}
				globalMap.remove("tHash_Lookup_row32");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tJavaRow_14 end ] start
				 */

				currentComponent = "tJavaRow_14";

				globalMap.put("tJavaRow_14_NB_LINE", nb_line_tJavaRow_14);

				ok_Hash.put("tJavaRow_14", true);
				end_Hash.put("tJavaRow_14", System.currentTimeMillis());

				/**
				 * [tJavaRow_14 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (CsvWritertFileOutputDelimited_3 != null) {
					CsvWritertFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row32");

			// free memory for "tMap_11"
			globalMap.remove("tHash_Lookup_row27");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row25");

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tJavaRow_12 finally ] start
				 */

				currentComponent = "tJavaRow_12";

				/**
				 * [tJavaRow_12 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tJavaRow_14 finally ] start
				 */

				currentComponent = "tJavaRow_14";

				/**
				 * [tJavaRow_14 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_3");

					if (CsvWritertFileOutputDelimited_3 != null) {
						CsvWritertFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				String foo = "bar";
				// System.out.println((HashMap<BigDecimal,HashMap<String,HashMap<String,BigDecimal>>>)context.instanceMap);

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tJDBCClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCClose_1 begin ] start
				 */

				ok_Hash.put("tJDBCClose_1", false);
				start_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				currentComponent = "tJDBCClose_1";

				int tos_count_tJDBCClose_1 = 0;

				/**
				 * [tJDBCClose_1 begin ] stop
				 */
				/**
				 * [tJDBCClose_1 main ] start
				 */

				currentComponent = "tJDBCClose_1";

				java.sql.Connection conn_tJDBCClose_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				if (conn_tJDBCClose_1 != null && !conn_tJDBCClose_1.isClosed()) {
					conn_tJDBCClose_1.close();
				}

				tos_count_tJDBCClose_1++;

				/**
				 * [tJDBCClose_1 main ] stop
				 */
				/**
				 * [tJDBCClose_1 end ] start
				 */

				currentComponent = "tJDBCClose_1";

				ok_Hash.put("tJDBCClose_1", true);
				end_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				/**
				 * [tJDBCClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCClose_1 finally ] start
				 */

				currentComponent = "tJDBCClose_1";

				/**
				 * [tJDBCClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String c_fullname;

		public String getC_fullname() {
			return this.c_fullname;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.C_HLEVEL == null) ? 0 : this.C_HLEVEL
								.hashCode());

				result = prime
						* result
						+ ((this.c_fullname == null) ? 0 : this.c_fullname
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.C_HLEVEL == null) {
				if (other.C_HLEVEL != null)
					return false;

			} else if (!this.C_HLEVEL.equals(other.C_HLEVEL))

				return false;

			if (this.c_fullname == null) {
				if (other.c_fullname != null)
					return false;

			} else if (!this.c_fullname.equals(other.c_fullname))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.C_HLEVEL = this.C_HLEVEL;
			other.c_fullname = this.c_fullname;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.C_HLEVEL = this.C_HLEVEL;
			other.c_fullname = this.c_fullname;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.c_fullname = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.c_fullname, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",c_fullname=" + c_fullname);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.C_HLEVEL, other.C_HLEVEL);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.c_fullname,
					other.c_fullname);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row17";

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tJDBCInput_6 -
				// inputs:(after_tFileInputDelimited_7) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_8 - inputs:(row10,row17)
				// outputs:(copyOfout6,toCD6)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row17Struct> getLookup(matchingModeEnum_row17);

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tJDBCInput_6 begin ] start
				 */

				ok_Hash.put("tJDBCInput_6", false);
				start_Hash.put("tJDBCInput_6", System.currentTimeMillis());

				currentComponent = "tJDBCInput_6";

				int tos_count_tJDBCInput_6 = 0;

				int nb_line_tJDBCInput_6 = 0;
				java.sql.Connection conn_tJDBCInput_6 = null;
				conn_tJDBCInput_6 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_6 = conn_tJDBCInput_6
						.createStatement();

				String dbquery_tJDBCInput_6 = "SELECT c_hlevel, c_fullname FROM "
						+ context.currentQuery
						+ ".i2b2 where c_hlevel<2 and m_applied_path like '@'";

				globalMap.put("tJDBCInput_6_QUERY", dbquery_tJDBCInput_6);
				java.sql.ResultSet rs_tJDBCInput_6 = null;
				try {
					rs_tJDBCInput_6 = stmt_tJDBCInput_6
							.executeQuery(dbquery_tJDBCInput_6);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_6 = rs_tJDBCInput_6
							.getMetaData();
					int colQtyInRs_tJDBCInput_6 = rsmd_tJDBCInput_6
							.getColumnCount();

					String tmpContent_tJDBCInput_6 = null;

					while (rs_tJDBCInput_6.next()) {
						nb_line_tJDBCInput_6++;

						if (colQtyInRs_tJDBCInput_6 < 1) {
							row17.C_HLEVEL = null;
						} else {

							if (rs_tJDBCInput_6.getObject(1) != null) {
								row17.C_HLEVEL = rs_tJDBCInput_6
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tJDBCInput_6 < 2) {
							row17.c_fullname = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(2);
							if (tmpContent_tJDBCInput_6 != null) {
								row17.c_fullname = tmpContent_tJDBCInput_6;
							} else {
								row17.c_fullname = null;
							}
						}

						/**
						 * [tJDBCInput_6 begin ] stop
						 */
						/**
						 * [tJDBCInput_6 main ] start
						 */

						currentComponent = "tJDBCInput_6";

						tos_count_tJDBCInput_6++;

						/**
						 * [tJDBCInput_6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row17 main ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						row17Struct row17_HashRow = new row17Struct();

						row17_HashRow.C_HLEVEL = row17.C_HLEVEL;

						row17_HashRow.c_fullname = row17.c_fullname;

						tHash_Lookup_row17.put(row17_HashRow);

						tos_count_tAdvancedHash_row17++;

						/**
						 * [tAdvancedHash_row17 main ] stop
						 */

						/**
						 * [tJDBCInput_6 end ] start
						 */

						currentComponent = "tJDBCInput_6";

					}
				} finally {
					if (rs_tJDBCInput_6 != null) {
						rs_tJDBCInput_6.close();
					}
					stmt_tJDBCInput_6.close();

				}
				globalMap.put("tJDBCInput_6_NB_LINE", nb_line_tJDBCInput_6);

				ok_Hash.put("tJDBCInput_6", true);
				end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

				/**
				 * [tJDBCInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_6 finally ] start
				 */

				currentComponent = "tJDBCInput_6";

				/**
				 * [tJDBCInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row17 finally ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				/**
				 * [tAdvancedHash_row17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 1);
	}

	public static class from_encStruct implements
			routines.system.IPersistableComparableLookupRow<from_encStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ENCOUNTER_NUM;

		public int getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_IDE == null) ? 0
								: this.ENCOUNTER_IDE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_encStruct other = (from_encStruct) obj;

			if (this.ENCOUNTER_IDE == null) {
				if (other.ENCOUNTER_IDE != null)
					return false;

			} else if (!this.ENCOUNTER_IDE.equals(other.ENCOUNTER_IDE))

				return false;

			return true;
		}

		public void copyDataTo(from_encStruct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;
			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		public void copyKeysDataTo(from_encStruct other) {

			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = dis.readInt();

				this.PATIENT_IDE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ENCOUNTER_NUM);

				writeString(this.PATIENT_IDE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_encStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_IDE,
					other.ENCOUNTER_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_encStruct from_enc = new from_encStruct();

				/**
				 * [tAdvancedHash_from_enc begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_enc", false);
				start_Hash.put("tAdvancedHash_from_enc",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_from_enc";

				int tos_count_tAdvancedHash_from_enc = 0;

				// connection name:from_enc
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_1)
				// outputs:(from_enc,from_enc) | target
				// node:tAdvancedHash_from_enc - inputs:(from_enc) outputs:()
				// linked node: tMap_16 - inputs:(noSubjKey,from_enc)
				// outputs:(out3,out12)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_enc = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_encStruct> tHash_Lookup_from_enc = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<from_encStruct> getLookup(matchingModeEnum_from_enc);

				globalMap.put("tHash_Lookup_from_enc", tHash_Lookup_from_enc);

				/**
				 * [tAdvancedHash_from_enc begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = ((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"));
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_3_FILEPATH")),
								context.coding, ";", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {

						from_enc = null;

						from_enc = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						from_enc = new from_encStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								from_enc.ENCOUNTER_NUM = ParserUtils
										.parseTo_int(temp);

							} else {

								from_enc.ENCOUNTER_NUM = 0;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							from_enc.ENCOUNTER_IDE = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							from_enc.PATIENT_IDE = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							from_enc = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "from_enc"
						if (from_enc != null) {

							/**
							 * [tAdvancedHash_from_enc main ] start
							 */

							currentComponent = "tAdvancedHash_from_enc";

							from_encStruct from_enc_HashRow = new from_encStruct();

							from_enc_HashRow.ENCOUNTER_NUM = from_enc.ENCOUNTER_NUM;

							from_enc_HashRow.ENCOUNTER_IDE = from_enc.ENCOUNTER_IDE;

							from_enc_HashRow.PATIENT_IDE = from_enc.PATIENT_IDE;

							tHash_Lookup_from_enc.put(from_enc_HashRow);

							tos_count_tAdvancedHash_from_enc++;

							/**
							 * [tAdvancedHash_from_enc main ] stop
							 */

						} // End of branch "from_enc"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_enc end ] start
				 */

				currentComponent = "tAdvancedHash_from_enc";

				tHash_Lookup_from_enc.endPut();

				ok_Hash.put("tAdvancedHash_from_enc", true);
				end_Hash.put("tAdvancedHash_from_enc",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_enc end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_from_enc finally ] start
				 */

				currentComponent = "tAdvancedHash_from_enc";

				/**
				 * [tAdvancedHash_from_enc finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public BigDecimal UPLOAD_ID;

		public BigDecimal getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PATIENT_IDE_SOURCE = readString(dis, ois);

				this.PATIENT_NUM = dis.readInt();

				this.PATIENT_IDE_STATUS = readString(dis, ois);

				this.UPLOAD_DATE = readDate(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.PATIENT_IDE_SOURCE, dos, oos);

				dos.writeInt(this.PATIENT_NUM);

				writeString(this.PATIENT_IDE_STATUS, dos, oos);

				writeDate(this.UPLOAD_DATE, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				oos.writeObject(this.UPLOAD_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash
						.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row1,row1) |
				// target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
				// linked node: tMap_3 - inputs:(out3,row1) outputs:(row5)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct> getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = ((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"));
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_2_FILEPATH")),
								context.coding, ";", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {

						row1 = null;

						row1 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row1.PATIENT_IDE = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row1.PATIENT_IDE_SOURCE = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row1.PATIENT_NUM = ParserUtils
										.parseTo_int(temp);

							} else {

								row1.PATIENT_NUM = 0;

							}

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row1.PATIENT_IDE_STATUS = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row1.UPLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row1.UPLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row1.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row1.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row1.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row1.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 7;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row1.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row1.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row1.SOURCESYSTEM_CD = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								row1.UPLOAD_ID = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row1.UPLOAD_ID = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tAdvancedHash_row1 main ] start
							 */

							currentComponent = "tAdvancedHash_row1";

							row1Struct row1_HashRow = new row1Struct();

							row1_HashRow.PATIENT_IDE = row1.PATIENT_IDE;

							row1_HashRow.PATIENT_IDE_SOURCE = row1.PATIENT_IDE_SOURCE;

							row1_HashRow.PATIENT_NUM = row1.PATIENT_NUM;

							row1_HashRow.PATIENT_IDE_STATUS = row1.PATIENT_IDE_STATUS;

							row1_HashRow.UPLOAD_DATE = row1.UPLOAD_DATE;

							row1_HashRow.UPDATE_DATE = row1.UPDATE_DATE;

							row1_HashRow.DOWNLOAD_DATE = row1.DOWNLOAD_DATE;

							row1_HashRow.IMPORT_DATE = row1.IMPORT_DATE;

							row1_HashRow.SOURCESYSTEM_CD = row1.SOURCESYSTEM_CD;

							row1_HashRow.UPLOAD_ID = row1.UPLOAD_ID;

							tHash_Lookup_row1.put(row1_HashRow);

							tos_count_tAdvancedHash_row1++;

							/**
							 * [tAdvancedHash_row1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableComparableLookupRow<row20Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ENCOUNTER_NUM == null) ? 0
								: this.ENCOUNTER_NUM.hashCode());

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.ENCOUNTER_NUM == null) {
				if (other.ENCOUNTER_NUM != null)
					return false;

			} else if (!this.ENCOUNTER_NUM.equals(other.ENCOUNTER_NUM))

				return false;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;
			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_IDE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ENCOUNTER_IDE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ENCOUNTER_NUM,
					other.ENCOUNTER_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row20";

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tFileInputDelimited_13 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row20,row20) |
				// target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
				// linked node: tMap_20 - inputs:(row61,row20)
				// outputs:(row6,iut1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct> getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				int nb_line_tFileInputDelimited_13 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13 = null;
				try {

					Object filename_tFileInputDelimited_13 = ((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"));
					if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_13 = 0, random_value_tFileInputDelimited_13 = -1;
						if (footer_value_tFileInputDelimited_13 > 0
								|| random_value_tFileInputDelimited_13 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_13 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_3_FILEPATH")),
								context.coding, ";", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_13 != null
							&& fid_tFileInputDelimited_13.nextRecord()) {

						row20 = null;

						row20 = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						row20 = new row20Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_13 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_13 = 0;

							temp = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);
							if (temp.length() > 0) {

								row20.ENCOUNTER_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row20.ENCOUNTER_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_13 = 1;

							row20.ENCOUNTER_IDE = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 2;

							row20.PATIENT_IDE = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							row20 = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */
						// Start of branch "row20"
						if (row20 != null) {

							/**
							 * [tAdvancedHash_row20 main ] start
							 */

							currentComponent = "tAdvancedHash_row20";

							row20Struct row20_HashRow = new row20Struct();

							row20_HashRow.ENCOUNTER_NUM = row20.ENCOUNTER_NUM;

							row20_HashRow.ENCOUNTER_IDE = row20.ENCOUNTER_IDE;

							row20_HashRow.PATIENT_IDE = row20.PATIENT_IDE;

							tHash_Lookup_row20.put(row20_HashRow);

							tos_count_tAdvancedHash_row20++;

							/**
							 * [tAdvancedHash_row20 main ] stop
							 */

						} // End of branch "row20"

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_13 != null) {
							fid_tFileInputDelimited_13.close();
						}
					}
					if (fid_tFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE",
								fid_tFileInputDelimited_13.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_13 finally ] start
				 */

				currentComponent = "tFileInputDelimited_13";

				/**
				 * [tFileInputDelimited_13 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row20 finally ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				/**
				 * [tAdvancedHash_row20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public BigDecimal UPLOAD_ID;

		public BigDecimal getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PATIENT_IDE_SOURCE = readString(dis, ois);

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

				this.PATIENT_IDE_STATUS = readString(dis, ois);

				this.UPLOAD_DATE = readDate(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.PATIENT_IDE_SOURCE, dos, oos);

				oos.writeObject(this.PATIENT_NUM);

				writeString(this.PATIENT_IDE_STATUS, dos, oos);

				writeDate(this.UPLOAD_DATE, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				oos.writeObject(this.UPLOAD_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tFileInputDelimited_11 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_21 - inputs:(toPatDimMap,row18)
				// outputs:(gd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				try {

					Object filename_tFileInputDelimited_11 = ((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"));
					if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
						if (footer_value_tFileInputDelimited_11 > 0
								|| random_value_tFileInputDelimited_11 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_2_FILEPATH")),
								context.coding, ";", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_11 != null
							&& fid_tFileInputDelimited_11.nextRecord()) {

						row18 = null;

						row18 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row18 = new row18Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_11 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_11 = 0;

							row18.PATIENT_IDE = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 1;

							row18.PATIENT_IDE_SOURCE = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 2;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row18.PATIENT_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row18.PATIENT_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 3;

							row18.PATIENT_IDE_STATUS = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 4;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row18.UPLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row18.UPLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 5;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row18.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row18.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 6;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row18.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row18.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 7;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row18.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row18.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 8;

							row18.SOURCESYSTEM_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 9;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row18.UPLOAD_ID = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row18.UPLOAD_ID = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tAdvancedHash_row18 main ] start
							 */

							currentComponent = "tAdvancedHash_row18";

							row18Struct row18_HashRow = new row18Struct();

							row18_HashRow.PATIENT_IDE = row18.PATIENT_IDE;

							row18_HashRow.PATIENT_IDE_SOURCE = row18.PATIENT_IDE_SOURCE;

							row18_HashRow.PATIENT_NUM = row18.PATIENT_NUM;

							row18_HashRow.PATIENT_IDE_STATUS = row18.PATIENT_IDE_STATUS;

							row18_HashRow.UPLOAD_DATE = row18.UPLOAD_DATE;

							row18_HashRow.UPDATE_DATE = row18.UPDATE_DATE;

							row18_HashRow.DOWNLOAD_DATE = row18.DOWNLOAD_DATE;

							row18_HashRow.IMPORT_DATE = row18.IMPORT_DATE;

							row18_HashRow.SOURCESYSTEM_CD = row18.SOURCESYSTEM_CD;

							row18_HashRow.UPLOAD_ID = row18.UPLOAD_ID;

							tHash_Lookup_row18.put(row18_HashRow);

							tos_count_tAdvancedHash_row18++;

							/**
							 * [tAdvancedHash_row18 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_11 != null) {
							fid_tFileInputDelimited_11.close();
						}
					}
					if (fid_tFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE",
								fid_tFileInputDelimited_11.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_11 finally ] start
				 */

				currentComponent = "tFileInputDelimited_11";

				/**
				 * [tFileInputDelimited_11 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements
			routines.system.IPersistableComparableLookupRow<row31Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.PATIENT_NUM;

				result = prime
						* result
						+ ((this.TVAL_CHAR == null) ? 0 : this.TVAL_CHAR
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.PATIENT_NUM != other.PATIENT_NUM)
				return false;

			if (this.TVAL_CHAR == null) {
				if (other.TVAL_CHAR != null)
					return false;

			} else if (!this.TVAL_CHAR.equals(other.TVAL_CHAR))

				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.TVAL_CHAR = this.TVAL_CHAR;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.TVAL_CHAR = this.TVAL_CHAR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_NUM = dis.readInt();

					this.TVAL_CHAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PATIENT_NUM);

				// String

				writeString(this.TVAL_CHAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.INSTANCE_NUM = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.INSTANCE_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.TVAL_CHAR, other.TVAL_CHAR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();

				/**
				 * [tAdvancedHash_row31 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row31", false);
				start_Hash.put("tAdvancedHash_row31",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row31";

				int tos_count_tAdvancedHash_row31 = 0;

				// connection name:row31
				// source node:tFileInputDelimited_20 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row31,row31) |
				// target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
				// linked node: tMap_22 - inputs:(row5,row31)
				// outputs:(copyOfto_obs,SICtoOBS2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row31Struct> getLookup(matchingModeEnum_row31);

				globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);

				/**
				 * [tAdvancedHash_row31 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_20", false);
				start_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_20";

				int tos_count_tFileInputDelimited_20 = 0;

				int nb_line_tFileInputDelimited_20 = 0;
				int footer_tFileInputDelimited_20 = 0;
				int totalLinetFileInputDelimited_20 = 0;
				int limittFileInputDelimited_20 = -1;
				int lastLinetFileInputDelimited_20 = -1;

				char fieldSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_20 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_20 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_20 = /**
				 * Start field
				 * tFileInputDelimited_20:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_6_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_20:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_20 = null;

				try {

					String[] rowtFileInputDelimited_20 = null;
					int currentLinetFileInputDelimited_20 = 0;
					int outputLinetFileInputDelimited_20 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_20 = 0;
							if (footer_value_tFileInputDelimited_20 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_20,
									fieldSeparator_tFileInputDelimited_20[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_20)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_20[0]);
						}

						csvReadertFileInputDelimited_20
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
							csvReadertFileInputDelimited_20.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_20[0]);

						csvReadertFileInputDelimited_20.setQuoteChar('"');

						csvReadertFileInputDelimited_20
								.setEscapeChar(csvReadertFileInputDelimited_20
										.getQuoteChar());

						if (footer_tFileInputDelimited_20 > 0) {
							for (totalLinetFileInputDelimited_20 = 0; totalLinetFileInputDelimited_20 < 1; totalLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
							csvReadertFileInputDelimited_20
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_20.readNext()) {

								rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
										.getValues();
								if (!(rowtFileInputDelimited_20.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_20[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_20++;

								}

							}
							int lastLineTemptFileInputDelimited_20 = totalLinetFileInputDelimited_20
									- footer_tFileInputDelimited_20 < 0 ? 0
									: totalLinetFileInputDelimited_20
											- footer_tFileInputDelimited_20;
							if (lastLinetFileInputDelimited_20 > 0) {
								lastLinetFileInputDelimited_20 = lastLinetFileInputDelimited_20 < lastLineTemptFileInputDelimited_20 ? lastLinetFileInputDelimited_20
										: lastLineTemptFileInputDelimited_20;
							} else {
								lastLinetFileInputDelimited_20 = lastLineTemptFileInputDelimited_20;
							}

							csvReadertFileInputDelimited_20.close();
							if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_20,
										fieldSeparator_tFileInputDelimited_20[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_20)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_20[0]);
							}
							csvReadertFileInputDelimited_20
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
								csvReadertFileInputDelimited_20
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_20[0]);

							csvReadertFileInputDelimited_20.setQuoteChar('"');

							csvReadertFileInputDelimited_20
									.setEscapeChar(csvReadertFileInputDelimited_20
											.getQuoteChar());

						}

						if (limittFileInputDelimited_20 != 0) {
							for (currentLinetFileInputDelimited_20 = 0; currentLinetFileInputDelimited_20 < 1; currentLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
						}
						csvReadertFileInputDelimited_20
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_20 != 0
							&& csvReadertFileInputDelimited_20 != null
							&& csvReadertFileInputDelimited_20.readNext()) {

						rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
								.getValues();

						if (rowtFileInputDelimited_20.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_20[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_20++;

						if (lastLinetFileInputDelimited_20 > -1
								&& currentLinetFileInputDelimited_20 > lastLinetFileInputDelimited_20) {
							break;
						}
						outputLinetFileInputDelimited_20++;
						if (limittFileInputDelimited_20 > 0
								&& outputLinetFileInputDelimited_20 > limittFileInputDelimited_20) {
							break;
						}

						row31 = null;

						row31 = null;

						boolean whetherReject_tFileInputDelimited_20 = false;
						row31 = new row31Struct();
						try {

							char fieldSeparator_tFileInputDelimited_20_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_20_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_20.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_20[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row31.PATIENT_NUM = 0;

								row31.INSTANCE_NUM = 0;

								row31.TVAL_CHAR = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_20 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_20 = 0;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row31.PATIENT_NUM = ParserUtils
												.parseTo_int(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row31.PATIENT_NUM = 0;
									}

								} else {
									row31.PATIENT_NUM = 0;
								}

								columnIndexWithD_tFileInputDelimited_20 = 1;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row31.INSTANCE_NUM = ParserUtils
												.parseTo_int(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row31.INSTANCE_NUM = 0;
									}

								} else {
									row31.INSTANCE_NUM = 0;
								}

								columnIndexWithD_tFileInputDelimited_20 = 2;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row31.TVAL_CHAR = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row31.TVAL_CHAR = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_20 = true;

							System.err.println(e.getMessage());
							row31 = null;

						}

						/**
						 * [tFileInputDelimited_20 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_20 main ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						tos_count_tFileInputDelimited_20++;

						/**
						 * [tFileInputDelimited_20 main ] stop
						 */
						// Start of branch "row31"
						if (row31 != null) {

							/**
							 * [tAdvancedHash_row31 main ] start
							 */

							currentComponent = "tAdvancedHash_row31";

							row31Struct row31_HashRow = new row31Struct();

							row31_HashRow.PATIENT_NUM = row31.PATIENT_NUM;

							row31_HashRow.INSTANCE_NUM = row31.INSTANCE_NUM;

							row31_HashRow.TVAL_CHAR = row31.TVAL_CHAR;

							tHash_Lookup_row31.put(row31_HashRow);

							tos_count_tAdvancedHash_row31++;

							/**
							 * [tAdvancedHash_row31 main ] stop
							 */

						} // End of branch "row31"

						/**
						 * [tFileInputDelimited_20 end ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						nb_line_tFileInputDelimited_20++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_20 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_20 != null) {
							csvReadertFileInputDelimited_20.close();
						}
					}
					if (csvReadertFileInputDelimited_20 != null) {
						globalMap.put("tFileInputDelimited_20_NB_LINE",
								nb_line_tFileInputDelimited_20);
					}

				}

				ok_Hash.put("tFileInputDelimited_20", true);
				end_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_20 end ] stop
				 */

				/**
				 * [tAdvancedHash_row31 end ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				tHash_Lookup_row31.endPut();

				ok_Hash.put("tAdvancedHash_row31", true);
				end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row31 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_20 finally ] start
				 */

				currentComponent = "tFileInputDelimited_20";

				/**
				 * [tFileInputDelimited_20 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row31 finally ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				/**
				 * [tAdvancedHash_row31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableComparableLookupRow<row36Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public BigDecimal UPLOAD_ID;

		public BigDecimal getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row36Struct other = (row36Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			return true;
		}

		public void copyDataTo(row36Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row36Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PATIENT_IDE_SOURCE = readString(dis, ois);

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

				this.PATIENT_IDE_STATUS = readString(dis, ois);

				this.UPLOAD_DATE = readDate(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.PATIENT_IDE_SOURCE, dos, oos);

				oos.writeObject(this.PATIENT_NUM);

				writeString(this.PATIENT_IDE_STATUS, dos, oos);

				writeDate(this.UPLOAD_DATE, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				oos.writeObject(this.UPLOAD_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_24Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tAdvancedHash_row36 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row36", false);
				start_Hash.put("tAdvancedHash_row36",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row36";

				int tos_count_tAdvancedHash_row36 = 0;

				// connection name:row36
				// source node:tFileInputDelimited_24 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row36,row36) |
				// target node:tAdvancedHash_row36 - inputs:(row36) outputs:()
				// linked node: tMap_28 - inputs:(iut1,row36) outputs:(asd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row36Struct> getLookup(matchingModeEnum_row36);

				globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);

				/**
				 * [tAdvancedHash_row36 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_24 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_24", false);
				start_Hash.put("tFileInputDelimited_24",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_24";

				int tos_count_tFileInputDelimited_24 = 0;

				int nb_line_tFileInputDelimited_24 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_24 = null;
				try {

					Object filename_tFileInputDelimited_24 = ((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"));
					if (filename_tFileInputDelimited_24 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_24 = 0, random_value_tFileInputDelimited_24 = -1;
						if (footer_value_tFileInputDelimited_24 > 0
								|| random_value_tFileInputDelimited_24 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_24 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_2_FILEPATH")),
								context.coding, ";", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_24 != null
							&& fid_tFileInputDelimited_24.nextRecord()) {

						row36 = null;

						row36 = null;

						boolean whetherReject_tFileInputDelimited_24 = false;
						row36 = new row36Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_24 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_24 = 0;

							row36.PATIENT_IDE = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 1;

							row36.PATIENT_IDE_SOURCE = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 2;

							temp = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);
							if (temp.length() > 0) {

								row36.PATIENT_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row36.PATIENT_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_24 = 3;

							row36.PATIENT_IDE_STATUS = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 4;

							temp = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);
							if (temp.length() > 0) {

								row36.UPLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row36.UPLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_24 = 5;

							temp = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);
							if (temp.length() > 0) {

								row36.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row36.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_24 = 6;

							temp = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);
							if (temp.length() > 0) {

								row36.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row36.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_24 = 7;

							temp = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);
							if (temp.length() > 0) {

								row36.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row36.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_24 = 8;

							row36.SOURCESYSTEM_CD = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);

							columnIndexWithD_tFileInputDelimited_24 = 9;

							temp = fid_tFileInputDelimited_24
									.get(columnIndexWithD_tFileInputDelimited_24);
							if (temp.length() > 0) {

								row36.UPLOAD_ID = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row36.UPLOAD_ID = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_24 = true;

							System.err.println(e.getMessage());
							row36 = null;

						}

						/**
						 * [tFileInputDelimited_24 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_24 main ] start
						 */

						currentComponent = "tFileInputDelimited_24";

						tos_count_tFileInputDelimited_24++;

						/**
						 * [tFileInputDelimited_24 main ] stop
						 */
						// Start of branch "row36"
						if (row36 != null) {

							/**
							 * [tAdvancedHash_row36 main ] start
							 */

							currentComponent = "tAdvancedHash_row36";

							row36Struct row36_HashRow = new row36Struct();

							row36_HashRow.PATIENT_IDE = row36.PATIENT_IDE;

							row36_HashRow.PATIENT_IDE_SOURCE = row36.PATIENT_IDE_SOURCE;

							row36_HashRow.PATIENT_NUM = row36.PATIENT_NUM;

							row36_HashRow.PATIENT_IDE_STATUS = row36.PATIENT_IDE_STATUS;

							row36_HashRow.UPLOAD_DATE = row36.UPLOAD_DATE;

							row36_HashRow.UPDATE_DATE = row36.UPDATE_DATE;

							row36_HashRow.DOWNLOAD_DATE = row36.DOWNLOAD_DATE;

							row36_HashRow.IMPORT_DATE = row36.IMPORT_DATE;

							row36_HashRow.SOURCESYSTEM_CD = row36.SOURCESYSTEM_CD;

							row36_HashRow.UPLOAD_ID = row36.UPLOAD_ID;

							tHash_Lookup_row36.put(row36_HashRow);

							tos_count_tAdvancedHash_row36++;

							/**
							 * [tAdvancedHash_row36 main ] stop
							 */

						} // End of branch "row36"

						/**
						 * [tFileInputDelimited_24 end ] start
						 */

						currentComponent = "tFileInputDelimited_24";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_24 != null) {
							fid_tFileInputDelimited_24.close();
						}
					}
					if (fid_tFileInputDelimited_24 != null) {
						globalMap.put("tFileInputDelimited_24_NB_LINE",
								fid_tFileInputDelimited_24.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_24", true);
				end_Hash.put("tFileInputDelimited_24",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_24 end ] stop
				 */

				/**
				 * [tAdvancedHash_row36 end ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				tHash_Lookup_row36.endPut();

				ok_Hash.put("tAdvancedHash_row36", true);
				end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row36 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_24 finally ] start
				 */

				currentComponent = "tFileInputDelimited_24";

				/**
				 * [tFileInputDelimited_24 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row36 finally ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				/**
				 * [tAdvancedHash_row36 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_24_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Creating DB Schema!");
				context.concept_cd = context.MDPD + "|" + context.fileName
						+ "|";
				context.concept_path = "\\" + context.i2b2HeadNode + "\\"
						+ context.MDPD + "\\" + context.fileName + "\\";

				if (context.concept_path.startsWith("\\i2b2\\BD\\"))
					context.concept_cd = "IDRT:BDModifier";
				else if (context.concept_path.startsWith("\\i2b2\\ID\\"))
					context.concept_cd = "IDRT:IDModifier";
				else if (context.concept_path.startsWith("\\i2b2\\OD\\"))
					context.concept_cd = "IDRT:ODModifier";
				System.out.println("fileName = " + context.fileName);
				System.out.println("context.concept_cd::: "
						+ context.concept_cd);
				System.out.println("context.concept_path::: "
						+ context.concept_path);
				context.currentDataRow = 0;
				context.currentOntRow = 0;
				context.ontRows = 0;
				context.dataRows = 0;

				/**
				 * INSTANCEMAP
				 **/

				context.instanceMap = new HashMap<String, HashMap<String, BigDecimal>>();

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());

				currentComponent = "tJavaRow_9";

				int tos_count_tJavaRow_9 = 0;

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				int nb_line_tFileInputDelimited_16 = 0;
				int footer_tFileInputDelimited_16 = 0;
				int totalLinetFileInputDelimited_16 = 0;
				int limittFileInputDelimited_16 = -1;
				int lastLinetFileInputDelimited_16 = -1;

				char fieldSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_16 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_16 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_16 = /**
				 * Start field
				 * tFileInputDelimited_16:FILENAME
				 */
				context.folderMain + context.folderOutput + "ont.csv"/**
				 * End field
				 * tFileInputDelimited_16:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

				try {

					String[] rowtFileInputDelimited_16 = null;
					int currentLinetFileInputDelimited_16 = 0;
					int outputLinetFileInputDelimited_16 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_16 = 0;
							if (footer_value_tFileInputDelimited_16 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_16,
									fieldSeparator_tFileInputDelimited_16[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_16)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_16[0]);
						}

						csvReadertFileInputDelimited_16
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
							csvReadertFileInputDelimited_16.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_16[0]);

						csvReadertFileInputDelimited_16.setQuoteChar('"');

						csvReadertFileInputDelimited_16
								.setEscapeChar(csvReadertFileInputDelimited_16
										.getQuoteChar());

						if (footer_tFileInputDelimited_16 > 0) {
							for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
							csvReadertFileInputDelimited_16
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_16.readNext()) {

								rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
										.getValues();
								if (!(rowtFileInputDelimited_16.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_16[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_16++;

								}

							}
							int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
									- footer_tFileInputDelimited_16 < 0 ? 0
									: totalLinetFileInputDelimited_16
											- footer_tFileInputDelimited_16;
							if (lastLinetFileInputDelimited_16 > 0) {
								lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16 ? lastLinetFileInputDelimited_16
										: lastLineTemptFileInputDelimited_16;
							} else {
								lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
							}

							csvReadertFileInputDelimited_16.close();
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_16)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_16[0]);
							}
							csvReadertFileInputDelimited_16
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16
											.getQuoteChar());

						}

						if (limittFileInputDelimited_16 != 0) {
							for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
						}
						csvReadertFileInputDelimited_16
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_16 != 0
							&& csvReadertFileInputDelimited_16 != null
							&& csvReadertFileInputDelimited_16.readNext()) {

						rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
								.getValues();

						if (rowtFileInputDelimited_16.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_16[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_16++;

						if (lastLinetFileInputDelimited_16 > -1
								&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
							break;
						}
						outputLinetFileInputDelimited_16++;
						if (limittFileInputDelimited_16 > 0
								&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
							break;
						}

						row22 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row22 = new row22Struct();
						try {

							char fieldSeparator_tFileInputDelimited_16_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_16_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_16.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_16[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row22.HLEVEL = null;

								row22.Name = null;

								row22.Path = null;

								row22.DataType = null;

								row22.Update_Date = null;

								row22.Import_Date = null;

								row22.Download_Date = null;

								row22.PathID = null;

								row22.visual = null;

								row22.codeList = null;

								row22.source = null;

								row22.xml = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_16 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_16 = 0;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row22.HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row22.HLEVEL = null;
									}

								} else {
									row22.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 1;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.Name = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 2;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.Path = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 3;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.DataType = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 4;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row22.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row22.Update_Date = null;
									}

								} else {
									row22.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 5;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row22.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row22.Import_Date = null;
									}

								} else {
									row22.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 6;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row22.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row22.Download_Date = null;
									}

								} else {
									row22.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 7;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.PathID = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 8;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.visual = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 9;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.codeList = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.codeList = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 10;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.source = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.source = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 11;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row22.xml = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row22.xml = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */
						// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tJavaRow_9 main ] start
							 */

							currentComponent = "tJavaRow_9";

							context.ontRows++;

							nb_line_tJavaRow_9++;

							tos_count_tJavaRow_9++;

							/**
							 * [tJavaRow_9 main ] stop
							 */

						} // End of branch "row22"

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						nb_line_tFileInputDelimited_16++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_16 != null) {
							csvReadertFileInputDelimited_16.close();
						}
					}
					if (csvReadertFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE",
								nb_line_tFileInputDelimited_16);
					}

				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				/**
				 * [tJavaRow_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_16:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_16 finally ] start
				 */

				currentComponent = "tFileInputDelimited_16";

				/**
				 * [tFileInputDelimited_16 finally ] stop
				 */

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public Integer itemGroupRepeatKey;

		public Integer getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String endDate;

		public String getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readInteger(dis);

					this.startDate = readString(dis);

					this.endDate = readString(dis);

					this.source = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// Integer

				writeInteger(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.endDate, dos);

				// String

				writeString(this.source, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",itemGroupRepeatKey="
					+ String.valueOf(itemGroupRepeatKey));
			sb.append(",startDate=" + startDate);
			sb.append(",endDate=" + endDate);
			sb.append(",source=" + source);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_17", false);
				start_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_17";

				int tos_count_tFileInputDelimited_17 = 0;

				int nb_line_tFileInputDelimited_17 = 0;
				int footer_tFileInputDelimited_17 = 0;
				int totalLinetFileInputDelimited_17 = 0;
				int limittFileInputDelimited_17 = -1;
				int lastLinetFileInputDelimited_17 = -1;

				char fieldSeparator_tFileInputDelimited_17[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_17 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_17[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_17 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_17 = /**
				 * Start field
				 * tFileInputDelimited_17:FILENAME
				 */
				context.folderMain + context.folderOutput + "data.csv"/**
				 * End
				 * field tFileInputDelimited_17:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_17 = null;

				try {

					String[] rowtFileInputDelimited_17 = null;
					int currentLinetFileInputDelimited_17 = 0;
					int outputLinetFileInputDelimited_17 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_17 = 0;
							if (footer_value_tFileInputDelimited_17 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_17,
									fieldSeparator_tFileInputDelimited_17[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_17)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_17[0]);
						}

						csvReadertFileInputDelimited_17
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_17[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_17[0] != '\r'))
							csvReadertFileInputDelimited_17.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_17[0]);

						csvReadertFileInputDelimited_17.setQuoteChar('\"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_17
								.setEscapeChar(csvReadertFileInputDelimited_17
										.getQuoteChar());

						if (footer_tFileInputDelimited_17 > 0) {
							for (totalLinetFileInputDelimited_17 = 0; totalLinetFileInputDelimited_17 < 1; totalLinetFileInputDelimited_17++) {
								csvReadertFileInputDelimited_17.readNext();
							}
							csvReadertFileInputDelimited_17
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_17.readNext()) {

								rowtFileInputDelimited_17 = csvReadertFileInputDelimited_17
										.getValues();
								if (!(rowtFileInputDelimited_17.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_17[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_17++;

								}

							}
							int lastLineTemptFileInputDelimited_17 = totalLinetFileInputDelimited_17
									- footer_tFileInputDelimited_17 < 0 ? 0
									: totalLinetFileInputDelimited_17
											- footer_tFileInputDelimited_17;
							if (lastLinetFileInputDelimited_17 > 0) {
								lastLinetFileInputDelimited_17 = lastLinetFileInputDelimited_17 < lastLineTemptFileInputDelimited_17 ? lastLinetFileInputDelimited_17
										: lastLineTemptFileInputDelimited_17;
							} else {
								lastLinetFileInputDelimited_17 = lastLineTemptFileInputDelimited_17;
							}

							csvReadertFileInputDelimited_17.close();
							if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_17,
										fieldSeparator_tFileInputDelimited_17[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_17)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_17[0]);
							}
							csvReadertFileInputDelimited_17
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_17[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_17[0] != '\r'))
								csvReadertFileInputDelimited_17
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_17[0]);

							csvReadertFileInputDelimited_17.setQuoteChar('\"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_17
									.setEscapeChar(csvReadertFileInputDelimited_17
											.getQuoteChar());

						}

						if (limittFileInputDelimited_17 != 0) {
							for (currentLinetFileInputDelimited_17 = 0; currentLinetFileInputDelimited_17 < 1; currentLinetFileInputDelimited_17++) {
								csvReadertFileInputDelimited_17.readNext();
							}
						}
						csvReadertFileInputDelimited_17
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_17 != 0
							&& csvReadertFileInputDelimited_17 != null
							&& csvReadertFileInputDelimited_17.readNext()) {

						rowtFileInputDelimited_17 = csvReadertFileInputDelimited_17
								.getValues();

						if (rowtFileInputDelimited_17.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_17[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_17++;

						if (lastLinetFileInputDelimited_17 > -1
								&& currentLinetFileInputDelimited_17 > lastLinetFileInputDelimited_17) {
							break;
						}
						outputLinetFileInputDelimited_17++;
						if (limittFileInputDelimited_17 > 0
								&& outputLinetFileInputDelimited_17 > limittFileInputDelimited_17) {
							break;
						}

						row21 = null;

						boolean whetherReject_tFileInputDelimited_17 = false;
						row21 = new row21Struct();
						try {

							char fieldSeparator_tFileInputDelimited_17_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_17_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_17.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_17[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row21.itemID = null;

								row21.Value = null;

								row21.VisitID = null;

								row21.FormID = null;

								row21.SubjectKey = null;

								row21.Path = null;

								row21.PathID = null;

								row21.DataType = null;

								row21.Update_Date = null;

								row21.Import_Date = null;

								row21.Download_Date = null;

								row21.StudyEventRepeatKey = null;

								row21.itemGroupRepeatKey = null;

								row21.startDate = null;

								row21.endDate = null;

								row21.source = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_17 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_17 = 0;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.itemID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.itemID = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 1;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.Value = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.Value = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 2;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.VisitID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.VisitID = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 3;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.FormID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.FormID = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 4;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.SubjectKey = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.SubjectKey = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 5;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.Path = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 6;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.PathID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 7;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.DataType = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 8;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row21.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"dd-MM-yyyy");

									} else {
										row21.Update_Date = null;
									}

								} else {
									row21.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 9;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row21.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"dd-MM-yyyy");

									} else {
										row21.Import_Date = null;
									}

								} else {
									row21.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 10;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row21.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"dd-MM-yyyy");

									} else {
										row21.Download_Date = null;
									}

								} else {
									row21.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 11;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.StudyEventRepeatKey = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.StudyEventRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 12;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row21.itemGroupRepeatKey = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]);

									} else {
										row21.itemGroupRepeatKey = null;
									}

								} else {
									row21.itemGroupRepeatKey = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 13;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.startDate = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.startDate = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 14;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.endDate = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.endDate = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 15;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row21.source = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row21.source = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_17 = true;

							System.err.println(e.getMessage());
							row21 = null;

						}

						/**
						 * [tFileInputDelimited_17 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_17 main ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						tos_count_tFileInputDelimited_17++;

						/**
						 * [tFileInputDelimited_17 main ] stop
						 */
						// Start of branch "row21"
						if (row21 != null) {

							/**
							 * [tJavaRow_8 main ] start
							 */

							currentComponent = "tJavaRow_8";

							context.dataRows++;

							nb_line_tJavaRow_8++;

							tos_count_tJavaRow_8++;

							/**
							 * [tJavaRow_8 main ] stop
							 */

						} // End of branch "row21"

						/**
						 * [tFileInputDelimited_17 end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						nb_line_tFileInputDelimited_17++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_17 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_17 != null) {
							csvReadertFileInputDelimited_17.close();
						}
					}
					if (csvReadertFileInputDelimited_17 != null) {
						globalMap.put("tFileInputDelimited_17_NB_LINE",
								nb_line_tFileInputDelimited_17);
					}

				}

				ok_Hash.put("tFileInputDelimited_17", true);
				end_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_17 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				/**
				 * [tJavaRow_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_17:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_17 finally ] start
				 */

				currentComponent = "tFileInputDelimited_17";

				/**
				 * [tFileInputDelimited_17 finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				context.dataMod = 1;
				context.ontMod = 1;
				if (context.dataRows / 100 > 0)
					context.dataMod = context.dataRows / 100;
				if (context.ontRows / 100 > 0)
					context.ontMod = context.ontRows / 100;

				if (context.datePattern.length() <= 0) {
					context.datePattern = "yyyy-MM-dd";
				}
				System.out.println("context.dataRows= " + context.dataRows);
				System.out.println("context.ontRows= " + context.ontRows);
				System.out.println("ontMod= " + context.ontMod);
				System.out.println("dataMod= " + context.dataMod);
				System.out.println("datePattern= " + context.datePattern);
				StatusListener.setSubStatus(0.0f, ((int) (float) (0.0f)) + "%");

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tCreateTemporaryFile_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_7 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_7", false);
				start_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_7";

				int tos_count_tCreateTemporaryFile_7 = 0;

				java.io.File dir_tCreateTemporaryFile_7 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_7.mkdirs();
				String name_tCreateTemporaryFile_7 = "talend_4_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_7 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_7 = new java.io.File(
						dir_tCreateTemporaryFile_7, name_tCreateTemporaryFile_7
								+ "." + suffix_tCreateTemporaryFile_7);
				if (file_tCreateTemporaryFile_7.createNewFile()) {
					file_tCreateTemporaryFile_7.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_7_FILEPATH",
						file_tCreateTemporaryFile_7.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_7 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				tos_count_tCreateTemporaryFile_7++;

				/**
				 * [tCreateTemporaryFile_7 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				ok_Hash.put("tCreateTemporaryFile_7", true);
				end_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_7 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_7 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				/**
				 * [tCreateTemporaryFile_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_6 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_6", false);
				start_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_6";

				int tos_count_tCreateTemporaryFile_6 = 0;

				java.io.File dir_tCreateTemporaryFile_6 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_6.mkdirs();
				String name_tCreateTemporaryFile_6 = "talend_4_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_6 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_6 = new java.io.File(
						dir_tCreateTemporaryFile_6, name_tCreateTemporaryFile_6
								+ "." + suffix_tCreateTemporaryFile_6);
				if (file_tCreateTemporaryFile_6.createNewFile()) {
					file_tCreateTemporaryFile_6.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_6_FILEPATH",
						file_tCreateTemporaryFile_6.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_6 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				tos_count_tCreateTemporaryFile_6++;

				/**
				 * [tCreateTemporaryFile_6 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				ok_Hash.put("tCreateTemporaryFile_6", true);
				end_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_6 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_6 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				/**
				 * [tCreateTemporaryFile_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_5 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_5", false);
				start_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_5";

				int tos_count_tCreateTemporaryFile_5 = 0;

				java.io.File dir_tCreateTemporaryFile_5 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_5.mkdirs();
				String name_tCreateTemporaryFile_5 = "talend_5_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_5 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_5 = new java.io.File(
						dir_tCreateTemporaryFile_5, name_tCreateTemporaryFile_5
								+ "." + suffix_tCreateTemporaryFile_5);
				if (file_tCreateTemporaryFile_5.createNewFile()) {
					file_tCreateTemporaryFile_5.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_5_FILEPATH",
						file_tCreateTemporaryFile_5.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_5 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				tos_count_tCreateTemporaryFile_5++;

				/**
				 * [tCreateTemporaryFile_5 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				ok_Hash.put("tCreateTemporaryFile_5", true);
				end_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_5 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				/**
				 * [tCreateTemporaryFile_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_4 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_4", false);
				start_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_4";

				int tos_count_tCreateTemporaryFile_4 = 0;

				java.io.File dir_tCreateTemporaryFile_4 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_4.mkdirs();
				String name_tCreateTemporaryFile_4 = "talend_4_abc_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_4 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_4 = new java.io.File(
						dir_tCreateTemporaryFile_4, name_tCreateTemporaryFile_4
								+ "." + suffix_tCreateTemporaryFile_4);
				if (file_tCreateTemporaryFile_4.createNewFile()) {
				}
				globalMap.put("tCreateTemporaryFile_4_FILEPATH",
						file_tCreateTemporaryFile_4.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_4 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				tos_count_tCreateTemporaryFile_4++;

				/**
				 * [tCreateTemporaryFile_4 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				ok_Hash.put("tCreateTemporaryFile_4", true);
				end_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_4 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				/**
				 * [tCreateTemporaryFile_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_3 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_3", false);
				start_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_3";

				int tos_count_tCreateTemporaryFile_3 = 0;

				java.io.File dir_tCreateTemporaryFile_3 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_3.mkdirs();
				String name_tCreateTemporaryFile_3 = "talend_3_ENCTESTXXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_3 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_3 = new java.io.File(
						dir_tCreateTemporaryFile_3, name_tCreateTemporaryFile_3
								+ "." + suffix_tCreateTemporaryFile_3);
				if (file_tCreateTemporaryFile_3.createNewFile()) {
				}
				globalMap.put("tCreateTemporaryFile_3_FILEPATH",
						file_tCreateTemporaryFile_3.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_3 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				tos_count_tCreateTemporaryFile_3++;

				/**
				 * [tCreateTemporaryFile_3 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				ok_Hash.put("tCreateTemporaryFile_3", true);
				end_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_3 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				/**
				 * [tCreateTemporaryFile_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_2 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_2", false);
				start_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_2";

				int tos_count_tCreateTemporaryFile_2 = 0;

				java.io.File dir_tCreateTemporaryFile_2 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_2.mkdirs();
				String name_tCreateTemporaryFile_2 = "talend_PATMAP_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_2 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_2 = new java.io.File(
						dir_tCreateTemporaryFile_2, name_tCreateTemporaryFile_2
								+ "." + suffix_tCreateTemporaryFile_2);
				if (file_tCreateTemporaryFile_2.createNewFile()) {
					file_tCreateTemporaryFile_2.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_2_FILEPATH",
						file_tCreateTemporaryFile_2.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_2 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				tos_count_tCreateTemporaryFile_2++;

				/**
				 * [tCreateTemporaryFile_2 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				ok_Hash.put("tCreateTemporaryFile_2", true);
				end_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_2 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				/**
				 * [tCreateTemporaryFile_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_1 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_1", false);
				start_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_1";

				int tos_count_tCreateTemporaryFile_1 = 0;

				java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_1.mkdirs();
				String name_tCreateTemporaryFile_1 = "talend_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_1 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_1 = new java.io.File(
						dir_tCreateTemporaryFile_1, name_tCreateTemporaryFile_1
								+ "." + suffix_tCreateTemporaryFile_1);
				if (file_tCreateTemporaryFile_1.createNewFile()) {
					file_tCreateTemporaryFile_1.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_1_FILEPATH",
						file_tCreateTemporaryFile_1.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_1 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				tos_count_tCreateTemporaryFile_1++;

				/**
				 * [tCreateTemporaryFile_1 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				ok_Hash.put("tCreateTemporaryFile_1", true);
				end_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_1 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				/**
				 * [tCreateTemporaryFile_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_1 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCConnection_1 = context.DB_StagingI2B2_Password;
				String password_tJDBCConnection_1 = decryptedPassword_tJDBCConnection_1;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);

				conn_tJDBCConnection_1 = java.sql.DriverManager.getConnection(
						url_tJDBCConnection_1, userName_tJDBCConnection_1,
						password_tJDBCConnection_1);
				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCConnection_1 finally ] start
				 */

				currentComponent = "tJDBCConnection_1";

				/**
				 * [tJDBCConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal instance_num;

		public BigDecimal getInstance_num() {
			return this.instance_num;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.instance_num = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.instance_num);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("instance_num=" + String.valueOf(instance_num));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tJavaRow_15 begin ] start
				 */

				ok_Hash.put("tJavaRow_15", false);
				start_Hash.put("tJavaRow_15", System.currentTimeMillis());

				currentComponent = "tJavaRow_15";

				int tos_count_tJavaRow_15 = 0;

				int nb_line_tJavaRow_15 = 0;

				/**
				 * [tJavaRow_15 begin ] stop
				 */

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "select max(instance_num) from i2b2demodata.observation_fact"
						: "select max(instance_num) from "
								+ context.DB_StagingI2B2_Schema
								+ ".observation_fact";

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);
				java.sql.ResultSet rs_tJDBCInput_2 = null;
				try {
					rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;

					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						if (colQtyInRs_tJDBCInput_2 < 1) {
							row14.instance_num = null;
						} else {

							if (rs_tJDBCInput_2.getObject(1) != null) {
								row14.instance_num = rs_tJDBCInput_2
										.getBigDecimal(1);
							} else {
								row14.instance_num = null;
							}
						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */
						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tJavaRow_15 main ] start
						 */

						currentComponent = "tJavaRow_15";

						if (row14.instance_num != null)
							context.maxInstance = row14.instance_num;
						else
							context.maxInstance = new BigDecimal(0);
						System.out.println("maxInstance: "
								+ context.maxInstance);
						nb_line_tJavaRow_15++;

						tos_count_tJavaRow_15++;

						/**
						 * [tJavaRow_15 main ] stop
						 */

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
				} finally {
					if (rs_tJDBCInput_2 != null) {
						rs_tJDBCInput_2.close();
					}
					stmt_tJDBCInput_2.close();

				}
				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				/**
				 * [tJDBCInput_2 end ] stop
				 */

				/**
				 * [tJavaRow_15 end ] start
				 */

				currentComponent = "tJavaRow_15";

				globalMap.put("tJavaRow_15_NB_LINE", nb_line_tJavaRow_15);

				ok_Hash.put("tJavaRow_15", true);
				end_Hash.put("tJavaRow_15", System.currentTimeMillis());

				/**
				 * [tJavaRow_15 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_2 finally ] start
				 */

				currentComponent = "tJDBCInput_2";

				/**
				 * [tJDBCInput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_15 finally ] start
				 */

				currentComponent = "tJavaRow_15";

				/**
				 * [tJavaRow_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				context.currentQuery = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata"
						: context.DB_StagingI2B2_Schema;

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_NUM = dis.readInt();

					this.INSTANCE_NUM = dis.readInt();

					this.TVAL_CHAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PATIENT_NUM);

				// int

				dos.writeInt(this.INSTANCE_NUM);

				// String

				writeString(this.TVAL_CHAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tFileOutputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_20", false);
				start_Hash.put("tFileOutputDelimited_20",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_20";

				int tos_count_tFileOutputDelimited_20 = 0;

				String fileName_tFileOutputDelimited_20 = "";
				fileName_tFileOutputDelimited_20 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_6_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_20 = null;
				String extension_tFileOutputDelimited_20 = null;
				String directory_tFileOutputDelimited_20 = null;
				if ((fileName_tFileOutputDelimited_20.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_20.lastIndexOf(".") < fileName_tFileOutputDelimited_20
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
						extension_tFileOutputDelimited_20 = "";
					} else {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(0, fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
						extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
							.substring(0, fileName_tFileOutputDelimited_20
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_20.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(0, fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
						extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
						extension_tFileOutputDelimited_20 = "";
					}
					directory_tFileOutputDelimited_20 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_20 = true;
				java.io.File filetFileOutputDelimited_20 = new java.io.File(
						fileName_tFileOutputDelimited_20);
				globalMap.put("tFileOutputDelimited_20_FILE_NAME",
						fileName_tFileOutputDelimited_20);

				int nb_line_tFileOutputDelimited_20 = 0;
				int splitEvery_tFileOutputDelimited_20 = 1000;
				int splitedFileNo_tFileOutputDelimited_20 = 0;
				int currentRow_tFileOutputDelimited_20 = 0;

				final String OUT_DELIM_tFileOutputDelimited_20 = /**
				 * Start field
				 * tFileOutputDelimited_20:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_20:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_20 = /**
				 * Start
				 * field tFileOutputDelimited_20:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_20:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_20 != null
						&& directory_tFileOutputDelimited_20.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_20 = new java.io.File(
							directory_tFileOutputDelimited_20);
					if (!dir_tFileOutputDelimited_20.exists()) {

						dir_tFileOutputDelimited_20.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_20 = null;

				java.io.File fileToDelete_tFileOutputDelimited_20 = new java.io.File(
						fileName_tFileOutputDelimited_20);
				if (fileToDelete_tFileOutputDelimited_20.exists()) {
					fileToDelete_tFileOutputDelimited_20.delete();
				}

				outtFileOutputDelimited_20 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_20, false),
								context.coding));

				if (filetFileOutputDelimited_20.length() == 0) {

					outtFileOutputDelimited_20.write("PATIENT_NUM");

					outtFileOutputDelimited_20
							.write(OUT_DELIM_tFileOutputDelimited_20);

					outtFileOutputDelimited_20.write("INSTANCE_NUM");

					outtFileOutputDelimited_20
							.write(OUT_DELIM_tFileOutputDelimited_20);

					outtFileOutputDelimited_20.write("TVAL_CHAR");

					outtFileOutputDelimited_20
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_20);
					outtFileOutputDelimited_20.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_20",
						outtFileOutputDelimited_20);

				resourceMap.put("nb_line_tFileOutputDelimited_20",
						nb_line_tFileOutputDelimited_20);

				/**
				 * [tFileOutputDelimited_20 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "SELECT patient_num, instance_num, tval_char FROM "
						+ context.currentQuery
						+ ".observation_fact where concept_cd = 'IDRT:OBJECTID'";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);
				java.sql.ResultSet rs_tJDBCInput_1 = null;
				try {
					rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;

					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						if (colQtyInRs_tJDBCInput_1 < 1) {
							row28.PATIENT_NUM = 0;
						} else {

							if (rs_tJDBCInput_1.getObject(1) != null) {
								row28.PATIENT_NUM = rs_tJDBCInput_1.getInt(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tJDBCInput_1 < 2) {
							row28.INSTANCE_NUM = 0;
						} else {

							if (rs_tJDBCInput_1.getObject(2) != null) {
								row28.INSTANCE_NUM = rs_tJDBCInput_1.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tJDBCInput_1 < 3) {
							row28.TVAL_CHAR = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(3);
							if (tmpContent_tJDBCInput_1 != null) {
								row28.TVAL_CHAR = tmpContent_tJDBCInput_1;
							} else {
								row28.TVAL_CHAR = null;
							}
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */
						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_20 main ] start
						 */

						currentComponent = "tFileOutputDelimited_20";

						StringBuilder sb_tFileOutputDelimited_20 = new StringBuilder();

						sb_tFileOutputDelimited_20.append(

						row28.PATIENT_NUM

						);

						sb_tFileOutputDelimited_20
								.append(OUT_DELIM_tFileOutputDelimited_20);

						sb_tFileOutputDelimited_20.append(

						row28.INSTANCE_NUM

						);

						sb_tFileOutputDelimited_20
								.append(OUT_DELIM_tFileOutputDelimited_20);

						if (row28.TVAL_CHAR != null) {

							sb_tFileOutputDelimited_20.append(

							row28.TVAL_CHAR

							);

						}

						sb_tFileOutputDelimited_20
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_20);

						nb_line_tFileOutputDelimited_20++;
						resourceMap.put("nb_line_tFileOutputDelimited_20",
								nb_line_tFileOutputDelimited_20);

						outtFileOutputDelimited_20
								.write(sb_tFileOutputDelimited_20.toString());

						tos_count_tFileOutputDelimited_20++;

						/**
						 * [tFileOutputDelimited_20 main ] stop
						 */

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
				} finally {
					if (rs_tJDBCInput_1 != null) {
						rs_tJDBCInput_1.close();
					}
					stmt_tJDBCInput_1.close();

				}
				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_20 end ] start
				 */

				currentComponent = "tFileOutputDelimited_20";

				if (outtFileOutputDelimited_20 != null) {
					outtFileOutputDelimited_20.flush();
					outtFileOutputDelimited_20.close();
				}

				globalMap.put("tFileOutputDelimited_20_NB_LINE",
						nb_line_tFileOutputDelimited_20);
				globalMap.put("tFileOutputDelimited_20_FILE_NAME",
						fileName_tFileOutputDelimited_20);

				resourceMap.put("finish_tFileOutputDelimited_20", true);

				ok_Hash.put("tFileOutputDelimited_20", true);
				end_Hash.put("tFileOutputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_20 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_1 finally ] start
				 */

				currentComponent = "tJDBCInput_1";

				/**
				 * [tJDBCInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_20 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_20";

				if (resourceMap.get("finish_tFileOutputDelimited_20") == null) {

					java.io.Writer outtFileOutputDelimited_20 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_20");
					if (outtFileOutputDelimited_20 != null) {
						outtFileOutputDelimited_20.flush();
						outtFileOutputDelimited_20.close();
					}

				}

				/**
				 * [tFileOutputDelimited_20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String lastPatient;

		public String getLastPatient() {
			return this.lastPatient;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.lastPatient = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lastPatient, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lastPatient=" + lastPatient);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				conn_tJDBCInput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = "SELECT MAX(patient_num) FROM "
						+ context.currentQuery + ".patient_dimension";

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);
				java.sql.ResultSet rs_tJDBCInput_3 = null;
				try {
					rs_tJDBCInput_3 = stmt_tJDBCInput_3
							.executeQuery(dbquery_tJDBCInput_3);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
							.getMetaData();
					int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
							.getColumnCount();

					String tmpContent_tJDBCInput_3 = null;

					while (rs_tJDBCInput_3.next()) {
						nb_line_tJDBCInput_3++;

						if (colQtyInRs_tJDBCInput_3 < 1) {
							row12.lastPatient = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(1);
							if (tmpContent_tJDBCInput_3 != null) {
								row12.lastPatient = tmpContent_tJDBCInput_3;
							} else {
								row12.lastPatient = null;
							}
						}

						/**
						 * [tJDBCInput_3 begin ] stop
						 */
						/**
						 * [tJDBCInput_3 main ] start
						 */

						currentComponent = "tJDBCInput_3";

						tos_count_tJDBCInput_3++;

						/**
						 * [tJDBCInput_3 main ] stop
						 */

						/**
						 * [tJavaRow_4 main ] start
						 */

						currentComponent = "tJavaRow_4";

						if (row12.lastPatient != null)
							context.lastPatient = Integer
									.parseInt(row12.lastPatient);
						else
							context.lastPatient = 0;
						System.out.println("Last Patient: "
								+ context.lastPatient);
						nb_line_tJavaRow_4++;

						tos_count_tJavaRow_4++;

						/**
						 * [tJavaRow_4 main ] stop
						 */

						/**
						 * [tJDBCInput_3 end ] start
						 */

						currentComponent = "tJDBCInput_3";

					}
				} finally {
					if (rs_tJDBCInput_3 != null) {
						rs_tJDBCInput_3.close();
					}
					stmt_tJDBCInput_3.close();

				}
				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_3 finally ] start
				 */

				currentComponent = "tJDBCInput_3";

				/**
				 * [tJDBCInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public int PATIENT_NUM;

		public int getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public BigDecimal UPLOAD_ID;

		public BigDecimal getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = dis.readInt();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// int

				dos.writeInt(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// BigDecimal

				dos.writeObject(this.UPLOAD_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_2_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /**
				 * Start field
				 * tFileOutputDelimited_7:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
				 * Start
				 * field tFileOutputDelimited_7:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {

						dir_tFileOutputDelimited_7.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}

				outtFileOutputDelimited_7 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_7, false),
								context.coding));

				if (filetFileOutputDelimited_7.length() == 0) {

					outtFileOutputDelimited_7.write("PATIENT_IDE");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("PATIENT_IDE_SOURCE");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("PATIENT_NUM");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("PATIENT_IDE_STATUS");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("UPLOAD_DATE");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("UPDATE_DATE");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("DOWNLOAD_DATE");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("IMPORT_DATE");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("SOURCESYSTEM_CD");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_tFileOutputDelimited_7);

					outtFileOutputDelimited_7.write("UPLOAD_ID");

					outtFileOutputDelimited_7
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7",
						outtFileOutputDelimited_7);

				resourceMap.put("nb_line_tFileOutputDelimited_7",
						nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tJDBCInput_4 begin ] start
				 */

				ok_Hash.put("tJDBCInput_4", false);
				start_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				currentComponent = "tJDBCInput_4";

				int tos_count_tJDBCInput_4 = 0;

				int nb_line_tJDBCInput_4 = 0;
				java.sql.Connection conn_tJDBCInput_4 = null;
				conn_tJDBCInput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_4 = conn_tJDBCInput_4
						.createStatement();

				String dbquery_tJDBCInput_4 = "SELECT * FROM "
						+ context.currentQuery
						+ ".patient_mapping WHERE PATIENT_IDE_SOURCE = 'IDRT'";

				globalMap.put("tJDBCInput_4_QUERY", dbquery_tJDBCInput_4);
				java.sql.ResultSet rs_tJDBCInput_4 = null;
				try {
					rs_tJDBCInput_4 = stmt_tJDBCInput_4
							.executeQuery(dbquery_tJDBCInput_4);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_4 = rs_tJDBCInput_4
							.getMetaData();
					int colQtyInRs_tJDBCInput_4 = rsmd_tJDBCInput_4
							.getColumnCount();

					String tmpContent_tJDBCInput_4 = null;

					while (rs_tJDBCInput_4.next()) {
						nb_line_tJDBCInput_4++;

						if (colQtyInRs_tJDBCInput_4 < 1) {
							row13.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(1);
							if (tmpContent_tJDBCInput_4 != null) {
								row13.PATIENT_IDE = tmpContent_tJDBCInput_4;
							} else {
								row13.PATIENT_IDE = null;
							}
						}

						if (colQtyInRs_tJDBCInput_4 < 2) {
							row13.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(2);
							if (tmpContent_tJDBCInput_4 != null) {
								row13.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_4;
							} else {
								row13.PATIENT_IDE_SOURCE = null;
							}
						}

						if (colQtyInRs_tJDBCInput_4 < 3) {
							row13.PATIENT_NUM = 0;
						} else {

							if (rs_tJDBCInput_4.getObject(3) != null) {
								row13.PATIENT_NUM = rs_tJDBCInput_4.getInt(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tJDBCInput_4 < 4) {
							row13.PATIENT_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(4);
							if (tmpContent_tJDBCInput_4 != null) {
								row13.PATIENT_IDE_STATUS = tmpContent_tJDBCInput_4;
							} else {
								row13.PATIENT_IDE_STATUS = null;
							}
						}

						if (colQtyInRs_tJDBCInput_4 < 5) {
							row13.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(5);
							}
							row13.UPLOAD_DATE = date_tJDBCInput_4;
						}

						if (colQtyInRs_tJDBCInput_4 < 6) {
							row13.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(6);
							}
							row13.UPDATE_DATE = date_tJDBCInput_4;
						}

						if (colQtyInRs_tJDBCInput_4 < 7) {
							row13.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(7);
							}
							row13.DOWNLOAD_DATE = date_tJDBCInput_4;
						}

						if (colQtyInRs_tJDBCInput_4 < 8) {
							row13.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(8);
							}
							row13.IMPORT_DATE = date_tJDBCInput_4;
						}

						if (colQtyInRs_tJDBCInput_4 < 9) {
							row13.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(9);
							if (tmpContent_tJDBCInput_4 != null) {
								row13.SOURCESYSTEM_CD = tmpContent_tJDBCInput_4;
							} else {
								row13.SOURCESYSTEM_CD = null;
							}
						}

						if (colQtyInRs_tJDBCInput_4 < 10) {
							row13.UPLOAD_ID = null;
						} else {

							if (rs_tJDBCInput_4.getObject(10) != null) {
								row13.UPLOAD_ID = rs_tJDBCInput_4
										.getBigDecimal(10);
							} else {
								row13.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_4 begin ] stop
						 */
						/**
						 * [tJDBCInput_4 main ] start
						 */

						currentComponent = "tJDBCInput_4";

						tos_count_tJDBCInput_4++;

						/**
						 * [tJDBCInput_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();

						if (row13.PATIENT_IDE != null) {

							sb_tFileOutputDelimited_7.append(

							row13.PATIENT_IDE

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.PATIENT_IDE_SOURCE != null) {

							sb_tFileOutputDelimited_7.append(

							row13.PATIENT_IDE_SOURCE

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						sb_tFileOutputDelimited_7.append(

						row13.PATIENT_NUM

						);

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.PATIENT_IDE_STATUS != null) {

							sb_tFileOutputDelimited_7.append(

							row13.PATIENT_IDE_STATUS

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.UPLOAD_DATE != null) {

							sb_tFileOutputDelimited_7.append(

							FormatterUtils.format_Date(row13.UPLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.UPDATE_DATE != null) {

							sb_tFileOutputDelimited_7.append(

							FormatterUtils.format_Date(row13.UPDATE_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.DOWNLOAD_DATE != null) {

							sb_tFileOutputDelimited_7.append(

							FormatterUtils.format_Date(row13.DOWNLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.IMPORT_DATE != null) {

							sb_tFileOutputDelimited_7.append(

							FormatterUtils.format_Date(row13.IMPORT_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.SOURCESYSTEM_CD != null) {

							sb_tFileOutputDelimited_7.append(

							row13.SOURCESYSTEM_CD

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row13.UPLOAD_ID != null) {

							sb_tFileOutputDelimited_7.append(

							row13.UPLOAD_ID.setScale(0,
									java.math.RoundingMode.HALF_UP)
									.toPlainString()

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

						nb_line_tFileOutputDelimited_7++;
						resourceMap.put("nb_line_tFileOutputDelimited_7",
								nb_line_tFileOutputDelimited_7);

						outtFileOutputDelimited_7
								.write(sb_tFileOutputDelimited_7.toString());

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tJDBCInput_4 end ] start
						 */

						currentComponent = "tJDBCInput_4";

					}
				} finally {
					if (rs_tJDBCInput_4 != null) {
						rs_tJDBCInput_4.close();
					}
					stmt_tJDBCInput_4.close();

				}
				globalMap.put("tJDBCInput_4_NB_LINE", nb_line_tJDBCInput_4);

				ok_Hash.put("tJDBCInput_4", true);
				end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				/**
				 * [tJDBCInput_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE",
						nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_4 finally ] start
				 */

				currentComponent = "tJDBCInput_4";

				/**
				 * [tJDBCInput_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.ENCOUNTER_IDE = readString(dis);

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_3_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
							.substring(0, fileName_tFileOutputDelimited_8
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);

				int nb_line_tFileOutputDelimited_8 = 0;
				int splitEvery_tFileOutputDelimited_8 = 1000;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /**
				 * Start field
				 * tFileOutputDelimited_8:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
				 * Start
				 * field tFileOutputDelimited_8:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null
						&& directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
							directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {

						dir_tFileOutputDelimited_8.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;

				java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				if (fileToDelete_tFileOutputDelimited_8.exists()) {
					fileToDelete_tFileOutputDelimited_8.delete();
				}

				outtFileOutputDelimited_8 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_8, false),
								context.coding));

				if (filetFileOutputDelimited_8.length() == 0) {

					outtFileOutputDelimited_8.write("ENCOUNTER_NUM");

					outtFileOutputDelimited_8
							.write(OUT_DELIM_tFileOutputDelimited_8);

					outtFileOutputDelimited_8.write("ENCOUNTER_IDE");

					outtFileOutputDelimited_8
							.write(OUT_DELIM_tFileOutputDelimited_8);

					outtFileOutputDelimited_8.write("PATIENT_IDE");

					outtFileOutputDelimited_8
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_8",
						outtFileOutputDelimited_8);

				resourceMap.put("nb_line_tFileOutputDelimited_8",
						nb_line_tFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tJDBCInput_5 begin ] start
				 */

				ok_Hash.put("tJDBCInput_5", false);
				start_Hash.put("tJDBCInput_5", System.currentTimeMillis());

				currentComponent = "tJDBCInput_5";

				int tos_count_tJDBCInput_5 = 0;

				int nb_line_tJDBCInput_5 = 0;
				java.sql.Connection conn_tJDBCInput_5 = null;
				conn_tJDBCInput_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_5 = conn_tJDBCInput_5
						.createStatement();

				String dbquery_tJDBCInput_5 = "SELECT ENCOUNTER_NUM, ENCOUNTER_IDE, PATIENT_IDE FROM "
						+ context.currentQuery
						+ ".encounter_mapping WHERE ENCOUNTER_IDE_SOURCE  like 'IDRT'";

				globalMap.put("tJDBCInput_5_QUERY", dbquery_tJDBCInput_5);
				java.sql.ResultSet rs_tJDBCInput_5 = null;
				try {
					rs_tJDBCInput_5 = stmt_tJDBCInput_5
							.executeQuery(dbquery_tJDBCInput_5);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_5 = rs_tJDBCInput_5
							.getMetaData();
					int colQtyInRs_tJDBCInput_5 = rsmd_tJDBCInput_5
							.getColumnCount();

					String tmpContent_tJDBCInput_5 = null;

					while (rs_tJDBCInput_5.next()) {
						nb_line_tJDBCInput_5++;

						if (colQtyInRs_tJDBCInput_5 < 1) {
							row16.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_5.getObject(1) != null) {
								row16.ENCOUNTER_NUM = rs_tJDBCInput_5
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tJDBCInput_5 < 2) {
							row16.ENCOUNTER_IDE = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(2);
							if (tmpContent_tJDBCInput_5 != null) {
								row16.ENCOUNTER_IDE = tmpContent_tJDBCInput_5;
							} else {
								row16.ENCOUNTER_IDE = null;
							}
						}

						if (colQtyInRs_tJDBCInput_5 < 3) {
							row16.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(3);
							if (tmpContent_tJDBCInput_5 != null) {
								row16.PATIENT_IDE = tmpContent_tJDBCInput_5;
							} else {
								row16.PATIENT_IDE = null;
							}
						}

						/**
						 * [tJDBCInput_5 begin ] stop
						 */
						/**
						 * [tJDBCInput_5 main ] start
						 */

						currentComponent = "tJDBCInput_5";

						tos_count_tJDBCInput_5++;

						/**
						 * [tJDBCInput_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 main ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();

						if (row16.ENCOUNTER_NUM != null) {

							sb_tFileOutputDelimited_8.append(

							row16.ENCOUNTER_NUM.setScale(0,
									java.math.RoundingMode.HALF_UP)
									.toPlainString()

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row16.ENCOUNTER_IDE != null) {

							sb_tFileOutputDelimited_8.append(

							row16.ENCOUNTER_IDE

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row16.PATIENT_IDE != null) {

							sb_tFileOutputDelimited_8.append(

							row16.PATIENT_IDE

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

						nb_line_tFileOutputDelimited_8++;
						resourceMap.put("nb_line_tFileOutputDelimited_8",
								nb_line_tFileOutputDelimited_8);

						outtFileOutputDelimited_8
								.write(sb_tFileOutputDelimited_8.toString());

						tos_count_tFileOutputDelimited_8++;

						/**
						 * [tFileOutputDelimited_8 main ] stop
						 */

						/**
						 * [tJDBCInput_5 end ] start
						 */

						currentComponent = "tJDBCInput_5";

					}
				} finally {
					if (rs_tJDBCInput_5 != null) {
						rs_tJDBCInput_5.close();
					}
					stmt_tJDBCInput_5.close();

				}
				globalMap.put("tJDBCInput_5_NB_LINE", nb_line_tJDBCInput_5);

				ok_Hash.put("tJDBCInput_5", true);
				end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

				/**
				 * [tJDBCInput_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE",
						nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_5 finally ] start
				 */

				currentComponent = "tJDBCInput_5";

				/**
				 * [tJDBCInput_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				context.currentQuery = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2metadata"
						: context.DB_StagingI2B2_Schema;

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements
			routines.system.IPersistableComparableLookupRow<row25Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row25Struct other = (row25Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			return true;
		}

		public void copyDataTo(row25Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.ENCOUNTER_IDE = this.ENCOUNTER_IDE;
			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		public void copyKeysDataTo(row25Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.ENCOUNTER_IDE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.ENCOUNTER_IDE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.ENCOUNTER_IDE = readString(dis);

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromEncMap2Struct implements
			routines.system.IPersistableRow<fromEncMap2Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.ENCOUNTER_IDE = readString(dis);

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromEncMap2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromEncMapStruct implements
			routines.system.IPersistableRow<fromEncMapStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromEncMapStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				fromEncMapStruct fromEncMap = new fromEncMapStruct();
				fromEncMap2Struct fromEncMap2 = new fromEncMap2Struct();

				row25Struct row25 = new row25Struct();

				/**
				 * [tAdvancedHash_row25 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row25", false);
				start_Hash.put("tAdvancedHash_row25",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row25";

				int tos_count_tAdvancedHash_row25 = 0;

				// connection name:row25
				// source node:tUnite_2 - inputs:(row24,fromEncMap2)
				// outputs:(row25,row25) | target node:tAdvancedHash_row25 -
				// inputs:(row25) outputs:()
				// linked node: tMap_6 - inputs:(fromData,row25) outputs:(from)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row25Struct> getLookup(matchingModeEnum_row25);

				globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);

				/**
				 * [tAdvancedHash_row25 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				int footer_tFileInputDelimited_14 = 0;
				int totalLinetFileInputDelimited_14 = 0;
				int limittFileInputDelimited_14 = -1;
				int lastLinetFileInputDelimited_14 = -1;

				char fieldSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_14 = ((String) ";")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_14 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_14 = /**
				 * Start field
				 * tFileInputDelimited_14:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_14:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_14 = null;

				try {

					String[] rowtFileInputDelimited_14 = null;
					int currentLinetFileInputDelimited_14 = 0;
					int outputLinetFileInputDelimited_14 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_14 = 0;
							if (footer_value_tFileInputDelimited_14 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_14,
									fieldSeparator_tFileInputDelimited_14[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_14)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_14[0]);
						}

						csvReadertFileInputDelimited_14
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
							csvReadertFileInputDelimited_14.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_14[0]);

						csvReadertFileInputDelimited_14.setQuoteChar('"');

						csvReadertFileInputDelimited_14
								.setEscapeChar(csvReadertFileInputDelimited_14
										.getQuoteChar());

						if (footer_tFileInputDelimited_14 > 0) {
							for (totalLinetFileInputDelimited_14 = 0; totalLinetFileInputDelimited_14 < 1; totalLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
							csvReadertFileInputDelimited_14
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_14.readNext()) {

								rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
										.getValues();
								if (!(rowtFileInputDelimited_14.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_14[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_14++;

								}

							}
							int lastLineTemptFileInputDelimited_14 = totalLinetFileInputDelimited_14
									- footer_tFileInputDelimited_14 < 0 ? 0
									: totalLinetFileInputDelimited_14
											- footer_tFileInputDelimited_14;
							if (lastLinetFileInputDelimited_14 > 0) {
								lastLinetFileInputDelimited_14 = lastLinetFileInputDelimited_14 < lastLineTemptFileInputDelimited_14 ? lastLinetFileInputDelimited_14
										: lastLineTemptFileInputDelimited_14;
							} else {
								lastLinetFileInputDelimited_14 = lastLineTemptFileInputDelimited_14;
							}

							csvReadertFileInputDelimited_14.close();
							if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_14,
										fieldSeparator_tFileInputDelimited_14[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_14)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_14[0]);
							}
							csvReadertFileInputDelimited_14
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
								csvReadertFileInputDelimited_14
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_14[0]);

							csvReadertFileInputDelimited_14.setQuoteChar('"');

							csvReadertFileInputDelimited_14
									.setEscapeChar(csvReadertFileInputDelimited_14
											.getQuoteChar());

						}

						if (limittFileInputDelimited_14 != 0) {
							for (currentLinetFileInputDelimited_14 = 0; currentLinetFileInputDelimited_14 < 1; currentLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
						}
						csvReadertFileInputDelimited_14
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_14 != 0
							&& csvReadertFileInputDelimited_14 != null
							&& csvReadertFileInputDelimited_14.readNext()) {

						rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
								.getValues();

						if (rowtFileInputDelimited_14.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_14[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_14++;

						if (lastLinetFileInputDelimited_14 > -1
								&& currentLinetFileInputDelimited_14 > lastLinetFileInputDelimited_14) {
							break;
						}
						outputLinetFileInputDelimited_14++;
						if (limittFileInputDelimited_14 > 0
								&& outputLinetFileInputDelimited_14 > limittFileInputDelimited_14) {
							break;
						}

						row24 = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						row24 = new row24Struct();
						try {

							char fieldSeparator_tFileInputDelimited_14_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_14_ListType = ((String) ";")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_14.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_14[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row24.ENCOUNTER_NUM = null;

								row24.ENCOUNTER_IDE = null;

								row24.PATIENT_IDE = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_14 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_14 = 0;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row24.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										row24.ENCOUNTER_NUM = null;
									}

								} else {
									row24.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 1;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row24.ENCOUNTER_IDE = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row24.ENCOUNTER_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 2;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row24.PATIENT_IDE = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row24.PATIENT_IDE = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							row24 = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "row24"
						if (row24 != null) {

							/**
							 * [tUnite_2 main ] start
							 */

							currentComponent = "tUnite_2";

							// ////////

							// for output
							row25 = new row25Struct();

							row25.ENCOUNTER_NUM = row24.ENCOUNTER_NUM;
							row25.ENCOUNTER_IDE = row24.ENCOUNTER_IDE;
							row25.PATIENT_IDE = row24.PATIENT_IDE;

							nb_line_tUnite_2++;

							// ////////

							tos_count_tUnite_2++;

							/**
							 * [tUnite_2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row25 main ] start
							 */

							currentComponent = "tAdvancedHash_row25";

							row25Struct row25_HashRow = new row25Struct();

							row25_HashRow.ENCOUNTER_NUM = row25.ENCOUNTER_NUM;

							row25_HashRow.ENCOUNTER_IDE = row25.ENCOUNTER_IDE;

							row25_HashRow.PATIENT_IDE = row25.PATIENT_IDE;

							tHash_Lookup_row25.put(row25_HashRow);

							tos_count_tAdvancedHash_row25++;

							/**
							 * [tAdvancedHash_row25 main ] stop
							 */

						} // End of branch "row24"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						nb_line_tFileInputDelimited_14++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_14 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_14 != null) {
							csvReadertFileInputDelimited_14.close();
						}
					}
					if (csvReadertFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								nb_line_tFileInputDelimited_14);
					}

				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				fromEncMap2Struct fromEncMap2_tmp = new fromEncMap2Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "encounter_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						fromEncMap = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						fromEncMap = new fromEncMapStruct();
						try {

							char fieldSeparator_tFileInputDelimited_8_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_8_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								fromEncMap.ENCOUNTER_IDE = null;

								fromEncMap.ENCOUNTER_IDE_SOURCE = null;

								fromEncMap.ENCOUNTER_NUM = null;

								fromEncMap.PATIENT_IDE = null;

								fromEncMap.PATIENT_IDE_SOURCE = null;

								fromEncMap.ENCOUNTER_IDE_STATUS = null;

								fromEncMap.UPLOAD_DATE = null;

								fromEncMap.UPDATE_DATE = null;

								fromEncMap.DOWNLOAD_DATE = null;

								fromEncMap.IMPORT_DATE = null;

								fromEncMap.SOURCESYSTEM_CD = null;

								fromEncMap.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									fromEncMap.ENCOUNTER_IDE = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									fromEncMap.ENCOUNTER_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									fromEncMap.ENCOUNTER_IDE_SOURCE = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									fromEncMap.ENCOUNTER_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 2;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										fromEncMap.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);

									} else {
										fromEncMap.ENCOUNTER_NUM = null;
									}

								} else {
									fromEncMap.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 3;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									fromEncMap.PATIENT_IDE = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									fromEncMap.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 4;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									fromEncMap.PATIENT_IDE_SOURCE = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									fromEncMap.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 5;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									fromEncMap.ENCOUNTER_IDE_STATUS = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									fromEncMap.ENCOUNTER_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 6;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										fromEncMap.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										fromEncMap.UPLOAD_DATE = null;
									}

								} else {
									fromEncMap.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 7;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										fromEncMap.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										fromEncMap.UPDATE_DATE = null;
									}

								} else {
									fromEncMap.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 8;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										fromEncMap.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										fromEncMap.DOWNLOAD_DATE = null;
									}

								} else {
									fromEncMap.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 9;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										fromEncMap.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										fromEncMap.IMPORT_DATE = null;
									}

								} else {
									fromEncMap.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 10;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									fromEncMap.SOURCESYSTEM_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									fromEncMap.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 11;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									fromEncMap.UPLOAD_ID = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									fromEncMap.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							fromEncMap = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "fromEncMap"
						if (fromEncMap != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							if (

							(

							!fromEncMap.ENCOUNTER_IDE_SOURCE.toLowerCase()
									.equals("hive")

							)

							) { // G_TM_M_280

								// CALL close main tMap filter for table
								// 'fromEncMap'
								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
									// ###############################
									// # Output tables

									fromEncMap2 = null;

									// # Output table : 'fromEncMap2'
									fromEncMap2_tmp.ENCOUNTER_NUM = fromEncMap.ENCOUNTER_NUM;
									fromEncMap2_tmp.ENCOUNTER_IDE = fromEncMap.ENCOUNTER_IDE;
									fromEncMap2_tmp.PATIENT_IDE = fromEncMap.PATIENT_IDE;
									fromEncMap2 = fromEncMap2_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_5 = false;

								tos_count_tMap_5++;

								/**
								 * [tMap_5 main ] stop
								 */
								// Start of branch "fromEncMap2"
								if (fromEncMap2 != null) {

									/**
									 * [tUnite_2 main ] start
									 */

									currentComponent = "tUnite_2";

									// ////////

									// for output
									row25 = new row25Struct();

									row25.ENCOUNTER_NUM = fromEncMap2.ENCOUNTER_NUM;
									row25.ENCOUNTER_IDE = fromEncMap2.ENCOUNTER_IDE;
									row25.PATIENT_IDE = fromEncMap2.PATIENT_IDE;

									nb_line_tUnite_2++;

									// ////////

									tos_count_tUnite_2++;

									/**
									 * [tUnite_2 main ] stop
									 */

									/**
									 * [tAdvancedHash_row25 main ] start
									 */

									currentComponent = "tAdvancedHash_row25";

									row25Struct row25_HashRow = new row25Struct();

									row25_HashRow.ENCOUNTER_NUM = row25.ENCOUNTER_NUM;

									row25_HashRow.ENCOUNTER_IDE = row25.ENCOUNTER_IDE;

									row25_HashRow.PATIENT_IDE = row25.PATIENT_IDE;

									tHash_Lookup_row25.put(row25_HashRow);

									tos_count_tAdvancedHash_row25++;

									/**
									 * [tAdvancedHash_row25 main ] stop
									 */

								} // End of branch "fromEncMap2"

							} // G_TM_M_280 close main tMap filter for table
								// 'fromEncMap'

						} // End of branch "fromEncMap"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}

				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row25 end ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				tHash_Lookup_row25.endPut();

				ok_Hash.put("tAdvancedHash_row25", true);
				end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row25 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_14 finally ] start
				 */

				currentComponent = "tFileInputDelimited_14";

				/**
				 * [tFileInputDelimited_14 finally ] stop
				 */
				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row25 finally ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				/**
				 * [tAdvancedHash_row25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements
			routines.system.IPersistableComparableLookupRow<row27Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_IDE == null) ? 0 : this.PATIENT_IDE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.PATIENT_IDE == null) {
				if (other.PATIENT_IDE != null)
					return false;

			} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))

				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_IDE,
					other.PATIENT_IDE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdasdStruct implements
			routines.system.IPersistableRow<asdasdStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdasdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public BigDecimal UPLOAD_ID;

		public BigDecimal getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// BigDecimal

				dos.writeObject(this.UPLOAD_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				out1Struct out1 = new out1Struct();

				row26Struct row26 = new row26Struct();
				asdasdStruct asdasd = new asdasdStruct();

				row27Struct row27 = new row27Struct();

				/**
				 * [tAdvancedHash_row27 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row27", false);
				start_Hash.put("tAdvancedHash_row27",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row27";

				int tos_count_tAdvancedHash_row27 = 0;

				// connection name:row27
				// source node:tUnite_3 - inputs:(out1,asdasd)
				// outputs:(row27,row27) | target node:tAdvancedHash_row27 -
				// inputs:(row27) outputs:()
				// linked node: tMap_11 - inputs:(from,row27) outputs:(row66)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row27Struct> getLookup(matchingModeEnum_row27);

				globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);

				/**
				 * [tAdvancedHash_row27 begin ] stop
				 */

				/**
				 * [tUnite_3 begin ] start
				 */

				ok_Hash.put("tUnite_3", false);
				start_Hash.put("tUnite_3", System.currentTimeMillis());

				currentComponent = "tUnite_3";

				int tos_count_tUnite_3 = 0;

				int nb_line_tUnite_3 = 0;

				/**
				 * [tUnite_3 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "patient_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('"');

						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
										.getValues();
								if (!(rowtFileInputDelimited_5.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_5[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('"');

							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						if (rowtFileInputDelimited_5.length == 1
								&& ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						row19 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row19 = new row19Struct();
						try {

							char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_5_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row19.PATIENT_IDE = null;

								row19.PATIENT_IDE_SOURCE = null;

								row19.PATIENT_NUM = null;

								row19.PATIENT_IDE_STATUS = null;

								row19.UPLOAD_DATE = null;

								row19.UPDATE_DATE = null;

								row19.DOWNLOAD_DATE = null;

								row19.IMPORT_DATE = null;

								row19.SOURCESYSTEM_CD = null;

								row19.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row19.PATIENT_IDE = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row19.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row19.PATIENT_IDE_SOURCE = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row19.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row19.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

									} else {
										row19.PATIENT_NUM = null;
									}

								} else {
									row19.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row19.PATIENT_IDE_STATUS = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row19.PATIENT_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row19.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										row19.UPLOAD_DATE = null;
									}

								} else {
									row19.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 5;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row19.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										row19.UPDATE_DATE = null;
									}

								} else {
									row19.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 6;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row19.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										row19.DOWNLOAD_DATE = null;
									}

								} else {
									row19.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 7;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										row19.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										row19.IMPORT_DATE = null;
									}

								} else {
									row19.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 8;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row19.SOURCESYSTEM_CD = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row19.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 9;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row19.UPLOAD_ID = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row19.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row19 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							if (

							(

							!row19.PATIENT_IDE_SOURCE.toLowerCase().equals(
									"hive")

							)

							) { // G_TM_M_280

								// CALL close main tMap filter for table 'row19'
								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

									// # Output table : 'out1'
									out1_tmp.PATIENT_IDE = row19.PATIENT_IDE;
									out1_tmp.PATIENT_NUM = row19.PATIENT_NUM;
									out1 = out1_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_10 = false;

								tos_count_tMap_10++;

								/**
								 * [tMap_10 main ] stop
								 */
								// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tUnite_3 main ] start
									 */

									currentComponent = "tUnite_3";

									// ////////

									// for output
									row27 = new row27Struct();

									row27.PATIENT_IDE = out1.PATIENT_IDE;
									row27.PATIENT_NUM = out1.PATIENT_NUM;

									nb_line_tUnite_3++;

									// ////////

									tos_count_tUnite_3++;

									/**
									 * [tUnite_3 main ] stop
									 */

									/**
									 * [tAdvancedHash_row27 main ] start
									 */

									currentComponent = "tAdvancedHash_row27";

									row27Struct row27_HashRow = new row27Struct();

									row27_HashRow.PATIENT_IDE = row27.PATIENT_IDE;

									row27_HashRow.PATIENT_NUM = row27.PATIENT_NUM;

									tHash_Lookup_row27.put(row27_HashRow);

									tos_count_tAdvancedHash_row27++;

									/**
									 * [tAdvancedHash_row27 main ] stop
									 */

								} // End of branch "out1"

							} // G_TM_M_280 close main tMap filter for table
								// 'row19'

						} // End of branch "row19"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}

				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				asdasdStruct asdasd_tmp = new asdasdStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				int footer_tFileInputDelimited_15 = 0;
				int totalLinetFileInputDelimited_15 = 0;
				int limittFileInputDelimited_15 = -1;
				int lastLinetFileInputDelimited_15 = -1;

				char fieldSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_15 = ((String) ";")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_15 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_15 = /**
				 * Start field
				 * tFileInputDelimited_15:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_2_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_15:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_15 = null;

				try {

					String[] rowtFileInputDelimited_15 = null;
					int currentLinetFileInputDelimited_15 = 0;
					int outputLinetFileInputDelimited_15 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_15 = 0;
							if (footer_value_tFileInputDelimited_15 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_15,
									fieldSeparator_tFileInputDelimited_15[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_15)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_15[0]);
						}

						csvReadertFileInputDelimited_15
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
							csvReadertFileInputDelimited_15.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_15[0]);

						csvReadertFileInputDelimited_15.setQuoteChar('"');

						csvReadertFileInputDelimited_15
								.setEscapeChar(csvReadertFileInputDelimited_15
										.getQuoteChar());

						if (footer_tFileInputDelimited_15 > 0) {
							for (totalLinetFileInputDelimited_15 = 0; totalLinetFileInputDelimited_15 < 1; totalLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
							csvReadertFileInputDelimited_15
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_15.readNext()) {

								rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
										.getValues();
								if (!(rowtFileInputDelimited_15.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_15[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_15++;

								}

							}
							int lastLineTemptFileInputDelimited_15 = totalLinetFileInputDelimited_15
									- footer_tFileInputDelimited_15 < 0 ? 0
									: totalLinetFileInputDelimited_15
											- footer_tFileInputDelimited_15;
							if (lastLinetFileInputDelimited_15 > 0) {
								lastLinetFileInputDelimited_15 = lastLinetFileInputDelimited_15 < lastLineTemptFileInputDelimited_15 ? lastLinetFileInputDelimited_15
										: lastLineTemptFileInputDelimited_15;
							} else {
								lastLinetFileInputDelimited_15 = lastLineTemptFileInputDelimited_15;
							}

							csvReadertFileInputDelimited_15.close();
							if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_15,
										fieldSeparator_tFileInputDelimited_15[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_15)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_15[0]);
							}
							csvReadertFileInputDelimited_15
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
								csvReadertFileInputDelimited_15
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_15[0]);

							csvReadertFileInputDelimited_15.setQuoteChar('"');

							csvReadertFileInputDelimited_15
									.setEscapeChar(csvReadertFileInputDelimited_15
											.getQuoteChar());

						}

						if (limittFileInputDelimited_15 != 0) {
							for (currentLinetFileInputDelimited_15 = 0; currentLinetFileInputDelimited_15 < 1; currentLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
						}
						csvReadertFileInputDelimited_15
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_15 != 0
							&& csvReadertFileInputDelimited_15 != null
							&& csvReadertFileInputDelimited_15.readNext()) {

						rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
								.getValues();

						if (rowtFileInputDelimited_15.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_15[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_15++;

						if (lastLinetFileInputDelimited_15 > -1
								&& currentLinetFileInputDelimited_15 > lastLinetFileInputDelimited_15) {
							break;
						}
						outputLinetFileInputDelimited_15++;
						if (limittFileInputDelimited_15 > 0
								&& outputLinetFileInputDelimited_15 > limittFileInputDelimited_15) {
							break;
						}

						row26 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row26 = new row26Struct();
						try {

							char fieldSeparator_tFileInputDelimited_15_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_15_ListType = ((String) ";")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_15.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_15[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row26.PATIENT_IDE = null;

								row26.PATIENT_IDE_SOURCE = null;

								row26.PATIENT_NUM = null;

								row26.PATIENT_IDE_STATUS = null;

								row26.UPLOAD_DATE = null;

								row26.UPDATE_DATE = null;

								row26.DOWNLOAD_DATE = null;

								row26.IMPORT_DATE = null;

								row26.SOURCESYSTEM_CD = null;

								row26.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_15 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_15 = 0;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row26.PATIENT_IDE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row26.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 1;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row26.PATIENT_IDE_SOURCE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row26.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 2;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row26.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row26.PATIENT_NUM = null;
									}

								} else {
									row26.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 3;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row26.PATIENT_IDE_STATUS = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row26.PATIENT_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 4;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row26.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row26.UPLOAD_DATE = null;
									}

								} else {
									row26.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 5;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row26.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row26.UPDATE_DATE = null;
									}

								} else {
									row26.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 6;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row26.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row26.DOWNLOAD_DATE = null;
									}

								} else {
									row26.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 7;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row26.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row26.IMPORT_DATE = null;
									}

								} else {
									row26.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 8;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row26.SOURCESYSTEM_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row26.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 9;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row26.UPLOAD_ID = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row26.UPLOAD_ID = null;
									}

								} else {
									row26.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row26 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "row26"
						if (row26 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								asdasd = null;

								// # Output table : 'asdasd'
								asdasd_tmp.PATIENT_IDE = row26.PATIENT_IDE;
								asdasd_tmp.PATIENT_NUM = row26.PATIENT_NUM;
								asdasd = asdasd_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "asdasd"
							if (asdasd != null) {

								/**
								 * [tUnite_3 main ] start
								 */

								currentComponent = "tUnite_3";

								// ////////

								// for output
								row27 = new row27Struct();

								row27.PATIENT_IDE = asdasd.PATIENT_IDE;
								row27.PATIENT_NUM = asdasd.PATIENT_NUM;

								nb_line_tUnite_3++;

								// ////////

								tos_count_tUnite_3++;

								/**
								 * [tUnite_3 main ] stop
								 */

								/**
								 * [tAdvancedHash_row27 main ] start
								 */

								currentComponent = "tAdvancedHash_row27";

								row27Struct row27_HashRow = new row27Struct();

								row27_HashRow.PATIENT_IDE = row27.PATIENT_IDE;

								row27_HashRow.PATIENT_NUM = row27.PATIENT_NUM;

								tHash_Lookup_row27.put(row27_HashRow);

								tos_count_tAdvancedHash_row27++;

								/**
								 * [tAdvancedHash_row27 main ] stop
								 */

							} // End of branch "asdasd"

						} // End of branch "row26"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						nb_line_tFileInputDelimited_15++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_15 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_15 != null) {
							csvReadertFileInputDelimited_15.close();
						}
					}
					if (csvReadertFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								nb_line_tFileInputDelimited_15);
					}

				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUnite_3 end ] start
				 */

				currentComponent = "tUnite_3";

				globalMap.put("tUnite_3_NB_LINE", nb_line_tUnite_3);

				ok_Hash.put("tUnite_3", true);
				end_Hash.put("tUnite_3", System.currentTimeMillis());

				/**
				 * [tUnite_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row27 end ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				tHash_Lookup_row27.endPut();

				ok_Hash.put("tAdvancedHash_row27", true);
				end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row27 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_15 finally ] start
				 */

				currentComponent = "tFileInputDelimited_15";

				/**
				 * [tFileInputDelimited_15 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUnite_3 finally ] start
				 */

				currentComponent = "tUnite_3";

				/**
				 * [tUnite_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row27 finally ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				/**
				 * [tAdvancedHash_row27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableComparableLookupRow<row32Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_to_DB_Schema = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_to_DB_Schema = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public int INSTANCE_NUM;

		public int getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.TVAL_CHAR == null) ? 0 : this.TVAL_CHAR
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			if (this.TVAL_CHAR == null) {
				if (other.TVAL_CHAR != null)
					return false;

			} else if (!this.TVAL_CHAR.equals(other.TVAL_CHAR))

				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.TVAL_CHAR = this.TVAL_CHAR;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.TVAL_CHAR = this.TVAL_CHAR;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_to_DB_Schema.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_to_DB_Schema.length == 0) {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_to_DB_Schema = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_to_DB_Schema, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_to_DB_Schema,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_to_DB_Schema) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.TVAL_CHAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.TVAL_CHAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.INSTANCE_NUM = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.INSTANCE_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",INSTANCE_NUM=" + String.valueOf(INSTANCE_NUM));
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.TVAL_CHAR, other.TVAL_CHAR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();

				/**
				 * [tAdvancedHash_row32 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row32", false);
				start_Hash.put("tAdvancedHash_row32",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row32";

				int tos_count_tAdvancedHash_row32 = 0;

				// connection name:row32
				// source node:tFileInputDelimited_21 -
				// inputs:(after_tFileInputDelimited_4) outputs:(row32,row32) |
				// target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
				// linked node: tMap_7 - inputs:(row7,row32) outputs:(to_obs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row32Struct> getLookup(matchingModeEnum_row32);

				globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);

				/**
				 * [tAdvancedHash_row32 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_21 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_21", false);
				start_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_21";

				int tos_count_tFileInputDelimited_21 = 0;

				int nb_line_tFileInputDelimited_21 = 0;
				int footer_tFileInputDelimited_21 = 0;
				int totalLinetFileInputDelimited_21 = 0;
				int limittFileInputDelimited_21 = -1;
				int lastLinetFileInputDelimited_21 = -1;

				char fieldSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_21 = ((String) "\t")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_21 = ((String) "\n")
							.toCharArray();
				} else {

					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_21 = /**
				 * Start field
				 * tFileInputDelimited_21:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_6_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_21:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_21 = null;

				try {

					String[] rowtFileInputDelimited_21 = null;
					int currentLinetFileInputDelimited_21 = 0;
					int outputLinetFileInputDelimited_21 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_21 = 0;
							if (footer_value_tFileInputDelimited_21 > 0) {

								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_21,
									fieldSeparator_tFileInputDelimited_21[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_21)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_21[0]);
						}

						csvReadertFileInputDelimited_21
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
							csvReadertFileInputDelimited_21.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_21[0]);

						csvReadertFileInputDelimited_21.setQuoteChar('"');

						csvReadertFileInputDelimited_21
								.setEscapeChar(csvReadertFileInputDelimited_21
										.getQuoteChar());

						if (footer_tFileInputDelimited_21 > 0) {
							for (totalLinetFileInputDelimited_21 = 0; totalLinetFileInputDelimited_21 < 1; totalLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
							csvReadertFileInputDelimited_21
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_21.readNext()) {

								rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
										.getValues();
								if (!(rowtFileInputDelimited_21.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_21[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_21++;

								}

							}
							int lastLineTemptFileInputDelimited_21 = totalLinetFileInputDelimited_21
									- footer_tFileInputDelimited_21 < 0 ? 0
									: totalLinetFileInputDelimited_21
											- footer_tFileInputDelimited_21;
							if (lastLinetFileInputDelimited_21 > 0) {
								lastLinetFileInputDelimited_21 = lastLinetFileInputDelimited_21 < lastLineTemptFileInputDelimited_21 ? lastLinetFileInputDelimited_21
										: lastLineTemptFileInputDelimited_21;
							} else {
								lastLinetFileInputDelimited_21 = lastLineTemptFileInputDelimited_21;
							}

							csvReadertFileInputDelimited_21.close();
							if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_21,
										fieldSeparator_tFileInputDelimited_21[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_21)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_21[0]);
							}
							csvReadertFileInputDelimited_21
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
								csvReadertFileInputDelimited_21
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_21[0]);

							csvReadertFileInputDelimited_21.setQuoteChar('"');

							csvReadertFileInputDelimited_21
									.setEscapeChar(csvReadertFileInputDelimited_21
											.getQuoteChar());

						}

						if (limittFileInputDelimited_21 != 0) {
							for (currentLinetFileInputDelimited_21 = 0; currentLinetFileInputDelimited_21 < 1; currentLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
						}
						csvReadertFileInputDelimited_21
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_21 != 0
							&& csvReadertFileInputDelimited_21 != null
							&& csvReadertFileInputDelimited_21.readNext()) {

						rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
								.getValues();

						if (rowtFileInputDelimited_21.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_21[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_21++;

						if (lastLinetFileInputDelimited_21 > -1
								&& currentLinetFileInputDelimited_21 > lastLinetFileInputDelimited_21) {
							break;
						}
						outputLinetFileInputDelimited_21++;
						if (limittFileInputDelimited_21 > 0
								&& outputLinetFileInputDelimited_21 > limittFileInputDelimited_21) {
							break;
						}

						row32 = null;

						row32 = null;

						boolean whetherReject_tFileInputDelimited_21 = false;
						row32 = new row32Struct();
						try {

							char fieldSeparator_tFileInputDelimited_21_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_21_ListType = ((String) "\t")
										.toCharArray();
							} else {

								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_21.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_21[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row32.PATIENT_NUM = null;

								row32.INSTANCE_NUM = 0;

								row32.TVAL_CHAR = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_21 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_21 = 0;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row32.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row32.PATIENT_NUM = null;
									}

								} else {
									row32.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 1;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row32.INSTANCE_NUM = ParserUtils
												.parseTo_int(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row32.INSTANCE_NUM = 0;
									}

								} else {
									row32.INSTANCE_NUM = 0;
								}

								columnIndexWithD_tFileInputDelimited_21 = 2;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row32.TVAL_CHAR = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row32.TVAL_CHAR = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_21 = true;

							System.err.println(e.getMessage());
							row32 = null;

						}

						/**
						 * [tFileInputDelimited_21 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_21 main ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						tos_count_tFileInputDelimited_21++;

						/**
						 * [tFileInputDelimited_21 main ] stop
						 */
						// Start of branch "row32"
						if (row32 != null) {

							/**
							 * [tAdvancedHash_row32 main ] start
							 */

							currentComponent = "tAdvancedHash_row32";

							row32Struct row32_HashRow = new row32Struct();

							row32_HashRow.PATIENT_NUM = row32.PATIENT_NUM;

							row32_HashRow.INSTANCE_NUM = row32.INSTANCE_NUM;

							row32_HashRow.TVAL_CHAR = row32.TVAL_CHAR;

							tHash_Lookup_row32.put(row32_HashRow);

							tos_count_tAdvancedHash_row32++;

							/**
							 * [tAdvancedHash_row32 main ] stop
							 */

						} // End of branch "row32"

						/**
						 * [tFileInputDelimited_21 end ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						nb_line_tFileInputDelimited_21++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_21 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_21 != null) {
							csvReadertFileInputDelimited_21.close();
						}
					}
					if (csvReadertFileInputDelimited_21 != null) {
						globalMap.put("tFileInputDelimited_21_NB_LINE",
								nb_line_tFileInputDelimited_21);
					}

				}

				ok_Hash.put("tFileInputDelimited_21", true);
				end_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_row32 end ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				tHash_Lookup_row32.endPut();

				ok_Hash.put("tAdvancedHash_row32", true);
				end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row32 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_21 finally ] start
				 */

				currentComponent = "tFileInputDelimited_21";

				/**
				 * [tFileInputDelimited_21 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row32 finally ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				/**
				 * [tAdvancedHash_row32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IDRT_to_DB_Schema IDRT_to_DB_SchemaClass = new IDRT_to_DB_Schema();

		int exitCode = IDRT_to_DB_SchemaClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IDRT_to_DB_Schema.class
					.getClassLoader().getResourceAsStream(
							"tos/idrt_to_db_schema_1_0/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.importTerms = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("importTerms"));
			} catch (NumberFormatException e) {
				context.importTerms = null;
			}
			try {
				context.lastPatient = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("lastPatient"));
			} catch (NumberFormatException e) {
				context.lastPatient = null;
			}
			context.patientDataFolder = (String) context
					.getProperty("patientDataFolder");
			context.uploadFolder = (String) context.getProperty("uploadFolder");
			try {
				context.dataRows = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("dataRows"));
			} catch (NumberFormatException e) {
				context.dataRows = null;
			}
			try {
				context.ontRows = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ontRows"));
			} catch (NumberFormatException e) {
				context.ontRows = null;
			}
			try {
				context.currentOntRow = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("currentOntRow"));
			} catch (NumberFormatException e) {
				context.currentOntRow = null;
			}
			try {
				context.currentDataRow = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("currentDataRow"));
			} catch (NumberFormatException e) {
				context.currentDataRow = null;
			}
			try {
				context.dataMod = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("dataMod"));
			} catch (NumberFormatException e) {
				context.dataMod = null;
			}
			try {
				context.ontMod = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ontMod"));
			} catch (NumberFormatException e) {
				context.ontMod = null;
			}
			try {
				context.maxInstance = routines.system.ParserUtils
						.parseTo_BigDecimal(context.getProperty("maxInstance"));
			} catch (NumberFormatException e) {
				context.maxInstance = null;
			}
			context.instanceMap = (Object) context.getProperty("instanceMap");
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.currentQuery = (String) context.getProperty("currentQuery");
			context.datePattern = (String) context.getProperty("datePattern");
			context.fileName = (String) context.getProperty("fileName");
			try {
				context.cleanUp = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("cleanUp"));
			} catch (NumberFormatException e) {
				context.cleanUp = null;
			}
			context.coding = (String) context.getProperty("coding");
			try {
				context.dbImport = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("dbImport"));
			} catch (NumberFormatException e) {
				context.dbImport = null;
			}
			context.exportDBConfig = (String) context
					.getProperty("exportDBConfig");
			context.FTPPassword = (java.lang.String) context
					.getProperty("FTPPassword");
			context.FTPUser = (String) context.getProperty("FTPUser");
			context.idFile = (String) context.getProperty("idFile");
			try {
				context.pidgen = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("pidgen"));
			} catch (NumberFormatException e) {
				context.pidgen = null;
			}
			context.PIDURL = (String) context.getProperty("PIDURL");
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_StagingI2B2_Password = (java.lang.String) context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.currentFile = (String) context.getProperty("currentFile");
			context.encoding = (String) context.getProperty("encoding");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderODM = (String) context.getProperty("folderODM");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.importSingleFile = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("importSingleFile"));
			} catch (NumberFormatException e) {
				context.importSingleFile = null;
			}
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.ItemData = (String) context.getProperty("ItemData");
			context.ItemDataAny = (String) context.getProperty("ItemDataAny");
			context.ItemDataBase64Binary = (String) context
					.getProperty("ItemDataBase64Binary");
			context.ItemDataBase64Float = (String) context
					.getProperty("ItemDataBase64Float");
			context.ItemDataBoolean = (String) context
					.getProperty("ItemDataBoolean");
			context.ItemDataDate = (String) context.getProperty("ItemDataDate");
			context.ItemDataDatetime = (String) context
					.getProperty("ItemDataDatetime");
			context.ItemDataDouble = (String) context
					.getProperty("ItemDataDouble");
			context.ItemDataDurationDatetime = (String) context
					.getProperty("ItemDataDurationDatetime");
			context.ItemDataFloat = (String) context
					.getProperty("ItemDataFloat");
			context.ItemDataHexBinary = (String) context
					.getProperty("ItemDataHexBinary");
			context.ItemDataHexFloat = (String) context
					.getProperty("ItemDataHexFloat");
			context.ItemDataIncompleteDatetime = (String) context
					.getProperty("ItemDataIncompleteDatetime");
			context.ItemDataInteger = (String) context
					.getProperty("ItemDataInteger");
			context.ItemDataIntervalDatetime = (String) context
					.getProperty("ItemDataIntervalDatetime");
			context.ItemDataPartialDate = (String) context
					.getProperty("ItemDataPartialDate");
			context.ItemDataPartialDatetime = (String) context
					.getProperty("ItemDataPartialDatetime");
			context.ItemDataPartialTime = (String) context
					.getProperty("ItemDataPartialTime");
			context.ItemDataString = (String) context
					.getProperty("ItemDataString");
			context.ItemDataTime = (String) context.getProperty("ItemDataTime");
			context.ItemDataURI = (String) context.getProperty("ItemDataURI");
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
			context.xslt = (String) context.getProperty("xslt");
			context.xslt_namespace = (String) context
					.getProperty("xslt_namespace");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("importTerms")) {
				context.importTerms = (Boolean) parentContextMap
						.get("importTerms");
			}
			if (parentContextMap.containsKey("lastPatient")) {
				context.lastPatient = (Integer) parentContextMap
						.get("lastPatient");
			}
			if (parentContextMap.containsKey("patientDataFolder")) {
				context.patientDataFolder = (String) parentContextMap
						.get("patientDataFolder");
			}
			if (parentContextMap.containsKey("uploadFolder")) {
				context.uploadFolder = (String) parentContextMap
						.get("uploadFolder");
			}
			if (parentContextMap.containsKey("dataRows")) {
				context.dataRows = (Integer) parentContextMap.get("dataRows");
			}
			if (parentContextMap.containsKey("ontRows")) {
				context.ontRows = (Integer) parentContextMap.get("ontRows");
			}
			if (parentContextMap.containsKey("currentOntRow")) {
				context.currentOntRow = (Integer) parentContextMap
						.get("currentOntRow");
			}
			if (parentContextMap.containsKey("currentDataRow")) {
				context.currentDataRow = (Integer) parentContextMap
						.get("currentDataRow");
			}
			if (parentContextMap.containsKey("dataMod")) {
				context.dataMod = (Integer) parentContextMap.get("dataMod");
			}
			if (parentContextMap.containsKey("ontMod")) {
				context.ontMod = (Integer) parentContextMap.get("ontMod");
			}
			if (parentContextMap.containsKey("maxInstance")) {
				context.maxInstance = (BigDecimal) parentContextMap
						.get("maxInstance");
			}
			if (parentContextMap.containsKey("instanceMap")) {
				context.instanceMap = (Object) parentContextMap
						.get("instanceMap");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("currentQuery")) {
				context.currentQuery = (String) parentContextMap
						.get("currentQuery");
			}
			if (parentContextMap.containsKey("datePattern")) {
				context.datePattern = (String) parentContextMap
						.get("datePattern");
			}
			if (parentContextMap.containsKey("fileName")) {
				context.fileName = (String) parentContextMap.get("fileName");
			}
			if (parentContextMap.containsKey("cleanUp")) {
				context.cleanUp = (Boolean) parentContextMap.get("cleanUp");
			}
			if (parentContextMap.containsKey("coding")) {
				context.coding = (String) parentContextMap.get("coding");
			}
			if (parentContextMap.containsKey("dbImport")) {
				context.dbImport = (Boolean) parentContextMap.get("dbImport");
			}
			if (parentContextMap.containsKey("exportDBConfig")) {
				context.exportDBConfig = (String) parentContextMap
						.get("exportDBConfig");
			}
			if (parentContextMap.containsKey("FTPPassword")) {
				context.FTPPassword = (java.lang.String) parentContextMap
						.get("FTPPassword");
			}
			if (parentContextMap.containsKey("FTPUser")) {
				context.FTPUser = (String) parentContextMap.get("FTPUser");
			}
			if (parentContextMap.containsKey("idFile")) {
				context.idFile = (String) parentContextMap.get("idFile");
			}
			if (parentContextMap.containsKey("pidgen")) {
				context.pidgen = (Boolean) parentContextMap.get("pidgen");
			}
			if (parentContextMap.containsKey("PIDURL")) {
				context.PIDURL = (String) parentContextMap.get("PIDURL");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderODM")) {
				context.folderODM = (String) parentContextMap.get("folderODM");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("importSingleFile")) {
				context.importSingleFile = (Boolean) parentContextMap
						.get("importSingleFile");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("ItemData")) {
				context.ItemData = (String) parentContextMap.get("ItemData");
			}
			if (parentContextMap.containsKey("ItemDataAny")) {
				context.ItemDataAny = (String) parentContextMap
						.get("ItemDataAny");
			}
			if (parentContextMap.containsKey("ItemDataBase64Binary")) {
				context.ItemDataBase64Binary = (String) parentContextMap
						.get("ItemDataBase64Binary");
			}
			if (parentContextMap.containsKey("ItemDataBase64Float")) {
				context.ItemDataBase64Float = (String) parentContextMap
						.get("ItemDataBase64Float");
			}
			if (parentContextMap.containsKey("ItemDataBoolean")) {
				context.ItemDataBoolean = (String) parentContextMap
						.get("ItemDataBoolean");
			}
			if (parentContextMap.containsKey("ItemDataDate")) {
				context.ItemDataDate = (String) parentContextMap
						.get("ItemDataDate");
			}
			if (parentContextMap.containsKey("ItemDataDatetime")) {
				context.ItemDataDatetime = (String) parentContextMap
						.get("ItemDataDatetime");
			}
			if (parentContextMap.containsKey("ItemDataDouble")) {
				context.ItemDataDouble = (String) parentContextMap
						.get("ItemDataDouble");
			}
			if (parentContextMap.containsKey("ItemDataDurationDatetime")) {
				context.ItemDataDurationDatetime = (String) parentContextMap
						.get("ItemDataDurationDatetime");
			}
			if (parentContextMap.containsKey("ItemDataFloat")) {
				context.ItemDataFloat = (String) parentContextMap
						.get("ItemDataFloat");
			}
			if (parentContextMap.containsKey("ItemDataHexBinary")) {
				context.ItemDataHexBinary = (String) parentContextMap
						.get("ItemDataHexBinary");
			}
			if (parentContextMap.containsKey("ItemDataHexFloat")) {
				context.ItemDataHexFloat = (String) parentContextMap
						.get("ItemDataHexFloat");
			}
			if (parentContextMap.containsKey("ItemDataIncompleteDatetime")) {
				context.ItemDataIncompleteDatetime = (String) parentContextMap
						.get("ItemDataIncompleteDatetime");
			}
			if (parentContextMap.containsKey("ItemDataInteger")) {
				context.ItemDataInteger = (String) parentContextMap
						.get("ItemDataInteger");
			}
			if (parentContextMap.containsKey("ItemDataIntervalDatetime")) {
				context.ItemDataIntervalDatetime = (String) parentContextMap
						.get("ItemDataIntervalDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialDate")) {
				context.ItemDataPartialDate = (String) parentContextMap
						.get("ItemDataPartialDate");
			}
			if (parentContextMap.containsKey("ItemDataPartialDatetime")) {
				context.ItemDataPartialDatetime = (String) parentContextMap
						.get("ItemDataPartialDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialTime")) {
				context.ItemDataPartialTime = (String) parentContextMap
						.get("ItemDataPartialTime");
			}
			if (parentContextMap.containsKey("ItemDataString")) {
				context.ItemDataString = (String) parentContextMap
						.get("ItemDataString");
			}
			if (parentContextMap.containsKey("ItemDataTime")) {
				context.ItemDataTime = (String) parentContextMap
						.get("ItemDataTime");
			}
			if (parentContextMap.containsKey("ItemDataURI")) {
				context.ItemDataURI = (String) parentContextMap
						.get("ItemDataURI");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
			if (parentContextMap.containsKey("xslt")) {
				context.xslt = (String) parentContextMap.get("xslt");
			}
			if (parentContextMap.containsKey("xslt_namespace")) {
				context.xslt_namespace = (String) parentContextMap
						.get("xslt_namespace");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

			e_tLibraryLoad_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : IDRT_to_DB_Schema");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1354521 characters generated by Talend Open Studio for Data Integration on
 * the October 14, 2014 4:23:18 PM CEST
 ************************************************************************************************/
