// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.mdr_idrt_anbindung_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.enc_num_routine;
import routines.Visit;
import routines.test2;
import routines.Mathematical;
import routines.test1;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.KKNMS;
import routines.PIDGen;
import routines.TalendString;
import routines.SIC_old;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: MDR_IDRT_Anbindung Purpose: Verkn√ºpft den MDR-Job mit den IDRT-Jobs<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class MDR_IDRT_Anbindung implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (ItemDataAny != null) {

				this.setProperty("ItemDataAny", ItemDataAny.toString());

			}

			if (ItemDataBase64Binary != null) {

				this.setProperty("ItemDataBase64Binary",
						ItemDataBase64Binary.toString());

			}

			if (ItemDataBase64Float != null) {

				this.setProperty("ItemDataBase64Float",
						ItemDataBase64Float.toString());

			}

			if (ItemDataBoolean != null) {

				this.setProperty("ItemDataBoolean", ItemDataBoolean.toString());

			}

			if (ItemDataDate != null) {

				this.setProperty("ItemDataDate", ItemDataDate.toString());

			}

			if (ItemDataDatetime != null) {

				this.setProperty("ItemDataDatetime",
						ItemDataDatetime.toString());

			}

			if (ItemDataDouble != null) {

				this.setProperty("ItemDataDouble", ItemDataDouble.toString());

			}

			if (ItemDataDurationDatetime != null) {

				this.setProperty("ItemDataDurationDatetime",
						ItemDataDurationDatetime.toString());

			}

			if (ItemDataFloat != null) {

				this.setProperty("ItemDataFloat", ItemDataFloat.toString());

			}

			if (ItemDataHexBinary != null) {

				this.setProperty("ItemDataHexBinary",
						ItemDataHexBinary.toString());

			}

			if (ItemDataHexFloat != null) {

				this.setProperty("ItemDataHexFloat",
						ItemDataHexFloat.toString());

			}

			if (ItemDataIncompleteDatetime != null) {

				this.setProperty("ItemDataIncompleteDatetime",
						ItemDataIncompleteDatetime.toString());

			}

			if (ItemDataInteger != null) {

				this.setProperty("ItemDataInteger", ItemDataInteger.toString());

			}

			if (ItemDataIntervalDatetime != null) {

				this.setProperty("ItemDataIntervalDatetime",
						ItemDataIntervalDatetime.toString());

			}

			if (ItemDataPartialDate != null) {

				this.setProperty("ItemDataPartialDate",
						ItemDataPartialDate.toString());

			}

			if (ItemDataPartialDatetime != null) {

				this.setProperty("ItemDataPartialDatetime",
						ItemDataPartialDatetime.toString());

			}

			if (ItemDataPartialTime != null) {

				this.setProperty("ItemDataPartialTime",
						ItemDataPartialTime.toString());

			}

			if (ItemDataString != null) {

				this.setProperty("ItemDataString", ItemDataString.toString());

			}

			if (ItemDataTime != null) {

				this.setProperty("ItemDataTime", ItemDataTime.toString());

			}

			if (ItemDataURI != null) {

				this.setProperty("ItemDataURI", ItemDataURI.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (folderODM != null) {

				this.setProperty("folderODM", folderODM.toString());

			}

			if (xslt != null) {

				this.setProperty("xslt", xslt.toString());

			}

			if (ItemData != null) {

				this.setProperty("ItemData", ItemData.toString());

			}

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (xslt_namespace != null) {

				this.setProperty("xslt_namespace", xslt_namespace.toString());

			}

			if (importSingleFile != null) {

				this.setProperty("importSingleFile",
						importSingleFile.toString());

			}

			if (importCodelist != null) {

				this.setProperty("importCodelist", importCodelist.toString());

			}

			if (MDRStartDesignation != null) {

				this.setProperty("MDRStartDesignation",
						MDRStartDesignation.toString());

			}

			if (MDRBaseURLPort != null) {

				this.setProperty("MDRBaseURLPort", MDRBaseURLPort.toString());

			}

			if (MDRInstance != null) {

				this.setProperty("MDRInstance", MDRInstance.toString());

			}

			if (MDRPassword != null) {

				this.setProperty("MDRPassword", MDRPassword.toString());

			}

			if (fileOnt != null) {

				this.setProperty("fileOnt", fileOnt.toString());

			}

			if (MDRUsername != null) {

				this.setProperty("MDRUsername", MDRUsername.toString());

			}

			if (folderTemp != null) {

				this.setProperty("folderTemp", folderTemp.toString());

			}

			if (MDRBaseURL != null) {

				this.setProperty("MDRBaseURL", MDRBaseURL.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (idFile != null) {

				this.setProperty("idFile", idFile.toString());

			}

			if (truncateQueries != null) {

				this.setProperty("truncateQueries", truncateQueries.toString());

			}

			if (exportDBConfig != null) {

				this.setProperty("exportDBConfig", exportDBConfig.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (FTPPassword != null) {

				this.setProperty("FTPPassword", FTPPassword.toString());

			}

			if (PIDURL != null) {

				this.setProperty("PIDURL", PIDURL.toString());

			}

			if (dbImport != null) {

				this.setProperty("dbImport", dbImport.toString());

			}

			if (FTPUser != null) {

				this.setProperty("FTPUser", FTPUser.toString());

			}

			if (pidgen != null) {

				this.setProperty("pidgen", pidgen.toString());

			}

			if (coding != null) {

				this.setProperty("coding", coding.toString());

			}

			if (cleanUp != null) {

				this.setProperty("cleanUp", cleanUp.toString());

			}

			if (ontMod != null) {

				this.setProperty("ontMod", ontMod.toString());

			}

			if (currentOntRow != null) {

				this.setProperty("currentOntRow", currentOntRow.toString());

			}

			if (ontRows != null) {

				this.setProperty("ontRows", ontRows.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_TargetI2B2_DriverClass != null) {

				this.setProperty("DB_TargetI2B2_DriverClass",
						DB_TargetI2B2_DriverClass.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (DB_TargetI2B2_DatabaseType != null) {

				this.setProperty("DB_TargetI2B2_DatabaseType",
						DB_TargetI2B2_DatabaseType.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String ItemDataAny;

		public String getItemDataAny() {
			return this.ItemDataAny;
		}

		public String ItemDataBase64Binary;

		public String getItemDataBase64Binary() {
			return this.ItemDataBase64Binary;
		}

		public String ItemDataBase64Float;

		public String getItemDataBase64Float() {
			return this.ItemDataBase64Float;
		}

		public String ItemDataBoolean;

		public String getItemDataBoolean() {
			return this.ItemDataBoolean;
		}

		public String ItemDataDate;

		public String getItemDataDate() {
			return this.ItemDataDate;
		}

		public String ItemDataDatetime;

		public String getItemDataDatetime() {
			return this.ItemDataDatetime;
		}

		public String ItemDataDouble;

		public String getItemDataDouble() {
			return this.ItemDataDouble;
		}

		public String ItemDataDurationDatetime;

		public String getItemDataDurationDatetime() {
			return this.ItemDataDurationDatetime;
		}

		public String ItemDataFloat;

		public String getItemDataFloat() {
			return this.ItemDataFloat;
		}

		public String ItemDataHexBinary;

		public String getItemDataHexBinary() {
			return this.ItemDataHexBinary;
		}

		public String ItemDataHexFloat;

		public String getItemDataHexFloat() {
			return this.ItemDataHexFloat;
		}

		public String ItemDataIncompleteDatetime;

		public String getItemDataIncompleteDatetime() {
			return this.ItemDataIncompleteDatetime;
		}

		public String ItemDataInteger;

		public String getItemDataInteger() {
			return this.ItemDataInteger;
		}

		public String ItemDataIntervalDatetime;

		public String getItemDataIntervalDatetime() {
			return this.ItemDataIntervalDatetime;
		}

		public String ItemDataPartialDate;

		public String getItemDataPartialDate() {
			return this.ItemDataPartialDate;
		}

		public String ItemDataPartialDatetime;

		public String getItemDataPartialDatetime() {
			return this.ItemDataPartialDatetime;
		}

		public String ItemDataPartialTime;

		public String getItemDataPartialTime() {
			return this.ItemDataPartialTime;
		}

		public String ItemDataString;

		public String getItemDataString() {
			return this.ItemDataString;
		}

		public String ItemDataTime;

		public String getItemDataTime() {
			return this.ItemDataTime;
		}

		public String ItemDataURI;

		public String getItemDataURI() {
			return this.ItemDataURI;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String folderODM;

		public String getFolderODM() {
			return this.folderODM;
		}

		public String xslt;

		public String getXslt() {
			return this.xslt;
		}

		public String ItemData;

		public String getItemData() {
			return this.ItemData;
		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String xslt_namespace;

		public String getXslt_namespace() {
			return this.xslt_namespace;
		}

		public Boolean importSingleFile;

		public Boolean getImportSingleFile() {
			return this.importSingleFile;
		}

		public Boolean importCodelist;

		public Boolean getImportCodelist() {
			return this.importCodelist;
		}

		public String MDRStartDesignation;

		public String getMDRStartDesignation() {
			return this.MDRStartDesignation;
		}

		public String MDRBaseURLPort;

		public String getMDRBaseURLPort() {
			return this.MDRBaseURLPort;
		}

		public String MDRInstance;

		public String getMDRInstance() {
			return this.MDRInstance;
		}

		public java.lang.String MDRPassword;

		public java.lang.String getMDRPassword() {
			return this.MDRPassword;
		}

		public String fileOnt;

		public String getFileOnt() {
			return this.fileOnt;
		}

		public String MDRUsername;

		public String getMDRUsername() {
			return this.MDRUsername;
		}

		public String folderTemp;

		public String getFolderTemp() {
			return this.folderTemp;
		}

		public String MDRBaseURL;

		public String getMDRBaseURL() {
			return this.MDRBaseURL;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String idFile;

		public String getIdFile() {
			return this.idFile;
		}

		public Boolean truncateQueries;

		public Boolean getTruncateQueries() {
			return this.truncateQueries;
		}

		public String exportDBConfig;

		public String getExportDBConfig() {
			return this.exportDBConfig;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public java.lang.String FTPPassword;

		public java.lang.String getFTPPassword() {
			return this.FTPPassword;
		}

		public String PIDURL;

		public String getPIDURL() {
			return this.PIDURL;
		}

		public Boolean dbImport;

		public Boolean getDbImport() {
			return this.dbImport;
		}

		public String FTPUser;

		public String getFTPUser() {
			return this.FTPUser;
		}

		public Boolean pidgen;

		public Boolean getPidgen() {
			return this.pidgen;
		}

		public String coding;

		public String getCoding() {
			return this.coding;
		}

		public Boolean cleanUp;

		public Boolean getCleanUp() {
			return this.cleanUp;
		}

		public Integer ontMod;

		public Integer getOntMod() {
			return this.ontMod;
		}

		public Integer currentOntRow;

		public Integer getCurrentOntRow() {
			return this.currentOntRow;
		}

		public Integer ontRows;

		public Integer getOntRows() {
			return this.ontRows;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_TargetI2B2_DriverClass;

		public String getDB_TargetI2B2_DriverClass() {
			return this.DB_TargetI2B2_DriverClass;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public String DB_TargetI2B2_DatabaseType;

		public String getDB_TargetI2B2_DatabaseType() {
			return this.DB_TargetI2B2_DatabaseType;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MDR_IDRT_Anbindung";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MDR_IDRT_Anbindung.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MDR_IDRT_Anbindung.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres")) {
					context.DB_StagingI2B2_jdbcurl = "jdbc:postgresql://"
							+ context.DB_StagingI2B2_Host + ":"
							+ context.DB_StagingI2B2_Port + "/"
							+ context.DB_StagingI2B2_Instance;
					context.DB_StagingI2B2_DriverClass = "org.postgresql.Driver";
					System.out.println("Postgres Database");
				} else {
					System.out.println("Oracle Database");
					context.DB_StagingI2B2_DriverClass = "oracle.jdbc.driver.OracleDriver";
					context.DB_StagingI2B2_jdbcurl = "jdbc:oracle:thin:@"
							+ context.DB_StagingI2B2_Host + ":"
							+ context.DB_StagingI2B2_Port + ":"
							+ context.DB_StagingI2B2_Instance;
				}

				System.out.println("***************");
				System.out.println(context.folderMain);
				System.out.println(context.folderMain + context.fileOnt);
				System.out.println("***************");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("folderTmp", context.folderTmp);

				parentContextMap_tRunJob_1.put("ItemDataAny",
						context.ItemDataAny);

				parentContextMap_tRunJob_1.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);

				parentContextMap_tRunJob_1.put("ItemDataBase64Float",
						context.ItemDataBase64Float);

				parentContextMap_tRunJob_1.put("ItemDataBoolean",
						context.ItemDataBoolean);

				parentContextMap_tRunJob_1.put("ItemDataDate",
						context.ItemDataDate);

				parentContextMap_tRunJob_1.put("ItemDataDatetime",
						context.ItemDataDatetime);

				parentContextMap_tRunJob_1.put("ItemDataDouble",
						context.ItemDataDouble);

				parentContextMap_tRunJob_1.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);

				parentContextMap_tRunJob_1.put("ItemDataFloat",
						context.ItemDataFloat);

				parentContextMap_tRunJob_1.put("ItemDataHexBinary",
						context.ItemDataHexBinary);

				parentContextMap_tRunJob_1.put("ItemDataHexFloat",
						context.ItemDataHexFloat);

				parentContextMap_tRunJob_1.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);

				parentContextMap_tRunJob_1.put("ItemDataInteger",
						context.ItemDataInteger);

				parentContextMap_tRunJob_1.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);

				parentContextMap_tRunJob_1.put("ItemDataPartialDate",
						context.ItemDataPartialDate);

				parentContextMap_tRunJob_1.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);

				parentContextMap_tRunJob_1.put("ItemDataPartialTime",
						context.ItemDataPartialTime);

				parentContextMap_tRunJob_1.put("ItemDataString",
						context.ItemDataString);

				parentContextMap_tRunJob_1.put("ItemDataTime",
						context.ItemDataTime);

				parentContextMap_tRunJob_1.put("ItemDataURI",
						context.ItemDataURI);

				parentContextMap_tRunJob_1.put("folderOutput",
						context.folderOutput);

				parentContextMap_tRunJob_1.put("currentFile",
						context.currentFile);

				parentContextMap_tRunJob_1
						.put("concept_cd", context.concept_cd);

				parentContextMap_tRunJob_1.put("concept_path",
						context.concept_path);

				parentContextMap_tRunJob_1.put("i2b2HeadNode",
						context.i2b2HeadNode);

				parentContextMap_tRunJob_1.put("MDPD", context.MDPD);

				parentContextMap_tRunJob_1.put("MDPDName", context.MDPDName);

				parentContextMap_tRunJob_1.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);

				parentContextMap_tRunJob_1.put("includePids",
						context.includePids);

				parentContextMap_tRunJob_1.put("folderODM", context.folderODM);

				parentContextMap_tRunJob_1.put("xslt", context.xslt);

				parentContextMap_tRunJob_1.put("ItemData", context.ItemData);

				parentContextMap_tRunJob_1.put("encoding", context.encoding);

				parentContextMap_tRunJob_1.put("xslt_namespace",
						context.xslt_namespace);

				parentContextMap_tRunJob_1.put("importSingleFile",
						context.importSingleFile);

				parentContextMap_tRunJob_1.put("importCodelist",
						context.importCodelist);

				parentContextMap_tRunJob_1.put("MDRStartDesignation",
						context.MDRStartDesignation);

				parentContextMap_tRunJob_1.put("MDRBaseURLPort",
						context.MDRBaseURLPort);

				parentContextMap_tRunJob_1.put("MDRInstance",
						context.MDRInstance);

				parentContextMap_tRunJob_1.put("MDRPassword",
						context.MDRPassword);

				parentContextMap_tRunJob_1.put("fileOnt", context.fileOnt);

				parentContextMap_tRunJob_1.put("MDRUsername",
						context.MDRUsername);

				parentContextMap_tRunJob_1
						.put("folderTemp", context.folderTemp);

				parentContextMap_tRunJob_1
						.put("MDRBaseURL", context.MDRBaseURL);

				parentContextMap_tRunJob_1
						.put("folderMain", context.folderMain);

				parentContextMap_tRunJob_1.put("idFile", context.idFile);

				parentContextMap_tRunJob_1.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_1.put("exportDBConfig",
						context.exportDBConfig);

				parentContextMap_tRunJob_1.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_1.put("FTPPassword",
						context.FTPPassword);

				parentContextMap_tRunJob_1.put("PIDURL", context.PIDURL);

				parentContextMap_tRunJob_1.put("dbImport", context.dbImport);

				parentContextMap_tRunJob_1.put("FTPUser", context.FTPUser);

				parentContextMap_tRunJob_1.put("pidgen", context.pidgen);

				parentContextMap_tRunJob_1.put("coding", context.coding);

				parentContextMap_tRunJob_1.put("cleanUp", context.cleanUp);

				parentContextMap_tRunJob_1.put("ontMod", context.ontMod);

				parentContextMap_tRunJob_1.put("currentOntRow",
						context.currentOntRow);

				parentContextMap_tRunJob_1.put("ontRows", context.ontRows);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = context.folderMain;
				paraList_tRunJob_1.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("folderMain", obj_tRunJob_1);

				obj_tRunJob_1 = context.MDRStartDesignation;
				paraList_tRunJob_1.add("--context_param MDRStartDesignation="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("MDRStartDesignation",
						obj_tRunJob_1);

				i2b2_postgres2.mdr_init_0_1.MDR_Init childJob_tRunJob_1 = new i2b2_postgres2.mdr_init_0_1.MDR_Init();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileCopy_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_1 begin ] start
				 */

				ok_Hash.put("tFileCopy_1", false);
				start_Hash.put("tFileCopy_1", System.currentTimeMillis());

				currentComponent = "tFileCopy_1";

				int tos_count_tFileCopy_1 = 0;

				/**
				 * [tFileCopy_1 begin ] stop
				 */

				/**
				 * [tFileCopy_1 main ] start
				 */

				currentComponent = "tFileCopy_1";

				String srcFileName_tFileCopy_1 = context.folderMain
						+ context.fileOnt;

				java.io.File srcFile_tFileCopy_1 = new java.io.File(
						srcFileName_tFileCopy_1);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_1.exists()
						|| !srcFile_tFileCopy_1.isFile()) {
					throw new RuntimeException("The source File \""
							+ srcFileName_tFileCopy_1
							+ "\" does not exist or is not a file.");
				}

				String desDirName_tFileCopy_1 = context.folderMain
						+ context.folderOutput;

				String desFileName_tFileCopy_1 = srcFile_tFileCopy_1.getName();

				if (desFileName_tFileCopy_1 != null
						&& ("").equals(desFileName_tFileCopy_1.trim())) {
					desFileName_tFileCopy_1 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_1 = new java.io.File(
						desDirName_tFileCopy_1, desFileName_tFileCopy_1);

				if (!srcFile_tFileCopy_1.getPath().equals(
						desFile_tFileCopy_1.getPath())) {
					java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1
							.getParentFile();

					if (parentFile_tFileCopy_1 != null
							&& !parentFile_tFileCopy_1.exists()) {
						parentFile_tFileCopy_1.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(),
							desFile_tFileCopy_1.getPath(), true);
					java.io.File isRemoved_tFileCopy_1 = new java.io.File(
							context.folderMain + context.fileOnt);
					if (isRemoved_tFileCopy_1.exists()) {
						System.err
								.println("The source file could not be removed from the folder because it is open or you only have read-only rights.\n");
					}

				}
				globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",
						desFile_tFileCopy_1.getPath());
				globalMap.put("tFileCopy_1_DESTINATION_FILENAME",
						desFile_tFileCopy_1.getName());

				globalMap.put("tFileCopy_1_SOURCE_DIRECTORY",
						srcFile_tFileCopy_1.getParent());
				globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY",
						desFile_tFileCopy_1.getParent());

				tos_count_tFileCopy_1++;

				/**
				 * [tFileCopy_1 main ] stop
				 */

				/**
				 * [tFileCopy_1 end ] start
				 */

				currentComponent = "tFileCopy_1";

				ok_Hash.put("tFileCopy_1", true);
				end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				/**
				 * [tFileCopy_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileCopy_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileCopy_1 finally ] start
				 */

				currentComponent = "tFileCopy_1";

				/**
				 * [tFileCopy_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
						&& childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_4 = context
						.propertyNames();
				while (propertyNames_tRunJob_4.hasMoreElements()) {
					String key_tRunJob_4 = (String) propertyNames_tRunJob_4
							.nextElement();
					Object value_tRunJob_4 = (Object) context
							.get(key_tRunJob_4);
					paraList_tRunJob_4.add("--context_param " + key_tRunJob_4
							+ "=" + value_tRunJob_4);
				}

				parentContextMap_tRunJob_4.put("folderTmp", context.folderTmp);

				parentContextMap_tRunJob_4.put("ItemDataAny",
						context.ItemDataAny);

				parentContextMap_tRunJob_4.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);

				parentContextMap_tRunJob_4.put("ItemDataBase64Float",
						context.ItemDataBase64Float);

				parentContextMap_tRunJob_4.put("ItemDataBoolean",
						context.ItemDataBoolean);

				parentContextMap_tRunJob_4.put("ItemDataDate",
						context.ItemDataDate);

				parentContextMap_tRunJob_4.put("ItemDataDatetime",
						context.ItemDataDatetime);

				parentContextMap_tRunJob_4.put("ItemDataDouble",
						context.ItemDataDouble);

				parentContextMap_tRunJob_4.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);

				parentContextMap_tRunJob_4.put("ItemDataFloat",
						context.ItemDataFloat);

				parentContextMap_tRunJob_4.put("ItemDataHexBinary",
						context.ItemDataHexBinary);

				parentContextMap_tRunJob_4.put("ItemDataHexFloat",
						context.ItemDataHexFloat);

				parentContextMap_tRunJob_4.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);

				parentContextMap_tRunJob_4.put("ItemDataInteger",
						context.ItemDataInteger);

				parentContextMap_tRunJob_4.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);

				parentContextMap_tRunJob_4.put("ItemDataPartialDate",
						context.ItemDataPartialDate);

				parentContextMap_tRunJob_4.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);

				parentContextMap_tRunJob_4.put("ItemDataPartialTime",
						context.ItemDataPartialTime);

				parentContextMap_tRunJob_4.put("ItemDataString",
						context.ItemDataString);

				parentContextMap_tRunJob_4.put("ItemDataTime",
						context.ItemDataTime);

				parentContextMap_tRunJob_4.put("ItemDataURI",
						context.ItemDataURI);

				parentContextMap_tRunJob_4.put("folderOutput",
						context.folderOutput);

				parentContextMap_tRunJob_4.put("currentFile",
						context.currentFile);

				parentContextMap_tRunJob_4
						.put("concept_cd", context.concept_cd);

				parentContextMap_tRunJob_4.put("concept_path",
						context.concept_path);

				parentContextMap_tRunJob_4.put("i2b2HeadNode",
						context.i2b2HeadNode);

				parentContextMap_tRunJob_4.put("MDPD", context.MDPD);

				parentContextMap_tRunJob_4.put("MDPDName", context.MDPDName);

				parentContextMap_tRunJob_4.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);

				parentContextMap_tRunJob_4.put("includePids",
						context.includePids);

				parentContextMap_tRunJob_4.put("folderODM", context.folderODM);

				parentContextMap_tRunJob_4.put("xslt", context.xslt);

				parentContextMap_tRunJob_4.put("ItemData", context.ItemData);

				parentContextMap_tRunJob_4.put("encoding", context.encoding);

				parentContextMap_tRunJob_4.put("xslt_namespace",
						context.xslt_namespace);

				parentContextMap_tRunJob_4.put("importSingleFile",
						context.importSingleFile);

				parentContextMap_tRunJob_4.put("importCodelist",
						context.importCodelist);

				parentContextMap_tRunJob_4.put("MDRStartDesignation",
						context.MDRStartDesignation);

				parentContextMap_tRunJob_4.put("MDRBaseURLPort",
						context.MDRBaseURLPort);

				parentContextMap_tRunJob_4.put("MDRInstance",
						context.MDRInstance);

				parentContextMap_tRunJob_4.put("MDRPassword",
						context.MDRPassword);

				parentContextMap_tRunJob_4.put("fileOnt", context.fileOnt);

				parentContextMap_tRunJob_4.put("MDRUsername",
						context.MDRUsername);

				parentContextMap_tRunJob_4
						.put("folderTemp", context.folderTemp);

				parentContextMap_tRunJob_4
						.put("MDRBaseURL", context.MDRBaseURL);

				parentContextMap_tRunJob_4
						.put("folderMain", context.folderMain);

				parentContextMap_tRunJob_4.put("idFile", context.idFile);

				parentContextMap_tRunJob_4.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_4.put("exportDBConfig",
						context.exportDBConfig);

				parentContextMap_tRunJob_4.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_4.put("FTPPassword",
						context.FTPPassword);

				parentContextMap_tRunJob_4.put("PIDURL", context.PIDURL);

				parentContextMap_tRunJob_4.put("dbImport", context.dbImport);

				parentContextMap_tRunJob_4.put("FTPUser", context.FTPUser);

				parentContextMap_tRunJob_4.put("pidgen", context.pidgen);

				parentContextMap_tRunJob_4.put("coding", context.coding);

				parentContextMap_tRunJob_4.put("cleanUp", context.cleanUp);

				parentContextMap_tRunJob_4.put("ontMod", context.ontMod);

				parentContextMap_tRunJob_4.put("currentOntRow",
						context.currentOntRow);

				parentContextMap_tRunJob_4.put("ontRows", context.ontRows);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				Object obj_tRunJob_4 = null;

				obj_tRunJob_4 = context.folderMain;
				paraList_tRunJob_4.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
				parentContextMap_tRunJob_4.put("folderMain", obj_tRunJob_4);

				obj_tRunJob_4 = context.folderOutput;
				paraList_tRunJob_4.add("--context_param folderOutput="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
				parentContextMap_tRunJob_4.put("folderOutput", obj_tRunJob_4);

				i2b2_postgres2.mdr_create_conceptdimension_0_1.MDR_Create_ConceptDimension childJob_tRunJob_4 = new i2b2_postgres2.mdr_create_conceptdimension_0_1.MDR_Create_ConceptDimension();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(
								talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}

				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4
								.toArray(new String[paraList_tRunJob_4.size()]));

				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_4
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_4.getExceptionStackTrace());
				}

				if (childJob_tRunJob_4.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_4.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());

				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				/**
				 * [tRunJob_5 begin ] stop
				 */

				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

				paraList_tRunJob_5.add("--father_pid=" + pid);

				paraList_tRunJob_5.add("--root_pid=" + rootPid);

				paraList_tRunJob_5.add("--father_node=tRunJob_5");

				paraList_tRunJob_5.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_5.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
						&& childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_5");

				java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_5 = context
						.propertyNames();
				while (propertyNames_tRunJob_5.hasMoreElements()) {
					String key_tRunJob_5 = (String) propertyNames_tRunJob_5
							.nextElement();
					Object value_tRunJob_5 = (Object) context
							.get(key_tRunJob_5);
					paraList_tRunJob_5.add("--context_param " + key_tRunJob_5
							+ "=" + value_tRunJob_5);
				}

				parentContextMap_tRunJob_5.put("folderTmp", context.folderTmp);

				parentContextMap_tRunJob_5.put("ItemDataAny",
						context.ItemDataAny);

				parentContextMap_tRunJob_5.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);

				parentContextMap_tRunJob_5.put("ItemDataBase64Float",
						context.ItemDataBase64Float);

				parentContextMap_tRunJob_5.put("ItemDataBoolean",
						context.ItemDataBoolean);

				parentContextMap_tRunJob_5.put("ItemDataDate",
						context.ItemDataDate);

				parentContextMap_tRunJob_5.put("ItemDataDatetime",
						context.ItemDataDatetime);

				parentContextMap_tRunJob_5.put("ItemDataDouble",
						context.ItemDataDouble);

				parentContextMap_tRunJob_5.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);

				parentContextMap_tRunJob_5.put("ItemDataFloat",
						context.ItemDataFloat);

				parentContextMap_tRunJob_5.put("ItemDataHexBinary",
						context.ItemDataHexBinary);

				parentContextMap_tRunJob_5.put("ItemDataHexFloat",
						context.ItemDataHexFloat);

				parentContextMap_tRunJob_5.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);

				parentContextMap_tRunJob_5.put("ItemDataInteger",
						context.ItemDataInteger);

				parentContextMap_tRunJob_5.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);

				parentContextMap_tRunJob_5.put("ItemDataPartialDate",
						context.ItemDataPartialDate);

				parentContextMap_tRunJob_5.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);

				parentContextMap_tRunJob_5.put("ItemDataPartialTime",
						context.ItemDataPartialTime);

				parentContextMap_tRunJob_5.put("ItemDataString",
						context.ItemDataString);

				parentContextMap_tRunJob_5.put("ItemDataTime",
						context.ItemDataTime);

				parentContextMap_tRunJob_5.put("ItemDataURI",
						context.ItemDataURI);

				parentContextMap_tRunJob_5.put("folderOutput",
						context.folderOutput);

				parentContextMap_tRunJob_5.put("currentFile",
						context.currentFile);

				parentContextMap_tRunJob_5
						.put("concept_cd", context.concept_cd);

				parentContextMap_tRunJob_5.put("concept_path",
						context.concept_path);

				parentContextMap_tRunJob_5.put("i2b2HeadNode",
						context.i2b2HeadNode);

				parentContextMap_tRunJob_5.put("MDPD", context.MDPD);

				parentContextMap_tRunJob_5.put("MDPDName", context.MDPDName);

				parentContextMap_tRunJob_5.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);

				parentContextMap_tRunJob_5.put("includePids",
						context.includePids);

				parentContextMap_tRunJob_5.put("folderODM", context.folderODM);

				parentContextMap_tRunJob_5.put("xslt", context.xslt);

				parentContextMap_tRunJob_5.put("ItemData", context.ItemData);

				parentContextMap_tRunJob_5.put("encoding", context.encoding);

				parentContextMap_tRunJob_5.put("xslt_namespace",
						context.xslt_namespace);

				parentContextMap_tRunJob_5.put("importSingleFile",
						context.importSingleFile);

				parentContextMap_tRunJob_5.put("importCodelist",
						context.importCodelist);

				parentContextMap_tRunJob_5.put("MDRStartDesignation",
						context.MDRStartDesignation);

				parentContextMap_tRunJob_5.put("MDRBaseURLPort",
						context.MDRBaseURLPort);

				parentContextMap_tRunJob_5.put("MDRInstance",
						context.MDRInstance);

				parentContextMap_tRunJob_5.put("MDRPassword",
						context.MDRPassword);

				parentContextMap_tRunJob_5.put("fileOnt", context.fileOnt);

				parentContextMap_tRunJob_5.put("MDRUsername",
						context.MDRUsername);

				parentContextMap_tRunJob_5
						.put("folderTemp", context.folderTemp);

				parentContextMap_tRunJob_5
						.put("MDRBaseURL", context.MDRBaseURL);

				parentContextMap_tRunJob_5
						.put("folderMain", context.folderMain);

				parentContextMap_tRunJob_5.put("idFile", context.idFile);

				parentContextMap_tRunJob_5.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_5.put("exportDBConfig",
						context.exportDBConfig);

				parentContextMap_tRunJob_5.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_5.put("FTPPassword",
						context.FTPPassword);

				parentContextMap_tRunJob_5.put("PIDURL", context.PIDURL);

				parentContextMap_tRunJob_5.put("dbImport", context.dbImport);

				parentContextMap_tRunJob_5.put("FTPUser", context.FTPUser);

				parentContextMap_tRunJob_5.put("pidgen", context.pidgen);

				parentContextMap_tRunJob_5.put("coding", context.coding);

				parentContextMap_tRunJob_5.put("cleanUp", context.cleanUp);

				parentContextMap_tRunJob_5.put("ontMod", context.ontMod);

				parentContextMap_tRunJob_5.put("currentOntRow",
						context.currentOntRow);

				parentContextMap_tRunJob_5.put("ontRows", context.ontRows);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				Object obj_tRunJob_5 = null;

				obj_tRunJob_5 = context.folderMain;
				paraList_tRunJob_5.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				parentContextMap_tRunJob_5.put("folderMain", obj_tRunJob_5);

				obj_tRunJob_5 = context.folderOutput;
				paraList_tRunJob_5.add("--context_param folderOutput="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				parentContextMap_tRunJob_5.put("folderOutput", obj_tRunJob_5);

				System.out
						.println("tRunJob_5 in MDR_IDRT_Anbindung call i2b2_postgres2.mdr_check_root_1_0.MDR_Check_Root with:\n\n"
								+ paraList_tRunJob_5 + "\n");

				i2b2_postgres2.mdr_check_root_1_0.MDR_Check_Root childJob_tRunJob_5 = new i2b2_postgres2.mdr_check_root_1_0.MDR_Check_Root();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_5) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
							.entrySet()) {
						dataSources_tRunJob_5.put(
								talendDataSourceEntry_tRunJob_5.getKey(),
								talendDataSourceEntry_tRunJob_5.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
				}

				childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;

				String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
						.runJob((String[]) paraList_tRunJob_5
								.toArray(new String[paraList_tRunJob_5.size()]));

				errorCode = childJob_tRunJob_5.getErrorCode();

				if (childJob_tRunJob_5.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_5
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getErrorCode());
				}
				if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_5.getExceptionStackTrace());
				}

				if (childJob_tRunJob_5.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_5.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_5++;

				/**
				 * [tRunJob_5 main ] stop
				 */

				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("folderTmp", context.folderTmp);

				parentContextMap_tRunJob_2.put("ItemDataAny",
						context.ItemDataAny);

				parentContextMap_tRunJob_2.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);

				parentContextMap_tRunJob_2.put("ItemDataBase64Float",
						context.ItemDataBase64Float);

				parentContextMap_tRunJob_2.put("ItemDataBoolean",
						context.ItemDataBoolean);

				parentContextMap_tRunJob_2.put("ItemDataDate",
						context.ItemDataDate);

				parentContextMap_tRunJob_2.put("ItemDataDatetime",
						context.ItemDataDatetime);

				parentContextMap_tRunJob_2.put("ItemDataDouble",
						context.ItemDataDouble);

				parentContextMap_tRunJob_2.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);

				parentContextMap_tRunJob_2.put("ItemDataFloat",
						context.ItemDataFloat);

				parentContextMap_tRunJob_2.put("ItemDataHexBinary",
						context.ItemDataHexBinary);

				parentContextMap_tRunJob_2.put("ItemDataHexFloat",
						context.ItemDataHexFloat);

				parentContextMap_tRunJob_2.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);

				parentContextMap_tRunJob_2.put("ItemDataInteger",
						context.ItemDataInteger);

				parentContextMap_tRunJob_2.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);

				parentContextMap_tRunJob_2.put("ItemDataPartialDate",
						context.ItemDataPartialDate);

				parentContextMap_tRunJob_2.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);

				parentContextMap_tRunJob_2.put("ItemDataPartialTime",
						context.ItemDataPartialTime);

				parentContextMap_tRunJob_2.put("ItemDataString",
						context.ItemDataString);

				parentContextMap_tRunJob_2.put("ItemDataTime",
						context.ItemDataTime);

				parentContextMap_tRunJob_2.put("ItemDataURI",
						context.ItemDataURI);

				parentContextMap_tRunJob_2.put("folderOutput",
						context.folderOutput);

				parentContextMap_tRunJob_2.put("currentFile",
						context.currentFile);

				parentContextMap_tRunJob_2
						.put("concept_cd", context.concept_cd);

				parentContextMap_tRunJob_2.put("concept_path",
						context.concept_path);

				parentContextMap_tRunJob_2.put("i2b2HeadNode",
						context.i2b2HeadNode);

				parentContextMap_tRunJob_2.put("MDPD", context.MDPD);

				parentContextMap_tRunJob_2.put("MDPDName", context.MDPDName);

				parentContextMap_tRunJob_2.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);

				parentContextMap_tRunJob_2.put("includePids",
						context.includePids);

				parentContextMap_tRunJob_2.put("folderODM", context.folderODM);

				parentContextMap_tRunJob_2.put("xslt", context.xslt);

				parentContextMap_tRunJob_2.put("ItemData", context.ItemData);

				parentContextMap_tRunJob_2.put("encoding", context.encoding);

				parentContextMap_tRunJob_2.put("xslt_namespace",
						context.xslt_namespace);

				parentContextMap_tRunJob_2.put("importSingleFile",
						context.importSingleFile);

				parentContextMap_tRunJob_2.put("importCodelist",
						context.importCodelist);

				parentContextMap_tRunJob_2.put("MDRStartDesignation",
						context.MDRStartDesignation);

				parentContextMap_tRunJob_2.put("MDRBaseURLPort",
						context.MDRBaseURLPort);

				parentContextMap_tRunJob_2.put("MDRInstance",
						context.MDRInstance);

				parentContextMap_tRunJob_2.put("MDRPassword",
						context.MDRPassword);

				parentContextMap_tRunJob_2.put("fileOnt", context.fileOnt);

				parentContextMap_tRunJob_2.put("MDRUsername",
						context.MDRUsername);

				parentContextMap_tRunJob_2
						.put("folderTemp", context.folderTemp);

				parentContextMap_tRunJob_2
						.put("MDRBaseURL", context.MDRBaseURL);

				parentContextMap_tRunJob_2
						.put("folderMain", context.folderMain);

				parentContextMap_tRunJob_2.put("idFile", context.idFile);

				parentContextMap_tRunJob_2.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_2.put("exportDBConfig",
						context.exportDBConfig);

				parentContextMap_tRunJob_2.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_2.put("FTPPassword",
						context.FTPPassword);

				parentContextMap_tRunJob_2.put("PIDURL", context.PIDURL);

				parentContextMap_tRunJob_2.put("dbImport", context.dbImport);

				parentContextMap_tRunJob_2.put("FTPUser", context.FTPUser);

				parentContextMap_tRunJob_2.put("pidgen", context.pidgen);

				parentContextMap_tRunJob_2.put("coding", context.coding);

				parentContextMap_tRunJob_2.put("cleanUp", context.cleanUp);

				parentContextMap_tRunJob_2.put("ontMod", context.ontMod);

				parentContextMap_tRunJob_2.put("currentOntRow",
						context.currentOntRow);

				parentContextMap_tRunJob_2.put("ontRows", context.ontRows);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				Object obj_tRunJob_2 = null;

				System.out
						.println("tRunJob_2 in MDR_IDRT_Anbindung call i2b2_postgres2.idrt_to_db_schema_1_0.IDRT_to_DB_Schema with:\n\n"
								+ paraList_tRunJob_2 + "\n");

				i2b2_postgres2.idrt_to_db_schema_1_0.IDRT_to_DB_Schema childJob_tRunJob_2 = new i2b2_postgres2.idrt_to_db_schema_1_0.IDRT_to_DB_Schema();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("folderTmp", context.folderTmp);

				parentContextMap_tRunJob_3.put("ItemDataAny",
						context.ItemDataAny);

				parentContextMap_tRunJob_3.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);

				parentContextMap_tRunJob_3.put("ItemDataBase64Float",
						context.ItemDataBase64Float);

				parentContextMap_tRunJob_3.put("ItemDataBoolean",
						context.ItemDataBoolean);

				parentContextMap_tRunJob_3.put("ItemDataDate",
						context.ItemDataDate);

				parentContextMap_tRunJob_3.put("ItemDataDatetime",
						context.ItemDataDatetime);

				parentContextMap_tRunJob_3.put("ItemDataDouble",
						context.ItemDataDouble);

				parentContextMap_tRunJob_3.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);

				parentContextMap_tRunJob_3.put("ItemDataFloat",
						context.ItemDataFloat);

				parentContextMap_tRunJob_3.put("ItemDataHexBinary",
						context.ItemDataHexBinary);

				parentContextMap_tRunJob_3.put("ItemDataHexFloat",
						context.ItemDataHexFloat);

				parentContextMap_tRunJob_3.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);

				parentContextMap_tRunJob_3.put("ItemDataInteger",
						context.ItemDataInteger);

				parentContextMap_tRunJob_3.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);

				parentContextMap_tRunJob_3.put("ItemDataPartialDate",
						context.ItemDataPartialDate);

				parentContextMap_tRunJob_3.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);

				parentContextMap_tRunJob_3.put("ItemDataPartialTime",
						context.ItemDataPartialTime);

				parentContextMap_tRunJob_3.put("ItemDataString",
						context.ItemDataString);

				parentContextMap_tRunJob_3.put("ItemDataTime",
						context.ItemDataTime);

				parentContextMap_tRunJob_3.put("ItemDataURI",
						context.ItemDataURI);

				parentContextMap_tRunJob_3.put("folderOutput",
						context.folderOutput);

				parentContextMap_tRunJob_3.put("currentFile",
						context.currentFile);

				parentContextMap_tRunJob_3
						.put("concept_cd", context.concept_cd);

				parentContextMap_tRunJob_3.put("concept_path",
						context.concept_path);

				parentContextMap_tRunJob_3.put("i2b2HeadNode",
						context.i2b2HeadNode);

				parentContextMap_tRunJob_3.put("MDPD", context.MDPD);

				parentContextMap_tRunJob_3.put("MDPDName", context.MDPDName);

				parentContextMap_tRunJob_3.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);

				parentContextMap_tRunJob_3.put("includePids",
						context.includePids);

				parentContextMap_tRunJob_3.put("folderODM", context.folderODM);

				parentContextMap_tRunJob_3.put("xslt", context.xslt);

				parentContextMap_tRunJob_3.put("ItemData", context.ItemData);

				parentContextMap_tRunJob_3.put("encoding", context.encoding);

				parentContextMap_tRunJob_3.put("xslt_namespace",
						context.xslt_namespace);

				parentContextMap_tRunJob_3.put("importSingleFile",
						context.importSingleFile);

				parentContextMap_tRunJob_3.put("importCodelist",
						context.importCodelist);

				parentContextMap_tRunJob_3.put("MDRStartDesignation",
						context.MDRStartDesignation);

				parentContextMap_tRunJob_3.put("MDRBaseURLPort",
						context.MDRBaseURLPort);

				parentContextMap_tRunJob_3.put("MDRInstance",
						context.MDRInstance);

				parentContextMap_tRunJob_3.put("MDRPassword",
						context.MDRPassword);

				parentContextMap_tRunJob_3.put("fileOnt", context.fileOnt);

				parentContextMap_tRunJob_3.put("MDRUsername",
						context.MDRUsername);

				parentContextMap_tRunJob_3
						.put("folderTemp", context.folderTemp);

				parentContextMap_tRunJob_3
						.put("MDRBaseURL", context.MDRBaseURL);

				parentContextMap_tRunJob_3
						.put("folderMain", context.folderMain);

				parentContextMap_tRunJob_3.put("idFile", context.idFile);

				parentContextMap_tRunJob_3.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_3.put("exportDBConfig",
						context.exportDBConfig);

				parentContextMap_tRunJob_3.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_3.put("FTPPassword",
						context.FTPPassword);

				parentContextMap_tRunJob_3.put("PIDURL", context.PIDURL);

				parentContextMap_tRunJob_3.put("dbImport", context.dbImport);

				parentContextMap_tRunJob_3.put("FTPUser", context.FTPUser);

				parentContextMap_tRunJob_3.put("pidgen", context.pidgen);

				parentContextMap_tRunJob_3.put("coding", context.coding);

				parentContextMap_tRunJob_3.put("cleanUp", context.cleanUp);

				parentContextMap_tRunJob_3.put("ontMod", context.ontMod);

				parentContextMap_tRunJob_3.put("currentOntRow",
						context.currentOntRow);

				parentContextMap_tRunJob_3.put("ontRows", context.ontRows);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = context.folderMain;
				paraList_tRunJob_3.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("folderMain", obj_tRunJob_3);

				obj_tRunJob_3 = context.folderOutput;
				paraList_tRunJob_3.add("--context_param folderOutput="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("folderOutput", obj_tRunJob_3);

				i2b2_postgres2.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload childJob_tRunJob_3 = new i2b2_postgres2.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_3.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MDR_IDRT_Anbindung MDR_IDRT_AnbindungClass = new MDR_IDRT_Anbindung();

		int exitCode = MDR_IDRT_AnbindungClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MDR_IDRT_Anbindung.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/mdr_idrt_anbindung_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.ItemDataAny = (String) context.getProperty("ItemDataAny");
			context.ItemDataBase64Binary = (String) context
					.getProperty("ItemDataBase64Binary");
			context.ItemDataBase64Float = (String) context
					.getProperty("ItemDataBase64Float");
			context.ItemDataBoolean = (String) context
					.getProperty("ItemDataBoolean");
			context.ItemDataDate = (String) context.getProperty("ItemDataDate");
			context.ItemDataDatetime = (String) context
					.getProperty("ItemDataDatetime");
			context.ItemDataDouble = (String) context
					.getProperty("ItemDataDouble");
			context.ItemDataDurationDatetime = (String) context
					.getProperty("ItemDataDurationDatetime");
			context.ItemDataFloat = (String) context
					.getProperty("ItemDataFloat");
			context.ItemDataHexBinary = (String) context
					.getProperty("ItemDataHexBinary");
			context.ItemDataHexFloat = (String) context
					.getProperty("ItemDataHexFloat");
			context.ItemDataIncompleteDatetime = (String) context
					.getProperty("ItemDataIncompleteDatetime");
			context.ItemDataInteger = (String) context
					.getProperty("ItemDataInteger");
			context.ItemDataIntervalDatetime = (String) context
					.getProperty("ItemDataIntervalDatetime");
			context.ItemDataPartialDate = (String) context
					.getProperty("ItemDataPartialDate");
			context.ItemDataPartialDatetime = (String) context
					.getProperty("ItemDataPartialDatetime");
			context.ItemDataPartialTime = (String) context
					.getProperty("ItemDataPartialTime");
			context.ItemDataString = (String) context
					.getProperty("ItemDataString");
			context.ItemDataTime = (String) context.getProperty("ItemDataTime");
			context.ItemDataURI = (String) context.getProperty("ItemDataURI");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.currentFile = (String) context.getProperty("currentFile");
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.folderODM = (String) context.getProperty("folderODM");
			context.xslt = (String) context.getProperty("xslt");
			context.ItemData = (String) context.getProperty("ItemData");
			context.encoding = (String) context.getProperty("encoding");
			context.xslt_namespace = (String) context
					.getProperty("xslt_namespace");
			try {
				context.importSingleFile = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("importSingleFile"));
			} catch (NumberFormatException e) {
				context.importSingleFile = null;
			}
			try {
				context.importCodelist = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("importCodelist"));
			} catch (NumberFormatException e) {
				context.importCodelist = null;
			}
			context.MDRStartDesignation = (String) context
					.getProperty("MDRStartDesignation");
			context.MDRBaseURLPort = (String) context
					.getProperty("MDRBaseURLPort");
			context.MDRInstance = (String) context.getProperty("MDRInstance");
			String pwd_MDRPassword_value = context.getProperty("MDRPassword");
			context.MDRPassword = null;
			if (pwd_MDRPassword_value != null) {
				if (context_param.containsKey("MDRPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.MDRPassword = pwd_MDRPassword_value;
				} else if (!pwd_MDRPassword_value.isEmpty()) {
					try {
						context.MDRPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_MDRPassword_value);
						context.put("MDRPassword", context.MDRPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.fileOnt = (String) context.getProperty("fileOnt");
			context.MDRUsername = (String) context.getProperty("MDRUsername");
			context.folderTemp = (String) context.getProperty("folderTemp");
			context.MDRBaseURL = (String) context.getProperty("MDRBaseURL");
			context.folderMain = (String) context.getProperty("folderMain");
			context.idFile = (String) context.getProperty("idFile");
			try {
				context.truncateQueries = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateQueries"));
			} catch (NumberFormatException e) {
				context.truncateQueries = null;
			}
			context.exportDBConfig = (String) context
					.getProperty("exportDBConfig");
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			String pwd_FTPPassword_value = context.getProperty("FTPPassword");
			context.FTPPassword = null;
			if (pwd_FTPPassword_value != null) {
				if (context_param.containsKey("FTPPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.FTPPassword = pwd_FTPPassword_value;
				} else if (!pwd_FTPPassword_value.isEmpty()) {
					try {
						context.FTPPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_FTPPassword_value);
						context.put("FTPPassword", context.FTPPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.PIDURL = (String) context.getProperty("PIDURL");
			try {
				context.dbImport = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("dbImport"));
			} catch (NumberFormatException e) {
				context.dbImport = null;
			}
			context.FTPUser = (String) context.getProperty("FTPUser");
			try {
				context.pidgen = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("pidgen"));
			} catch (NumberFormatException e) {
				context.pidgen = null;
			}
			context.coding = (String) context.getProperty("coding");
			try {
				context.cleanUp = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("cleanUp"));
			} catch (NumberFormatException e) {
				context.cleanUp = null;
			}
			try {
				context.ontMod = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ontMod"));
			} catch (NumberFormatException e) {
				context.ontMod = null;
			}
			try {
				context.currentOntRow = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("currentOntRow"));
			} catch (NumberFormatException e) {
				context.currentOntRow = null;
			}
			try {
				context.ontRows = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ontRows"));
			} catch (NumberFormatException e) {
				context.ontRows = null;
			}
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_TargetI2B2_DriverClass = (String) context
					.getProperty("DB_TargetI2B2_DriverClass");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			context.DB_TargetI2B2_DatabaseType = (String) context
					.getProperty("DB_TargetI2B2_DatabaseType");
			String pwd_DB_TargetI2B2_Password_value = context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Password = null;
			if (pwd_DB_TargetI2B2_Password_value != null) {
				if (context_param.containsKey("DB_TargetI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_TargetI2B2_Password = pwd_DB_TargetI2B2_Password_value;
				} else if (!pwd_DB_TargetI2B2_Password_value.isEmpty()) {
					try {
						context.DB_TargetI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_TargetI2B2_Password_value);
						context.put("DB_TargetI2B2_Password",
								context.DB_TargetI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			String pwd_DB_StagingI2B2_Password_value = context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Password = null;
			if (pwd_DB_StagingI2B2_Password_value != null) {
				if (context_param.containsKey("DB_StagingI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_StagingI2B2_Password = pwd_DB_StagingI2B2_Password_value;
				} else if (!pwd_DB_StagingI2B2_Password_value.isEmpty()) {
					try {
						context.DB_StagingI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_StagingI2B2_Password_value);
						context.put("DB_StagingI2B2_Password",
								context.DB_StagingI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("ItemDataAny")) {
				context.ItemDataAny = (String) parentContextMap
						.get("ItemDataAny");
			}
			if (parentContextMap.containsKey("ItemDataBase64Binary")) {
				context.ItemDataBase64Binary = (String) parentContextMap
						.get("ItemDataBase64Binary");
			}
			if (parentContextMap.containsKey("ItemDataBase64Float")) {
				context.ItemDataBase64Float = (String) parentContextMap
						.get("ItemDataBase64Float");
			}
			if (parentContextMap.containsKey("ItemDataBoolean")) {
				context.ItemDataBoolean = (String) parentContextMap
						.get("ItemDataBoolean");
			}
			if (parentContextMap.containsKey("ItemDataDate")) {
				context.ItemDataDate = (String) parentContextMap
						.get("ItemDataDate");
			}
			if (parentContextMap.containsKey("ItemDataDatetime")) {
				context.ItemDataDatetime = (String) parentContextMap
						.get("ItemDataDatetime");
			}
			if (parentContextMap.containsKey("ItemDataDouble")) {
				context.ItemDataDouble = (String) parentContextMap
						.get("ItemDataDouble");
			}
			if (parentContextMap.containsKey("ItemDataDurationDatetime")) {
				context.ItemDataDurationDatetime = (String) parentContextMap
						.get("ItemDataDurationDatetime");
			}
			if (parentContextMap.containsKey("ItemDataFloat")) {
				context.ItemDataFloat = (String) parentContextMap
						.get("ItemDataFloat");
			}
			if (parentContextMap.containsKey("ItemDataHexBinary")) {
				context.ItemDataHexBinary = (String) parentContextMap
						.get("ItemDataHexBinary");
			}
			if (parentContextMap.containsKey("ItemDataHexFloat")) {
				context.ItemDataHexFloat = (String) parentContextMap
						.get("ItemDataHexFloat");
			}
			if (parentContextMap.containsKey("ItemDataIncompleteDatetime")) {
				context.ItemDataIncompleteDatetime = (String) parentContextMap
						.get("ItemDataIncompleteDatetime");
			}
			if (parentContextMap.containsKey("ItemDataInteger")) {
				context.ItemDataInteger = (String) parentContextMap
						.get("ItemDataInteger");
			}
			if (parentContextMap.containsKey("ItemDataIntervalDatetime")) {
				context.ItemDataIntervalDatetime = (String) parentContextMap
						.get("ItemDataIntervalDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialDate")) {
				context.ItemDataPartialDate = (String) parentContextMap
						.get("ItemDataPartialDate");
			}
			if (parentContextMap.containsKey("ItemDataPartialDatetime")) {
				context.ItemDataPartialDatetime = (String) parentContextMap
						.get("ItemDataPartialDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialTime")) {
				context.ItemDataPartialTime = (String) parentContextMap
						.get("ItemDataPartialTime");
			}
			if (parentContextMap.containsKey("ItemDataString")) {
				context.ItemDataString = (String) parentContextMap
						.get("ItemDataString");
			}
			if (parentContextMap.containsKey("ItemDataTime")) {
				context.ItemDataTime = (String) parentContextMap
						.get("ItemDataTime");
			}
			if (parentContextMap.containsKey("ItemDataURI")) {
				context.ItemDataURI = (String) parentContextMap
						.get("ItemDataURI");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("folderODM")) {
				context.folderODM = (String) parentContextMap.get("folderODM");
			}
			if (parentContextMap.containsKey("xslt")) {
				context.xslt = (String) parentContextMap.get("xslt");
			}
			if (parentContextMap.containsKey("ItemData")) {
				context.ItemData = (String) parentContextMap.get("ItemData");
			}
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("xslt_namespace")) {
				context.xslt_namespace = (String) parentContextMap
						.get("xslt_namespace");
			}
			if (parentContextMap.containsKey("importSingleFile")) {
				context.importSingleFile = (Boolean) parentContextMap
						.get("importSingleFile");
			}
			if (parentContextMap.containsKey("importCodelist")) {
				context.importCodelist = (Boolean) parentContextMap
						.get("importCodelist");
			}
			if (parentContextMap.containsKey("MDRStartDesignation")) {
				context.MDRStartDesignation = (String) parentContextMap
						.get("MDRStartDesignation");
			}
			if (parentContextMap.containsKey("MDRBaseURLPort")) {
				context.MDRBaseURLPort = (String) parentContextMap
						.get("MDRBaseURLPort");
			}
			if (parentContextMap.containsKey("MDRInstance")) {
				context.MDRInstance = (String) parentContextMap
						.get("MDRInstance");
			}
			if (parentContextMap.containsKey("MDRPassword")) {
				context.MDRPassword = (java.lang.String) parentContextMap
						.get("MDRPassword");
			}
			if (parentContextMap.containsKey("fileOnt")) {
				context.fileOnt = (String) parentContextMap.get("fileOnt");
			}
			if (parentContextMap.containsKey("MDRUsername")) {
				context.MDRUsername = (String) parentContextMap
						.get("MDRUsername");
			}
			if (parentContextMap.containsKey("folderTemp")) {
				context.folderTemp = (String) parentContextMap
						.get("folderTemp");
			}
			if (parentContextMap.containsKey("MDRBaseURL")) {
				context.MDRBaseURL = (String) parentContextMap
						.get("MDRBaseURL");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("idFile")) {
				context.idFile = (String) parentContextMap.get("idFile");
			}
			if (parentContextMap.containsKey("truncateQueries")) {
				context.truncateQueries = (Boolean) parentContextMap
						.get("truncateQueries");
			}
			if (parentContextMap.containsKey("exportDBConfig")) {
				context.exportDBConfig = (String) parentContextMap
						.get("exportDBConfig");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("FTPPassword")) {
				context.FTPPassword = (java.lang.String) parentContextMap
						.get("FTPPassword");
			}
			if (parentContextMap.containsKey("PIDURL")) {
				context.PIDURL = (String) parentContextMap.get("PIDURL");
			}
			if (parentContextMap.containsKey("dbImport")) {
				context.dbImport = (Boolean) parentContextMap.get("dbImport");
			}
			if (parentContextMap.containsKey("FTPUser")) {
				context.FTPUser = (String) parentContextMap.get("FTPUser");
			}
			if (parentContextMap.containsKey("pidgen")) {
				context.pidgen = (Boolean) parentContextMap.get("pidgen");
			}
			if (parentContextMap.containsKey("coding")) {
				context.coding = (String) parentContextMap.get("coding");
			}
			if (parentContextMap.containsKey("cleanUp")) {
				context.cleanUp = (Boolean) parentContextMap.get("cleanUp");
			}
			if (parentContextMap.containsKey("ontMod")) {
				context.ontMod = (Integer) parentContextMap.get("ontMod");
			}
			if (parentContextMap.containsKey("currentOntRow")) {
				context.currentOntRow = (Integer) parentContextMap
						.get("currentOntRow");
			}
			if (parentContextMap.containsKey("ontRows")) {
				context.ontRows = (Integer) parentContextMap.get("ontRows");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DriverClass")) {
				context.DB_TargetI2B2_DriverClass = (String) parentContextMap
						.get("DB_TargetI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DatabaseType")) {
				context.DB_TargetI2B2_DatabaseType = (String) parentContextMap
						.get("DB_TargetI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("MDRPassword");
		parametersToEncrypt.add("FTPPassword");
		parametersToEncrypt.add("DB_TargetI2B2_Password");
		parametersToEncrypt.add("DB_StagingI2B2_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : MDR_IDRT_Anbindung");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 137668 characters generated by Talend Open Studio for Data Integration on the
 * March 16, 2015 9:30:40 AM CET
 ************************************************************************************************/
