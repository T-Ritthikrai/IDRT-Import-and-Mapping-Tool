// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.mdr_query_contexts_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MDR_Query_Contexts Purpose: Fragt mit MDRID (aus Context) MDR ab und liefert Ergebnisse (gefiltert)<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class MDR_Query_Contexts implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (queryWorkFile != null) {

				this.setProperty("queryWorkFile", queryWorkFile.toString());

			}

			if (MDRStartDesignation != null) {

				this.setProperty("MDRStartDesignation",
						MDRStartDesignation.toString());

			}

			if (MDRBaseURLPort != null) {

				this.setProperty("MDRBaseURLPort", MDRBaseURLPort.toString());

			}

			if (MDRInstance != null) {

				this.setProperty("MDRInstance", MDRInstance.toString());

			}

			if (MDRPassword != null) {

				this.setProperty("MDRPassword", MDRPassword.toString());

			}

			if (fileOnt != null) {

				this.setProperty("fileOnt", fileOnt.toString());

			}

			if (MDRUsername != null) {

				this.setProperty("MDRUsername", MDRUsername.toString());

			}

			if (folderTemp != null) {

				this.setProperty("folderTemp", folderTemp.toString());

			}

			if (MDRBaseURL != null) {

				this.setProperty("MDRBaseURL", MDRBaseURL.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

		}

		public String queryWorkFile;

		public String getQueryWorkFile() {
			return this.queryWorkFile;
		}

		public String MDRStartDesignation;

		public String getMDRStartDesignation() {
			return this.MDRStartDesignation;
		}

		public String MDRBaseURLPort;

		public String getMDRBaseURLPort() {
			return this.MDRBaseURLPort;
		}

		public String MDRInstance;

		public String getMDRInstance() {
			return this.MDRInstance;
		}

		public java.lang.String MDRPassword;

		public java.lang.String getMDRPassword() {
			return this.MDRPassword;
		}

		public String fileOnt;

		public String getFileOnt() {
			return this.fileOnt;
		}

		public String MDRUsername;

		public String getMDRUsername() {
			return this.MDRUsername;
		}

		public String folderTemp;

		public String getFolderTemp() {
			return this.folderTemp;
		}

		public String MDRBaseURL;

		public String getMDRBaseURL() {
			return this.MDRBaseURL;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MDR_Query_Contexts";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MDR_Query_Contexts.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MDR_Query_Contexts.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputJSON_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class log2Struct implements
			routines.system.IPersistableRow<log2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.sign = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(log2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DataElementsToOntStruct implements
			routines.system.IPersistableRow<DataElementsToOntStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DataElementsToOntStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ContextsToOntFinalStruct implements
			routines.system.IPersistableRow<ContextsToOntFinalStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ContextsToOntFinalStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logco2Struct implements
			routines.system.IPersistableRow<logco2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.sign = readString(dis);

					this.item = readString(dis);

					this.id = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sign=" + sign);
			sb.append(",item=" + item);
			sb.append(",id=" + id);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logco2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ContextsToOntStruct implements
			routines.system.IPersistableRow<ContextsToOntStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ContextsToOntStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public String item;

		public String getItem() {
			return this.item;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.item = readString(dis);

					this.id = readString(dis);

					this.sign = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.item, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("item=" + item);
			sb.append(",id=" + id);
			sb.append(",sign=" + sign);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_Contexts, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_Contexts) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row26Struct row26 = new row26Struct();
				row25Struct row25 = new row25Struct();
				row9Struct row9 = new row9Struct();
				row1Struct row1 = new row1Struct();
				row17Struct row17 = new row17Struct();
				row18Struct row18 = new row18Struct();
				row8Struct row8 = new row8Struct();
				row3Struct row3 = new row3Struct();
				logco2Struct logco2 = new logco2Struct();
				ContextsToOntStruct ContextsToOnt = new ContextsToOntStruct();
				row5Struct row5 = new row5Struct();
				ContextsToOntFinalStruct ContextsToOntFinal = new ContextsToOntFinalStruct();
				row7Struct row7 = new row7Struct();
				row4Struct row4 = new row4Struct();
				row24Struct row24 = new row24Struct();
				row27Struct row27 = new row27Struct();
				row28Struct row28 = new row28Struct();
				row29Struct row29 = new row29Struct();
				row2Struct row2 = new row2Struct();
				log2Struct log2 = new log2Struct();
				DataElementsToOntStruct DataElementsToOnt = new DataElementsToOntStruct();
				row13Struct row13 = new row13Struct();
				row10Struct row10 = new row10Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tLogRow_15 begin ] start
				 */

				ok_Hash.put("tLogRow_15", false);
				start_Hash.put("tLogRow_15", System.currentTimeMillis());

				currentComponent = "tLogRow_15";

				int tos_count_tLogRow_15 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_15 = "|";
				java.io.PrintStream consoleOut_tLogRow_15 = null;

				StringBuilder strBuffer_tLogRow_15 = null;
				int nb_line_tLogRow_15 = 0;
				// /////////////////////

				/**
				 * [tLogRow_15 begin ] stop
				 */

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tFileInputJSON_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tLogRow_11 begin ] start
				 */

				ok_Hash.put("tLogRow_11", false);
				start_Hash.put("tLogRow_11", System.currentTimeMillis());

				currentComponent = "tLogRow_11";

				int tos_count_tLogRow_11 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_11 = "|";
				java.io.PrintStream consoleOut_tLogRow_11 = null;

				StringBuilder strBuffer_tLogRow_11 = null;
				int nb_line_tLogRow_11 = 0;
				// /////////////////////

				/**
				 * [tLogRow_11 begin ] stop
				 */

				/**
				 * [tFilterRow_11 begin ] start
				 */

				ok_Hash.put("tFilterRow_11", false);
				start_Hash.put("tFilterRow_11", System.currentTimeMillis());

				currentComponent = "tFilterRow_11";

				int tos_count_tFilterRow_11 = 0;

				int nb_line_tFilterRow_11 = 0;
				int nb_line_ok_tFilterRow_11 = 0;
				int nb_line_reject_tFilterRow_11 = 0;

				class Operator_tFilterRow_11 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_11(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_11 begin ] stop
				 */

				/**
				 * [tReplicate_7 begin ] start
				 */

				ok_Hash.put("tReplicate_7", false);
				start_Hash.put("tReplicate_7", System.currentTimeMillis());

				currentComponent = "tReplicate_7";

				int tos_count_tReplicate_7 = 0;

				/**
				 * [tReplicate_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.queryWorkFile/** End field tFileInputDelimited_3:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row6 = new row6Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.HLEVEL = null;

								row6.Name = null;

								row6.Path = null;

								row6.DataType = null;

								row6.Update_Date = null;

								row6.Import_Date = null;

								row6.Download_Date = null;

								row6.PathID = null;

								row6.visual = null;

								row6.codeList = null;

								row6.source = null;

								row6.xml = null;

								row6.m_applied_path = null;

								row6.itemID = null;

								row6.item = null;

							} else {

								for (int i_tFileInputDelimited_3 = 0; i_tFileInputDelimited_3 < rowtFileInputDelimited_3.length; i_tFileInputDelimited_3++) {
									rowtFileInputDelimited_3[i_tFileInputDelimited_3] = rowtFileInputDelimited_3[i_tFileInputDelimited_3]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row6.HLEVEL = null;
									}

								} else {
									row6.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.Name = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.Path = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.DataType = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy", false);

									} else {
										row6.Update_Date = null;
									}

								} else {
									row6.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy", false);

									} else {
										row6.Import_Date = null;
									}

								} else {
									row6.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy", false);

									} else {
										row6.Download_Date = null;
									}

								} else {
									row6.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.PathID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.visual = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.codeList = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.codeList = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.source = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.source = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.xml = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.m_applied_path = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.m_applied_path = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.itemID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.itemID = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.item = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.item = null;
								}

							}

							int filedsum = rowtFileInputDelimited_3.length;
							if (filedsum < (15)) {
								throw new java.lang.Exception(
										"Column(s) missing");
							} else if (filedsum > (15)) {
								throw new RuntimeException("Too many columns");
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tReplicate_7 main ] start
							 */

							currentComponent = "tReplicate_7";

							row26 = new row26Struct();

							row26.HLEVEL = row6.HLEVEL;
							row26.Name = row6.Name;
							row26.Path = row6.Path;
							row26.DataType = row6.DataType;
							row26.Update_Date = row6.Update_Date;
							row26.Import_Date = row6.Import_Date;
							row26.Download_Date = row6.Download_Date;
							row26.PathID = row6.PathID;
							row26.visual = row6.visual;
							row26.codeList = row6.codeList;
							row26.source = row6.source;
							row26.xml = row6.xml;
							row26.m_applied_path = row6.m_applied_path;
							row26.itemID = row6.itemID;
							row26.item = row6.item;
							row25 = new row25Struct();

							row25.HLEVEL = row6.HLEVEL;
							row25.Name = row6.Name;
							row25.Path = row6.Path;
							row25.DataType = row6.DataType;
							row25.Update_Date = row6.Update_Date;
							row25.Import_Date = row6.Import_Date;
							row25.Download_Date = row6.Download_Date;
							row25.PathID = row6.PathID;
							row25.visual = row6.visual;
							row25.codeList = row6.codeList;
							row25.source = row6.source;
							row25.xml = row6.xml;
							row25.m_applied_path = row6.m_applied_path;
							row25.itemID = row6.itemID;
							row25.item = row6.item;

							tos_count_tReplicate_7++;

							/**
							 * [tReplicate_7 main ] stop
							 */

							/**
							 * [tLogRow_15 main ] start
							 */

							currentComponent = "tLogRow_15";

							// /////////////////////

							strBuffer_tLogRow_15 = new StringBuilder();
							strBuffer_tLogRow_15.append("[tLogRow_15] ");

							if (row26.HLEVEL != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.HLEVEL));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.Name != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.Name));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.Path != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.Path));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.DataType != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.DataType));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.Update_Date != null) { //

								strBuffer_tLogRow_15.append(FormatterUtils
										.format_Date(row26.Update_Date,
												"dd-MM-yyyy"));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.Import_Date != null) { //

								strBuffer_tLogRow_15.append(FormatterUtils
										.format_Date(row26.Import_Date,
												"dd-MM-yyyy"));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.Download_Date != null) { //

								strBuffer_tLogRow_15.append(FormatterUtils
										.format_Date(row26.Download_Date,
												"dd-MM-yyyy"));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.PathID != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.PathID));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.visual != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.visual));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.codeList != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.codeList));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.source != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.source));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.xml != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.xml));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.m_applied_path != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.m_applied_path));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.itemID != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.itemID));

							} //

							strBuffer_tLogRow_15.append("|");

							if (row26.item != null) { //

								strBuffer_tLogRow_15.append(String
										.valueOf(row26.item));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_15 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_15);
							}

							consoleOut_tLogRow_15.println(strBuffer_tLogRow_15
									.toString());
							consoleOut_tLogRow_15.flush();
							nb_line_tLogRow_15++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_15++;

							/**
							 * [tLogRow_15 main ] stop
							 */

							/**
							 * [tFilterRow_11 main ] start
							 */

							currentComponent = "tFilterRow_11";

							row11 = null;
							row9 = null;
							Operator_tFilterRow_11 ope_tFilterRow_11 = new Operator_tFilterRow_11(
									"&&");
							ope_tFilterRow_11.matches(
									(// code sample : use row25 to define the
										// condition.
									// row25.columnName1.equals("foo")
									// ||!(row25.columnName2.equals("bar"))
									// replace the following expression by your
									// own filter condition
									row25.item.startsWith("urn:mdr:Context@")),
									"advanced condition failed");

							if (ope_tFilterRow_11.getMatchFlag()) {
								if (row9 == null) {
									row9 = new row9Struct();
								}
								row9.HLEVEL = row25.HLEVEL;
								row9.Name = row25.Name;
								row9.Path = row25.Path;
								row9.DataType = row25.DataType;
								row9.Update_Date = row25.Update_Date;
								row9.Import_Date = row25.Import_Date;
								row9.Download_Date = row25.Download_Date;
								row9.PathID = row25.PathID;
								row9.visual = row25.visual;
								row9.codeList = row25.codeList;
								row9.source = row25.source;
								row9.xml = row25.xml;
								row9.m_applied_path = row25.m_applied_path;
								row9.itemID = row25.itemID;
								row9.item = row25.item;
								nb_line_ok_tFilterRow_11++;
							} else {
								if (row11 == null) {
									row11 = new row11Struct();
								}
								row11.HLEVEL = row25.HLEVEL;
								row11.Name = row25.Name;
								row11.Path = row25.Path;
								row11.DataType = row25.DataType;
								row11.Update_Date = row25.Update_Date;
								row11.Import_Date = row25.Import_Date;
								row11.Download_Date = row25.Download_Date;
								row11.PathID = row25.PathID;
								row11.visual = row25.visual;
								row11.codeList = row25.codeList;
								row11.source = row25.source;
								row11.xml = row25.xml;
								row11.m_applied_path = row25.m_applied_path;
								row11.itemID = row25.itemID;
								row11.item = row25.item;
								row11.errorMessage = ope_tFilterRow_11
										.getErrorMsg();
								nb_line_reject_tFilterRow_11++;
							}

							nb_line_tFilterRow_11++;

							tos_count_tFilterRow_11++;

							/**
							 * [tFilterRow_11 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFlowToIterate_1 main ] start
								 */

								currentComponent = "tFlowToIterate_1";

								globalMap.put("row9.HLEVEL", row9.HLEVEL);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.Name", row9.Name);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.Path", row9.Path);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.DataType", row9.DataType);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.Update_Date",
										row9.Update_Date);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.Import_Date",
										row9.Import_Date);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.Download_Date",
										row9.Download_Date);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.PathID", row9.PathID);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.visual", row9.visual);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.codeList", row9.codeList);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.source", row9.source);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.xml", row9.xml);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.m_applied_path",
										row9.m_applied_path);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.itemID", row9.itemID);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.item", row9.item);
								nb_line_tFlowToIterate_1++;

								counter_tFlowToIterate_1++;
								globalMap.put(
										"tFlowToIterate_1_CURRENT_ITERATION",
										counter_tFlowToIterate_1);

								tos_count_tFlowToIterate_1++;

								/**
								 * [tFlowToIterate_1 main ] stop
								 */
								NB_ITERATE_tFileInputJSON_1++;

								/**
								 * [tLogRow_8 begin ] start
								 */

								ok_Hash.put("tLogRow_8", false);
								start_Hash.put("tLogRow_8",
										System.currentTimeMillis());

								currentComponent = "tLogRow_8";

								int tos_count_tLogRow_8 = 0;

								// /////////////////////

								final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
								java.io.PrintStream consoleOut_tLogRow_8 = null;

								StringBuilder strBuffer_tLogRow_8 = null;
								int nb_line_tLogRow_8 = 0;
								// /////////////////////

								/**
								 * [tLogRow_8 begin ] stop
								 */

								/**
								 * [tLogRow_7 begin ] start
								 */

								ok_Hash.put("tLogRow_7", false);
								start_Hash.put("tLogRow_7",
										System.currentTimeMillis());

								currentComponent = "tLogRow_7";

								int tos_count_tLogRow_7 = 0;

								// /////////////////////

								final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
								java.io.PrintStream consoleOut_tLogRow_7 = null;

								StringBuilder strBuffer_tLogRow_7 = null;
								int nb_line_tLogRow_7 = 0;
								// /////////////////////

								/**
								 * [tLogRow_7 begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 begin ] start
								 */

								ok_Hash.put("tFileOutputDelimited_1", false);
								start_Hash.put("tFileOutputDelimited_1",
										System.currentTimeMillis());

								currentComponent = "tFileOutputDelimited_1";

								int tos_count_tFileOutputDelimited_1 = 0;

								String fileName_tFileOutputDelimited_1 = "";
								fileName_tFileOutputDelimited_1 = (new java.io.File(
										context.folderMain
												+ context.folderTemp
												+ "ont_co"
												+ ((String) globalMap
														.get("row9.itemID"))
												+ ".csv")).getAbsolutePath()
										.replace("\\", "/");
								String fullName_tFileOutputDelimited_1 = null;
								String extension_tFileOutputDelimited_1 = null;
								String directory_tFileOutputDelimited_1 = null;
								if ((fileName_tFileOutputDelimited_1
										.indexOf("/") != -1)) {
									if (fileName_tFileOutputDelimited_1
											.lastIndexOf(".") < fileName_tFileOutputDelimited_1
											.lastIndexOf("/")) {
										fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
										extension_tFileOutputDelimited_1 = "";
									} else {
										fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
												.substring(
														0,
														fileName_tFileOutputDelimited_1
																.lastIndexOf("."));
										extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
												.substring(fileName_tFileOutputDelimited_1
														.lastIndexOf("."));
									}
									directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(0,
													fileName_tFileOutputDelimited_1
															.lastIndexOf("/"));
								} else {
									if (fileName_tFileOutputDelimited_1
											.lastIndexOf(".") != -1) {
										fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
												.substring(
														0,
														fileName_tFileOutputDelimited_1
																.lastIndexOf("."));
										extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
												.substring(fileName_tFileOutputDelimited_1
														.lastIndexOf("."));
									} else {
										fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
										extension_tFileOutputDelimited_1 = "";
									}
									directory_tFileOutputDelimited_1 = "";
								}
								boolean isFileGenerated_tFileOutputDelimited_1 = true;
								java.io.File filetFileOutputDelimited_1 = new java.io.File(
										fileName_tFileOutputDelimited_1);
								globalMap.put(
										"tFileOutputDelimited_1_FILE_NAME",
										fileName_tFileOutputDelimited_1);

								String[] headColutFileOutputDelimited_1 = new String[15];
								class CSVBasicSet_tFileOutputDelimited_1 {
									private char field_Delim;
									private char row_Delim;
									private char escape;
									private char textEnclosure;
									private boolean useCRLFRecordDelimiter;

									public boolean isUseCRLFRecordDelimiter() {
										return useCRLFRecordDelimiter;
									}

									public void setFieldSeparator(
											String fieldSep)
											throws IllegalArgumentException {
										char field_Delim_tFileOutputDelimited_1[] = null;

										// support passing value (property:
										// Field Separator) by 'context.fs' or
										// 'globalMap.get("fs")'.
										if (fieldSep.length() > 0) {
											field_Delim_tFileOutputDelimited_1 = fieldSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Field Separator must be assigned a char.");
										}
										this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
									}

									public char getFieldDelim() {
										if (this.field_Delim == 0) {
											setFieldSeparator("\t");
										}
										return this.field_Delim;
									}

									public void setRowSeparator(String rowSep) {
										if ("\r\n".equals(rowSep)) {
											useCRLFRecordDelimiter = true;
											return;
										}
										char row_DelimtFileOutputDelimited_1[] = null;

										// support passing value (property: Row
										// Separator) by 'context.rs' or
										// 'globalMap.get("rs")'.
										if (rowSep.length() > 0) {
											row_DelimtFileOutputDelimited_1 = rowSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Row Separator must be assigned a char.");
										}
										this.row_Delim = row_DelimtFileOutputDelimited_1[0];
									}

									public char getRowDelim() {
										if (this.row_Delim == 0) {
											setRowSeparator("\n");
										}
										return this.row_Delim;
									}

									public void setEscapeAndTextEnclosure(
											String strEscape,
											String strTextEnclosure)
											throws IllegalArgumentException {
										if (strEscape.length() <= 0) {
											throw new IllegalArgumentException(
													"Escape Char must be assigned a char.");
										}

										if ("".equals(strTextEnclosure))
											strTextEnclosure = "\0";
										char textEnclosure_tFileOutputDelimited_1[] = null;

										if (strTextEnclosure.length() > 0) {
											textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Text Enclosure must be assigned a char.");
										}

										this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

										if (("\\").equals(strEscape)) {
											this.escape = '\\';
										} else if (strEscape
												.equals(strTextEnclosure)) {
											this.escape = this.textEnclosure;
										} else {
											// the default escape mode is double
											// escape
											this.escape = this.textEnclosure;
										}

									}

									public char getEscapeChar() {
										return (char) this.escape;
									}

									public char getTextEnclosure() {
										return this.textEnclosure;
									}
								}

								int nb_line_tFileOutputDelimited_1 = 0;
								int splitEvery_tFileOutputDelimited_1 = 1000;
								int splitedFileNo_tFileOutputDelimited_1 = 0;
								int currentRow_tFileOutputDelimited_1 = 0;

								CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
								csvSettings_tFileOutputDelimited_1
										.setFieldSeparator("\t");
								csvSettings_tFileOutputDelimited_1
										.setRowSeparator("\n");
								csvSettings_tFileOutputDelimited_1
										.setEscapeAndTextEnclosure("\"", "\"");
								// create directory only if not exists
								if (directory_tFileOutputDelimited_1 != null
										&& directory_tFileOutputDelimited_1
												.trim().length() != 0) {
									java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
											directory_tFileOutputDelimited_1);
									if (!dir_tFileOutputDelimited_1.exists()) {

										dir_tFileOutputDelimited_1.mkdirs();

									}
								}
								java.io.Writer outtFileOutputDelimited_1 = null;
								com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

								java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
										fileName_tFileOutputDelimited_1);
								if (fileToDelete_tFileOutputDelimited_1
										.exists()) {
									fileToDelete_tFileOutputDelimited_1
											.delete();
								}

								outtFileOutputDelimited_1 = new routines.system.BufferedOutput(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_1,
														false), "ISO-8859-15"));
								java.io.StringWriter strWritertFileOutputDelimited_1 = new java.io.StringWriter();
								CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
										strWritertFileOutputDelimited_1);
								CsvWritertFileOutputDelimited_1
										.setSeparator(csvSettings_tFileOutputDelimited_1
												.getFieldDelim());

								if (!csvSettings_tFileOutputDelimited_1
										.isUseCRLFRecordDelimiter()
										&& csvSettings_tFileOutputDelimited_1
												.getRowDelim() != '\r'
										&& csvSettings_tFileOutputDelimited_1
												.getRowDelim() != '\n') {
									CsvWritertFileOutputDelimited_1
											.setLineEnd(""
													+ csvSettings_tFileOutputDelimited_1
															.getRowDelim());
								}

								if (filetFileOutputDelimited_1.length() == 0) {

									headColutFileOutputDelimited_1[0] = "HLEVEL";

									headColutFileOutputDelimited_1[1] = "Name";

									headColutFileOutputDelimited_1[2] = "Path";

									headColutFileOutputDelimited_1[3] = "DataType";

									headColutFileOutputDelimited_1[4] = "Update_Date";

									headColutFileOutputDelimited_1[5] = "Import_Date";

									headColutFileOutputDelimited_1[6] = "Download_Date";

									headColutFileOutputDelimited_1[7] = "PathID";

									headColutFileOutputDelimited_1[8] = "visual";

									headColutFileOutputDelimited_1[9] = "codeList";

									headColutFileOutputDelimited_1[10] = "source";

									headColutFileOutputDelimited_1[11] = "xml";

									headColutFileOutputDelimited_1[12] = "m_applied_path";

									headColutFileOutputDelimited_1[13] = "itemID";

									headColutFileOutputDelimited_1[14] = "item";

									CsvWritertFileOutputDelimited_1
											.writeNext(headColutFileOutputDelimited_1);
									CsvWritertFileOutputDelimited_1.flush();

									outtFileOutputDelimited_1
											.write(strWritertFileOutputDelimited_1
													.getBuffer().toString());
									outtFileOutputDelimited_1.flush();
									strWritertFileOutputDelimited_1.getBuffer()
											.delete(0,
													strWritertFileOutputDelimited_1
															.getBuffer()
															.length());

								}

								CsvWritertFileOutputDelimited_1
										.setEscapeChar(csvSettings_tFileOutputDelimited_1
												.getEscapeChar());
								CsvWritertFileOutputDelimited_1
										.setQuoteChar(csvSettings_tFileOutputDelimited_1
												.getTextEnclosure());
								CsvWritertFileOutputDelimited_1
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

								resourceMap.put(
										"CsvWriter_tFileOutputDelimited_1",
										CsvWritertFileOutputDelimited_1);

								resourceMap.put("out_tFileOutputDelimited_1",
										outtFileOutputDelimited_1);

								resourceMap.put(
										"nb_line_tFileOutputDelimited_1",
										nb_line_tFileOutputDelimited_1);
								resourceMap
										.put("isFileGenerated_tFileOutputDelimited_1",
												isFileGenerated_tFileOutputDelimited_1);

								resourceMap.put("filetFileOutputDelimited_1",
										filetFileOutputDelimited_1);

								/**
								 * [tFileOutputDelimited_1 begin ] stop
								 */

								/**
								 * [tMap_4 begin ] start
								 */

								ok_Hash.put("tMap_4", false);
								start_Hash.put("tMap_4",
										System.currentTimeMillis());

								currentComponent = "tMap_4";

								int tos_count_tMap_4 = 0;

								// ###############################
								// # Lookup's keys initialization
								// ###############################

								// ###############################
								// # Vars initialization
								class Var__tMap_4__Struct {
								}
								Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
								// ###############################

								// ###############################
								// # Outputs initialization
								ContextsToOntFinalStruct ContextsToOntFinal_tmp = new ContextsToOntFinalStruct();
								// ###############################

								/**
								 * [tMap_4 begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 begin ] start
								 */

								ok_Hash.put("tFileOutputDelimited_3", false);
								start_Hash.put("tFileOutputDelimited_3",
										System.currentTimeMillis());

								currentComponent = "tFileOutputDelimited_3";

								int tos_count_tFileOutputDelimited_3 = 0;

								String fileName_tFileOutputDelimited_3 = "";
								fileName_tFileOutputDelimited_3 = (new java.io.File(
										context.folderMain
												+ context.folderTemp
												+ "temp_co"
												+ ((String) globalMap
														.get("row9.itemID"))
												+ ".csv")).getAbsolutePath()
										.replace("\\", "/");
								String fullName_tFileOutputDelimited_3 = null;
								String extension_tFileOutputDelimited_3 = null;
								String directory_tFileOutputDelimited_3 = null;
								if ((fileName_tFileOutputDelimited_3
										.indexOf("/") != -1)) {
									if (fileName_tFileOutputDelimited_3
											.lastIndexOf(".") < fileName_tFileOutputDelimited_3
											.lastIndexOf("/")) {
										fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
										extension_tFileOutputDelimited_3 = "";
									} else {
										fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
												.substring(
														0,
														fileName_tFileOutputDelimited_3
																.lastIndexOf("."));
										extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
												.substring(fileName_tFileOutputDelimited_3
														.lastIndexOf("."));
									}
									directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
											.substring(0,
													fileName_tFileOutputDelimited_3
															.lastIndexOf("/"));
								} else {
									if (fileName_tFileOutputDelimited_3
											.lastIndexOf(".") != -1) {
										fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
												.substring(
														0,
														fileName_tFileOutputDelimited_3
																.lastIndexOf("."));
										extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
												.substring(fileName_tFileOutputDelimited_3
														.lastIndexOf("."));
									} else {
										fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
										extension_tFileOutputDelimited_3 = "";
									}
									directory_tFileOutputDelimited_3 = "";
								}
								boolean isFileGenerated_tFileOutputDelimited_3 = true;
								java.io.File filetFileOutputDelimited_3 = new java.io.File(
										fileName_tFileOutputDelimited_3);
								globalMap.put(
										"tFileOutputDelimited_3_FILE_NAME",
										fileName_tFileOutputDelimited_3);

								String[] headColutFileOutputDelimited_3 = new String[15];
								class CSVBasicSet_tFileOutputDelimited_3 {
									private char field_Delim;
									private char row_Delim;
									private char escape;
									private char textEnclosure;
									private boolean useCRLFRecordDelimiter;

									public boolean isUseCRLFRecordDelimiter() {
										return useCRLFRecordDelimiter;
									}

									public void setFieldSeparator(
											String fieldSep)
											throws IllegalArgumentException {
										char field_Delim_tFileOutputDelimited_3[] = null;

										// support passing value (property:
										// Field Separator) by 'context.fs' or
										// 'globalMap.get("fs")'.
										if (fieldSep.length() > 0) {
											field_Delim_tFileOutputDelimited_3 = fieldSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Field Separator must be assigned a char.");
										}
										this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
									}

									public char getFieldDelim() {
										if (this.field_Delim == 0) {
											setFieldSeparator("\t");
										}
										return this.field_Delim;
									}

									public void setRowSeparator(String rowSep) {
										if ("\r\n".equals(rowSep)) {
											useCRLFRecordDelimiter = true;
											return;
										}
										char row_DelimtFileOutputDelimited_3[] = null;

										// support passing value (property: Row
										// Separator) by 'context.rs' or
										// 'globalMap.get("rs")'.
										if (rowSep.length() > 0) {
											row_DelimtFileOutputDelimited_3 = rowSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Row Separator must be assigned a char.");
										}
										this.row_Delim = row_DelimtFileOutputDelimited_3[0];
									}

									public char getRowDelim() {
										if (this.row_Delim == 0) {
											setRowSeparator("\n");
										}
										return this.row_Delim;
									}

									public void setEscapeAndTextEnclosure(
											String strEscape,
											String strTextEnclosure)
											throws IllegalArgumentException {
										if (strEscape.length() <= 0) {
											throw new IllegalArgumentException(
													"Escape Char must be assigned a char.");
										}

										if ("".equals(strTextEnclosure))
											strTextEnclosure = "\0";
										char textEnclosure_tFileOutputDelimited_3[] = null;

										if (strTextEnclosure.length() > 0) {
											textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Text Enclosure must be assigned a char.");
										}

										this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

										if (("\\").equals(strEscape)) {
											this.escape = '\\';
										} else if (strEscape
												.equals(strTextEnclosure)) {
											this.escape = this.textEnclosure;
										} else {
											// the default escape mode is double
											// escape
											this.escape = this.textEnclosure;
										}

									}

									public char getEscapeChar() {
										return (char) this.escape;
									}

									public char getTextEnclosure() {
										return this.textEnclosure;
									}
								}

								int nb_line_tFileOutputDelimited_3 = 0;
								int splitEvery_tFileOutputDelimited_3 = 1000;
								int splitedFileNo_tFileOutputDelimited_3 = 0;
								int currentRow_tFileOutputDelimited_3 = 0;

								CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
								csvSettings_tFileOutputDelimited_3
										.setFieldSeparator("\t");
								csvSettings_tFileOutputDelimited_3
										.setRowSeparator("\n");
								csvSettings_tFileOutputDelimited_3
										.setEscapeAndTextEnclosure("\"", "\"");
								// create directory only if not exists
								if (directory_tFileOutputDelimited_3 != null
										&& directory_tFileOutputDelimited_3
												.trim().length() != 0) {
									java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
											directory_tFileOutputDelimited_3);
									if (!dir_tFileOutputDelimited_3.exists()) {

										dir_tFileOutputDelimited_3.mkdirs();

									}
								}
								java.io.Writer outtFileOutputDelimited_3 = null;
								com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;

								java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
										fileName_tFileOutputDelimited_3);
								if (fileToDelete_tFileOutputDelimited_3
										.exists()) {
									fileToDelete_tFileOutputDelimited_3
											.delete();
								}

								outtFileOutputDelimited_3 = new routines.system.BufferedOutput(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_3,
														false), "ISO-8859-15"));
								java.io.StringWriter strWritertFileOutputDelimited_3 = new java.io.StringWriter();
								CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
										strWritertFileOutputDelimited_3);
								CsvWritertFileOutputDelimited_3
										.setSeparator(csvSettings_tFileOutputDelimited_3
												.getFieldDelim());

								if (!csvSettings_tFileOutputDelimited_3
										.isUseCRLFRecordDelimiter()
										&& csvSettings_tFileOutputDelimited_3
												.getRowDelim() != '\r'
										&& csvSettings_tFileOutputDelimited_3
												.getRowDelim() != '\n') {
									CsvWritertFileOutputDelimited_3
											.setLineEnd(""
													+ csvSettings_tFileOutputDelimited_3
															.getRowDelim());
								}

								if (filetFileOutputDelimited_3.length() == 0) {

									headColutFileOutputDelimited_3[0] = "HLEVEL";

									headColutFileOutputDelimited_3[1] = "Name";

									headColutFileOutputDelimited_3[2] = "Path";

									headColutFileOutputDelimited_3[3] = "DataType";

									headColutFileOutputDelimited_3[4] = "Update_Date";

									headColutFileOutputDelimited_3[5] = "Import_Date";

									headColutFileOutputDelimited_3[6] = "Download_Date";

									headColutFileOutputDelimited_3[7] = "PathID";

									headColutFileOutputDelimited_3[8] = "visual";

									headColutFileOutputDelimited_3[9] = "codeList";

									headColutFileOutputDelimited_3[10] = "source";

									headColutFileOutputDelimited_3[11] = "xml";

									headColutFileOutputDelimited_3[12] = "m_applied_path";

									headColutFileOutputDelimited_3[13] = "itemID";

									headColutFileOutputDelimited_3[14] = "item";

									CsvWritertFileOutputDelimited_3
											.writeNext(headColutFileOutputDelimited_3);
									CsvWritertFileOutputDelimited_3.flush();

									outtFileOutputDelimited_3
											.write(strWritertFileOutputDelimited_3
													.getBuffer().toString());
									outtFileOutputDelimited_3.flush();
									strWritertFileOutputDelimited_3.getBuffer()
											.delete(0,
													strWritertFileOutputDelimited_3
															.getBuffer()
															.length());

								}

								CsvWritertFileOutputDelimited_3
										.setEscapeChar(csvSettings_tFileOutputDelimited_3
												.getEscapeChar());
								CsvWritertFileOutputDelimited_3
										.setQuoteChar(csvSettings_tFileOutputDelimited_3
												.getTextEnclosure());
								CsvWritertFileOutputDelimited_3
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

								resourceMap.put(
										"CsvWriter_tFileOutputDelimited_3",
										CsvWritertFileOutputDelimited_3);

								resourceMap.put("out_tFileOutputDelimited_3",
										outtFileOutputDelimited_3);

								resourceMap.put(
										"nb_line_tFileOutputDelimited_3",
										nb_line_tFileOutputDelimited_3);
								resourceMap
										.put("isFileGenerated_tFileOutputDelimited_3",
												isFileGenerated_tFileOutputDelimited_3);

								resourceMap.put("filetFileOutputDelimited_3",
										filetFileOutputDelimited_3);

								/**
								 * [tFileOutputDelimited_3 begin ] stop
								 */

								/**
								 * [tReplicate_1 begin ] start
								 */

								ok_Hash.put("tReplicate_1", false);
								start_Hash.put("tReplicate_1",
										System.currentTimeMillis());

								currentComponent = "tReplicate_1";

								int tos_count_tReplicate_1 = 0;

								/**
								 * [tReplicate_1 begin ] stop
								 */

								/**
								 * [tMap_1 begin ] start
								 */

								ok_Hash.put("tMap_1", false);
								start_Hash.put("tMap_1",
										System.currentTimeMillis());

								currentComponent = "tMap_1";

								int tos_count_tMap_1 = 0;

								// ###############################
								// # Lookup's keys initialization
								// ###############################

								// ###############################
								// # Vars initialization
								class Var__tMap_1__Struct {
									String itemID;
								}
								Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
								// ###############################

								// ###############################
								// # Outputs initialization
								logco2Struct logco2_tmp = new logco2Struct();
								ContextsToOntStruct ContextsToOnt_tmp = new ContextsToOntStruct();
								// ###############################

								/**
								 * [tMap_1 begin ] stop
								 */

								/**
								 * [tLogRow_2 begin ] start
								 */

								ok_Hash.put("tLogRow_2", false);
								start_Hash.put("tLogRow_2",
										System.currentTimeMillis());

								currentComponent = "tLogRow_2";

								int tos_count_tLogRow_2 = 0;

								// /////////////////////

								final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
								java.io.PrintStream consoleOut_tLogRow_2 = null;

								StringBuilder strBuffer_tLogRow_2 = null;
								int nb_line_tLogRow_2 = 0;
								// /////////////////////

								/**
								 * [tLogRow_2 begin ] stop
								 */

								/**
								 * [tFilterRow_1 begin ] start
								 */

								ok_Hash.put("tFilterRow_1", false);
								start_Hash.put("tFilterRow_1",
										System.currentTimeMillis());

								currentComponent = "tFilterRow_1";

								int tos_count_tFilterRow_1 = 0;

								int nb_line_tFilterRow_1 = 0;
								int nb_line_ok_tFilterRow_1 = 0;
								int nb_line_reject_tFilterRow_1 = 0;

								class Operator_tFilterRow_1 {
									private String sErrorMsg = "";
									private boolean bMatchFlag = true;
									private String sUnionFlag = "&&";

									public Operator_tFilterRow_1(
											String unionFlag) {
										sUnionFlag = unionFlag;
										bMatchFlag = "||".equals(unionFlag) ? false
												: true;
									}

									public String getErrorMsg() {
										if (sErrorMsg != null
												&& sErrorMsg.length() > 1)
											return sErrorMsg.substring(1);
										else
											return null;
									}

									public boolean getMatchFlag() {
										return bMatchFlag;
									}

									public void matches(boolean partMatched,
											String reason) {
										// no need to care about the next
										// judgement
										if ("||".equals(sUnionFlag)
												&& bMatchFlag) {
											return;
										}

										if (!partMatched) {
											sErrorMsg += "|" + reason;
										}

										if ("||".equals(sUnionFlag))
											bMatchFlag = bMatchFlag
													|| partMatched;
										else
											bMatchFlag = bMatchFlag
													&& partMatched;
									}
								}

								/**
								 * [tFilterRow_1 begin ] stop
								 */

								/**
								 * [tLogRow_13 begin ] start
								 */

								ok_Hash.put("tLogRow_13", false);
								start_Hash.put("tLogRow_13",
										System.currentTimeMillis());

								currentComponent = "tLogRow_13";

								int tos_count_tLogRow_13 = 0;

								// /////////////////////

								final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
								java.io.PrintStream consoleOut_tLogRow_13 = null;

								StringBuilder strBuffer_tLogRow_13 = null;
								int nb_line_tLogRow_13 = 0;
								// /////////////////////

								/**
								 * [tLogRow_13 begin ] stop
								 */

								/**
								 * [tLogRow_16 begin ] start
								 */

								ok_Hash.put("tLogRow_16", false);
								start_Hash.put("tLogRow_16",
										System.currentTimeMillis());

								currentComponent = "tLogRow_16";

								int tos_count_tLogRow_16 = 0;

								// /////////////////////

								final String OUTPUT_FIELD_SEPARATOR_tLogRow_16 = "|";
								java.io.PrintStream consoleOut_tLogRow_16 = null;

								StringBuilder strBuffer_tLogRow_16 = null;
								int nb_line_tLogRow_16 = 0;
								// /////////////////////

								/**
								 * [tLogRow_16 begin ] stop
								 */

								/**
								 * [tLogRow_3 begin ] start
								 */

								ok_Hash.put("tLogRow_3", false);
								start_Hash.put("tLogRow_3",
										System.currentTimeMillis());

								currentComponent = "tLogRow_3";

								int tos_count_tLogRow_3 = 0;

								// /////////////////////

								final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
								java.io.PrintStream consoleOut_tLogRow_3 = null;

								StringBuilder strBuffer_tLogRow_3 = null;
								int nb_line_tLogRow_3 = 0;
								// /////////////////////

								/**
								 * [tLogRow_3 begin ] stop
								 */

								/**
								 * [tLogRow_25 begin ] start
								 */

								ok_Hash.put("tLogRow_25", false);
								start_Hash.put("tLogRow_25",
										System.currentTimeMillis());

								currentComponent = "tLogRow_25";

								int tos_count_tLogRow_25 = 0;

								// /////////////////////

								final String OUTPUT_FIELD_SEPARATOR_tLogRow_25 = "|";
								java.io.PrintStream consoleOut_tLogRow_25 = null;

								StringBuilder strBuffer_tLogRow_25 = null;
								int nb_line_tLogRow_25 = 0;
								// /////////////////////

								/**
								 * [tLogRow_25 begin ] stop
								 */

								/**
								 * [tRunJob_3 begin ] start
								 */

								ok_Hash.put("tRunJob_3", false);
								start_Hash.put("tRunJob_3",
										System.currentTimeMillis());

								currentComponent = "tRunJob_3";

								int tos_count_tRunJob_3 = 0;

								/**
								 * [tRunJob_3 begin ] stop
								 */

								/**
								 * [tReplicate_2 begin ] start
								 */

								ok_Hash.put("tReplicate_2", false);
								start_Hash.put("tReplicate_2",
										System.currentTimeMillis());

								currentComponent = "tReplicate_2";

								int tos_count_tReplicate_2 = 0;

								/**
								 * [tReplicate_2 begin ] stop
								 */

								/**
								 * [tMap_3 begin ] start
								 */

								ok_Hash.put("tMap_3", false);
								start_Hash.put("tMap_3",
										System.currentTimeMillis());

								currentComponent = "tMap_3";

								int tos_count_tMap_3 = 0;

								// ###############################
								// # Lookup's keys initialization
								// ###############################

								// ###############################
								// # Vars initialization
								class Var__tMap_3__Struct {
									String itemID;
								}
								Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
								// ###############################

								// ###############################
								// # Outputs initialization
								log2Struct log2_tmp = new log2Struct();
								DataElementsToOntStruct DataElementsToOnt_tmp = new DataElementsToOntStruct();
								// ###############################

								/**
								 * [tMap_3 begin ] stop
								 */

								/**
								 * [tFilterRow_5 begin ] start
								 */

								ok_Hash.put("tFilterRow_5", false);
								start_Hash.put("tFilterRow_5",
										System.currentTimeMillis());

								currentComponent = "tFilterRow_5";

								int tos_count_tFilterRow_5 = 0;

								int nb_line_tFilterRow_5 = 0;
								int nb_line_ok_tFilterRow_5 = 0;
								int nb_line_reject_tFilterRow_5 = 0;

								class Operator_tFilterRow_5 {
									private String sErrorMsg = "";
									private boolean bMatchFlag = true;
									private String sUnionFlag = "&&";

									public Operator_tFilterRow_5(
											String unionFlag) {
										sUnionFlag = unionFlag;
										bMatchFlag = "||".equals(unionFlag) ? false
												: true;
									}

									public String getErrorMsg() {
										if (sErrorMsg != null
												&& sErrorMsg.length() > 1)
											return sErrorMsg.substring(1);
										else
											return null;
									}

									public boolean getMatchFlag() {
										return bMatchFlag;
									}

									public void matches(boolean partMatched,
											String reason) {
										// no need to care about the next
										// judgement
										if ("||".equals(sUnionFlag)
												&& bMatchFlag) {
											return;
										}

										if (!partMatched) {
											sErrorMsg += "|" + reason;
										}

										if ("||".equals(sUnionFlag))
											bMatchFlag = bMatchFlag
													|| partMatched;
										else
											bMatchFlag = bMatchFlag
													&& partMatched;
									}
								}

								/**
								 * [tFilterRow_5 begin ] stop
								 */

								/**
								 * [tReplicate_8 begin ] start
								 */

								ok_Hash.put("tReplicate_8", false);
								start_Hash.put("tReplicate_8",
										System.currentTimeMillis());

								currentComponent = "tReplicate_8";

								int tos_count_tReplicate_8 = 0;

								/**
								 * [tReplicate_8 begin ] stop
								 */

								/**
								 * [tFilterRow_3 begin ] start
								 */

								ok_Hash.put("tFilterRow_3", false);
								start_Hash.put("tFilterRow_3",
										System.currentTimeMillis());

								currentComponent = "tFilterRow_3";

								int tos_count_tFilterRow_3 = 0;

								int nb_line_tFilterRow_3 = 0;
								int nb_line_ok_tFilterRow_3 = 0;
								int nb_line_reject_tFilterRow_3 = 0;

								class Operator_tFilterRow_3 {
									private String sErrorMsg = "";
									private boolean bMatchFlag = true;
									private String sUnionFlag = "&&";

									public Operator_tFilterRow_3(
											String unionFlag) {
										sUnionFlag = unionFlag;
										bMatchFlag = "||".equals(unionFlag) ? false
												: true;
									}

									public String getErrorMsg() {
										if (sErrorMsg != null
												&& sErrorMsg.length() > 1)
											return sErrorMsg.substring(1);
										else
											return null;
									}

									public boolean getMatchFlag() {
										return bMatchFlag;
									}

									public void matches(boolean partMatched,
											String reason) {
										// no need to care about the next
										// judgement
										if ("||".equals(sUnionFlag)
												&& bMatchFlag) {
											return;
										}

										if (!partMatched) {
											sErrorMsg += "|" + reason;
										}

										if ("||".equals(sUnionFlag))
											bMatchFlag = bMatchFlag
													|| partMatched;
										else
											bMatchFlag = bMatchFlag
													&& partMatched;
									}
								}

								/**
								 * [tFilterRow_3 begin ] stop
								 */

								/**
								 * [tReplicate_4 begin ] start
								 */

								ok_Hash.put("tReplicate_4", false);
								start_Hash.put("tReplicate_4",
										System.currentTimeMillis());

								currentComponent = "tReplicate_4";

								int tos_count_tReplicate_4 = 0;

								/**
								 * [tReplicate_4 begin ] stop
								 */

								/**
								 * [tFileInputJSON_1 begin ] start
								 */

								ok_Hash.put("tFileInputJSON_1", false);
								start_Hash.put("tFileInputJSON_1",
										System.currentTimeMillis());

								currentComponent = "tFileInputJSON_1";

								int tos_count_tFileInputJSON_1 = 0;

								class JSONUtil_tFileInputJSON_1 {
									public int getData(
											String query,
											javax.script.Invocable invocableEngine,
											java.util.List<org.json.simple.JSONArray> jsonResultList,
											int recordMaxSize) {
										try {
											// only 2 types: String/Boolean
											String resultObj = invocableEngine
													.invokeFunction("jsonPath",
															query).toString();
											if (!"false".equals(resultObj)) {
												org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
														.parse(resultObj);
												jsonResultList.add(resultArray);
												if (recordMaxSize != -1
														&& recordMaxSize != resultArray
																.size()) {
													// just give an error, don't
													// stop

													System.err
															.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
												}
												recordMaxSize = Math.max(
														recordMaxSize,
														resultArray.size());
											} else {

												System.err
														.println("Can't find any data with JSONPath "
																+ query);
												// add null to take a place in
												// List(buffer)
												jsonResultList.add(null);
											}
										} catch (java.lang.Exception e) {

											e.printStackTrace();
										}
										return recordMaxSize;
									}

									void setRowValue_0(
											row1Struct row1,
											java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1,
											int nbResultArray_tFileInputJSON_1)
											throws java.io.UnsupportedEncodingException {
										if (JSONResultList_tFileInputJSON_1
												.get(0) != null
												&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
														.get(0).size()
												&& JSONResultList_tFileInputJSON_1
														.get(0)
														.get(nbResultArray_tFileInputJSON_1) != null) {
											row1.item = JSONResultList_tFileInputJSON_1
													.get(0)
													.get(nbResultArray_tFileInputJSON_1)
													.toString();
										} else {

											row1.item = null;

										}
										if (JSONResultList_tFileInputJSON_1
												.get(1) != null
												&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
														.get(1).size()
												&& JSONResultList_tFileInputJSON_1
														.get(1)
														.get(nbResultArray_tFileInputJSON_1) != null) {
											row1.id = JSONResultList_tFileInputJSON_1
													.get(1)
													.get(nbResultArray_tFileInputJSON_1)
													.toString();
										} else {

											row1.id = null;

										}
										if (JSONResultList_tFileInputJSON_1
												.get(2) != null
												&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
														.get(2).size()
												&& JSONResultList_tFileInputJSON_1
														.get(2)
														.get(nbResultArray_tFileInputJSON_1) != null) {
											row1.sign = JSONResultList_tFileInputJSON_1
													.get(2)
													.get(nbResultArray_tFileInputJSON_1)
													.toString();
										} else {

											row1.sign = null;

										}
									}
								}
								int nb_line_tFileInputJSON_1 = 0;
								java.lang.Object jsonText_tFileInputJSON_1 = null;
								JSONUtil_tFileInputJSON_1 jsonUtil_tFileInputJSON_1 = new JSONUtil_tFileInputJSON_1();
								java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1 = new java.util.ArrayList<org.json.simple.JSONArray>();
								int recordMaxSize_tFileInputJSON_1 = -1;

								// init js json engine
								javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_1 = new javax.script.ScriptEngineManager();
								javax.script.ScriptEngine jsEngine_tFileInputJSON_1 = scriptEngineMgr_tFileInputJSON_1
										.getEngineByName("JavaScript");
								if (jsEngine_tFileInputJSON_1 == null) {

									System.err
											.println("No script engine found for JavaScript");
								} else {
									java.net.URL jsonjsUrl_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
											.getResource("json.js");
									if (jsonjsUrl_tFileInputJSON_1 != null) {
										jsEngine_tFileInputJSON_1
												.eval(new java.io.BufferedReader(
														new java.io.InputStreamReader(
																jsonjsUrl_tFileInputJSON_1
																		.openStream())));
									}

									java.net.URL jsonpathjsUrl_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
											.getResource("jsonpath.js");
									if (jsonpathjsUrl_tFileInputJSON_1 != null) {
										jsEngine_tFileInputJSON_1
												.eval(new java.io.BufferedReader(
														new java.io.InputStreamReader(
																jsonpathjsUrl_tFileInputJSON_1
																		.openStream())));
									}

									java.io.InputStreamReader fr_tFileInputJSON_1 = null;
									try {

										java.net.URL url_tFileInputJSON_1 = new java.net.URL(
												context.MDRBaseURL
														+ "/"
														+ context.MDRInstance
														+ "/mdr/entities/urn:mdr:Context@"
														+ ((String) globalMap
																.get("row9.itemID"))
														+ "/relevantDesignations");
										java.net.URLConnection urlConn_tFileInputJSON_1 = url_tFileInputJSON_1
												.openConnection();
										fr_tFileInputJSON_1 = new java.io.InputStreamReader(
												urlConn_tFileInputJSON_1
														.getInputStream(),
												"ISO-8859-15");

										jsonText_tFileInputJSON_1 = org.json.simple.JSONValue
												.parse(fr_tFileInputJSON_1);
										if (jsonText_tFileInputJSON_1 == null) {
											throw new RuntimeException(
													"fail to parse the json file : "
															+ context.MDRBaseURL
															+ "/"
															+ context.MDRInstance
															+ "/mdr/entities/urn:mdr:Context@"
															+ ((String) globalMap
																	.get("row9.itemID"))
															+ "/relevantDesignations");
										}
									} catch (java.lang.Exception e_tFileInputJSON_1) {

										System.err.println(e_tFileInputJSON_1
												.getMessage());

									} finally {
										if (fr_tFileInputJSON_1 != null) {
											fr_tFileInputJSON_1.close();
										}
									}

									if (jsonText_tFileInputJSON_1 != null) {
										jsEngine_tFileInputJSON_1
												.eval("var obj="
														+ jsonText_tFileInputJSON_1
																.toString());

										javax.script.Invocable invocableEngine_tFileInputJSON_1 = (javax.script.Invocable) jsEngine_tFileInputJSON_1;

										recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
												.getData(
														"$.[*].item",
														invocableEngine_tFileInputJSON_1,
														JSONResultList_tFileInputJSON_1,
														recordMaxSize_tFileInputJSON_1);

										recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
												.getData(
														"$.[*].id",
														invocableEngine_tFileInputJSON_1,
														JSONResultList_tFileInputJSON_1,
														recordMaxSize_tFileInputJSON_1);

										recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
												.getData(
														"$.[*].sign",
														invocableEngine_tFileInputJSON_1,
														JSONResultList_tFileInputJSON_1,
														recordMaxSize_tFileInputJSON_1);

									}
								}
								for (int nbResultArray_tFileInputJSON_1 = 0; nbResultArray_tFileInputJSON_1 < recordMaxSize_tFileInputJSON_1; nbResultArray_tFileInputJSON_1++) {

									nb_line_tFileInputJSON_1++;
									row1 = null;
									boolean whetherReject_tFileInputJSON_1 = false;
									row1 = new row1Struct();
									try {
										jsonUtil_tFileInputJSON_1
												.setRowValue_0(
														row1,
														JSONResultList_tFileInputJSON_1,
														nbResultArray_tFileInputJSON_1);
									} catch (java.lang.Exception e) {
										whetherReject_tFileInputJSON_1 = true;
										System.err.println(e.getMessage());
										row1 = null;
									}

									/**
									 * [tFileInputJSON_1 begin ] stop
									 */

									/**
									 * [tFileInputJSON_1 main ] start
									 */

									currentComponent = "tFileInputJSON_1";

									tos_count_tFileInputJSON_1++;

									/**
									 * [tFileInputJSON_1 main ] stop
									 */
									// Start of branch "row1"
									if (row1 != null) {

										/**
										 * [tReplicate_4 main ] start
										 */

										currentComponent = "tReplicate_4";

										row17 = new row17Struct();

										row17.item = row1.item;
										row17.id = row1.id;
										row17.sign = row1.sign;
										row18 = new row18Struct();

										row18.item = row1.item;
										row18.id = row1.id;
										row18.sign = row1.sign;

										tos_count_tReplicate_4++;

										/**
										 * [tReplicate_4 main ] stop
										 */

										/**
										 * [tLogRow_8 main ] start
										 */

										currentComponent = "tLogRow_8";

										// /////////////////////

										strBuffer_tLogRow_8 = new StringBuilder();
										strBuffer_tLogRow_8
												.append("[tLogRow_8] ");

										if (row17.item != null) { //

											strBuffer_tLogRow_8.append(String
													.valueOf(row17.item));

										} //

										strBuffer_tLogRow_8.append("|");

										if (row17.id != null) { //

											strBuffer_tLogRow_8.append(String
													.valueOf(row17.id));

										} //

										strBuffer_tLogRow_8.append("|");

										if (row17.sign != null) { //

											strBuffer_tLogRow_8.append(String
													.valueOf(row17.sign));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_8 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(
															System.out));
											globalMap.put("tLogRow_CONSOLE",
													consoleOut_tLogRow_8);
										}

										consoleOut_tLogRow_8
												.println(strBuffer_tLogRow_8
														.toString());
										consoleOut_tLogRow_8.flush();
										nb_line_tLogRow_8++;
										// ////

										// ////

										// /////////////////////

										tos_count_tLogRow_8++;

										/**
										 * [tLogRow_8 main ] stop
										 */

										/**
										 * [tFilterRow_3 main ] start
										 */

										currentComponent = "tFilterRow_3";

										row24 = null;
										row8 = null;
										Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3(
												"&&");
										ope_tFilterRow_3
												.matches(
														(// code sample : use
															// row18 to define
															// the condition.
														// row18.columnName1.equals("foo")
														// ||!(row18.columnName2.equals("bar"))
														// replace the following
														// expression by your
														// own filter condition
														row18.item
																.startsWith("urn:mdr:Context@")),
														"advanced condition failed");

										if (ope_tFilterRow_3.getMatchFlag()) {
											if (row8 == null) {
												row8 = new row8Struct();
											}
											row8.item = row18.item;
											row8.id = row18.id;
											row8.sign = row18.sign;
											nb_line_ok_tFilterRow_3++;
										} else {
											if (row24 == null) {
												row24 = new row24Struct();
											}
											row24.item = row18.item;
											row24.id = row18.id;
											row24.sign = row18.sign;
											row24.errorMessage = ope_tFilterRow_3
													.getErrorMsg();
											nb_line_reject_tFilterRow_3++;
										}

										nb_line_tFilterRow_3++;

										tos_count_tFilterRow_3++;

										/**
										 * [tFilterRow_3 main ] stop
										 */
										// Start of branch "row8"
										if (row8 != null) {

											/**
											 * [tFilterRow_1 main ] start
											 */

											currentComponent = "tFilterRow_1";

											row4 = null;
											row3 = null;
											Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
													"&&");
											ope_tFilterRow_1
													.matches(
															(row8.sign == null ? false
																	: row8.sign
																			.matches("Code Lists") != true),
															" sign.matches(\"Code Lists\") != true failed");
											ope_tFilterRow_1
													.matches(
															(row8.sign == null ? false
																	: row8.sign
																			.matches("Code List Items") != true),
															" sign.matches(\"Code List Items\") != true failed");
											ope_tFilterRow_1
													.matches(
															(row8.sign == null ? false
																	: row8.sign
																			.matches("Measurement Units") != true),
															" sign.matches(\"Measurement Units\") != true failed");

											if (ope_tFilterRow_1.getMatchFlag()) {
												if (row3 == null) {
													row3 = new row3Struct();
												}
												row3.item = row8.item;
												row3.id = row8.id;
												row3.sign = row8.sign;
												nb_line_ok_tFilterRow_1++;
											} else {
												if (row4 == null) {
													row4 = new row4Struct();
												}
												row4.item = row8.item;
												row4.id = row8.id;
												row4.sign = row8.sign;
												row4.errorMessage = ope_tFilterRow_1
														.getErrorMsg();
												nb_line_reject_tFilterRow_1++;
											}

											nb_line_tFilterRow_1++;

											tos_count_tFilterRow_1++;

											/**
											 * [tFilterRow_1 main ] stop
											 */
											// Start of branch "row3"
											if (row3 != null) {

												/**
												 * [tMap_1 main ] start
												 */

												currentComponent = "tMap_1";

												boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_1 = false;
												boolean mainRowRejected_tMap_1 = false;

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_1__Struct Var = Var__tMap_1;
													Var.itemID = row3.item
															.substring(row3.item
																	.lastIndexOf("@") + 1);// ###############################
													// ###############################
													// # Output tables

													logco2 = null;
													ContextsToOnt = null;

													// # Output table : 'logco2'
													logco2_tmp.sign = row3.sign;
													logco2_tmp.item = row3.item;
													logco2_tmp.id = row3.id;
													logco2_tmp.HLEVEL = ((Integer) globalMap
															.get("row9.HLEVEL")) + 1;
													logco2 = logco2_tmp;

													// # Output table :
													// 'ContextsToOnt'
													ContextsToOnt_tmp.HLEVEL = ((Integer) globalMap
															.get("row9.HLEVEL")) + 1;
													ContextsToOnt_tmp.Name = row3.sign;
													ContextsToOnt_tmp.Path = ((String) globalMap
															.get("row9.Path"))
															+ "\\" + Var.itemID;
													ContextsToOnt_tmp.DataType = null;
													ContextsToOnt_tmp.Update_Date = TalendDate
															.parseDate(
																	"dd-MM-yyyy",
																	TalendDate
																			.getDate("dd-MM-yyyy"));
													ContextsToOnt_tmp.Import_Date = TalendDate
															.parseDate(
																	"dd-MM-yyyy",
																	TalendDate
																			.getDate("dd-MM-yyyy"));
													ContextsToOnt_tmp.Download_Date = TalendDate
															.parseDate(
																	"dd-MM-yyyy",
																	TalendDate
																			.getDate("dd-MM-yyyy"));
													ContextsToOnt_tmp.PathID = null;
													ContextsToOnt_tmp.visual = "FAE";
													ContextsToOnt_tmp.codeList = null;
													ContextsToOnt_tmp.source = "MDR Central";
													ContextsToOnt_tmp.xml = null;
													ContextsToOnt_tmp.m_applied_path = "@";
													ContextsToOnt_tmp.itemID = Var.itemID;
													ContextsToOnt_tmp.item = row3.item;
													ContextsToOnt = ContextsToOnt_tmp;
													// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_1 = false;

												tos_count_tMap_1++;

												/**
												 * [tMap_1 main ] stop
												 */
												// Start of branch "logco2"
												if (logco2 != null) {

													/**
													 * [tLogRow_7 main ] start
													 */

													currentComponent = "tLogRow_7";

													// /////////////////////

													strBuffer_tLogRow_7 = new StringBuilder();
													strBuffer_tLogRow_7
															.append("[tLogRow_7] ");

													if (logco2.sign != null) { //

														strBuffer_tLogRow_7
																.append(String
																		.valueOf(logco2.sign));

													} //

													strBuffer_tLogRow_7
															.append("|");

													if (logco2.item != null) { //

														strBuffer_tLogRow_7
																.append(String
																		.valueOf(logco2.item));

													} //

													strBuffer_tLogRow_7
															.append("|");

													if (logco2.id != null) { //

														strBuffer_tLogRow_7
																.append(String
																		.valueOf(logco2.id));

													} //

													strBuffer_tLogRow_7
															.append("|");

													if (logco2.HLEVEL != null) { //

														strBuffer_tLogRow_7
																.append(String
																		.valueOf(logco2.HLEVEL));

													} //

													if (globalMap
															.get("tLogRow_CONSOLE") != null) {
														consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap
																.get("tLogRow_CONSOLE");
													} else {
														consoleOut_tLogRow_7 = new java.io.PrintStream(
																new java.io.BufferedOutputStream(
																		System.out));
														globalMap
																.put("tLogRow_CONSOLE",
																		consoleOut_tLogRow_7);
													}

													consoleOut_tLogRow_7
															.println(strBuffer_tLogRow_7
																	.toString());
													consoleOut_tLogRow_7
															.flush();
													nb_line_tLogRow_7++;
													// ////

													// ////

													// /////////////////////

													tos_count_tLogRow_7++;

													/**
													 * [tLogRow_7 main ] stop
													 */

												} // End of branch "logco2"

												// Start of branch
												// "ContextsToOnt"
												if (ContextsToOnt != null) {

													/**
													 * [tReplicate_1 main ]
													 * start
													 */

													currentComponent = "tReplicate_1";

													row5 = new row5Struct();

													row5.HLEVEL = ContextsToOnt.HLEVEL;
													row5.Name = ContextsToOnt.Name;
													row5.Path = ContextsToOnt.Path;
													row5.DataType = ContextsToOnt.DataType;
													row5.Update_Date = ContextsToOnt.Update_Date;
													row5.Import_Date = ContextsToOnt.Import_Date;
													row5.Download_Date = ContextsToOnt.Download_Date;
													row5.PathID = ContextsToOnt.PathID;
													row5.visual = ContextsToOnt.visual;
													row5.codeList = ContextsToOnt.codeList;
													row5.source = ContextsToOnt.source;
													row5.xml = ContextsToOnt.xml;
													row5.m_applied_path = ContextsToOnt.m_applied_path;
													row5.itemID = ContextsToOnt.itemID;
													row5.item = ContextsToOnt.item;
													row7 = new row7Struct();

													row7.HLEVEL = ContextsToOnt.HLEVEL;
													row7.Name = ContextsToOnt.Name;
													row7.Path = ContextsToOnt.Path;
													row7.DataType = ContextsToOnt.DataType;
													row7.Update_Date = ContextsToOnt.Update_Date;
													row7.Import_Date = ContextsToOnt.Import_Date;
													row7.Download_Date = ContextsToOnt.Download_Date;
													row7.PathID = ContextsToOnt.PathID;
													row7.visual = ContextsToOnt.visual;
													row7.codeList = ContextsToOnt.codeList;
													row7.source = ContextsToOnt.source;
													row7.xml = ContextsToOnt.xml;
													row7.m_applied_path = ContextsToOnt.m_applied_path;
													row7.itemID = ContextsToOnt.itemID;
													row7.item = ContextsToOnt.item;

													tos_count_tReplicate_1++;

													/**
													 * [tReplicate_1 main ] stop
													 */

													/**
													 * [tMap_4 main ] start
													 */

													currentComponent = "tMap_4";

													boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_4 = false;
													boolean mainRowRejected_tMap_4 = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
														// ###############################
														// # Output tables

														ContextsToOntFinal = null;

														// # Output table :
														// 'ContextsToOntFinal'
														ContextsToOntFinal_tmp.HLEVEL = row5.HLEVEL;
														ContextsToOntFinal_tmp.Name = row5.Name;
														ContextsToOntFinal_tmp.Path = row5.Path
																+ "\\";
														ContextsToOntFinal_tmp.DataType = row5.DataType;
														ContextsToOntFinal_tmp.Update_Date = row5.Update_Date;
														ContextsToOntFinal_tmp.Import_Date = row5.Import_Date;
														ContextsToOntFinal_tmp.Download_Date = row5.Download_Date;
														ContextsToOntFinal_tmp.PathID = row5.PathID;
														ContextsToOntFinal_tmp.visual = row5.visual;
														ContextsToOntFinal_tmp.codeList = row5.codeList;
														ContextsToOntFinal_tmp.source = row5.source;
														ContextsToOntFinal_tmp.xml = row5.xml;
														ContextsToOntFinal_tmp.m_applied_path = row5.m_applied_path;
														ContextsToOntFinal_tmp.itemID = row5.itemID;
														ContextsToOntFinal_tmp.item = row5.item;
														ContextsToOntFinal = ContextsToOntFinal_tmp;
														// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_4 = false;

													tos_count_tMap_4++;

													/**
													 * [tMap_4 main ] stop
													 */
													// Start of branch
													// "ContextsToOntFinal"
													if (ContextsToOntFinal != null) {

														/**
														 * [
														 * tFileOutputDelimited_1
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_1";

														String[] rowtFileOutputDelimited_1 = new String[15];

														rowtFileOutputDelimited_1[0] = ContextsToOntFinal.HLEVEL == null ? ""
																: String.valueOf(ContextsToOntFinal.HLEVEL);

														rowtFileOutputDelimited_1[1] = ContextsToOntFinal.Name == null ? ""
																: ContextsToOntFinal.Name;

														rowtFileOutputDelimited_1[2] = ContextsToOntFinal.Path == null ? ""
																: ContextsToOntFinal.Path;

														rowtFileOutputDelimited_1[3] = ContextsToOntFinal.DataType == null ? ""
																: ContextsToOntFinal.DataType;

														rowtFileOutputDelimited_1[4] = ContextsToOntFinal.Update_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				ContextsToOntFinal.Update_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_1[5] = ContextsToOntFinal.Import_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				ContextsToOntFinal.Import_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_1[6] = ContextsToOntFinal.Download_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				ContextsToOntFinal.Download_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_1[7] = ContextsToOntFinal.PathID == null ? ""
																: ContextsToOntFinal.PathID;

														rowtFileOutputDelimited_1[8] = ContextsToOntFinal.visual == null ? ""
																: ContextsToOntFinal.visual;

														rowtFileOutputDelimited_1[9] = ContextsToOntFinal.codeList == null ? ""
																: ContextsToOntFinal.codeList;

														rowtFileOutputDelimited_1[10] = ContextsToOntFinal.source == null ? ""
																: ContextsToOntFinal.source;

														rowtFileOutputDelimited_1[11] = ContextsToOntFinal.xml == null ? ""
																: ContextsToOntFinal.xml;

														rowtFileOutputDelimited_1[12] = ContextsToOntFinal.m_applied_path == null ? ""
																: ContextsToOntFinal.m_applied_path;

														rowtFileOutputDelimited_1[13] = ContextsToOntFinal.itemID == null ? ""
																: ContextsToOntFinal.itemID;

														rowtFileOutputDelimited_1[14] = ContextsToOntFinal.item == null ? ""
																: ContextsToOntFinal.item;

														nb_line_tFileOutputDelimited_1++;
														resourceMap
																.put("nb_line_tFileOutputDelimited_1",
																		nb_line_tFileOutputDelimited_1);
														CsvWritertFileOutputDelimited_1
																.writeNext(rowtFileOutputDelimited_1);

														outtFileOutputDelimited_1
																.write(strWritertFileOutputDelimited_1
																		.getBuffer()
																		.toString());
														strWritertFileOutputDelimited_1
																.getBuffer()
																.delete(0,
																		strWritertFileOutputDelimited_1
																				.getBuffer()
																				.length());

														if (nb_line_tFileOutputDelimited_1 % 1 == 0) {

															outtFileOutputDelimited_1
																	.flush();

														}

														tos_count_tFileOutputDelimited_1++;

														/**
														 * [
														 * tFileOutputDelimited_1
														 * main ] stop
														 */

													} // End of branch
														// "ContextsToOntFinal"

													/**
													 * [tFileOutputDelimited_3
													 * main ] start
													 */

													currentComponent = "tFileOutputDelimited_3";

													String[] rowtFileOutputDelimited_3 = new String[15];

													rowtFileOutputDelimited_3[0] = row7.HLEVEL == null ? ""
															: String.valueOf(row7.HLEVEL);

													rowtFileOutputDelimited_3[1] = row7.Name == null ? ""
															: row7.Name;

													rowtFileOutputDelimited_3[2] = row7.Path == null ? ""
															: row7.Path;

													rowtFileOutputDelimited_3[3] = row7.DataType == null ? ""
															: row7.DataType;

													rowtFileOutputDelimited_3[4] = row7.Update_Date == null ? ""
															: FormatterUtils
																	.format_Date(
																			row7.Update_Date,
																			"dd-MM-yyyy");

													rowtFileOutputDelimited_3[5] = row7.Import_Date == null ? ""
															: FormatterUtils
																	.format_Date(
																			row7.Import_Date,
																			"dd-MM-yyyy");

													rowtFileOutputDelimited_3[6] = row7.Download_Date == null ? ""
															: FormatterUtils
																	.format_Date(
																			row7.Download_Date,
																			"dd-MM-yyyy");

													rowtFileOutputDelimited_3[7] = row7.PathID == null ? ""
															: row7.PathID;

													rowtFileOutputDelimited_3[8] = row7.visual == null ? ""
															: row7.visual;

													rowtFileOutputDelimited_3[9] = row7.codeList == null ? ""
															: row7.codeList;

													rowtFileOutputDelimited_3[10] = row7.source == null ? ""
															: row7.source;

													rowtFileOutputDelimited_3[11] = row7.xml == null ? ""
															: row7.xml;

													rowtFileOutputDelimited_3[12] = row7.m_applied_path == null ? ""
															: row7.m_applied_path;

													rowtFileOutputDelimited_3[13] = row7.itemID == null ? ""
															: row7.itemID;

													rowtFileOutputDelimited_3[14] = row7.item == null ? ""
															: row7.item;

													nb_line_tFileOutputDelimited_3++;
													resourceMap
															.put("nb_line_tFileOutputDelimited_3",
																	nb_line_tFileOutputDelimited_3);
													CsvWritertFileOutputDelimited_3
															.writeNext(rowtFileOutputDelimited_3);

													outtFileOutputDelimited_3
															.write(strWritertFileOutputDelimited_3
																	.getBuffer()
																	.toString());
													strWritertFileOutputDelimited_3
															.getBuffer()
															.delete(0,
																	strWritertFileOutputDelimited_3
																			.getBuffer()
																			.length());

													if (nb_line_tFileOutputDelimited_3 % 1 == 0) {

														outtFileOutputDelimited_3
																.flush();

													}

													tos_count_tFileOutputDelimited_3++;

													/**
													 * [tFileOutputDelimited_3
													 * main ] stop
													 */

												} // End of branch
													// "ContextsToOnt"

											} // End of branch "row3"

											// Start of branch "row4"
											if (row4 != null) {

												/**
												 * [tLogRow_2 main ] start
												 */

												currentComponent = "tLogRow_2";

												// /////////////////////

												strBuffer_tLogRow_2 = new StringBuilder();
												strBuffer_tLogRow_2
														.append("[tLogRow_2] ");

												if (row4.item != null) { //

													strBuffer_tLogRow_2
															.append(String
																	.valueOf(row4.item));

												} //

												strBuffer_tLogRow_2.append("|");

												if (row4.id != null) { //

													strBuffer_tLogRow_2
															.append(String
																	.valueOf(row4.id));

												} //

												strBuffer_tLogRow_2.append("|");

												if (row4.sign != null) { //

													strBuffer_tLogRow_2
															.append(String
																	.valueOf(row4.sign));

												} //

												strBuffer_tLogRow_2.append("|");

												if (row4.errorMessage != null) { //

													strBuffer_tLogRow_2
															.append(String
																	.valueOf(row4.errorMessage));

												} //

												if (globalMap
														.get("tLogRow_CONSOLE") != null) {
													consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
															.get("tLogRow_CONSOLE");
												} else {
													consoleOut_tLogRow_2 = new java.io.PrintStream(
															new java.io.BufferedOutputStream(
																	System.out));
													globalMap
															.put("tLogRow_CONSOLE",
																	consoleOut_tLogRow_2);
												}

												consoleOut_tLogRow_2
														.println(strBuffer_tLogRow_2
																.toString());
												consoleOut_tLogRow_2.flush();
												nb_line_tLogRow_2++;
												// ////

												// ////

												// /////////////////////

												tos_count_tLogRow_2++;

												/**
												 * [tLogRow_2 main ] stop
												 */

											} // End of branch "row4"

										} // End of branch "row8"

										// Start of branch "row24"
										if (row24 != null) {
											row29 = null;

											/**
											 * [tReplicate_8 main ] start
											 */

											currentComponent = "tReplicate_8";

											row27 = new row27Struct();

											row27.item = row24.item;
											row27.id = row24.id;
											row27.sign = row24.sign;
											row27.errorMessage = row24.errorMessage;
											row28 = new row28Struct();

											row28.item = row24.item;
											row28.id = row24.id;
											row28.sign = row24.sign;
											row28.errorMessage = row24.errorMessage;

											tos_count_tReplicate_8++;

											/**
											 * [tReplicate_8 main ] stop
											 */

											/**
											 * [tLogRow_13 main ] start
											 */

											currentComponent = "tLogRow_13";

											// /////////////////////

											strBuffer_tLogRow_13 = new StringBuilder();
											strBuffer_tLogRow_13
													.append("[tLogRow_13] ");

											if (row27.item != null) { //

												strBuffer_tLogRow_13
														.append(String
																.valueOf(row27.item));

											} //

											strBuffer_tLogRow_13.append("|");

											if (row27.id != null) { //

												strBuffer_tLogRow_13
														.append(String
																.valueOf(row27.id));

											} //

											strBuffer_tLogRow_13.append("|");

											if (row27.sign != null) { //

												strBuffer_tLogRow_13
														.append(String
																.valueOf(row27.sign));

											} //

											strBuffer_tLogRow_13.append("|");

											if (row27.errorMessage != null) { //

												strBuffer_tLogRow_13
														.append(String
																.valueOf(row27.errorMessage));

											} //

											if (globalMap
													.get("tLogRow_CONSOLE") != null) {
												consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap
														.get("tLogRow_CONSOLE");
											} else {
												consoleOut_tLogRow_13 = new java.io.PrintStream(
														new java.io.BufferedOutputStream(
																System.out));
												globalMap.put(
														"tLogRow_CONSOLE",
														consoleOut_tLogRow_13);
											}

											consoleOut_tLogRow_13
													.println(strBuffer_tLogRow_13
															.toString());
											consoleOut_tLogRow_13.flush();
											nb_line_tLogRow_13++;
											// ////

											// ////

											// /////////////////////

											tos_count_tLogRow_13++;

											/**
											 * [tLogRow_13 main ] stop
											 */

											/**
											 * [tFilterRow_5 main ] start
											 */

											currentComponent = "tFilterRow_5";

											row2 = null;
											row29 = null;
											Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5(
													"&&");
											ope_tFilterRow_5
													.matches(
															(// code sample :
																// use row28 to
																// define the
																// condition.
															// row28.columnName1.equals("foo")
															// ||!(row28.columnName2.equals("bar"))
															// replace the
															// following
															// expression by
															// your own filter
															// condition

															// row28.item.startsWith("urn:mdr:DataElement@")
															// &&
															// (!row28.sign.startsWith("Oxygenierung"))
															row28.item
																	.startsWith("urn:mdr:DataElement@")),
															"advanced condition failed");

											if (ope_tFilterRow_5.getMatchFlag()) {
												if (row2 == null) {
													row2 = new row2Struct();
												}
												row2.item = row28.item;
												row2.id = row28.id;
												row2.sign = row28.sign;
												row2.errorMessage = row28.errorMessage;
												nb_line_ok_tFilterRow_5++;
											} else {
												if (row29 == null) {
													row29 = new row29Struct();
												}
												row29.item = row28.item;
												row29.id = row28.id;
												row29.sign = row28.sign;
												row29.errorMessage = ope_tFilterRow_5
														.getErrorMsg();
												nb_line_reject_tFilterRow_5++;
											}

											nb_line_tFilterRow_5++;

											tos_count_tFilterRow_5++;

											/**
											 * [tFilterRow_5 main ] stop
											 */
											// Start of branch "row29"
											if (row29 != null) {

												/**
												 * [tLogRow_16 main ] start
												 */

												currentComponent = "tLogRow_16";

												// /////////////////////

												strBuffer_tLogRow_16 = new StringBuilder();
												strBuffer_tLogRow_16
														.append("[tLogRow_16] ");

												if (row29.item != null) { //

													strBuffer_tLogRow_16
															.append(String
																	.valueOf(row29.item));

												} //

												strBuffer_tLogRow_16
														.append("|");

												if (row29.id != null) { //

													strBuffer_tLogRow_16
															.append(String
																	.valueOf(row29.id));

												} //

												strBuffer_tLogRow_16
														.append("|");

												if (row29.sign != null) { //

													strBuffer_tLogRow_16
															.append(String
																	.valueOf(row29.sign));

												} //

												strBuffer_tLogRow_16
														.append("|");

												if (row29.errorMessage != null) { //

													strBuffer_tLogRow_16
															.append(String
																	.valueOf(row29.errorMessage));

												} //

												if (globalMap
														.get("tLogRow_CONSOLE") != null) {
													consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap
															.get("tLogRow_CONSOLE");
												} else {
													consoleOut_tLogRow_16 = new java.io.PrintStream(
															new java.io.BufferedOutputStream(
																	System.out));
													globalMap
															.put("tLogRow_CONSOLE",
																	consoleOut_tLogRow_16);
												}

												consoleOut_tLogRow_16
														.println(strBuffer_tLogRow_16
																.toString());
												consoleOut_tLogRow_16.flush();
												nb_line_tLogRow_16++;
												// ////

												// ////

												// /////////////////////

												tos_count_tLogRow_16++;

												/**
												 * [tLogRow_16 main ] stop
												 */

											} // End of branch "row29"

											// Start of branch "row2"
											if (row2 != null) {

												/**
												 * [tMap_3 main ] start
												 */

												currentComponent = "tMap_3";

												boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_3 = false;
												boolean mainRowRejected_tMap_3 = false;

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_3__Struct Var = Var__tMap_3;
													Var.itemID = row2.item
															.substring(row2.item
																	.lastIndexOf("@") + 1);// ###############################
													// ###############################
													// # Output tables

													log2 = null;
													DataElementsToOnt = null;

													// # Output table : 'log2'
													log2_tmp.id = row2.id;
													log2_tmp.sign = row2.sign;
													log2_tmp.item = row2.item;
													log2 = log2_tmp;

													// # Output table :
													// 'DataElementsToOnt'
													DataElementsToOnt_tmp.HLEVEL = ((Integer) globalMap
															.get("row9.HLEVEL")) + 1;
													DataElementsToOnt_tmp.Name = row2.sign;
													DataElementsToOnt_tmp.Path = ((String) globalMap
															.get("row9.Path"))
															+ "\\" + Var.itemID;
													DataElementsToOnt_tmp.DataType = null;
													DataElementsToOnt_tmp.Update_Date = TalendDate
															.parseDate(
																	"dd-MM-yyyy",
																	TalendDate
																			.getDate("dd-MM-yyyy"));
													DataElementsToOnt_tmp.Import_Date = TalendDate
															.parseDate(
																	"dd-MM-yyyy",
																	TalendDate
																			.getDate("dd-MM-yyyy"));
													DataElementsToOnt_tmp.Download_Date = TalendDate
															.parseDate(
																	"dd-MM-yyyy",
																	TalendDate
																			.getDate("dd-MM-yyyy"));
													DataElementsToOnt_tmp.PathID = null;
													DataElementsToOnt_tmp.visual = "FAE";
													DataElementsToOnt_tmp.codeList = null;
													DataElementsToOnt_tmp.source = "MDR Central";
													DataElementsToOnt_tmp.xml = null;
													DataElementsToOnt_tmp.m_applied_path = "@";
													DataElementsToOnt_tmp.itemID = Var.itemID;
													DataElementsToOnt_tmp.item = row2.item;
													DataElementsToOnt = DataElementsToOnt_tmp;
													// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_3 = false;

												tos_count_tMap_3++;

												/**
												 * [tMap_3 main ] stop
												 */
												// Start of branch "log2"
												if (log2 != null) {

													/**
													 * [tLogRow_3 main ] start
													 */

													currentComponent = "tLogRow_3";

													// /////////////////////

													strBuffer_tLogRow_3 = new StringBuilder();
													strBuffer_tLogRow_3
															.append("[tLogRow_3] ");

													if (log2.id != null) { //

														strBuffer_tLogRow_3
																.append(String
																		.valueOf(log2.id));

													} //

													strBuffer_tLogRow_3
															.append("|");

													if (log2.sign != null) { //

														strBuffer_tLogRow_3
																.append(String
																		.valueOf(log2.sign));

													} //

													strBuffer_tLogRow_3
															.append("|");

													if (log2.item != null) { //

														strBuffer_tLogRow_3
																.append(String
																		.valueOf(log2.item));

													} //

													if (globalMap
															.get("tLogRow_CONSOLE") != null) {
														consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
																.get("tLogRow_CONSOLE");
													} else {
														consoleOut_tLogRow_3 = new java.io.PrintStream(
																new java.io.BufferedOutputStream(
																		System.out));
														globalMap
																.put("tLogRow_CONSOLE",
																		consoleOut_tLogRow_3);
													}

													consoleOut_tLogRow_3
															.println(strBuffer_tLogRow_3
																	.toString());
													consoleOut_tLogRow_3
															.flush();
													nb_line_tLogRow_3++;
													// ////

													// ////

													// /////////////////////

													tos_count_tLogRow_3++;

													/**
													 * [tLogRow_3 main ] stop
													 */

												} // End of branch "log2"

												// Start of branch
												// "DataElementsToOnt"
												if (DataElementsToOnt != null) {

													/**
													 * [tReplicate_2 main ]
													 * start
													 */

													currentComponent = "tReplicate_2";

													row13 = new row13Struct();

													row13.HLEVEL = DataElementsToOnt.HLEVEL;
													row13.Name = DataElementsToOnt.Name;
													row13.Path = DataElementsToOnt.Path;
													row13.DataType = DataElementsToOnt.DataType;
													row13.Update_Date = DataElementsToOnt.Update_Date;
													row13.Import_Date = DataElementsToOnt.Import_Date;
													row13.Download_Date = DataElementsToOnt.Download_Date;
													row13.PathID = DataElementsToOnt.PathID;
													row13.visual = DataElementsToOnt.visual;
													row13.codeList = DataElementsToOnt.codeList;
													row13.source = DataElementsToOnt.source;
													row13.xml = DataElementsToOnt.xml;
													row13.m_applied_path = DataElementsToOnt.m_applied_path;
													row13.itemID = DataElementsToOnt.itemID;
													row13.item = DataElementsToOnt.item;
													row10 = new row10Struct();

													row10.HLEVEL = DataElementsToOnt.HLEVEL;
													row10.Name = DataElementsToOnt.Name;
													row10.Path = DataElementsToOnt.Path;
													row10.DataType = DataElementsToOnt.DataType;
													row10.Update_Date = DataElementsToOnt.Update_Date;
													row10.Import_Date = DataElementsToOnt.Import_Date;
													row10.Download_Date = DataElementsToOnt.Download_Date;
													row10.PathID = DataElementsToOnt.PathID;
													row10.visual = DataElementsToOnt.visual;
													row10.codeList = DataElementsToOnt.codeList;
													row10.source = DataElementsToOnt.source;
													row10.xml = DataElementsToOnt.xml;
													row10.m_applied_path = DataElementsToOnt.m_applied_path;
													row10.itemID = DataElementsToOnt.itemID;
													row10.item = DataElementsToOnt.item;

													tos_count_tReplicate_2++;

													/**
													 * [tReplicate_2 main ] stop
													 */

													/**
													 * [tLogRow_25 main ] start
													 */

													currentComponent = "tLogRow_25";

													// /////////////////////

													strBuffer_tLogRow_25 = new StringBuilder();
													strBuffer_tLogRow_25
															.append("[tLogRow_25] ");

													if (row13.HLEVEL != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.HLEVEL));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.Name != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.Name));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.Path != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.Path));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.DataType != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.DataType));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.Update_Date != null) { //

														strBuffer_tLogRow_25
																.append(FormatterUtils
																		.format_Date(
																				row13.Update_Date,
																				"dd-MM-yyyy"));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.Import_Date != null) { //

														strBuffer_tLogRow_25
																.append(FormatterUtils
																		.format_Date(
																				row13.Import_Date,
																				"dd-MM-yyyy"));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.Download_Date != null) { //

														strBuffer_tLogRow_25
																.append(FormatterUtils
																		.format_Date(
																				row13.Download_Date,
																				"dd-MM-yyyy"));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.PathID != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.PathID));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.visual != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.visual));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.codeList != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.codeList));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.source != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.source));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.xml != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.xml));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.m_applied_path != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.m_applied_path));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.itemID != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.itemID));

													} //

													strBuffer_tLogRow_25
															.append("|");

													if (row13.item != null) { //

														strBuffer_tLogRow_25
																.append(String
																		.valueOf(row13.item));

													} //

													if (globalMap
															.get("tLogRow_CONSOLE") != null) {
														consoleOut_tLogRow_25 = (java.io.PrintStream) globalMap
																.get("tLogRow_CONSOLE");
													} else {
														consoleOut_tLogRow_25 = new java.io.PrintStream(
																new java.io.BufferedOutputStream(
																		System.out));
														globalMap
																.put("tLogRow_CONSOLE",
																		consoleOut_tLogRow_25);
													}

													consoleOut_tLogRow_25
															.println(strBuffer_tLogRow_25
																	.toString());
													consoleOut_tLogRow_25
															.flush();
													nb_line_tLogRow_25++;
													// ////

													// ////

													// /////////////////////

													tos_count_tLogRow_25++;

													/**
													 * [tLogRow_25 main ] stop
													 */

													/**
													 * [tRunJob_3 main ] start
													 */

													currentComponent = "tRunJob_3";

													java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

													paraList_tRunJob_3
															.add("--father_pid="
																	+ pid);

													paraList_tRunJob_3
															.add("--root_pid="
																	+ rootPid);

													paraList_tRunJob_3
															.add("--father_node=tRunJob_3");

													paraList_tRunJob_3
															.add("--context=Default");

													// for feature:10589

													paraList_tRunJob_3
															.add("--stat_port="
																	+ portStats);

													if (resuming_logs_dir_path != null) {
														paraList_tRunJob_3
																.add("--resuming_logs_dir_path="
																		+ resuming_logs_dir_path);
													}
													String childResumePath_tRunJob_3 = ResumeUtil
															.getChildJobCheckPointPath(resuming_checkpoint_path);
													String tRunJobName_tRunJob_3 = ResumeUtil
															.getRighttRunJob(resuming_checkpoint_path);
													if ("tRunJob_3"
															.equals(tRunJobName_tRunJob_3)
															&& childResumePath_tRunJob_3 != null) {
														paraList_tRunJob_3
																.add("--resuming_checkpoint_path="
																		+ ResumeUtil
																				.getChildJobCheckPointPath(resuming_checkpoint_path));
													}
													paraList_tRunJob_3
															.add("--parent_part_launcher=JOB:"
																	+ jobName
																	+ "/NODE:tRunJob_3");

													java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

													context.synchronizeContext();
													java.util.Enumeration<?> propertyNames_tRunJob_3 = context
															.propertyNames();
													while (propertyNames_tRunJob_3
															.hasMoreElements()) {
														String key_tRunJob_3 = (String) propertyNames_tRunJob_3
																.nextElement();
														Object value_tRunJob_3 = (Object) context
																.get(key_tRunJob_3);
														paraList_tRunJob_3
																.add("--context_param "
																		+ key_tRunJob_3
																		+ "="
																		+ value_tRunJob_3);
													}

													parentContextMap_tRunJob_3
															.put("queryWorkFile",
																	context.queryWorkFile);

													parentContextMap_tRunJob_3
															.put("MDRStartDesignation",
																	context.MDRStartDesignation);

													parentContextMap_tRunJob_3
															.put("MDRBaseURLPort",
																	context.MDRBaseURLPort);

													parentContextMap_tRunJob_3
															.put("MDRInstance",
																	context.MDRInstance);

													parentContextMap_tRunJob_3
															.put("MDRPassword",
																	context.MDRPassword);

													parentContextMap_tRunJob_3
															.put("fileOnt",
																	context.fileOnt);

													parentContextMap_tRunJob_3
															.put("MDRUsername",
																	context.MDRUsername);

													parentContextMap_tRunJob_3
															.put("folderTemp",
																	context.folderTemp);

													parentContextMap_tRunJob_3
															.put("MDRBaseURL",
																	context.MDRBaseURL);

													parentContextMap_tRunJob_3
															.put("folderMain",
																	context.folderMain);

													Object obj_tRunJob_3 = null;

													obj_tRunJob_3 = row10.HLEVEL;
													paraList_tRunJob_3
															.add("--context_param ont_01_HLEVEL="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_01_HLEVEL",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.Name;
													paraList_tRunJob_3
															.add("--context_param ont_02_Name="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_02_Name",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.Path;
													paraList_tRunJob_3
															.add("--context_param ont_03_Path="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_03_Path",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.DataType;
													paraList_tRunJob_3
															.add("--context_param ont_04_DataType="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_04_DataType",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.Update_Date;
													paraList_tRunJob_3
															.add("--context_param ont_05_Update_Date="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_05_Update_Date",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.Import_Date;
													paraList_tRunJob_3
															.add("--context_param ont_06_Import_Date="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_06_Import_Date",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.Download_Date;
													paraList_tRunJob_3
															.add("--context_param ont_07_Download_Date="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_07_Download_Date",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.PathID;
													paraList_tRunJob_3
															.add("--context_param ont_08_PathID="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_08_PathID",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.visual;
													paraList_tRunJob_3
															.add("--context_param ont_09_visual="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_09_visual",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.codeList;
													paraList_tRunJob_3
															.add("--context_param ont_10_codeList="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_10_codeList",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.source;
													paraList_tRunJob_3
															.add("--context_param ont_11_source="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_11_source",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.xml;
													paraList_tRunJob_3
															.add("--context_param ont_12_xml="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_12_xml",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.m_applied_path;
													paraList_tRunJob_3
															.add("--context_param ont_13_m_applied_path="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_13_m_applied_path",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.itemID;
													paraList_tRunJob_3
															.add("--context_param ont_14_itemID="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_14_itemID",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row10.item;
													paraList_tRunJob_3
															.add("--context_param ont_15_item="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("ont_15_item",
																	obj_tRunJob_3);

													i2b2_postgres2.mdr_query_dataelements_0_1.MDR_Query_DataElements childJob_tRunJob_3 = new i2b2_postgres2.mdr_query_dataelements_0_1.MDR_Query_DataElements();
													// pass DataSources
													java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
															.get(KEY_DB_DATASOURCES);
													if (null != talendDataSources_tRunJob_3) {
														java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
														for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
																.entrySet()) {
															dataSources_tRunJob_3
																	.put(talendDataSourceEntry_tRunJob_3
																			.getKey(),
																			talendDataSourceEntry_tRunJob_3
																					.getValue()
																					.getRawDataSource());
														}
														childJob_tRunJob_3
																.setDataSources(dataSources_tRunJob_3);
													}

													childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

													String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
															.runJob((String[]) paraList_tRunJob_3
																	.toArray(new String[paraList_tRunJob_3
																			.size()]));

													errorCode = childJob_tRunJob_3
															.getErrorCode();

													if (childJob_tRunJob_3
															.getErrorCode() == null) {
														globalMap
																.put("tRunJob_3_CHILD_RETURN_CODE",
																		childJob_tRunJob_3
																				.getStatus() != null
																				&& ("failure")
																						.equals(childJob_tRunJob_3
																								.getStatus()) ? 1
																				: 0);
													} else {
														globalMap
																.put("tRunJob_3_CHILD_RETURN_CODE",
																		childJob_tRunJob_3
																				.getErrorCode());
													}
													if (childJob_tRunJob_3
															.getExceptionStackTrace() != null) {
														globalMap
																.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
																		childJob_tRunJob_3
																				.getExceptionStackTrace());
													}

													if (childJob_tRunJob_3
															.getErrorCode() != null
															|| ("failure")
																	.equals(childJob_tRunJob_3
																			.getStatus())) {
														throw new RuntimeException(
																"Child job running failed");
													}

													tos_count_tRunJob_3++;

													/**
													 * [tRunJob_3 main ] stop
													 */

												} // End of branch
													// "DataElementsToOnt"

											} // End of branch "row2"

										} // End of branch "row24"

									} // End of branch "row1"

									/**
									 * [tFileInputJSON_1 end ] start
									 */

									currentComponent = "tFileInputJSON_1";

								}
								globalMap.put("tFileInputJSON_1_NB_LINE",
										nb_line_tFileInputJSON_1);

								ok_Hash.put("tFileInputJSON_1", true);
								end_Hash.put("tFileInputJSON_1",
										System.currentTimeMillis());

								/**
								 * [tFileInputJSON_1 end ] stop
								 */

								/**
								 * [tReplicate_4 end ] start
								 */

								currentComponent = "tReplicate_4";

								ok_Hash.put("tReplicate_4", true);
								end_Hash.put("tReplicate_4",
										System.currentTimeMillis());

								/**
								 * [tReplicate_4 end ] stop
								 */

								/**
								 * [tLogRow_8 end ] start
								 */

								currentComponent = "tLogRow_8";

								// ////
								// ////
								globalMap.put("tLogRow_8_NB_LINE",
										nb_line_tLogRow_8);

								// /////////////////////

								ok_Hash.put("tLogRow_8", true);
								end_Hash.put("tLogRow_8",
										System.currentTimeMillis());

								/**
								 * [tLogRow_8 end ] stop
								 */

								/**
								 * [tFilterRow_3 end ] start
								 */

								currentComponent = "tFilterRow_3";

								globalMap.put("tFilterRow_3_NB_LINE",
										nb_line_tFilterRow_3);
								globalMap.put("tFilterRow_3_NB_LINE_OK",
										nb_line_ok_tFilterRow_3);
								globalMap.put("tFilterRow_3_NB_LINE_REJECT",
										nb_line_reject_tFilterRow_3);

								ok_Hash.put("tFilterRow_3", true);
								end_Hash.put("tFilterRow_3",
										System.currentTimeMillis());

								/**
								 * [tFilterRow_3 end ] stop
								 */

								/**
								 * [tFilterRow_1 end ] start
								 */

								currentComponent = "tFilterRow_1";

								globalMap.put("tFilterRow_1_NB_LINE",
										nb_line_tFilterRow_1);
								globalMap.put("tFilterRow_1_NB_LINE_OK",
										nb_line_ok_tFilterRow_1);
								globalMap.put("tFilterRow_1_NB_LINE_REJECT",
										nb_line_reject_tFilterRow_1);

								ok_Hash.put("tFilterRow_1", true);
								end_Hash.put("tFilterRow_1",
										System.currentTimeMillis());

								/**
								 * [tFilterRow_1 end ] stop
								 */

								/**
								 * [tMap_1 end ] start
								 */

								currentComponent = "tMap_1";

								// ###############################
								// # Lookup hashes releasing
								// ###############################

								ok_Hash.put("tMap_1", true);
								end_Hash.put("tMap_1",
										System.currentTimeMillis());

								/**
								 * [tMap_1 end ] stop
								 */

								/**
								 * [tLogRow_7 end ] start
								 */

								currentComponent = "tLogRow_7";

								// ////
								// ////
								globalMap.put("tLogRow_7_NB_LINE",
										nb_line_tLogRow_7);

								// /////////////////////

								ok_Hash.put("tLogRow_7", true);
								end_Hash.put("tLogRow_7",
										System.currentTimeMillis());

								/**
								 * [tLogRow_7 end ] stop
								 */

								/**
								 * [tReplicate_1 end ] start
								 */

								currentComponent = "tReplicate_1";

								ok_Hash.put("tReplicate_1", true);
								end_Hash.put("tReplicate_1",
										System.currentTimeMillis());

								/**
								 * [tReplicate_1 end ] stop
								 */

								/**
								 * [tMap_4 end ] start
								 */

								currentComponent = "tMap_4";

								// ###############################
								// # Lookup hashes releasing
								// ###############################

								ok_Hash.put("tMap_4", true);
								end_Hash.put("tMap_4",
										System.currentTimeMillis());

								/**
								 * [tMap_4 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								if (CsvWritertFileOutputDelimited_1 != null) {
									CsvWritertFileOutputDelimited_1.close();
								}

								if (outtFileOutputDelimited_1 != null) {
									outtFileOutputDelimited_1.flush();
									outtFileOutputDelimited_1.close();
								}

								globalMap.put("tFileOutputDelimited_1_NB_LINE",
										nb_line_tFileOutputDelimited_1);

								if (isFileGenerated_tFileOutputDelimited_1
										&& nb_line_tFileOutputDelimited_1 == 0) {

									filetFileOutputDelimited_1.delete();

								}

								resourceMap.put(
										"finish_tFileOutputDelimited_1", true);

								ok_Hash.put("tFileOutputDelimited_1", true);
								end_Hash.put("tFileOutputDelimited_1",
										System.currentTimeMillis());

								/**
								 * [tFileOutputDelimited_1 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 end ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								if (CsvWritertFileOutputDelimited_3 != null) {
									CsvWritertFileOutputDelimited_3.close();
								}

								if (outtFileOutputDelimited_3 != null) {
									outtFileOutputDelimited_3.flush();
									outtFileOutputDelimited_3.close();
								}

								globalMap.put("tFileOutputDelimited_3_NB_LINE",
										nb_line_tFileOutputDelimited_3);

								if (isFileGenerated_tFileOutputDelimited_3
										&& nb_line_tFileOutputDelimited_3 == 0) {

									filetFileOutputDelimited_3.delete();

								}

								resourceMap.put(
										"finish_tFileOutputDelimited_3", true);

								ok_Hash.put("tFileOutputDelimited_3", true);
								end_Hash.put("tFileOutputDelimited_3",
										System.currentTimeMillis());

								tRunJob_1Process(globalMap);

								/**
								 * [tFileOutputDelimited_3 end ] stop
								 */

								/**
								 * [tLogRow_2 end ] start
								 */

								currentComponent = "tLogRow_2";

								// ////
								// ////
								globalMap.put("tLogRow_2_NB_LINE",
										nb_line_tLogRow_2);

								// /////////////////////

								ok_Hash.put("tLogRow_2", true);
								end_Hash.put("tLogRow_2",
										System.currentTimeMillis());

								/**
								 * [tLogRow_2 end ] stop
								 */

								/**
								 * [tReplicate_8 end ] start
								 */

								currentComponent = "tReplicate_8";

								ok_Hash.put("tReplicate_8", true);
								end_Hash.put("tReplicate_8",
										System.currentTimeMillis());

								/**
								 * [tReplicate_8 end ] stop
								 */

								/**
								 * [tLogRow_13 end ] start
								 */

								currentComponent = "tLogRow_13";

								// ////
								// ////
								globalMap.put("tLogRow_13_NB_LINE",
										nb_line_tLogRow_13);

								// /////////////////////

								ok_Hash.put("tLogRow_13", true);
								end_Hash.put("tLogRow_13",
										System.currentTimeMillis());

								/**
								 * [tLogRow_13 end ] stop
								 */

								/**
								 * [tFilterRow_5 end ] start
								 */

								currentComponent = "tFilterRow_5";

								globalMap.put("tFilterRow_5_NB_LINE",
										nb_line_tFilterRow_5);
								globalMap.put("tFilterRow_5_NB_LINE_OK",
										nb_line_ok_tFilterRow_5);
								globalMap.put("tFilterRow_5_NB_LINE_REJECT",
										nb_line_reject_tFilterRow_5);

								ok_Hash.put("tFilterRow_5", true);
								end_Hash.put("tFilterRow_5",
										System.currentTimeMillis());

								/**
								 * [tFilterRow_5 end ] stop
								 */

								/**
								 * [tLogRow_16 end ] start
								 */

								currentComponent = "tLogRow_16";

								// ////
								// ////
								globalMap.put("tLogRow_16_NB_LINE",
										nb_line_tLogRow_16);

								// /////////////////////

								ok_Hash.put("tLogRow_16", true);
								end_Hash.put("tLogRow_16",
										System.currentTimeMillis());

								/**
								 * [tLogRow_16 end ] stop
								 */

								/**
								 * [tMap_3 end ] start
								 */

								currentComponent = "tMap_3";

								// ###############################
								// # Lookup hashes releasing
								// ###############################

								ok_Hash.put("tMap_3", true);
								end_Hash.put("tMap_3",
										System.currentTimeMillis());

								/**
								 * [tMap_3 end ] stop
								 */

								/**
								 * [tLogRow_3 end ] start
								 */

								currentComponent = "tLogRow_3";

								// ////
								// ////
								globalMap.put("tLogRow_3_NB_LINE",
										nb_line_tLogRow_3);

								// /////////////////////

								ok_Hash.put("tLogRow_3", true);
								end_Hash.put("tLogRow_3",
										System.currentTimeMillis());

								/**
								 * [tLogRow_3 end ] stop
								 */

								/**
								 * [tReplicate_2 end ] start
								 */

								currentComponent = "tReplicate_2";

								ok_Hash.put("tReplicate_2", true);
								end_Hash.put("tReplicate_2",
										System.currentTimeMillis());

								/**
								 * [tReplicate_2 end ] stop
								 */

								/**
								 * [tLogRow_25 end ] start
								 */

								currentComponent = "tLogRow_25";

								// ////
								// ////
								globalMap.put("tLogRow_25_NB_LINE",
										nb_line_tLogRow_25);

								// /////////////////////

								ok_Hash.put("tLogRow_25", true);
								end_Hash.put("tLogRow_25",
										System.currentTimeMillis());

								/**
								 * [tLogRow_25 end ] stop
								 */

								/**
								 * [tRunJob_3 end ] start
								 */

								currentComponent = "tRunJob_3";

								ok_Hash.put("tRunJob_3", true);
								end_Hash.put("tRunJob_3",
										System.currentTimeMillis());

								/**
								 * [tRunJob_3 end ] stop
								 */

							} // End of branch "row9"

							// Start of branch "row11"
							if (row11 != null) {

								/**
								 * [tLogRow_11 main ] start
								 */

								currentComponent = "tLogRow_11";

								// /////////////////////

								strBuffer_tLogRow_11 = new StringBuilder();
								strBuffer_tLogRow_11.append("[tLogRow_11] ");

								if (row11.HLEVEL != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.HLEVEL));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.Name != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.Name));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.Path != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.Path));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.DataType != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.DataType));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.Update_Date != null) { //

									strBuffer_tLogRow_11.append(FormatterUtils
											.format_Date(row11.Update_Date,
													"dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.Import_Date != null) { //

									strBuffer_tLogRow_11.append(FormatterUtils
											.format_Date(row11.Import_Date,
													"dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.Download_Date != null) { //

									strBuffer_tLogRow_11.append(FormatterUtils
											.format_Date(row11.Download_Date,
													"dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.PathID != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.PathID));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.visual != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.visual));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.codeList != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.codeList));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.source != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.source));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.xml != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.xml));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.m_applied_path != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.m_applied_path));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.itemID != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.itemID));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.item != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.item));

								} //

								strBuffer_tLogRow_11.append("|");

								if (row11.errorMessage != null) { //

									strBuffer_tLogRow_11.append(String
											.valueOf(row11.errorMessage));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap
											.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_11 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(
													System.out));
									globalMap.put("tLogRow_CONSOLE",
											consoleOut_tLogRow_11);
								}

								consoleOut_tLogRow_11
										.println(strBuffer_tLogRow_11
												.toString());
								consoleOut_tLogRow_11.flush();
								nb_line_tLogRow_11++;
								// ////

								// ////

								// /////////////////////

								tos_count_tLogRow_11++;

								/**
								 * [tLogRow_11 main ] stop
								 */

							} // End of branch "row11"

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tReplicate_7 end ] start
				 */

				currentComponent = "tReplicate_7";

				ok_Hash.put("tReplicate_7", true);
				end_Hash.put("tReplicate_7", System.currentTimeMillis());

				/**
				 * [tReplicate_7 end ] stop
				 */

				/**
				 * [tLogRow_15 end ] start
				 */

				currentComponent = "tLogRow_15";

				// ////
				// ////
				globalMap.put("tLogRow_15_NB_LINE", nb_line_tLogRow_15);

				// /////////////////////

				ok_Hash.put("tLogRow_15", true);
				end_Hash.put("tLogRow_15", System.currentTimeMillis());

				/**
				 * [tLogRow_15 end ] stop
				 */

				/**
				 * [tFilterRow_11 end ] start
				 */

				currentComponent = "tFilterRow_11";

				globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
				globalMap.put("tFilterRow_11_NB_LINE_OK",
						nb_line_ok_tFilterRow_11);
				globalMap.put("tFilterRow_11_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_11);

				ok_Hash.put("tFilterRow_11", true);
				end_Hash.put("tFilterRow_11", System.currentTimeMillis());

				/**
				 * [tFilterRow_11 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

				/**
				 * [tLogRow_11 end ] start
				 */

				currentComponent = "tLogRow_11";

				// ////
				// ////
				globalMap.put("tLogRow_11_NB_LINE", nb_line_tLogRow_11);

				// /////////////////////

				ok_Hash.put("tLogRow_11", true);
				end_Hash.put("tLogRow_11", System.currentTimeMillis());

				/**
				 * [tLogRow_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tReplicate_7 finally ] start
				 */

				currentComponent = "tReplicate_7";

				/**
				 * [tReplicate_7 finally ] stop
				 */

				/**
				 * [tLogRow_15 finally ] start
				 */

				currentComponent = "tLogRow_15";

				/**
				 * [tLogRow_15 finally ] stop
				 */

				/**
				 * [tFilterRow_11 finally ] start
				 */

				currentComponent = "tFilterRow_11";

				/**
				 * [tFilterRow_11 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tReplicate_4 finally ] start
				 */

				currentComponent = "tReplicate_4";

				/**
				 * [tReplicate_4 finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_3");

					if (CsvWritertFileOutputDelimited_3 != null) {
						CsvWritertFileOutputDelimited_3.close();
					}

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_3")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_3"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_3")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tReplicate_8 finally ] start
				 */

				currentComponent = "tReplicate_8";

				/**
				 * [tReplicate_8 finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

				/**
				 * [tFilterRow_5 finally ] start
				 */

				currentComponent = "tFilterRow_5";

				/**
				 * [tFilterRow_5 finally ] stop
				 */

				/**
				 * [tLogRow_16 finally ] start
				 */

				currentComponent = "tLogRow_16";

				/**
				 * [tLogRow_16 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tLogRow_25 finally ] start
				 */

				currentComponent = "tLogRow_25";

				/**
				 * [tLogRow_25 finally ] stop
				 */

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

				/**
				 * [tLogRow_11 finally ] start
				 */

				currentComponent = "tLogRow_11";

				/**
				 * [tLogRow_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("queryWorkFile",
						context.queryWorkFile);

				parentContextMap_tRunJob_1.put("MDRStartDesignation",
						context.MDRStartDesignation);

				parentContextMap_tRunJob_1.put("MDRBaseURLPort",
						context.MDRBaseURLPort);

				parentContextMap_tRunJob_1.put("MDRInstance",
						context.MDRInstance);

				parentContextMap_tRunJob_1.put("MDRPassword",
						context.MDRPassword);

				parentContextMap_tRunJob_1.put("fileOnt", context.fileOnt);

				parentContextMap_tRunJob_1.put("MDRUsername",
						context.MDRUsername);

				parentContextMap_tRunJob_1
						.put("folderTemp", context.folderTemp);

				parentContextMap_tRunJob_1
						.put("MDRBaseURL", context.MDRBaseURL);

				parentContextMap_tRunJob_1
						.put("folderMain", context.folderMain);

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = ((String) globalMap
						.get("tFileOutputDelimited_3_FILE_NAME"));
				paraList_tRunJob_1.add("--context_param stackWorkFile="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("stackWorkFile", obj_tRunJob_1);

				System.out
						.println("tRunJob_1 in MDR_Query_Contexts call i2b2_postgres2.mdr_stack_0_1.MDR_Stack with:\n\n"
								+ paraList_tRunJob_1 + "\n");

				i2b2_postgres2.mdr_stack_0_1.MDR_Stack childJob_tRunJob_1 = new i2b2_postgres2.mdr_stack_0_1.MDR_Stack();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MDR_Query_Contexts MDR_Query_ContextsClass = new MDR_Query_Contexts();

		int exitCode = MDR_Query_ContextsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MDR_Query_Contexts.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/mdr_query_contexts_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.queryWorkFile = (String) context
					.getProperty("queryWorkFile");
			context.MDRStartDesignation = (String) context
					.getProperty("MDRStartDesignation");
			context.MDRBaseURLPort = (String) context
					.getProperty("MDRBaseURLPort");
			context.MDRInstance = (String) context.getProperty("MDRInstance");
			String pwd_MDRPassword_value = context.getProperty("MDRPassword");
			context.MDRPassword = null;
			if (pwd_MDRPassword_value != null) {
				if (context_param.containsKey("MDRPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.MDRPassword = pwd_MDRPassword_value;
				} else if (!pwd_MDRPassword_value.isEmpty()) {
					try {
						context.MDRPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_MDRPassword_value);
						context.put("MDRPassword", context.MDRPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.fileOnt = (String) context.getProperty("fileOnt");
			context.MDRUsername = (String) context.getProperty("MDRUsername");
			context.folderTemp = (String) context.getProperty("folderTemp");
			context.MDRBaseURL = (String) context.getProperty("MDRBaseURL");
			context.folderMain = (String) context.getProperty("folderMain");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("queryWorkFile")) {
				context.queryWorkFile = (String) parentContextMap
						.get("queryWorkFile");
			}
			if (parentContextMap.containsKey("MDRStartDesignation")) {
				context.MDRStartDesignation = (String) parentContextMap
						.get("MDRStartDesignation");
			}
			if (parentContextMap.containsKey("MDRBaseURLPort")) {
				context.MDRBaseURLPort = (String) parentContextMap
						.get("MDRBaseURLPort");
			}
			if (parentContextMap.containsKey("MDRInstance")) {
				context.MDRInstance = (String) parentContextMap
						.get("MDRInstance");
			}
			if (parentContextMap.containsKey("MDRPassword")) {
				context.MDRPassword = (java.lang.String) parentContextMap
						.get("MDRPassword");
			}
			if (parentContextMap.containsKey("fileOnt")) {
				context.fileOnt = (String) parentContextMap.get("fileOnt");
			}
			if (parentContextMap.containsKey("MDRUsername")) {
				context.MDRUsername = (String) parentContextMap
						.get("MDRUsername");
			}
			if (parentContextMap.containsKey("folderTemp")) {
				context.folderTemp = (String) parentContextMap
						.get("folderTemp");
			}
			if (parentContextMap.containsKey("MDRBaseURL")) {
				context.MDRBaseURL = (String) parentContextMap
						.get("MDRBaseURL");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("MDRPassword");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : MDR_Query_Contexts");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 336747 characters generated by Talend Open Studio for Data Integration on the
 * March 16, 2015 9:30:35 AM CET
 ************************************************************************************************/
