// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.mdr_stack_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MDR_Stack Purpose: Pr√ºft ob eine temp-Datei ex. und parst diese zur weitergabe an Job MDR_Query<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class MDR_Stack implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (stackWorkFile != null) {

				this.setProperty("stackWorkFile", stackWorkFile.toString());

			}

			if (MDRStartDesignation != null) {

				this.setProperty("MDRStartDesignation",
						MDRStartDesignation.toString());

			}

			if (MDRBaseURLPort != null) {

				this.setProperty("MDRBaseURLPort", MDRBaseURLPort.toString());

			}

			if (MDRInstance != null) {

				this.setProperty("MDRInstance", MDRInstance.toString());

			}

			if (MDRPassword != null) {

				this.setProperty("MDRPassword", MDRPassword.toString());

			}

			if (fileOnt != null) {

				this.setProperty("fileOnt", fileOnt.toString());

			}

			if (MDRUsername != null) {

				this.setProperty("MDRUsername", MDRUsername.toString());

			}

			if (folderTemp != null) {

				this.setProperty("folderTemp", folderTemp.toString());

			}

			if (MDRBaseURL != null) {

				this.setProperty("MDRBaseURL", MDRBaseURL.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

		}

		public String stackWorkFile;

		public String getStackWorkFile() {
			return this.stackWorkFile;
		}

		public String MDRStartDesignation;

		public String getMDRStartDesignation() {
			return this.MDRStartDesignation;
		}

		public String MDRBaseURLPort;

		public String getMDRBaseURLPort() {
			return this.MDRBaseURLPort;
		}

		public String MDRInstance;

		public String getMDRInstance() {
			return this.MDRInstance;
		}

		public java.lang.String MDRPassword;

		public java.lang.String getMDRPassword() {
			return this.MDRPassword;
		}

		public String fileOnt;

		public String getFileOnt() {
			return this.fileOnt;
		}

		public String MDRUsername;

		public String getMDRUsername() {
			return this.MDRUsername;
		}

		public String folderTemp;

		public String getFolderTemp() {
			return this.folderTemp;
		}

		public String MDRBaseURL;

		public String getMDRBaseURL() {
			return this.MDRBaseURL;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MDR_Stack";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MDR_Stack.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MDR_Stack.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileExist_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_2 begin ] start
				 */

				ok_Hash.put("tFileExist_2", false);
				start_Hash.put("tFileExist_2", System.currentTimeMillis());

				currentComponent = "tFileExist_2";

				int tos_count_tFileExist_2 = 0;

				/**
				 * [tFileExist_2 begin ] stop
				 */

				/**
				 * [tFileExist_2 main ] start
				 */

				currentComponent = "tFileExist_2";

				java.io.File file_tFileExist_2 = new java.io.File(
						context.stackWorkFile);
				if (!file_tFileExist_2.exists()) {
					globalMap.put("tFileExist_2_EXISTS", false);
				} else {
					globalMap.put("tFileExist_2_EXISTS", true);
				}

				globalMap.put("tFileExist_2_FILENAME", context.stackWorkFile);

				tos_count_tFileExist_2++;

				/**
				 * [tFileExist_2 main ] stop
				 */

				/**
				 * [tFileExist_2 end ] start
				 */

				currentComponent = "tFileExist_2";

				ok_Hash.put("tFileExist_2", true);
				end_Hash.put("tFileExist_2", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_2_EXISTS"))) {

					tFileRowCount_4Process(globalMap);
				}

				/**
				 * [tFileExist_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_2 finally ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_4 begin ] start
				 */

				ok_Hash.put("tFileRowCount_4", false);
				start_Hash.put("tFileRowCount_4", System.currentTimeMillis());

				currentComponent = "tFileRowCount_4";

				int tos_count_tFileRowCount_4 = 0;

				/**
				 * [tFileRowCount_4 begin ] stop
				 */

				/**
				 * [tFileRowCount_4 main ] start
				 */

				currentComponent = "tFileRowCount_4";

				String tmp_tFileRowCount_4 = ((String) globalMap
						.get("tFileExist_2_FILENAME"));
				int emptyLineCount_tFileRowCount_4 = 0;
				if (tmp_tFileRowCount_4.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_4 = 0;
				if (tmp_tFileRowCount_4.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_4 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_4.setEncoding("ISO-8859-15");
					final jxl.Workbook wb_tFileRowCount_4 = jxl.Workbook
							.getWorkbook(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													((String) globalMap
															.get("tFileExist_2_FILENAME")))),
									wbs_tFileRowCount_4);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_4 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_4 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_4.getSheets());

					if (sheets_tFileRowCount_4.size() <= 0) {
						wb_tFileRowCount_4.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_4 : sheets_tFileRowCount_4) {
						int one_sheet_rows = sheet_tFileRowCount_4.getRows();
						lineCount_tFileRowCount_4 += one_sheet_rows;

						for (int i_tFileRowCount_4 = 0; i_tFileRowCount_4 < one_sheet_rows; i_tFileRowCount_4++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_4
									.getRow(i_tFileRowCount_4);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_4 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_4.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_4 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(
											((String) globalMap
													.get("tFileExist_2_FILENAME"))),
									"ISO-8859-15"));
					String rowSeparator_tFileRowCount_4 = "\n";
					byte[] bytes_tFileRowCount_4 = rowSeparator_tFileRowCount_4
							.getBytes();
					int index_tFileRowCount_4 = 0, oneChar_tFileRowCount_4 = 0, tipEmptyLineCount_tFileRowCount_4 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_4 = true, bReadyEOF_tFileRowCount_4 = false;

					if (bytes_tFileRowCount_4.length > 0) {
						while ((oneChar_tFileRowCount_4 = br_tFileRowCount_4
								.read()) != -1) {
							if (oneChar_tFileRowCount_4 == bytes_tFileRowCount_4[index_tFileRowCount_4]) {

								if (index_tFileRowCount_4 < bytes_tFileRowCount_4.length - 1) {
									index_tFileRowCount_4++;
									continue; // match next char
								}

								if (index_tFileRowCount_4 == bytes_tFileRowCount_4.length - 1) {
									lineCount_tFileRowCount_4++;
									if (bTipEmptyFlagOpen_tFileRowCount_4) {
										tipEmptyLineCount_tFileRowCount_4++;
										emptyLineCount_tFileRowCount_4++;
									}
									bReadyEOF_tFileRowCount_4 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_4 = true;
									index_tFileRowCount_4 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_4 = true;
								bTipEmptyFlagOpen_tFileRowCount_4 = false;
								tipEmptyLineCount_tFileRowCount_4 = 0;
								index_tFileRowCount_4 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_4)
							lineCount_tFileRowCount_4++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_4) {
							lineCount_tFileRowCount_4 -= tipEmptyLineCount_tFileRowCount_4;
							emptyLineCount_tFileRowCount_4 -= tipEmptyLineCount_tFileRowCount_4;
						}
					}
					br_tFileRowCount_4.close();
				}
				lineCount_tFileRowCount_4 -= emptyLineCount_tFileRowCount_4;

				globalMap.put("tFileRowCount_4_COUNT",
						lineCount_tFileRowCount_4);

				tos_count_tFileRowCount_4++;

				/**
				 * [tFileRowCount_4 main ] stop
				 */

				/**
				 * [tFileRowCount_4 end ] start
				 */

				currentComponent = "tFileRowCount_4";

				ok_Hash.put("tFileRowCount_4", true);
				end_Hash.put("tFileRowCount_4", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileRowCount_4_COUNT")) >= 1) {

					tRunJob_3Process(globalMap);
				}

				/**
				 * [tFileRowCount_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_4 finally ] start
				 */

				currentComponent = "tFileRowCount_4";

				/**
				 * [tFileRowCount_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_4_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("stackWorkFile",
						context.stackWorkFile);

				parentContextMap_tRunJob_3.put("MDRStartDesignation",
						context.MDRStartDesignation);

				parentContextMap_tRunJob_3.put("MDRBaseURLPort",
						context.MDRBaseURLPort);

				parentContextMap_tRunJob_3.put("MDRInstance",
						context.MDRInstance);

				parentContextMap_tRunJob_3.put("MDRPassword",
						context.MDRPassword);

				parentContextMap_tRunJob_3.put("fileOnt", context.fileOnt);

				parentContextMap_tRunJob_3.put("MDRUsername",
						context.MDRUsername);

				parentContextMap_tRunJob_3
						.put("folderTemp", context.folderTemp);

				parentContextMap_tRunJob_3
						.put("MDRBaseURL", context.MDRBaseURL);

				parentContextMap_tRunJob_3
						.put("folderMain", context.folderMain);

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = ((String) globalMap
						.get("tFileExist_2_FILENAME"));
				paraList_tRunJob_3.add("--context_param queryWorkFile="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("queryWorkFile", obj_tRunJob_3);

				i2b2_postgres2.mdr_query_contexts_0_1.MDR_Query_Contexts childJob_tRunJob_3 = new i2b2_postgres2.mdr_query_contexts_0_1.MDR_Query_Contexts();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_3.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MDR_Stack MDR_StackClass = new MDR_Stack();

		int exitCode = MDR_StackClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MDR_Stack.class.getClassLoader()
					.getResourceAsStream(
							"i2b2_postgres2/mdr_stack_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.stackWorkFile = (String) context
					.getProperty("stackWorkFile");
			context.MDRStartDesignation = (String) context
					.getProperty("MDRStartDesignation");
			context.MDRBaseURLPort = (String) context
					.getProperty("MDRBaseURLPort");
			context.MDRInstance = (String) context.getProperty("MDRInstance");
			String pwd_MDRPassword_value = context.getProperty("MDRPassword");
			context.MDRPassword = null;
			if (pwd_MDRPassword_value != null) {
				if (context_param.containsKey("MDRPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.MDRPassword = pwd_MDRPassword_value;
				} else if (!pwd_MDRPassword_value.isEmpty()) {
					try {
						context.MDRPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_MDRPassword_value);
						context.put("MDRPassword", context.MDRPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.fileOnt = (String) context.getProperty("fileOnt");
			context.MDRUsername = (String) context.getProperty("MDRUsername");
			context.folderTemp = (String) context.getProperty("folderTemp");
			context.MDRBaseURL = (String) context.getProperty("MDRBaseURL");
			context.folderMain = (String) context.getProperty("folderMain");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("stackWorkFile")) {
				context.stackWorkFile = (String) parentContextMap
						.get("stackWorkFile");
			}
			if (parentContextMap.containsKey("MDRStartDesignation")) {
				context.MDRStartDesignation = (String) parentContextMap
						.get("MDRStartDesignation");
			}
			if (parentContextMap.containsKey("MDRBaseURLPort")) {
				context.MDRBaseURLPort = (String) parentContextMap
						.get("MDRBaseURLPort");
			}
			if (parentContextMap.containsKey("MDRInstance")) {
				context.MDRInstance = (String) parentContextMap
						.get("MDRInstance");
			}
			if (parentContextMap.containsKey("MDRPassword")) {
				context.MDRPassword = (java.lang.String) parentContextMap
						.get("MDRPassword");
			}
			if (parentContextMap.containsKey("fileOnt")) {
				context.fileOnt = (String) parentContextMap.get("fileOnt");
			}
			if (parentContextMap.containsKey("MDRUsername")) {
				context.MDRUsername = (String) parentContextMap
						.get("MDRUsername");
			}
			if (parentContextMap.containsKey("folderTemp")) {
				context.folderTemp = (String) parentContextMap
						.get("folderTemp");
			}
			if (parentContextMap.containsKey("MDRBaseURL")) {
				context.MDRBaseURL = (String) parentContextMap
						.get("MDRBaseURL");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("MDRPassword");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileExist_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileExist_2) {
			globalMap.put("tFileExist_2_SUBPROCESS_STATE", -1);

			e_tFileExist_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : MDR_Stack");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 40460 characters generated by Talend Open Studio for Data Integration on the
 * March 16, 2015 9:30:35 AM CET
 ************************************************************************************************/
