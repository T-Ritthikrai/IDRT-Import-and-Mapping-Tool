// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.mdr_query_dataelements_uom_dt_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MDR_Query_DataElements_uOM_dT Purpose: Fragt mit MDRID (aus Context) MDR ab und liefert Ergebnisse (gefiltert)<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class MDR_Query_DataElements_uOM_dT implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (level != null) {

				this.setProperty("level", level.toString());

			}

			if (MDRID != null) {

				this.setProperty("MDRID", MDRID.toString());

			}

			if (path != null) {

				this.setProperty("path", path.toString());

			}

			if (queryWorkFile != null) {

				this.setProperty("queryWorkFile", queryWorkFile.toString());

			}

			if (queryCurrentID != null) {

				this.setProperty("queryCurrentID", queryCurrentID.toString());

			}

			if (ont_01_HLEVEL != null) {

				this.setProperty("ont_01_HLEVEL", ont_01_HLEVEL.toString());

			}

			if (ont_02_Name != null) {

				this.setProperty("ont_02_Name", ont_02_Name.toString());

			}

			if (ont_03_Path != null) {

				this.setProperty("ont_03_Path", ont_03_Path.toString());

			}

			if (ont_04_DataType != null) {

				this.setProperty("ont_04_DataType", ont_04_DataType.toString());

			}

			if (ont_05_Update_Date != null) {

				String pattern_ont_05_Update_Date = "yyyy-MM-dd HH:mm:ss";
				String value_ont_05_Update_Date = "";
				String[] parts_ont_05_Update_Date = value_ont_05_Update_Date
						.split(";");
				if (parts_ont_05_Update_Date.length > 1) {
					pattern_ont_05_Update_Date = parts_ont_05_Update_Date[0];
					this.setProperty(
							"ont_05_Update_Date",
							pattern_ont_05_Update_Date
									+ ";"
									+ FormatterUtils.format_Date(
											ont_05_Update_Date,
											pattern_ont_05_Update_Date));
				} else {
					this.setProperty("ont_05_Update_Date", FormatterUtils
							.format_Date(ont_05_Update_Date,
									pattern_ont_05_Update_Date));
				}

			}

			if (ont_06_Import_Date != null) {

				String pattern_ont_06_Import_Date = "yyyy-MM-dd HH:mm:ss";
				String value_ont_06_Import_Date = "";
				String[] parts_ont_06_Import_Date = value_ont_06_Import_Date
						.split(";");
				if (parts_ont_06_Import_Date.length > 1) {
					pattern_ont_06_Import_Date = parts_ont_06_Import_Date[0];
					this.setProperty(
							"ont_06_Import_Date",
							pattern_ont_06_Import_Date
									+ ";"
									+ FormatterUtils.format_Date(
											ont_06_Import_Date,
											pattern_ont_06_Import_Date));
				} else {
					this.setProperty("ont_06_Import_Date", FormatterUtils
							.format_Date(ont_06_Import_Date,
									pattern_ont_06_Import_Date));
				}

			}

			if (ont_07_Download_Date != null) {

				String pattern_ont_07_Download_Date = "yyyy-MM-dd HH:mm:ss";
				String value_ont_07_Download_Date = "";
				String[] parts_ont_07_Download_Date = value_ont_07_Download_Date
						.split(";");
				if (parts_ont_07_Download_Date.length > 1) {
					pattern_ont_07_Download_Date = parts_ont_07_Download_Date[0];
					this.setProperty(
							"ont_07_Download_Date",
							pattern_ont_07_Download_Date
									+ ";"
									+ FormatterUtils.format_Date(
											ont_07_Download_Date,
											pattern_ont_07_Download_Date));
				} else {
					this.setProperty("ont_07_Download_Date", FormatterUtils
							.format_Date(ont_07_Download_Date,
									pattern_ont_07_Download_Date));
				}

			}

			if (ont_08_PathID != null) {

				this.setProperty("ont_08_PathID", ont_08_PathID.toString());

			}

			if (ont_09_visual != null) {

				this.setProperty("ont_09_visual", ont_09_visual.toString());

			}

			if (ont_10_codeList != null) {

				this.setProperty("ont_10_codeList", ont_10_codeList.toString());

			}

			if (ont_11_source != null) {

				this.setProperty("ont_11_source", ont_11_source.toString());

			}

			if (ont_12_xml != null) {

				this.setProperty("ont_12_xml", ont_12_xml.toString());

			}

			if (ont_13_m_applied_path != null) {

				this.setProperty("ont_13_m_applied_path",
						ont_13_m_applied_path.toString());

			}

			if (ont_14_itemID != null) {

				this.setProperty("ont_14_itemID", ont_14_itemID.toString());

			}

			if (ont_15_item != null) {

				this.setProperty("ont_15_item", ont_15_item.toString());

			}

			if (MDRStartDesignation != null) {

				this.setProperty("MDRStartDesignation",
						MDRStartDesignation.toString());

			}

			if (MDRBaseURLPort != null) {

				this.setProperty("MDRBaseURLPort", MDRBaseURLPort.toString());

			}

			if (MDRInstance != null) {

				this.setProperty("MDRInstance", MDRInstance.toString());

			}

			if (MDRPassword != null) {

				this.setProperty("MDRPassword", MDRPassword.toString());

			}

			if (fileOnt != null) {

				this.setProperty("fileOnt", fileOnt.toString());

			}

			if (MDRUsername != null) {

				this.setProperty("MDRUsername", MDRUsername.toString());

			}

			if (folderTemp != null) {

				this.setProperty("folderTemp", folderTemp.toString());

			}

			if (MDRBaseURL != null) {

				this.setProperty("MDRBaseURL", MDRBaseURL.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (DE_unitOfMeasure != null) {

				this.setProperty("DE_unitOfMeasure",
						DE_unitOfMeasure.toString());

			}

			if (DE_domain_ID != null) {

				this.setProperty("DE_domain_ID", DE_domain_ID.toString());

			}

			if (DE_dataType != null) {

				this.setProperty("DE_dataType", DE_dataType.toString());

			}

		}

		public Integer level;

		public Integer getLevel() {
			return this.level;
		}

		public String MDRID;

		public String getMDRID() {
			return this.MDRID;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public String queryWorkFile;

		public String getQueryWorkFile() {
			return this.queryWorkFile;
		}

		public String queryCurrentID;

		public String getQueryCurrentID() {
			return this.queryCurrentID;
		}

		public Integer ont_01_HLEVEL;

		public Integer getOnt_01_HLEVEL() {
			return this.ont_01_HLEVEL;
		}

		public String ont_02_Name;

		public String getOnt_02_Name() {
			return this.ont_02_Name;
		}

		public String ont_03_Path;

		public String getOnt_03_Path() {
			return this.ont_03_Path;
		}

		public String ont_04_DataType;

		public String getOnt_04_DataType() {
			return this.ont_04_DataType;
		}

		public java.util.Date ont_05_Update_Date;

		public java.util.Date getOnt_05_Update_Date() {
			return this.ont_05_Update_Date;
		}

		public java.util.Date ont_06_Import_Date;

		public java.util.Date getOnt_06_Import_Date() {
			return this.ont_06_Import_Date;
		}

		public java.util.Date ont_07_Download_Date;

		public java.util.Date getOnt_07_Download_Date() {
			return this.ont_07_Download_Date;
		}

		public String ont_08_PathID;

		public String getOnt_08_PathID() {
			return this.ont_08_PathID;
		}

		public String ont_09_visual;

		public String getOnt_09_visual() {
			return this.ont_09_visual;
		}

		public String ont_10_codeList;

		public String getOnt_10_codeList() {
			return this.ont_10_codeList;
		}

		public String ont_11_source;

		public String getOnt_11_source() {
			return this.ont_11_source;
		}

		public String ont_12_xml;

		public String getOnt_12_xml() {
			return this.ont_12_xml;
		}

		public String ont_13_m_applied_path;

		public String getOnt_13_m_applied_path() {
			return this.ont_13_m_applied_path;
		}

		public String ont_14_itemID;

		public String getOnt_14_itemID() {
			return this.ont_14_itemID;
		}

		public String ont_15_item;

		public String getOnt_15_item() {
			return this.ont_15_item;
		}

		public String MDRStartDesignation;

		public String getMDRStartDesignation() {
			return this.MDRStartDesignation;
		}

		public String MDRBaseURLPort;

		public String getMDRBaseURLPort() {
			return this.MDRBaseURLPort;
		}

		public String MDRInstance;

		public String getMDRInstance() {
			return this.MDRInstance;
		}

		public java.lang.String MDRPassword;

		public java.lang.String getMDRPassword() {
			return this.MDRPassword;
		}

		public String fileOnt;

		public String getFileOnt() {
			return this.fileOnt;
		}

		public String MDRUsername;

		public String getMDRUsername() {
			return this.MDRUsername;
		}

		public String folderTemp;

		public String getFolderTemp() {
			return this.folderTemp;
		}

		public String MDRBaseURL;

		public String getMDRBaseURL() {
			return this.MDRBaseURL;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String DE_unitOfMeasure;

		public String getDE_unitOfMeasure() {
			return this.DE_unitOfMeasure;
		}

		public String DE_domain_ID;

		public String getDE_domain_ID() {
			return this.DE_domain_ID;
		}

		public String DE_dataType;

		public String getDE_dataType() {
			return this.DE_dataType;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MDR_Query_DataElements_uOM_dT";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MDR_Query_DataElements_uOM_dT.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MDR_Query_DataElements_uOM_dT.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputJSON_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row52Struct implements
			routines.system.IPersistableRow<row52Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row52Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row50Struct implements
			routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row51Struct implements
			routines.system.IPersistableRow<row51Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tMap6DE2Ont_LeafsStruct implements
			routines.system.IPersistableRow<tMap6DE2Ont_LeafsStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap6DE2Ont_LeafsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.sign = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputJSON_8Struct implements
			routines.system.IPersistableRow<after_tFileInputJSON_8Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.sign = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputJSON_8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputJSON_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputJSON_2Process(globalMap);

				row42Struct row42 = new row42Struct();
				tMap6DE2Ont_LeafsStruct tMap6DE2Ont_Leafs = new tMap6DE2Ont_LeafsStruct();
				row52Struct row52 = new row52Struct();
				row50Struct row50 = new row50Struct();
				row51Struct row51 = new row51Struct();

				/**
				 * [tLogRow_25 begin ] start
				 */

				ok_Hash.put("tLogRow_25", false);
				start_Hash.put("tLogRow_25", System.currentTimeMillis());

				currentComponent = "tLogRow_25";

				int tos_count_tLogRow_25 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_25 = "|";
				java.io.PrintStream consoleOut_tLogRow_25 = null;

				StringBuilder strBuffer_tLogRow_25 = null;
				int nb_line_tLogRow_25 = 0;
				// /////////////////////

				/**
				 * [tLogRow_25 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_17", false);
				start_Hash.put("tFileOutputDelimited_17",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_17";

				int tos_count_tFileOutputDelimited_17 = 0;

				String fileName_tFileOutputDelimited_17 = "";
				fileName_tFileOutputDelimited_17 = (new java.io.File(
						context.folderMain + context.folderTemp + "ont_mudt"
								+ context.DE_domain_ID + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_17 = null;
				String extension_tFileOutputDelimited_17 = null;
				String directory_tFileOutputDelimited_17 = null;
				if ((fileName_tFileOutputDelimited_17.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") < fileName_tFileOutputDelimited_17
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(0, fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
							.substring(0, fileName_tFileOutputDelimited_17
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(0, fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					}
					directory_tFileOutputDelimited_17 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_17 = true;
				java.io.File filetFileOutputDelimited_17 = new java.io.File(
						fileName_tFileOutputDelimited_17);
				globalMap.put("tFileOutputDelimited_17_FILE_NAME",
						fileName_tFileOutputDelimited_17);

				if (filetFileOutputDelimited_17.exists()) {
					isFileGenerated_tFileOutputDelimited_17 = false;
				}

				String[] headColutFileOutputDelimited_17 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_17 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_17[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_17 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_17[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_17[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_17 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_17[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_17[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_17 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_17[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_17 = 0;
				int splitEvery_tFileOutputDelimited_17 = 1000;
				int splitedFileNo_tFileOutputDelimited_17 = 0;
				int currentRow_tFileOutputDelimited_17 = 0;

				CSVBasicSet_tFileOutputDelimited_17 csvSettings_tFileOutputDelimited_17 = new CSVBasicSet_tFileOutputDelimited_17();
				csvSettings_tFileOutputDelimited_17.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_17.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_17.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_17 != null
						&& directory_tFileOutputDelimited_17.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_17 = new java.io.File(
							directory_tFileOutputDelimited_17);
					if (!dir_tFileOutputDelimited_17.exists()) {

						dir_tFileOutputDelimited_17.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_17 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_17 = null;

				outtFileOutputDelimited_17 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_17, true),
								"ISO-8859-15"));
				java.io.StringWriter strWritertFileOutputDelimited_17 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_17 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_17);
				CsvWritertFileOutputDelimited_17
						.setSeparator(csvSettings_tFileOutputDelimited_17
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_17
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_17.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_17.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_17
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_17
											.getRowDelim());
				}

				if (filetFileOutputDelimited_17.length() == 0) {

					headColutFileOutputDelimited_17[0] = "HLEVEL";

					headColutFileOutputDelimited_17[1] = "Name";

					headColutFileOutputDelimited_17[2] = "Path";

					headColutFileOutputDelimited_17[3] = "DataType";

					headColutFileOutputDelimited_17[4] = "Update_Date";

					headColutFileOutputDelimited_17[5] = "Import_Date";

					headColutFileOutputDelimited_17[6] = "Download_Date";

					headColutFileOutputDelimited_17[7] = "PathID";

					headColutFileOutputDelimited_17[8] = "visual";

					headColutFileOutputDelimited_17[9] = "codeList";

					headColutFileOutputDelimited_17[10] = "source";

					headColutFileOutputDelimited_17[11] = "xml";

					headColutFileOutputDelimited_17[12] = "m_applied_path";

					headColutFileOutputDelimited_17[13] = "itemID";

					headColutFileOutputDelimited_17[14] = "item";

					CsvWritertFileOutputDelimited_17
							.writeNext(headColutFileOutputDelimited_17);
					CsvWritertFileOutputDelimited_17.flush();

					outtFileOutputDelimited_17
							.write(strWritertFileOutputDelimited_17.getBuffer()
									.toString());
					outtFileOutputDelimited_17.flush();
					strWritertFileOutputDelimited_17.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_17.getBuffer()
									.length());

				}

				CsvWritertFileOutputDelimited_17
						.setEscapeChar(csvSettings_tFileOutputDelimited_17
								.getEscapeChar());
				CsvWritertFileOutputDelimited_17
						.setQuoteChar(csvSettings_tFileOutputDelimited_17
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_17
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_17",
						CsvWritertFileOutputDelimited_17);

				resourceMap.put("out_tFileOutputDelimited_17",
						outtFileOutputDelimited_17);

				resourceMap.put("nb_line_tFileOutputDelimited_17",
						nb_line_tFileOutputDelimited_17);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_17",
						isFileGenerated_tFileOutputDelimited_17);

				resourceMap.put("filetFileOutputDelimited_17",
						filetFileOutputDelimited_17);

				/**
				 * [tFileOutputDelimited_17 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_16", false);
				start_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_16";

				int tos_count_tFileOutputDelimited_16 = 0;

				String fileName_tFileOutputDelimited_16 = "";
				fileName_tFileOutputDelimited_16 = (new java.io.File(
						context.folderMain + context.folderTemp + "temp_mudt"
								+ context.DE_domain_ID + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_16 = null;
				String extension_tFileOutputDelimited_16 = null;
				String directory_tFileOutputDelimited_16 = null;
				if ((fileName_tFileOutputDelimited_16.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") < fileName_tFileOutputDelimited_16
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
							.substring(0, fileName_tFileOutputDelimited_16
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					}
					directory_tFileOutputDelimited_16 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_16 = true;
				java.io.File filetFileOutputDelimited_16 = new java.io.File(
						fileName_tFileOutputDelimited_16);
				globalMap.put("tFileOutputDelimited_16_FILE_NAME",
						fileName_tFileOutputDelimited_16);

				if (filetFileOutputDelimited_16.exists()) {
					isFileGenerated_tFileOutputDelimited_16 = false;
				}

				String[] headColutFileOutputDelimited_16 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_16 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_16[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_16 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_16[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_16[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_16 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_16[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_16[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_16 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_16[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_16 = 0;
				int splitEvery_tFileOutputDelimited_16 = 1000;
				int splitedFileNo_tFileOutputDelimited_16 = 0;
				int currentRow_tFileOutputDelimited_16 = 0;

				CSVBasicSet_tFileOutputDelimited_16 csvSettings_tFileOutputDelimited_16 = new CSVBasicSet_tFileOutputDelimited_16();
				csvSettings_tFileOutputDelimited_16.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_16.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_16.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_16 != null
						&& directory_tFileOutputDelimited_16.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_16 = new java.io.File(
							directory_tFileOutputDelimited_16);
					if (!dir_tFileOutputDelimited_16.exists()) {

						dir_tFileOutputDelimited_16.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_16 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_16 = null;

				outtFileOutputDelimited_16 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_16, true),
								"ISO-8859-15"));
				java.io.StringWriter strWritertFileOutputDelimited_16 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_16 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_16);
				CsvWritertFileOutputDelimited_16
						.setSeparator(csvSettings_tFileOutputDelimited_16
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_16
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_16.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_16.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_16
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_16
											.getRowDelim());
				}

				if (filetFileOutputDelimited_16.length() == 0) {

					headColutFileOutputDelimited_16[0] = "HLEVEL";

					headColutFileOutputDelimited_16[1] = "Name";

					headColutFileOutputDelimited_16[2] = "Path";

					headColutFileOutputDelimited_16[3] = "DataType";

					headColutFileOutputDelimited_16[4] = "Update_Date";

					headColutFileOutputDelimited_16[5] = "Import_Date";

					headColutFileOutputDelimited_16[6] = "Download_Date";

					headColutFileOutputDelimited_16[7] = "PathID";

					headColutFileOutputDelimited_16[8] = "visual";

					headColutFileOutputDelimited_16[9] = "codeList";

					headColutFileOutputDelimited_16[10] = "source";

					headColutFileOutputDelimited_16[11] = "xml";

					headColutFileOutputDelimited_16[12] = "m_applied_path";

					headColutFileOutputDelimited_16[13] = "itemID";

					headColutFileOutputDelimited_16[14] = "item";

					CsvWritertFileOutputDelimited_16
							.writeNext(headColutFileOutputDelimited_16);
					CsvWritertFileOutputDelimited_16.flush();

					outtFileOutputDelimited_16
							.write(strWritertFileOutputDelimited_16.getBuffer()
									.toString());
					outtFileOutputDelimited_16.flush();
					strWritertFileOutputDelimited_16.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_16.getBuffer()
									.length());

				}

				CsvWritertFileOutputDelimited_16
						.setEscapeChar(csvSettings_tFileOutputDelimited_16
								.getEscapeChar());
				CsvWritertFileOutputDelimited_16
						.setQuoteChar(csvSettings_tFileOutputDelimited_16
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_16
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_16",
						CsvWritertFileOutputDelimited_16);

				resourceMap.put("out_tFileOutputDelimited_16",
						outtFileOutputDelimited_16);

				resourceMap.put("nb_line_tFileOutputDelimited_16",
						nb_line_tFileOutputDelimited_16);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_16",
						isFileGenerated_tFileOutputDelimited_16);

				resourceMap.put("filetFileOutputDelimited_16",
						filetFileOutputDelimited_16);

				/**
				 * [tFileOutputDelimited_16 begin ] stop
				 */

				/**
				 * [tReplicate_20 begin ] start
				 */

				ok_Hash.put("tReplicate_20", false);
				start_Hash.put("tReplicate_20", System.currentTimeMillis());

				currentComponent = "tReplicate_20";

				int tos_count_tReplicate_20 = 0;

				/**
				 * [tReplicate_20 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				tHash_Lookup_row2.initGet();

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
					String itemID;
					String dataTypeSupportedByIDRT;
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tMap6DE2Ont_LeafsStruct tMap6DE2Ont_Leafs_tmp = new tMap6DE2Ont_LeafsStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputJSON_8 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_8", false);
				start_Hash.put("tFileInputJSON_8", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_8";

				int tos_count_tFileInputJSON_8 = 0;

				class JSONUtil_tFileInputJSON_8 {
					public int getData(
							String query,
							javax.script.Invocable invocableEngine,
							java.util.List<org.json.simple.JSONArray> jsonResultList,
							int recordMaxSize) {
						try {
							// only 2 types: String/Boolean
							String resultObj = invocableEngine.invokeFunction(
									"jsonPath", query).toString();
							if (!"false".equals(resultObj)) {
								org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
										.parse(resultObj);
								jsonResultList.add(resultArray);
								if (recordMaxSize != -1
										&& recordMaxSize != resultArray.size()) {
									// just give an error, don't stop

									System.err
											.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
								}
								recordMaxSize = Math.max(recordMaxSize,
										resultArray.size());
							} else {

								System.err
										.println("Can't find any data with JSONPath "
												+ query);
								// add null to take a place in List(buffer)
								jsonResultList.add(null);
							}
						} catch (java.lang.Exception e) {

							e.printStackTrace();
						}
						return recordMaxSize;
					}

					void setRowValue_0(
							row42Struct row42,
							java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_8,
							int nbResultArray_tFileInputJSON_8)
							throws java.io.UnsupportedEncodingException {
						if (JSONResultList_tFileInputJSON_8.get(0) != null
								&& nbResultArray_tFileInputJSON_8 < JSONResultList_tFileInputJSON_8
										.get(0).size()
								&& JSONResultList_tFileInputJSON_8.get(0).get(
										nbResultArray_tFileInputJSON_8) != null) {
							row42.id = JSONResultList_tFileInputJSON_8.get(0)
									.get(nbResultArray_tFileInputJSON_8)
									.toString();
						} else {

							row42.id = null;

						}
						if (JSONResultList_tFileInputJSON_8.get(1) != null
								&& nbResultArray_tFileInputJSON_8 < JSONResultList_tFileInputJSON_8
										.get(1).size()
								&& JSONResultList_tFileInputJSON_8.get(1).get(
										nbResultArray_tFileInputJSON_8) != null) {
							row42.sign = JSONResultList_tFileInputJSON_8.get(1)
									.get(nbResultArray_tFileInputJSON_8)
									.toString();
						} else {

							row42.sign = null;

						}
						if (JSONResultList_tFileInputJSON_8.get(2) != null
								&& nbResultArray_tFileInputJSON_8 < JSONResultList_tFileInputJSON_8
										.get(2).size()
								&& JSONResultList_tFileInputJSON_8.get(2).get(
										nbResultArray_tFileInputJSON_8) != null) {
							row42.item = JSONResultList_tFileInputJSON_8.get(2)
									.get(nbResultArray_tFileInputJSON_8)
									.toString();
						} else {

							row42.item = null;

						}
					}
				}
				int nb_line_tFileInputJSON_8 = 0;
				java.lang.Object jsonText_tFileInputJSON_8 = null;
				JSONUtil_tFileInputJSON_8 jsonUtil_tFileInputJSON_8 = new JSONUtil_tFileInputJSON_8();
				java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_8 = new java.util.ArrayList<org.json.simple.JSONArray>();
				int recordMaxSize_tFileInputJSON_8 = -1;

				// init js json engine
				javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_8 = new javax.script.ScriptEngineManager();
				javax.script.ScriptEngine jsEngine_tFileInputJSON_8 = scriptEngineMgr_tFileInputJSON_8
						.getEngineByName("JavaScript");
				if (jsEngine_tFileInputJSON_8 == null) {

					System.err.println("No script engine found for JavaScript");
				} else {
					java.net.URL jsonjsUrl_tFileInputJSON_8 = com.jsonpath.test.ReadJar.class
							.getResource("json.js");
					if (jsonjsUrl_tFileInputJSON_8 != null) {
						jsEngine_tFileInputJSON_8
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonjsUrl_tFileInputJSON_8
														.openStream())));
					}

					java.net.URL jsonpathjsUrl_tFileInputJSON_8 = com.jsonpath.test.ReadJar.class
							.getResource("jsonpath.js");
					if (jsonpathjsUrl_tFileInputJSON_8 != null) {
						jsEngine_tFileInputJSON_8
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonpathjsUrl_tFileInputJSON_8
														.openStream())));
					}

					java.io.InputStreamReader fr_tFileInputJSON_8 = null;
					try {

						java.net.URL url_tFileInputJSON_8 = new java.net.URL(
								context.MDRBaseURL + "/" + context.MDRInstance
										+ "/mdr/entities/"
										+ context.DE_unitOfMeasure
										+ "/designations");
						java.net.URLConnection urlConn_tFileInputJSON_8 = url_tFileInputJSON_8
								.openConnection();
						fr_tFileInputJSON_8 = new java.io.InputStreamReader(
								urlConn_tFileInputJSON_8.getInputStream(),
								"ISO-8859-15");

						jsonText_tFileInputJSON_8 = org.json.simple.JSONValue
								.parse(fr_tFileInputJSON_8);
						if (jsonText_tFileInputJSON_8 == null) {
							throw new RuntimeException(
									"fail to parse the json file : "
											+ context.MDRBaseURL + "/"
											+ context.MDRInstance
											+ "/mdr/entities/"
											+ context.DE_unitOfMeasure
											+ "/designations");
						}
					} catch (java.lang.Exception e_tFileInputJSON_8) {

						System.err.println(e_tFileInputJSON_8.getMessage());

					} finally {
						if (fr_tFileInputJSON_8 != null) {
							fr_tFileInputJSON_8.close();
						}
					}

					if (jsonText_tFileInputJSON_8 != null) {
						jsEngine_tFileInputJSON_8.eval("var obj="
								+ jsonText_tFileInputJSON_8.toString());

						javax.script.Invocable invocableEngine_tFileInputJSON_8 = (javax.script.Invocable) jsEngine_tFileInputJSON_8;

						recordMaxSize_tFileInputJSON_8 = jsonUtil_tFileInputJSON_8
								.getData("$.[*].id",
										invocableEngine_tFileInputJSON_8,
										JSONResultList_tFileInputJSON_8,
										recordMaxSize_tFileInputJSON_8);

						recordMaxSize_tFileInputJSON_8 = jsonUtil_tFileInputJSON_8
								.getData("$.[*].sign",
										invocableEngine_tFileInputJSON_8,
										JSONResultList_tFileInputJSON_8,
										recordMaxSize_tFileInputJSON_8);

						recordMaxSize_tFileInputJSON_8 = jsonUtil_tFileInputJSON_8
								.getData("$.[*].item",
										invocableEngine_tFileInputJSON_8,
										JSONResultList_tFileInputJSON_8,
										recordMaxSize_tFileInputJSON_8);

					}
				}
				for (int nbResultArray_tFileInputJSON_8 = 0; nbResultArray_tFileInputJSON_8 < recordMaxSize_tFileInputJSON_8; nbResultArray_tFileInputJSON_8++) {

					nb_line_tFileInputJSON_8++;
					row42 = null;
					boolean whetherReject_tFileInputJSON_8 = false;
					row42 = new row42Struct();
					try {
						jsonUtil_tFileInputJSON_8.setRowValue_0(row42,
								JSONResultList_tFileInputJSON_8,
								nbResultArray_tFileInputJSON_8);
					} catch (java.lang.Exception e) {
						whetherReject_tFileInputJSON_8 = true;
						System.err.println(e.getMessage());
						row42 = null;
					}

					/**
					 * [tFileInputJSON_8 begin ] stop
					 */

					/**
					 * [tFileInputJSON_8 main ] start
					 */

					currentComponent = "tFileInputJSON_8";

					tos_count_tFileInputJSON_8++;

					/**
					 * [tFileInputJSON_8 main ] stop
					 */
					// Start of branch "row42"
					if (row42 != null) {

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								forceLooprow2 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow2 = true;
						} // G 21

						row2Struct row2 = null;

						while ((tHash_Lookup_row2 != null && tHash_Lookup_row2
								.hasNext()) || forceLooprow2) { // G_TM_M_043

							// CALL close loop of lookup 'row2'

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (!forceLooprow2) { // G 46

								fromLookup_row2 = tHash_Lookup_row2.next();

								if (fromLookup_row2 != null) {
									row2 = fromLookup_row2;
								}

							} // G 46

							forceLooprow2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;
								Var.itemID = row42.item.substring(row42.item
										.lastIndexOf("@") + 1);
								Var.dataTypeSupportedByIDRT = row2.name
										.equalsIgnoreCase("integer") ? "xml"
										: "";// ###############################
								// ###############################
								// # Output tables

								tMap6DE2Ont_Leafs = null;

								// # Output table : 'tMap6DE2Ont_Leafs'
								tMap6DE2Ont_Leafs_tmp.HLEVEL = context.ont_01_HLEVEL + 1;
								tMap6DE2Ont_Leafs_tmp.Name = context.ont_02_Name
										+ " ("
										+ row42.sign
										+ ")"
										+ " - ["
										+ row2.name + "]";
								tMap6DE2Ont_Leafs_tmp.Path = context.ont_03_Path
										+ "\\" + Var.itemID + "\\";
								tMap6DE2Ont_Leafs_tmp.DataType = row2.name;
								tMap6DE2Ont_Leafs_tmp.Update_Date = TalendDate
										.parseDate("dd-MM-yyyy", TalendDate
												.getDate("dd-MM-yyyy"));
								tMap6DE2Ont_Leafs_tmp.Import_Date = TalendDate
										.parseDate("dd-MM-yyyy", TalendDate
												.getDate("dd-MM-yyyy"));
								tMap6DE2Ont_Leafs_tmp.Download_Date = TalendDate
										.parseDate("dd-MM-yyyy", TalendDate
												.getDate("dd-MM-yyyy"));
								tMap6DE2Ont_Leafs_tmp.PathID = null;
								tMap6DE2Ont_Leafs_tmp.visual = "LAE";
								tMap6DE2Ont_Leafs_tmp.codeList = null;
								tMap6DE2Ont_Leafs_tmp.source = "MDR Central";
								tMap6DE2Ont_Leafs_tmp.xml = Var.dataTypeSupportedByIDRT;
								tMap6DE2Ont_Leafs_tmp.m_applied_path = "@";
								tMap6DE2Ont_Leafs_tmp.itemID = Var.itemID;
								tMap6DE2Ont_Leafs_tmp.item = row42.item;
								tMap6DE2Ont_Leafs = tMap6DE2Ont_Leafs_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "tMap6DE2Ont_Leafs"
							if (tMap6DE2Ont_Leafs != null) {

								/**
								 * [tReplicate_20 main ] start
								 */

								currentComponent = "tReplicate_20";

								row52 = new row52Struct();

								row52.HLEVEL = tMap6DE2Ont_Leafs.HLEVEL;
								row52.Name = tMap6DE2Ont_Leafs.Name;
								row52.Path = tMap6DE2Ont_Leafs.Path;
								row52.DataType = tMap6DE2Ont_Leafs.DataType;
								row52.Update_Date = tMap6DE2Ont_Leafs.Update_Date;
								row52.Import_Date = tMap6DE2Ont_Leafs.Import_Date;
								row52.Download_Date = tMap6DE2Ont_Leafs.Download_Date;
								row52.PathID = tMap6DE2Ont_Leafs.PathID;
								row52.visual = tMap6DE2Ont_Leafs.visual;
								row52.codeList = tMap6DE2Ont_Leafs.codeList;
								row52.source = tMap6DE2Ont_Leafs.source;
								row52.xml = tMap6DE2Ont_Leafs.xml;
								row52.m_applied_path = tMap6DE2Ont_Leafs.m_applied_path;
								row52.itemID = tMap6DE2Ont_Leafs.itemID;
								row52.item = tMap6DE2Ont_Leafs.item;
								row50 = new row50Struct();

								row50.HLEVEL = tMap6DE2Ont_Leafs.HLEVEL;
								row50.Name = tMap6DE2Ont_Leafs.Name;
								row50.Path = tMap6DE2Ont_Leafs.Path;
								row50.DataType = tMap6DE2Ont_Leafs.DataType;
								row50.Update_Date = tMap6DE2Ont_Leafs.Update_Date;
								row50.Import_Date = tMap6DE2Ont_Leafs.Import_Date;
								row50.Download_Date = tMap6DE2Ont_Leafs.Download_Date;
								row50.PathID = tMap6DE2Ont_Leafs.PathID;
								row50.visual = tMap6DE2Ont_Leafs.visual;
								row50.codeList = tMap6DE2Ont_Leafs.codeList;
								row50.source = tMap6DE2Ont_Leafs.source;
								row50.xml = tMap6DE2Ont_Leafs.xml;
								row50.m_applied_path = tMap6DE2Ont_Leafs.m_applied_path;
								row50.itemID = tMap6DE2Ont_Leafs.itemID;
								row50.item = tMap6DE2Ont_Leafs.item;
								row51 = new row51Struct();

								row51.HLEVEL = tMap6DE2Ont_Leafs.HLEVEL;
								row51.Name = tMap6DE2Ont_Leafs.Name;
								row51.Path = tMap6DE2Ont_Leafs.Path;
								row51.DataType = tMap6DE2Ont_Leafs.DataType;
								row51.Update_Date = tMap6DE2Ont_Leafs.Update_Date;
								row51.Import_Date = tMap6DE2Ont_Leafs.Import_Date;
								row51.Download_Date = tMap6DE2Ont_Leafs.Download_Date;
								row51.PathID = tMap6DE2Ont_Leafs.PathID;
								row51.visual = tMap6DE2Ont_Leafs.visual;
								row51.codeList = tMap6DE2Ont_Leafs.codeList;
								row51.source = tMap6DE2Ont_Leafs.source;
								row51.xml = tMap6DE2Ont_Leafs.xml;
								row51.m_applied_path = tMap6DE2Ont_Leafs.m_applied_path;
								row51.itemID = tMap6DE2Ont_Leafs.itemID;
								row51.item = tMap6DE2Ont_Leafs.item;

								tos_count_tReplicate_20++;

								/**
								 * [tReplicate_20 main ] stop
								 */

								/**
								 * [tLogRow_25 main ] start
								 */

								currentComponent = "tLogRow_25";

								// /////////////////////

								strBuffer_tLogRow_25 = new StringBuilder();
								strBuffer_tLogRow_25.append("[tLogRow_25] ");

								if (row52.HLEVEL != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.HLEVEL));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.Name != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.Name));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.Path != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.Path));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.DataType != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.DataType));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.Update_Date != null) { //

									strBuffer_tLogRow_25.append(FormatterUtils
											.format_Date(row52.Update_Date,
													"dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.Import_Date != null) { //

									strBuffer_tLogRow_25.append(FormatterUtils
											.format_Date(row52.Import_Date,
													"dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.Download_Date != null) { //

									strBuffer_tLogRow_25.append(FormatterUtils
											.format_Date(row52.Download_Date,
													"dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.PathID != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.PathID));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.visual != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.visual));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.codeList != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.codeList));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.source != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.source));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.xml != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.xml));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.m_applied_path != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.m_applied_path));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.itemID != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.itemID));

								} //

								strBuffer_tLogRow_25.append("|");

								if (row52.item != null) { //

									strBuffer_tLogRow_25.append(String
											.valueOf(row52.item));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_25 = (java.io.PrintStream) globalMap
											.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_25 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(
													System.out));
									globalMap.put("tLogRow_CONSOLE",
											consoleOut_tLogRow_25);
								}

								consoleOut_tLogRow_25
										.println(strBuffer_tLogRow_25
												.toString());
								consoleOut_tLogRow_25.flush();
								nb_line_tLogRow_25++;
								// ////

								// ////

								// /////////////////////

								tos_count_tLogRow_25++;

								/**
								 * [tLogRow_25 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_17 main ] start
								 */

								currentComponent = "tFileOutputDelimited_17";

								String[] rowtFileOutputDelimited_17 = new String[15];

								rowtFileOutputDelimited_17[0] = row50.HLEVEL == null ? ""
										: String.valueOf(row50.HLEVEL);

								rowtFileOutputDelimited_17[1] = row50.Name == null ? ""
										: row50.Name;

								rowtFileOutputDelimited_17[2] = row50.Path == null ? ""
										: row50.Path;

								rowtFileOutputDelimited_17[3] = row50.DataType == null ? ""
										: row50.DataType;

								rowtFileOutputDelimited_17[4] = row50.Update_Date == null ? ""
										: FormatterUtils
												.format_Date(row50.Update_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_17[5] = row50.Import_Date == null ? ""
										: FormatterUtils
												.format_Date(row50.Import_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_17[6] = row50.Download_Date == null ? ""
										: FormatterUtils.format_Date(
												row50.Download_Date,
												"dd-MM-yyyy");

								rowtFileOutputDelimited_17[7] = row50.PathID == null ? ""
										: row50.PathID;

								rowtFileOutputDelimited_17[8] = row50.visual == null ? ""
										: row50.visual;

								rowtFileOutputDelimited_17[9] = row50.codeList == null ? ""
										: row50.codeList;

								rowtFileOutputDelimited_17[10] = row50.source == null ? ""
										: row50.source;

								rowtFileOutputDelimited_17[11] = row50.xml == null ? ""
										: row50.xml;

								rowtFileOutputDelimited_17[12] = row50.m_applied_path == null ? ""
										: row50.m_applied_path;

								rowtFileOutputDelimited_17[13] = row50.itemID == null ? ""
										: row50.itemID;

								rowtFileOutputDelimited_17[14] = row50.item == null ? ""
										: row50.item;

								nb_line_tFileOutputDelimited_17++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_17",
										nb_line_tFileOutputDelimited_17);
								CsvWritertFileOutputDelimited_17
										.writeNext(rowtFileOutputDelimited_17);

								outtFileOutputDelimited_17
										.write(strWritertFileOutputDelimited_17
												.getBuffer().toString());
								strWritertFileOutputDelimited_17.getBuffer()
										.delete(0,
												strWritertFileOutputDelimited_17
														.getBuffer().length());

								if (nb_line_tFileOutputDelimited_17 % 1 == 0) {

									outtFileOutputDelimited_17.flush();

								}

								tos_count_tFileOutputDelimited_17++;

								/**
								 * [tFileOutputDelimited_17 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_16 main ] start
								 */

								currentComponent = "tFileOutputDelimited_16";

								String[] rowtFileOutputDelimited_16 = new String[15];

								rowtFileOutputDelimited_16[0] = row51.HLEVEL == null ? ""
										: String.valueOf(row51.HLEVEL);

								rowtFileOutputDelimited_16[1] = row51.Name == null ? ""
										: row51.Name;

								rowtFileOutputDelimited_16[2] = row51.Path == null ? ""
										: row51.Path;

								rowtFileOutputDelimited_16[3] = row51.DataType == null ? ""
										: row51.DataType;

								rowtFileOutputDelimited_16[4] = row51.Update_Date == null ? ""
										: FormatterUtils
												.format_Date(row51.Update_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_16[5] = row51.Import_Date == null ? ""
										: FormatterUtils
												.format_Date(row51.Import_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_16[6] = row51.Download_Date == null ? ""
										: FormatterUtils.format_Date(
												row51.Download_Date,
												"dd-MM-yyyy");

								rowtFileOutputDelimited_16[7] = row51.PathID == null ? ""
										: row51.PathID;

								rowtFileOutputDelimited_16[8] = row51.visual == null ? ""
										: row51.visual;

								rowtFileOutputDelimited_16[9] = row51.codeList == null ? ""
										: row51.codeList;

								rowtFileOutputDelimited_16[10] = row51.source == null ? ""
										: row51.source;

								rowtFileOutputDelimited_16[11] = row51.xml == null ? ""
										: row51.xml;

								rowtFileOutputDelimited_16[12] = row51.m_applied_path == null ? ""
										: row51.m_applied_path;

								rowtFileOutputDelimited_16[13] = row51.itemID == null ? ""
										: row51.itemID;

								rowtFileOutputDelimited_16[14] = row51.item == null ? ""
										: row51.item;

								nb_line_tFileOutputDelimited_16++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_16",
										nb_line_tFileOutputDelimited_16);
								CsvWritertFileOutputDelimited_16
										.writeNext(rowtFileOutputDelimited_16);

								outtFileOutputDelimited_16
										.write(strWritertFileOutputDelimited_16
												.getBuffer().toString());
								strWritertFileOutputDelimited_16.getBuffer()
										.delete(0,
												strWritertFileOutputDelimited_16
														.getBuffer().length());

								if (nb_line_tFileOutputDelimited_16 % 1 == 0) {

									outtFileOutputDelimited_16.flush();

								}

								tos_count_tFileOutputDelimited_16++;

								/**
								 * [tFileOutputDelimited_16 main ] stop
								 */

							} // End of branch "tMap6DE2Ont_Leafs"

						} // close loop of lookup 'row2' // G_TM_M_043

					} // End of branch "row42"

					/**
					 * [tFileInputJSON_8 end ] start
					 */

					currentComponent = "tFileInputJSON_8";

				}
				globalMap.put("tFileInputJSON_8_NB_LINE",
						nb_line_tFileInputJSON_8);

				ok_Hash.put("tFileInputJSON_8", true);
				end_Hash.put("tFileInputJSON_8", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_8 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tReplicate_20 end ] start
				 */

				currentComponent = "tReplicate_20";

				ok_Hash.put("tReplicate_20", true);
				end_Hash.put("tReplicate_20", System.currentTimeMillis());

				/**
				 * [tReplicate_20 end ] stop
				 */

				/**
				 * [tLogRow_25 end ] start
				 */

				currentComponent = "tLogRow_25";

				// ////
				// ////
				globalMap.put("tLogRow_25_NB_LINE", nb_line_tLogRow_25);

				// /////////////////////

				ok_Hash.put("tLogRow_25", true);
				end_Hash.put("tLogRow_25", System.currentTimeMillis());

				/**
				 * [tLogRow_25 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 end ] start
				 */

				currentComponent = "tFileOutputDelimited_17";

				if (CsvWritertFileOutputDelimited_17 != null) {
					CsvWritertFileOutputDelimited_17.close();
				}

				if (outtFileOutputDelimited_17 != null) {
					outtFileOutputDelimited_17.flush();
					outtFileOutputDelimited_17.close();
				}

				globalMap.put("tFileOutputDelimited_17_NB_LINE",
						nb_line_tFileOutputDelimited_17);

				if (isFileGenerated_tFileOutputDelimited_17
						&& nb_line_tFileOutputDelimited_17 == 0) {

					filetFileOutputDelimited_17.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_17", true);

				ok_Hash.put("tFileOutputDelimited_17", true);
				end_Hash.put("tFileOutputDelimited_17",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_17 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 end ] start
				 */

				currentComponent = "tFileOutputDelimited_16";

				if (CsvWritertFileOutputDelimited_16 != null) {
					CsvWritertFileOutputDelimited_16.close();
				}

				if (outtFileOutputDelimited_16 != null) {
					outtFileOutputDelimited_16.flush();
					outtFileOutputDelimited_16.close();
				}

				globalMap.put("tFileOutputDelimited_16_NB_LINE",
						nb_line_tFileOutputDelimited_16);

				if (isFileGenerated_tFileOutputDelimited_16
						&& nb_line_tFileOutputDelimited_16 == 0) {

					filetFileOutputDelimited_16.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_16", true);

				ok_Hash.put("tFileOutputDelimited_16", true);
				end_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tFileInputJSON_8 finally ] start
				 */

				currentComponent = "tFileInputJSON_8";

				/**
				 * [tFileInputJSON_8 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tReplicate_20 finally ] start
				 */

				currentComponent = "tReplicate_20";

				/**
				 * [tReplicate_20 finally ] stop
				 */

				/**
				 * [tLogRow_25 finally ] start
				 */

				currentComponent = "tLogRow_25";

				/**
				 * [tLogRow_25 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_17";

				if (resourceMap.get("finish_tFileOutputDelimited_17") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_17 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_17");

					if (CsvWritertFileOutputDelimited_17 != null) {
						CsvWritertFileOutputDelimited_17.close();
					}

					java.io.Writer outtFileOutputDelimited_17 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_17");
					if (outtFileOutputDelimited_17 != null) {
						outtFileOutputDelimited_17.flush();
						outtFileOutputDelimited_17.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_17")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_17"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_17")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_17 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_16";

				if (resourceMap.get("finish_tFileOutputDelimited_16") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_16 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_16");

					if (CsvWritertFileOutputDelimited_16 != null) {
						CsvWritertFileOutputDelimited_16.close();
					}

					java.io.Writer outtFileOutputDelimited_16 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_16");
					if (outtFileOutputDelimited_16 != null) {
						outtFileOutputDelimited_16.flush();
						outtFileOutputDelimited_16.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_16")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_16"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_16")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_8_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements_uOM_dT) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row5Struct row5 = new row5Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tReplicate_3 - inputs:(row1)
				// outputs:(row5,row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_6 - inputs:(row42,row2)
				// outputs:(tMap6DE2Ont_Leafs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tReplicate_3 begin ] start
				 */

				ok_Hash.put("tReplicate_3", false);
				start_Hash.put("tReplicate_3", System.currentTimeMillis());

				currentComponent = "tReplicate_3";

				int tos_count_tReplicate_3 = 0;

				/**
				 * [tReplicate_3 begin ] stop
				 */

				/**
				 * [tFileInputJSON_2 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_2", false);
				start_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_2";

				int tos_count_tFileInputJSON_2 = 0;

				class JSONUtil_tFileInputJSON_2 {
					public int getData(
							String query,
							javax.script.Invocable invocableEngine,
							java.util.List<org.json.simple.JSONArray> jsonResultList,
							int recordMaxSize) {
						try {
							// only 2 types: String/Boolean
							String resultObj = invocableEngine.invokeFunction(
									"jsonPath", query).toString();
							if (!"false".equals(resultObj)) {
								org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
										.parse(resultObj);
								jsonResultList.add(resultArray);
								if (recordMaxSize != -1
										&& recordMaxSize != resultArray.size()) {
									// just give an error, don't stop

									System.err
											.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
								}
								recordMaxSize = Math.max(recordMaxSize,
										resultArray.size());
							} else {

								System.err
										.println("Can't find any data with JSONPath "
												+ query);
								// add null to take a place in List(buffer)
								jsonResultList.add(null);
							}
						} catch (java.lang.Exception e) {

							e.printStackTrace();
						}
						return recordMaxSize;
					}

					void setRowValue_0(
							row1Struct row1,
							java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_2,
							int nbResultArray_tFileInputJSON_2)
							throws java.io.UnsupportedEncodingException {
						if (JSONResultList_tFileInputJSON_2.get(0) != null
								&& nbResultArray_tFileInputJSON_2 < JSONResultList_tFileInputJSON_2
										.get(0).size()
								&& JSONResultList_tFileInputJSON_2.get(0).get(
										nbResultArray_tFileInputJSON_2) != null) {
							row1.id = JSONResultList_tFileInputJSON_2.get(0)
									.get(nbResultArray_tFileInputJSON_2)
									.toString();
						} else {

							row1.id = null;

						}
						if (JSONResultList_tFileInputJSON_2.get(1) != null
								&& nbResultArray_tFileInputJSON_2 < JSONResultList_tFileInputJSON_2
										.get(1).size()
								&& JSONResultList_tFileInputJSON_2.get(1).get(
										nbResultArray_tFileInputJSON_2) != null) {
							row1.name = JSONResultList_tFileInputJSON_2.get(1)
									.get(nbResultArray_tFileInputJSON_2)
									.toString();
						} else {

							row1.name = null;

						}
					}
				}
				int nb_line_tFileInputJSON_2 = 0;
				java.lang.Object jsonText_tFileInputJSON_2 = null;
				JSONUtil_tFileInputJSON_2 jsonUtil_tFileInputJSON_2 = new JSONUtil_tFileInputJSON_2();
				java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_2 = new java.util.ArrayList<org.json.simple.JSONArray>();
				int recordMaxSize_tFileInputJSON_2 = -1;

				// init js json engine
				javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_2 = new javax.script.ScriptEngineManager();
				javax.script.ScriptEngine jsEngine_tFileInputJSON_2 = scriptEngineMgr_tFileInputJSON_2
						.getEngineByName("JavaScript");
				if (jsEngine_tFileInputJSON_2 == null) {

					System.err.println("No script engine found for JavaScript");
				} else {
					java.net.URL jsonjsUrl_tFileInputJSON_2 = com.jsonpath.test.ReadJar.class
							.getResource("json.js");
					if (jsonjsUrl_tFileInputJSON_2 != null) {
						jsEngine_tFileInputJSON_2
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonjsUrl_tFileInputJSON_2
														.openStream())));
					}

					java.net.URL jsonpathjsUrl_tFileInputJSON_2 = com.jsonpath.test.ReadJar.class
							.getResource("jsonpath.js");
					if (jsonpathjsUrl_tFileInputJSON_2 != null) {
						jsEngine_tFileInputJSON_2
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonpathjsUrl_tFileInputJSON_2
														.openStream())));
					}

					java.io.InputStreamReader fr_tFileInputJSON_2 = null;
					try {

						java.net.URL url_tFileInputJSON_2 = new java.net.URL(
								context.MDRBaseURL + "/" + context.MDRInstance
										+ "/mdr/entities/"
										+ context.DE_dataType);
						java.net.URLConnection urlConn_tFileInputJSON_2 = url_tFileInputJSON_2
								.openConnection();
						fr_tFileInputJSON_2 = new java.io.InputStreamReader(
								urlConn_tFileInputJSON_2.getInputStream(),
								"ISO-8859-15");

						jsonText_tFileInputJSON_2 = org.json.simple.JSONValue
								.parse(fr_tFileInputJSON_2);
						if (jsonText_tFileInputJSON_2 == null) {
							throw new RuntimeException(
									"fail to parse the json file : "
											+ context.MDRBaseURL + "/"
											+ context.MDRInstance
											+ "/mdr/entities/"
											+ context.DE_dataType);
						}
					} catch (java.lang.Exception e_tFileInputJSON_2) {

						System.err.println(e_tFileInputJSON_2.getMessage());

					} finally {
						if (fr_tFileInputJSON_2 != null) {
							fr_tFileInputJSON_2.close();
						}
					}

					if (jsonText_tFileInputJSON_2 != null) {
						jsEngine_tFileInputJSON_2.eval("var obj="
								+ jsonText_tFileInputJSON_2.toString());

						javax.script.Invocable invocableEngine_tFileInputJSON_2 = (javax.script.Invocable) jsEngine_tFileInputJSON_2;

						recordMaxSize_tFileInputJSON_2 = jsonUtil_tFileInputJSON_2
								.getData("$.id",
										invocableEngine_tFileInputJSON_2,
										JSONResultList_tFileInputJSON_2,
										recordMaxSize_tFileInputJSON_2);

						recordMaxSize_tFileInputJSON_2 = jsonUtil_tFileInputJSON_2
								.getData("$.name",
										invocableEngine_tFileInputJSON_2,
										JSONResultList_tFileInputJSON_2,
										recordMaxSize_tFileInputJSON_2);

					}
				}
				for (int nbResultArray_tFileInputJSON_2 = 0; nbResultArray_tFileInputJSON_2 < recordMaxSize_tFileInputJSON_2; nbResultArray_tFileInputJSON_2++) {

					nb_line_tFileInputJSON_2++;
					row1 = null;
					boolean whetherReject_tFileInputJSON_2 = false;
					row1 = new row1Struct();
					try {
						jsonUtil_tFileInputJSON_2.setRowValue_0(row1,
								JSONResultList_tFileInputJSON_2,
								nbResultArray_tFileInputJSON_2);
					} catch (java.lang.Exception e) {
						whetherReject_tFileInputJSON_2 = true;
						System.err.println(e.getMessage());
						row1 = null;
					}

					/**
					 * [tFileInputJSON_2 begin ] stop
					 */

					/**
					 * [tFileInputJSON_2 main ] start
					 */

					currentComponent = "tFileInputJSON_2";

					tos_count_tFileInputJSON_2++;

					/**
					 * [tFileInputJSON_2 main ] stop
					 */
					// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tReplicate_3 main ] start
						 */

						currentComponent = "tReplicate_3";

						row5 = new row5Struct();

						row5.id = row1.id;
						row5.name = row1.name;
						row2 = new row2Struct();

						row2.id = row1.id;
						row2.name = row1.name;

						tos_count_tReplicate_3++;

						/**
						 * [tReplicate_3 main ] stop
						 */

						/**
						 * [tLogRow_3 main ] start
						 */

						currentComponent = "tLogRow_3";

						// /////////////////////

						strBuffer_tLogRow_3 = new StringBuilder();
						strBuffer_tLogRow_3.append("[tLogRow_3] ");

						if (row5.id != null) { //

							strBuffer_tLogRow_3.append(String.valueOf(row5.id));

						} //

						strBuffer_tLogRow_3.append("|");

						if (row5.name != null) { //

							strBuffer_tLogRow_3.append(String
									.valueOf(row5.name));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_3 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_3);
						}

						consoleOut_tLogRow_3.println(strBuffer_tLogRow_3
								.toString());
						consoleOut_tLogRow_3.flush();
						nb_line_tLogRow_3++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_3++;

						/**
						 * [tLogRow_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.name = row2.name;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

					} // End of branch "row1"

					/**
					 * [tFileInputJSON_2 end ] start
					 */

					currentComponent = "tFileInputJSON_2";

				}
				globalMap.put("tFileInputJSON_2_NB_LINE",
						nb_line_tFileInputJSON_2);

				ok_Hash.put("tFileInputJSON_2", true);
				end_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_2 end ] stop
				 */

				/**
				 * [tReplicate_3 end ] start
				 */

				currentComponent = "tReplicate_3";

				ok_Hash.put("tReplicate_3", true);
				end_Hash.put("tReplicate_3", System.currentTimeMillis());

				/**
				 * [tReplicate_3 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_2 finally ] start
				 */

				currentComponent = "tFileInputJSON_2";

				/**
				 * [tFileInputJSON_2 finally ] stop
				 */

				/**
				 * [tReplicate_3 finally ] start
				 */

				currentComponent = "tReplicate_3";

				/**
				 * [tReplicate_3 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MDR_Query_DataElements_uOM_dT MDR_Query_DataElements_uOM_dTClass = new MDR_Query_DataElements_uOM_dT();

		int exitCode = MDR_Query_DataElements_uOM_dTClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MDR_Query_DataElements_uOM_dT.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/mdr_query_dataelements_uom_dt_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.level = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("level"));
			} catch (NumberFormatException e) {
				context.level = null;
			}
			context.MDRID = (String) context.getProperty("MDRID");
			context.path = (String) context.getProperty("path");
			context.queryWorkFile = (String) context
					.getProperty("queryWorkFile");
			context.queryCurrentID = (String) context
					.getProperty("queryCurrentID");
			try {
				context.ont_01_HLEVEL = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ont_01_HLEVEL"));
			} catch (NumberFormatException e) {
				context.ont_01_HLEVEL = null;
			}
			context.ont_02_Name = (String) context.getProperty("ont_02_Name");
			context.ont_03_Path = (String) context.getProperty("ont_03_Path");
			context.ont_04_DataType = (String) context
					.getProperty("ont_04_DataType");
			try {
				String context_ont_05_Update_Date_value = context
						.getProperty("ont_05_Update_Date");
				if (context_ont_05_Update_Date_value == null) {
					context_ont_05_Update_Date_value = "";
				}
				int context_ont_05_Update_Date_pos = context_ont_05_Update_Date_value
						.indexOf(";");
				String context_ont_05_Update_Date_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_ont_05_Update_Date_pos > -1) {
					context_ont_05_Update_Date_pattern = context_ont_05_Update_Date_value
							.substring(0, context_ont_05_Update_Date_pos);
					context_ont_05_Update_Date_value = context_ont_05_Update_Date_value
							.substring(context_ont_05_Update_Date_pos + 1);
				}

				context.ont_05_Update_Date = (java.util.Date) (new java.text.SimpleDateFormat(
						context_ont_05_Update_Date_pattern)
						.parse(context_ont_05_Update_Date_value));

			} catch (ParseException e) {
				context.ont_05_Update_Date = null;
			}
			try {
				String context_ont_06_Import_Date_value = context
						.getProperty("ont_06_Import_Date");
				if (context_ont_06_Import_Date_value == null) {
					context_ont_06_Import_Date_value = "";
				}
				int context_ont_06_Import_Date_pos = context_ont_06_Import_Date_value
						.indexOf(";");
				String context_ont_06_Import_Date_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_ont_06_Import_Date_pos > -1) {
					context_ont_06_Import_Date_pattern = context_ont_06_Import_Date_value
							.substring(0, context_ont_06_Import_Date_pos);
					context_ont_06_Import_Date_value = context_ont_06_Import_Date_value
							.substring(context_ont_06_Import_Date_pos + 1);
				}

				context.ont_06_Import_Date = (java.util.Date) (new java.text.SimpleDateFormat(
						context_ont_06_Import_Date_pattern)
						.parse(context_ont_06_Import_Date_value));

			} catch (ParseException e) {
				context.ont_06_Import_Date = null;
			}
			try {
				String context_ont_07_Download_Date_value = context
						.getProperty("ont_07_Download_Date");
				if (context_ont_07_Download_Date_value == null) {
					context_ont_07_Download_Date_value = "";
				}
				int context_ont_07_Download_Date_pos = context_ont_07_Download_Date_value
						.indexOf(";");
				String context_ont_07_Download_Date_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_ont_07_Download_Date_pos > -1) {
					context_ont_07_Download_Date_pattern = context_ont_07_Download_Date_value
							.substring(0, context_ont_07_Download_Date_pos);
					context_ont_07_Download_Date_value = context_ont_07_Download_Date_value
							.substring(context_ont_07_Download_Date_pos + 1);
				}

				context.ont_07_Download_Date = (java.util.Date) (new java.text.SimpleDateFormat(
						context_ont_07_Download_Date_pattern)
						.parse(context_ont_07_Download_Date_value));

			} catch (ParseException e) {
				context.ont_07_Download_Date = null;
			}
			context.ont_08_PathID = (String) context
					.getProperty("ont_08_PathID");
			context.ont_09_visual = (String) context
					.getProperty("ont_09_visual");
			context.ont_10_codeList = (String) context
					.getProperty("ont_10_codeList");
			context.ont_11_source = (String) context
					.getProperty("ont_11_source");
			context.ont_12_xml = (String) context.getProperty("ont_12_xml");
			context.ont_13_m_applied_path = (String) context
					.getProperty("ont_13_m_applied_path");
			context.ont_14_itemID = (String) context
					.getProperty("ont_14_itemID");
			context.ont_15_item = (String) context.getProperty("ont_15_item");
			context.MDRStartDesignation = (String) context
					.getProperty("MDRStartDesignation");
			context.MDRBaseURLPort = (String) context
					.getProperty("MDRBaseURLPort");
			context.MDRInstance = (String) context.getProperty("MDRInstance");
			String pwd_MDRPassword_value = context.getProperty("MDRPassword");
			context.MDRPassword = null;
			if (pwd_MDRPassword_value != null) {
				if (context_param.containsKey("MDRPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.MDRPassword = pwd_MDRPassword_value;
				} else if (!pwd_MDRPassword_value.isEmpty()) {
					try {
						context.MDRPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_MDRPassword_value);
						context.put("MDRPassword", context.MDRPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.fileOnt = (String) context.getProperty("fileOnt");
			context.MDRUsername = (String) context.getProperty("MDRUsername");
			context.folderTemp = (String) context.getProperty("folderTemp");
			context.MDRBaseURL = (String) context.getProperty("MDRBaseURL");
			context.folderMain = (String) context.getProperty("folderMain");
			context.DE_unitOfMeasure = (String) context
					.getProperty("DE_unitOfMeasure");
			context.DE_domain_ID = (String) context.getProperty("DE_domain_ID");
			context.DE_dataType = (String) context.getProperty("DE_dataType");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("level")) {
				context.level = (Integer) parentContextMap.get("level");
			}
			if (parentContextMap.containsKey("MDRID")) {
				context.MDRID = (String) parentContextMap.get("MDRID");
			}
			if (parentContextMap.containsKey("path")) {
				context.path = (String) parentContextMap.get("path");
			}
			if (parentContextMap.containsKey("queryWorkFile")) {
				context.queryWorkFile = (String) parentContextMap
						.get("queryWorkFile");
			}
			if (parentContextMap.containsKey("queryCurrentID")) {
				context.queryCurrentID = (String) parentContextMap
						.get("queryCurrentID");
			}
			if (parentContextMap.containsKey("ont_01_HLEVEL")) {
				context.ont_01_HLEVEL = (Integer) parentContextMap
						.get("ont_01_HLEVEL");
			}
			if (parentContextMap.containsKey("ont_02_Name")) {
				context.ont_02_Name = (String) parentContextMap
						.get("ont_02_Name");
			}
			if (parentContextMap.containsKey("ont_03_Path")) {
				context.ont_03_Path = (String) parentContextMap
						.get("ont_03_Path");
			}
			if (parentContextMap.containsKey("ont_04_DataType")) {
				context.ont_04_DataType = (String) parentContextMap
						.get("ont_04_DataType");
			}
			if (parentContextMap.containsKey("ont_05_Update_Date")) {
				context.ont_05_Update_Date = (java.util.Date) parentContextMap
						.get("ont_05_Update_Date");
			}
			if (parentContextMap.containsKey("ont_06_Import_Date")) {
				context.ont_06_Import_Date = (java.util.Date) parentContextMap
						.get("ont_06_Import_Date");
			}
			if (parentContextMap.containsKey("ont_07_Download_Date")) {
				context.ont_07_Download_Date = (java.util.Date) parentContextMap
						.get("ont_07_Download_Date");
			}
			if (parentContextMap.containsKey("ont_08_PathID")) {
				context.ont_08_PathID = (String) parentContextMap
						.get("ont_08_PathID");
			}
			if (parentContextMap.containsKey("ont_09_visual")) {
				context.ont_09_visual = (String) parentContextMap
						.get("ont_09_visual");
			}
			if (parentContextMap.containsKey("ont_10_codeList")) {
				context.ont_10_codeList = (String) parentContextMap
						.get("ont_10_codeList");
			}
			if (parentContextMap.containsKey("ont_11_source")) {
				context.ont_11_source = (String) parentContextMap
						.get("ont_11_source");
			}
			if (parentContextMap.containsKey("ont_12_xml")) {
				context.ont_12_xml = (String) parentContextMap
						.get("ont_12_xml");
			}
			if (parentContextMap.containsKey("ont_13_m_applied_path")) {
				context.ont_13_m_applied_path = (String) parentContextMap
						.get("ont_13_m_applied_path");
			}
			if (parentContextMap.containsKey("ont_14_itemID")) {
				context.ont_14_itemID = (String) parentContextMap
						.get("ont_14_itemID");
			}
			if (parentContextMap.containsKey("ont_15_item")) {
				context.ont_15_item = (String) parentContextMap
						.get("ont_15_item");
			}
			if (parentContextMap.containsKey("MDRStartDesignation")) {
				context.MDRStartDesignation = (String) parentContextMap
						.get("MDRStartDesignation");
			}
			if (parentContextMap.containsKey("MDRBaseURLPort")) {
				context.MDRBaseURLPort = (String) parentContextMap
						.get("MDRBaseURLPort");
			}
			if (parentContextMap.containsKey("MDRInstance")) {
				context.MDRInstance = (String) parentContextMap
						.get("MDRInstance");
			}
			if (parentContextMap.containsKey("MDRPassword")) {
				context.MDRPassword = (java.lang.String) parentContextMap
						.get("MDRPassword");
			}
			if (parentContextMap.containsKey("fileOnt")) {
				context.fileOnt = (String) parentContextMap.get("fileOnt");
			}
			if (parentContextMap.containsKey("MDRUsername")) {
				context.MDRUsername = (String) parentContextMap
						.get("MDRUsername");
			}
			if (parentContextMap.containsKey("folderTemp")) {
				context.folderTemp = (String) parentContextMap
						.get("folderTemp");
			}
			if (parentContextMap.containsKey("MDRBaseURL")) {
				context.MDRBaseURL = (String) parentContextMap
						.get("MDRBaseURL");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("DE_unitOfMeasure")) {
				context.DE_unitOfMeasure = (String) parentContextMap
						.get("DE_unitOfMeasure");
			}
			if (parentContextMap.containsKey("DE_domain_ID")) {
				context.DE_domain_ID = (String) parentContextMap
						.get("DE_domain_ID");
			}
			if (parentContextMap.containsKey("DE_dataType")) {
				context.DE_dataType = (String) parentContextMap
						.get("DE_dataType");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("MDRPassword");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputJSON_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON_8) {
			globalMap.put("tFileInputJSON_8_SUBPROCESS_STATE", -1);

			e_tFileInputJSON_8.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : MDR_Query_DataElements_uOM_dT");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 167007 characters generated by Talend Open Studio for Data Integration on the
 * March 16, 2015 9:30:34 AM CET
 ************************************************************************************************/
