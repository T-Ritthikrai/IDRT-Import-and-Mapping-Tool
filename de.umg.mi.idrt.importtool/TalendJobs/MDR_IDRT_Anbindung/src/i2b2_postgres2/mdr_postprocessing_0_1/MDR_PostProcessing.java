// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.mdr_postprocessing_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.enc_num_routine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MDR_PostProcessing Purpose: RÃ¤umt auf und erstellt finalen Output<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class MDR_PostProcessing implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (MDRStartDesignation != null) {

				this.setProperty("MDRStartDesignation",
						MDRStartDesignation.toString());

			}

			if (MDRBaseURLPort != null) {

				this.setProperty("MDRBaseURLPort", MDRBaseURLPort.toString());

			}

			if (MDRInstance != null) {

				this.setProperty("MDRInstance", MDRInstance.toString());

			}

			if (MDRPassword != null) {

				this.setProperty("MDRPassword", MDRPassword.toString());

			}

			if (fileOnt != null) {

				this.setProperty("fileOnt", fileOnt.toString());

			}

			if (MDRUsername != null) {

				this.setProperty("MDRUsername", MDRUsername.toString());

			}

			if (folderTemp != null) {

				this.setProperty("folderTemp", folderTemp.toString());

			}

			if (MDRBaseURL != null) {

				this.setProperty("MDRBaseURL", MDRBaseURL.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

		}

		public String MDRStartDesignation;

		public String getMDRStartDesignation() {
			return this.MDRStartDesignation;
		}

		public String MDRBaseURLPort;

		public String getMDRBaseURLPort() {
			return this.MDRBaseURLPort;
		}

		public String MDRInstance;

		public String getMDRInstance() {
			return this.MDRInstance;
		}

		public java.lang.String MDRPassword;

		public java.lang.String getMDRPassword() {
			return this.MDRPassword;
		}

		public String fileOnt;

		public String getFileOnt() {
			return this.fileOnt;
		}

		public String MDRUsername;

		public String getMDRUsername() {
			return this.MDRUsername;
		}

		public String folderTemp;

		public String getFolderTemp() {
			return this.folderTemp;
		}

		public String MDRBaseURL;

		public String getMDRBaseURL() {
			return this.MDRBaseURL;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MDR_PostProcessing";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MDR_PostProcessing.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MDR_PostProcessing.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileList_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileList_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_2_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_2_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_2_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileList_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class toOntStruct implements
			routines.system.IPersistableRow<toOntStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toOntStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				toOntStruct toOnt = new toOntStruct();

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tFileInputDelimited_1 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());

				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = context.folderMain
						+ context.folderTemp;
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_2.add("ont_*");
				for (final String filemask_tFileList_2 : maskList_tFileList_2) {
					String filemask_compile_tFileList_2 = filemask_tFileList_2;

					filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_2.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_2);
					patternList_tFileList_2.add(fileNamePattern_tFileList_2);
				}
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				final java.util.List<String> filePath_tFileList_2 = new java.util.ArrayList<String>();
				java.io.File file_tFileList_2 = new java.io.File(
						directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
								if (fileNamePattern_tFileList_2.matcher(
										fileName_tFileList_2).matches()) {
									if (!filePath_tFileList_2.contains(file
											.getAbsolutePath())) {
										list_tFileList_2.add(file);
										filePath_tFileList_2.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2
						.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2
							.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2
							.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2
							.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2
							.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".")
							&& files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2
								.getName().substring(
										files_tFileList_2.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE",
							currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH",
							currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */

					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */
					NB_ITERATE_tFileInputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_1", false);
					start_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					currentComponent = "tFileOutputDelimited_1";

					int tos_count_tFileOutputDelimited_1 = 0;

					String fileName_tFileOutputDelimited_1 = "";
					fileName_tFileOutputDelimited_1 = (new java.io.File(
							context.folderMain + context.folderTemp
									+ context.fileOnt + "_")).getAbsolutePath()
							.replace("\\", "/");
					String fullName_tFileOutputDelimited_1 = null;
					String extension_tFileOutputDelimited_1 = null;
					String directory_tFileOutputDelimited_1 = null;
					if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						}
						directory_tFileOutputDelimited_1 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_1 = true;
					java.io.File filetFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);

					if (filetFileOutputDelimited_1.exists()) {
						isFileGenerated_tFileOutputDelimited_1 = false;
					}

					String[] headColutFileOutputDelimited_1 = new String[13];
					class CSVBasicSet_tFileOutputDelimited_1 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_1[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_1 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator("\t");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_1[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_1 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_1[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\r\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_1[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_1 = 0;
					int splitEvery_tFileOutputDelimited_1 = 1000;
					int splitedFileNo_tFileOutputDelimited_1 = 0;
					int currentRow_tFileOutputDelimited_1 = 0;

					CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
					csvSettings_tFileOutputDelimited_1.setFieldSeparator("\t");
					csvSettings_tFileOutputDelimited_1.setRowSeparator("\r\n");
					csvSettings_tFileOutputDelimited_1
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_1 != null
							&& directory_tFileOutputDelimited_1.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
								directory_tFileOutputDelimited_1);
						if (!dir_tFileOutputDelimited_1.exists()) {

							dir_tFileOutputDelimited_1.mkdirs();

						}
					}
					java.io.Writer outtFileOutputDelimited_1 = null;
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

					outtFileOutputDelimited_1 = new routines.system.BufferedOutput(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											true), "ISO-8859-15"));
					java.io.StringWriter strWritertFileOutputDelimited_1 = new java.io.StringWriter();
					CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
							strWritertFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1
							.setSeparator(csvSettings_tFileOutputDelimited_1
									.getFieldDelim());

					if (csvSettings_tFileOutputDelimited_1
							.isUseCRLFRecordDelimiter()) {
						CsvWritertFileOutputDelimited_1.setLineEnd("\r\n");
					} else {
						CsvWritertFileOutputDelimited_1.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_1
										.getRowDelim());
					}

					if (filetFileOutputDelimited_1.length() == 0) {

						headColutFileOutputDelimited_1[0] = "HLEVEL";

						headColutFileOutputDelimited_1[1] = "Name";

						headColutFileOutputDelimited_1[2] = "Path";

						headColutFileOutputDelimited_1[3] = "DataType";

						headColutFileOutputDelimited_1[4] = "Update_Date";

						headColutFileOutputDelimited_1[5] = "Import_Date";

						headColutFileOutputDelimited_1[6] = "Download_Date";

						headColutFileOutputDelimited_1[7] = "PathID";

						headColutFileOutputDelimited_1[8] = "visual";

						headColutFileOutputDelimited_1[9] = "codeList";

						headColutFileOutputDelimited_1[10] = "source";

						headColutFileOutputDelimited_1[11] = "xml";

						headColutFileOutputDelimited_1[12] = "m_applied_path";

						CsvWritertFileOutputDelimited_1
								.writeNext(headColutFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1.flush();

						outtFileOutputDelimited_1
								.write(strWritertFileOutputDelimited_1
										.getBuffer().toString());
						outtFileOutputDelimited_1.flush();
						strWritertFileOutputDelimited_1.getBuffer().delete(
								0,
								strWritertFileOutputDelimited_1.getBuffer()
										.length());

					}

					CsvWritertFileOutputDelimited_1
							.setEscapeChar(csvSettings_tFileOutputDelimited_1
									.getEscapeChar());
					CsvWritertFileOutputDelimited_1
							.setQuoteChar(csvSettings_tFileOutputDelimited_1
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_1
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					resourceMap.put("CsvWriter_tFileOutputDelimited_1",
							CsvWritertFileOutputDelimited_1);

					resourceMap.put("out_tFileOutputDelimited_1",
							outtFileOutputDelimited_1);

					resourceMap.put("nb_line_tFileOutputDelimited_1",
							nb_line_tFileOutputDelimited_1);
					resourceMap.put("isFileGenerated_tFileOutputDelimited_1",
							isFileGenerated_tFileOutputDelimited_1);

					resourceMap.put("filetFileOutputDelimited_1",
							filetFileOutputDelimited_1);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					toOntStruct toOnt_tmp = new toOntStruct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tReplicate_1 begin ] start
					 */

					ok_Hash.put("tReplicate_1", false);
					start_Hash.put("tReplicate_1", System.currentTimeMillis());

					currentComponent = "tReplicate_1";

					int tos_count_tReplicate_1 = 0;

					/**
					 * [tReplicate_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());

					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					int nb_line_tFileInputDelimited_1 = 0;
					int footer_tFileInputDelimited_1 = 0;
					int totalLinetFileInputDelimited_1 = 0;
					int limittFileInputDelimited_1 = -1;
					int lastLinetFileInputDelimited_1 = -1;

					char fieldSeparator_tFileInputDelimited_1[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_1[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\r\n").length() > 0) {
						rowSeparator_tFileInputDelimited_1 = ((String) "\r\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_1 = /**
					 * Start field
					 * tFileInputDelimited_1:FILENAME
					 */
					((String) globalMap.get("tFileList_2_CURRENT_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_1:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

					try {

						String[] rowtFileInputDelimited_1 = null;
						int currentLinetFileInputDelimited_1 = 0;
						int outputLinetFileInputDelimited_1 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_1 = 0;
								if (footer_value_tFileInputDelimited_1 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}

							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

							if (footer_tFileInputDelimited_1 > 0) {
								for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
									csvReadertFileInputDelimited_1.readNext();
								}
								csvReadertFileInputDelimited_1
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_1
										.readNext()) {

									rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
											.getValues();
									if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_1[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_1++;

									}

								}
								int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
										- footer_tFileInputDelimited_1 < 0 ? 0
										: totalLinetFileInputDelimited_1
												- footer_tFileInputDelimited_1;
								if (lastLinetFileInputDelimited_1 > 0) {
									lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
											: lastLineTemptFileInputDelimited_1;
								} else {
									lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
								}

								csvReadertFileInputDelimited_1.close();
								if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_1,
											fieldSeparator_tFileInputDelimited_1[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_1)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_1[0]);
								}
								csvReadertFileInputDelimited_1
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
									csvReadertFileInputDelimited_1
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_1[0]);

								csvReadertFileInputDelimited_1
										.setQuoteChar('"');

								csvReadertFileInputDelimited_1
										.setEscapeChar(csvReadertFileInputDelimited_1
												.getQuoteChar());

							}

							if (limittFileInputDelimited_1 != 0) {
								for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
									csvReadertFileInputDelimited_1.readNext();
								}
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_1 != 0
								&& csvReadertFileInputDelimited_1 != null
								&& csvReadertFileInputDelimited_1.readNext()) {

							rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
									.getValues();

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_1++;

							if (lastLinetFileInputDelimited_1 > -1
									&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
								break;
							}
							outputLinetFileInputDelimited_1++;
							if (limittFileInputDelimited_1 > 0
									&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
								break;
							}

							row1 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (((String) "\t").length() > 0) {
									fieldSeparator_tFileInputDelimited_1_ListType = ((String) "\t")
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								if (rowtFileInputDelimited_1.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_1[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row1.HLEVEL = null;

									row1.Name = null;

									row1.Path = null;

									row1.DataType = null;

									row1.Update_Date = null;

									row1.Import_Date = null;

									row1.Download_Date = null;

									row1.PathID = null;

									row1.visual = null;

									row1.codeList = null;

									row1.source = null;

									row1.xml = null;

									row1.m_applied_path = null;

									row1.itemID = null;

									row1.item = null;

								} else {

									for (int i_tFileInputDelimited_1 = 0; i_tFileInputDelimited_1 < rowtFileInputDelimited_1.length; i_tFileInputDelimited_1++) {
										rowtFileInputDelimited_1[i_tFileInputDelimited_1] = rowtFileInputDelimited_1[i_tFileInputDelimited_1]
												.trim();
									}

									int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_1 = 0;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {
											row1.HLEVEL = null;
										}

									} else {
										row1.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 1;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 2;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.Path = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 3;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.DataType = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 4;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.Update_Date = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"dd-MM-yyyy", false);

										} else {
											row1.Update_Date = null;
										}

									} else {
										row1.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 5;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.Import_Date = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"dd-MM-yyyy", false);

										} else {
											row1.Import_Date = null;
										}

									} else {
										row1.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 6;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.Download_Date = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"dd-MM-yyyy", false);

										} else {
											row1.Download_Date = null;
										}

									} else {
										row1.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 7;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.PathID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 8;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.visual = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 9;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.codeList = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.codeList = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 10;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.source = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.source = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 11;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.xml = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 12;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.m_applied_path = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.m_applied_path = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 13;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.itemID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.itemID = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 14;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.item = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.item = null;
									}

								}

								int filedsum = rowtFileInputDelimited_1.length;
								if (filedsum < (15)) {
									throw new java.lang.Exception(
											"Column(s) missing");
								} else if (filedsum > (15)) {
									throw new RuntimeException(
											"Too many columns");
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								row1 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tReplicate_1 main ] start
								 */

								currentComponent = "tReplicate_1";

								row2 = new row2Struct();

								row2.HLEVEL = row1.HLEVEL;
								row2.Name = row1.Name;
								row2.Path = row1.Path;
								row2.DataType = row1.DataType;
								row2.Update_Date = row1.Update_Date;
								row2.Import_Date = row1.Import_Date;
								row2.Download_Date = row1.Download_Date;
								row2.PathID = row1.PathID;
								row2.visual = row1.visual;
								row2.codeList = row1.codeList;
								row2.source = row1.source;
								row2.xml = row1.xml;
								row2.m_applied_path = row1.m_applied_path;
								row2.itemID = row1.itemID;
								row2.item = row1.item;

								tos_count_tReplicate_1++;

								/**
								 * [tReplicate_1 main ] stop
								 */

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									toOnt = null;

									// # Output table : 'toOnt'
									toOnt_tmp.HLEVEL = row2.HLEVEL;
									toOnt_tmp.Name = row2.Name;
									toOnt_tmp.Path = row2.Path;
									toOnt_tmp.DataType = row2.DataType;
									toOnt_tmp.Update_Date = row2.Update_Date;
									toOnt_tmp.Import_Date = row2.Import_Date;
									toOnt_tmp.Download_Date = row2.Download_Date;
									toOnt_tmp.PathID = row2.PathID;
									toOnt_tmp.visual = row2.visual;
									toOnt_tmp.codeList = row2.codeList;
									toOnt_tmp.source = row2.source;
									toOnt_tmp.xml = row2.xml;
									toOnt_tmp.m_applied_path = row2.m_applied_path;
									toOnt = toOnt_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "toOnt"
								if (toOnt != null) {

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									String[] rowtFileOutputDelimited_1 = new String[13];

									rowtFileOutputDelimited_1[0] = toOnt.HLEVEL == null ? ""
											: String.valueOf(toOnt.HLEVEL);

									rowtFileOutputDelimited_1[1] = toOnt.Name == null ? ""
											: toOnt.Name;

									rowtFileOutputDelimited_1[2] = toOnt.Path == null ? ""
											: toOnt.Path;

									rowtFileOutputDelimited_1[3] = toOnt.DataType == null ? ""
											: toOnt.DataType;

									rowtFileOutputDelimited_1[4] = toOnt.Update_Date == null ? ""
											: FormatterUtils.format_Date(
													toOnt.Update_Date,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_1[5] = toOnt.Import_Date == null ? ""
											: FormatterUtils.format_Date(
													toOnt.Import_Date,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_1[6] = toOnt.Download_Date == null ? ""
											: FormatterUtils.format_Date(
													toOnt.Download_Date,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_1[7] = toOnt.PathID == null ? ""
											: toOnt.PathID;

									rowtFileOutputDelimited_1[8] = toOnt.visual == null ? ""
											: toOnt.visual;

									rowtFileOutputDelimited_1[9] = toOnt.codeList == null ? ""
											: toOnt.codeList;

									rowtFileOutputDelimited_1[10] = toOnt.source == null ? ""
											: toOnt.source;

									rowtFileOutputDelimited_1[11] = toOnt.xml == null ? ""
											: toOnt.xml;

									rowtFileOutputDelimited_1[12] = toOnt.m_applied_path == null ? ""
											: toOnt.m_applied_path;

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_1",
											nb_line_tFileOutputDelimited_1);
									CsvWritertFileOutputDelimited_1
											.writeNext(rowtFileOutputDelimited_1);

									outtFileOutputDelimited_1
											.write(strWritertFileOutputDelimited_1
													.getBuffer().toString());
									strWritertFileOutputDelimited_1.getBuffer()
											.delete(0,
													strWritertFileOutputDelimited_1
															.getBuffer()
															.length());

									if (nb_line_tFileOutputDelimited_1 % 1 == 0) {

										outtFileOutputDelimited_1.flush();

									}

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

								} // End of branch "toOnt"

							} // End of branch "row1"

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							nb_line_tFileInputDelimited_1++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_1 != null) {
								csvReadertFileInputDelimited_1.close();
							}
						}
						if (csvReadertFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE",
									nb_line_tFileInputDelimited_1);
						}

					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());

					tFileDelete_2Process(globalMap);

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tReplicate_1 end ] start
					 */

					currentComponent = "tReplicate_1";

					ok_Hash.put("tReplicate_1", true);
					end_Hash.put("tReplicate_1", System.currentTimeMillis());

					/**
					 * [tReplicate_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);

					if (isFileGenerated_tFileOutputDelimited_1
							&& nb_line_tFileOutputDelimited_1 == 0) {

						filetFileOutputDelimited_1.delete();

					}

					resourceMap.put("finish_tFileOutputDelimited_1", true);

					ok_Hash.put("tFileOutputDelimited_1", true);
					end_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_1 end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_2 finally ] start
				 */

				currentComponent = "tFileList_2";

				/**
				 * [tFileList_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(
						((String) globalMap.get("tFileList_2_CURRENT_FILEPATH")));
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS",
							"File does not exist or is invalid.");
					throw new RuntimeException(
							"File does not exist or is invalid.");
				}
				globalMap
						.put("tFileDelete_2_DELETE_PATH", ((String) globalMap
								.get("tFileList_2_CURRENT_FILEPATH")));

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				/**
				 * [tFileDelete_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_PostProcessing, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_PostProcessing) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tSortRow_2_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortOut", false);
				start_Hash
						.put("tSortRow_2_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				int tos_count_tSortRow_2_SortOut = 0;

				class Comparablerow4Struct extends row4Struct implements
						Comparable<Comparablerow4Struct> {

					public int compareTo(Comparablerow4Struct other) {

						if (this.HLEVEL == null && other.HLEVEL != null) {
							return -1;

						} else if (this.HLEVEL != null && other.HLEVEL == null) {
							return 1;

						} else if (this.HLEVEL != null && other.HLEVEL != null) {
							if (!this.HLEVEL.equals(other.HLEVEL)) {
								return this.HLEVEL.compareTo(other.HLEVEL);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow4Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow4Struct>();

				/**
				 * [tSortRow_2_SortOut begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				((String) globalMap.get("tFileOutputDelimited_1_FILE_NAME"))/**
				 * 
				 * End field tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.HLEVEL = null;

								row4.Name = null;

								row4.Path = null;

								row4.DataType = null;

								row4.Update_Date = null;

								row4.Import_Date = null;

								row4.Download_Date = null;

								row4.PathID = null;

								row4.visual = null;

								row4.codeList = null;

								row4.source = null;

								row4.xml = null;

								row4.m_applied_path = null;

							} else {

								for (int i_tFileInputDelimited_3 = 0; i_tFileInputDelimited_3 < rowtFileInputDelimited_3.length; i_tFileInputDelimited_3++) {
									rowtFileInputDelimited_3[i_tFileInputDelimited_3] = rowtFileInputDelimited_3[i_tFileInputDelimited_3]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row4.HLEVEL = ParserUtils
												.parseTo_Integer(ParserUtils
														.parseTo_Number(
																rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
																',', '.'));

									} else {
										row4.HLEVEL = null;
									}

								} else {
									row4.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.Name = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.Path = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.DataType = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row4.Update_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy");

									} else {
										row4.Update_Date = null;
									}

								} else {
									row4.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row4.Import_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy");

									} else {
										row4.Import_Date = null;
									}

								} else {
									row4.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row4.Download_Date = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"dd-MM-yyyy");

									} else {
										row4.Download_Date = null;
									}

								} else {
									row4.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.PathID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.visual = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.codeList = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.codeList = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.source = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.source = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.xml = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row4.m_applied_path = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row4.m_applied_path = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tSortRow_2_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_2";

							currentComponent = "tSortRow_2_SortOut";

							Comparablerow4Struct arrayRowtSortRow_2_SortOut = new Comparablerow4Struct();

							arrayRowtSortRow_2_SortOut.HLEVEL = row4.HLEVEL;
							arrayRowtSortRow_2_SortOut.Name = row4.Name;
							arrayRowtSortRow_2_SortOut.Path = row4.Path;
							arrayRowtSortRow_2_SortOut.DataType = row4.DataType;
							arrayRowtSortRow_2_SortOut.Update_Date = row4.Update_Date;
							arrayRowtSortRow_2_SortOut.Import_Date = row4.Import_Date;
							arrayRowtSortRow_2_SortOut.Download_Date = row4.Download_Date;
							arrayRowtSortRow_2_SortOut.PathID = row4.PathID;
							arrayRowtSortRow_2_SortOut.visual = row4.visual;
							arrayRowtSortRow_2_SortOut.codeList = row4.codeList;
							arrayRowtSortRow_2_SortOut.source = row4.source;
							arrayRowtSortRow_2_SortOut.xml = row4.xml;
							arrayRowtSortRow_2_SortOut.m_applied_path = row4.m_applied_path;
							list_tSortRow_2_SortOut
									.add(arrayRowtSortRow_2_SortOut);

							tos_count_tSortRow_2_SortOut++;

							/**
							 * [tSortRow_2_SortOut main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tSortRow_2_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				row4Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut
						.toArray(new Comparablerow4Struct[0]);

				java.util.Arrays.sort(array_tSortRow_2_SortOut);

				globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

				ok_Hash.put("tSortRow_2_SortOut", true);
				end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.folderMain + context.fileOnt))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}

				String[] headColutFileOutputDelimited_2 = new String[13];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\r\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\r\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {

						dir_tFileOutputDelimited_2.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_2 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

				outtFileOutputDelimited_2 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, true),
								"ISO-8859-15"));
				java.io.StringWriter strWritertFileOutputDelimited_2 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_2);
				CsvWritertFileOutputDelimited_2
						.setSeparator(csvSettings_tFileOutputDelimited_2
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_2
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_2.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_2.getRowDelim());
				}

				CsvWritertFileOutputDelimited_2
						.setEscapeChar(csvSettings_tFileOutputDelimited_2
								.getEscapeChar());
				CsvWritertFileOutputDelimited_2
						.setQuoteChar(csvSettings_tFileOutputDelimited_2
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_2
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_2",
						CsvWritertFileOutputDelimited_2);

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);

				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2",
						isFileGenerated_tFileOutputDelimited_2);

				resourceMap.put("filetFileOutputDelimited_2",
						filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tSortRow_2_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortIn", false);
				start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				int tos_count_tSortRow_2_SortIn = 0;

				row4Struct[] array_tSortRow_2_SortIn = (row4Struct[]) globalMap
						.get("tSortRow_2");

				int nb_line_tSortRow_2_SortIn = 0;

				row4Struct current_tSortRow_2_SortIn = null;

				for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
					current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
					row5.HLEVEL = current_tSortRow_2_SortIn.HLEVEL;
					row5.Name = current_tSortRow_2_SortIn.Name;
					row5.Path = current_tSortRow_2_SortIn.Path;
					row5.DataType = current_tSortRow_2_SortIn.DataType;
					row5.Update_Date = current_tSortRow_2_SortIn.Update_Date;
					row5.Import_Date = current_tSortRow_2_SortIn.Import_Date;
					row5.Download_Date = current_tSortRow_2_SortIn.Download_Date;
					row5.PathID = current_tSortRow_2_SortIn.PathID;
					row5.visual = current_tSortRow_2_SortIn.visual;
					row5.codeList = current_tSortRow_2_SortIn.codeList;
					row5.source = current_tSortRow_2_SortIn.source;
					row5.xml = current_tSortRow_2_SortIn.xml;
					row5.m_applied_path = current_tSortRow_2_SortIn.m_applied_path;
					// increase number of line sorted
					nb_line_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_2_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					tos_count_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					String[] rowtFileOutputDelimited_2 = new String[13];

					rowtFileOutputDelimited_2[0] = row5.HLEVEL == null ? ""
							: String.valueOf(row5.HLEVEL);

					rowtFileOutputDelimited_2[1] = row5.Name == null ? ""
							: row5.Name;

					rowtFileOutputDelimited_2[2] = row5.Path == null ? ""
							: row5.Path;

					rowtFileOutputDelimited_2[3] = row5.DataType == null ? ""
							: row5.DataType;

					rowtFileOutputDelimited_2[4] = row5.Update_Date == null ? ""
							: FormatterUtils.format_Date(row5.Update_Date,
									"dd-MM-yyyy");

					rowtFileOutputDelimited_2[5] = row5.Import_Date == null ? ""
							: FormatterUtils.format_Date(row5.Import_Date,
									"dd-MM-yyyy");

					rowtFileOutputDelimited_2[6] = row5.Download_Date == null ? ""
							: FormatterUtils.format_Date(row5.Download_Date,
									"dd-MM-yyyy");

					rowtFileOutputDelimited_2[7] = row5.PathID == null ? ""
							: row5.PathID;

					rowtFileOutputDelimited_2[8] = row5.visual == null ? ""
							: row5.visual;

					rowtFileOutputDelimited_2[9] = row5.codeList == null ? ""
							: row5.codeList;

					rowtFileOutputDelimited_2[10] = row5.source == null ? ""
							: row5.source;

					rowtFileOutputDelimited_2[11] = row5.xml == null ? ""
							: row5.xml;

					rowtFileOutputDelimited_2[12] = row5.m_applied_path == null ? ""
							: row5.m_applied_path;

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);
					CsvWritertFileOutputDelimited_2
							.writeNext(rowtFileOutputDelimited_2);

					outtFileOutputDelimited_2
							.write(strWritertFileOutputDelimited_2.getBuffer()
									.toString());
					strWritertFileOutputDelimited_2.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_2.getBuffer()
									.length());

					if (nb_line_tFileOutputDelimited_2 % 1 == 0) {

						outtFileOutputDelimited_2.flush();

					}

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tSortRow_2_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

				}

				globalMap.put("tSortRow_2_SortIn_NB_LINE",
						nb_line_tSortRow_2_SortIn);

				ok_Hash.put("tSortRow_2_SortIn", true);
				end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (CsvWritertFileOutputDelimited_2 != null) {
					CsvWritertFileOutputDelimited_2.close();
				}

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2
						&& nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tSortRow_2_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				/**
				 * [tSortRow_2_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_2_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				/**
				 * [tSortRow_2_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_2");

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileDelete_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.folderMain
						+ context.folderTemp;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("temp_*");
				maskList_tFileList_1.add("ont.csv_");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_1.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.List<String> filePath_tFileList_1 = new java.util.ArrayList<String>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file
											.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tFileDelete_1++;

					/**
					 * [tFileDelete_1 begin ] start
					 */

					ok_Hash.put("tFileDelete_1", false);
					start_Hash.put("tFileDelete_1", System.currentTimeMillis());

					currentComponent = "tFileDelete_1";

					int tos_count_tFileDelete_1 = 0;

					/**
					 * [tFileDelete_1 begin ] stop
					 */

					/**
					 * [tFileDelete_1 main ] start
					 */

					currentComponent = "tFileDelete_1";

					class DeleteFoldertFileDelete_1 {
						/**
						 * delete all the sub-files in 'file'
						 * 
						 * @param file
						 */
						public boolean delete(java.io.File file) {
							java.io.File[] files = file.listFiles();
							for (int i = 0; i < files.length; i++) {
								if (files[i].isFile()) {
									files[i].delete();
								} else if (files[i].isDirectory()) {
									if (!files[i].delete()) {
										delete(files[i]);
									}
								}
							}
							deleteDirectory(file);
							return file.delete();
						}

						/**
						 * delete all the sub-folders in 'file'
						 * 
						 * @param file
						 */
						private void deleteDirectory(java.io.File file) {
							java.io.File[] filed = file.listFiles();
							for (int i = 0; i < filed.length; i++) {
								if (filed[i].isDirectory()) {
									deleteDirectory(filed[i]);
								}
								filed[i].delete();
							}
						}

					}
					java.io.File file_tFileDelete_1 = new java.io.File(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")));
					if (file_tFileDelete_1.exists()
							&& file_tFileDelete_1.isFile()) {
						if (file_tFileDelete_1.delete()) {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"File deleted.");
						} else {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"No file deleted.");
						}
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File does not exist or is invalid.");
						throw new RuntimeException(
								"File does not exist or is invalid.");
					}
					globalMap.put("tFileDelete_1_DELETE_PATH",
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")));

					tos_count_tFileDelete_1++;

					/**
					 * [tFileDelete_1 main ] stop
					 */

					/**
					 * [tFileDelete_1 end ] start
					 */

					currentComponent = "tFileDelete_1";

					ok_Hash.put("tFileDelete_1", true);
					end_Hash.put("tFileDelete_1", System.currentTimeMillis());

					/**
					 * [tFileDelete_1 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MDR_PostProcessing MDR_PostProcessingClass = new MDR_PostProcessing();

		int exitCode = MDR_PostProcessingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MDR_PostProcessing.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/mdr_postprocessing_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.MDRStartDesignation = (String) context
					.getProperty("MDRStartDesignation");
			context.MDRBaseURLPort = (String) context
					.getProperty("MDRBaseURLPort");
			context.MDRInstance = (String) context.getProperty("MDRInstance");
			String pwd_MDRPassword_value = context.getProperty("MDRPassword");
			context.MDRPassword = null;
			if (pwd_MDRPassword_value != null) {
				if (context_param.containsKey("MDRPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.MDRPassword = pwd_MDRPassword_value;
				} else if (!pwd_MDRPassword_value.isEmpty()) {
					try {
						context.MDRPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_MDRPassword_value);
						context.put("MDRPassword", context.MDRPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.fileOnt = (String) context.getProperty("fileOnt");
			context.MDRUsername = (String) context.getProperty("MDRUsername");
			context.folderTemp = (String) context.getProperty("folderTemp");
			context.MDRBaseURL = (String) context.getProperty("MDRBaseURL");
			context.folderMain = (String) context.getProperty("folderMain");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("MDRStartDesignation")) {
				context.MDRStartDesignation = (String) parentContextMap
						.get("MDRStartDesignation");
			}
			if (parentContextMap.containsKey("MDRBaseURLPort")) {
				context.MDRBaseURLPort = (String) parentContextMap
						.get("MDRBaseURLPort");
			}
			if (parentContextMap.containsKey("MDRInstance")) {
				context.MDRInstance = (String) parentContextMap
						.get("MDRInstance");
			}
			if (parentContextMap.containsKey("MDRPassword")) {
				context.MDRPassword = (java.lang.String) parentContextMap
						.get("MDRPassword");
			}
			if (parentContextMap.containsKey("fileOnt")) {
				context.fileOnt = (String) parentContextMap.get("fileOnt");
			}
			if (parentContextMap.containsKey("MDRUsername")) {
				context.MDRUsername = (String) parentContextMap
						.get("MDRUsername");
			}
			if (parentContextMap.containsKey("folderTemp")) {
				context.folderTemp = (String) parentContextMap
						.get("folderTemp");
			}
			if (parentContextMap.containsKey("MDRBaseURL")) {
				context.MDRBaseURL = (String) parentContextMap
						.get("MDRBaseURL");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("MDRPassword");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileList_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileList_2) {
			globalMap.put("tFileList_2_SUBPROCESS_STATE", -1);

			e_tFileList_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : MDR_PostProcessing");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 167212 characters generated by Talend Open Studio for Data Integration on the
 * March 16, 2015 9:30:35 AM CET
 ************************************************************************************************/
