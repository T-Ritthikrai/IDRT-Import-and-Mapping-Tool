// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.mdr_query_dataelements_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MDR_Query_DataElements Purpose: Fragt mit MDRID (aus Context) MDR ab und liefert Ergebnisse (gefiltert)<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class MDR_Query_DataElements implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (level != null) {

				this.setProperty("level", level.toString());

			}

			if (MDRID != null) {

				this.setProperty("MDRID", MDRID.toString());

			}

			if (path != null) {

				this.setProperty("path", path.toString());

			}

			if (queryWorkFile != null) {

				this.setProperty("queryWorkFile", queryWorkFile.toString());

			}

			if (queryCurrentID != null) {

				this.setProperty("queryCurrentID", queryCurrentID.toString());

			}

			if (ont_01_HLEVEL != null) {

				this.setProperty("ont_01_HLEVEL", ont_01_HLEVEL.toString());

			}

			if (ont_02_Name != null) {

				this.setProperty("ont_02_Name", ont_02_Name.toString());

			}

			if (ont_03_Path != null) {

				this.setProperty("ont_03_Path", ont_03_Path.toString());

			}

			if (ont_04_DataType != null) {

				this.setProperty("ont_04_DataType", ont_04_DataType.toString());

			}

			if (ont_05_Update_Date != null) {

				String pattern_ont_05_Update_Date = "yyyy-MM-dd HH:mm:ss";
				String value_ont_05_Update_Date = "";
				String[] parts_ont_05_Update_Date = value_ont_05_Update_Date
						.split(";");
				if (parts_ont_05_Update_Date.length > 1) {
					pattern_ont_05_Update_Date = parts_ont_05_Update_Date[0];
					this.setProperty(
							"ont_05_Update_Date",
							pattern_ont_05_Update_Date
									+ ";"
									+ FormatterUtils.format_Date(
											ont_05_Update_Date,
											pattern_ont_05_Update_Date));
				} else {
					this.setProperty("ont_05_Update_Date", FormatterUtils
							.format_Date(ont_05_Update_Date,
									pattern_ont_05_Update_Date));
				}

			}

			if (ont_06_Import_Date != null) {

				String pattern_ont_06_Import_Date = "yyyy-MM-dd HH:mm:ss";
				String value_ont_06_Import_Date = "";
				String[] parts_ont_06_Import_Date = value_ont_06_Import_Date
						.split(";");
				if (parts_ont_06_Import_Date.length > 1) {
					pattern_ont_06_Import_Date = parts_ont_06_Import_Date[0];
					this.setProperty(
							"ont_06_Import_Date",
							pattern_ont_06_Import_Date
									+ ";"
									+ FormatterUtils.format_Date(
											ont_06_Import_Date,
											pattern_ont_06_Import_Date));
				} else {
					this.setProperty("ont_06_Import_Date", FormatterUtils
							.format_Date(ont_06_Import_Date,
									pattern_ont_06_Import_Date));
				}

			}

			if (ont_07_Download_Date != null) {

				String pattern_ont_07_Download_Date = "yyyy-MM-dd HH:mm:ss";
				String value_ont_07_Download_Date = "";
				String[] parts_ont_07_Download_Date = value_ont_07_Download_Date
						.split(";");
				if (parts_ont_07_Download_Date.length > 1) {
					pattern_ont_07_Download_Date = parts_ont_07_Download_Date[0];
					this.setProperty(
							"ont_07_Download_Date",
							pattern_ont_07_Download_Date
									+ ";"
									+ FormatterUtils.format_Date(
											ont_07_Download_Date,
											pattern_ont_07_Download_Date));
				} else {
					this.setProperty("ont_07_Download_Date", FormatterUtils
							.format_Date(ont_07_Download_Date,
									pattern_ont_07_Download_Date));
				}

			}

			if (ont_08_PathID != null) {

				this.setProperty("ont_08_PathID", ont_08_PathID.toString());

			}

			if (ont_09_visual != null) {

				this.setProperty("ont_09_visual", ont_09_visual.toString());

			}

			if (ont_10_codeList != null) {

				this.setProperty("ont_10_codeList", ont_10_codeList.toString());

			}

			if (ont_11_source != null) {

				this.setProperty("ont_11_source", ont_11_source.toString());

			}

			if (ont_12_xml != null) {

				this.setProperty("ont_12_xml", ont_12_xml.toString());

			}

			if (ont_13_m_applied_path != null) {

				this.setProperty("ont_13_m_applied_path",
						ont_13_m_applied_path.toString());

			}

			if (ont_14_itemID != null) {

				this.setProperty("ont_14_itemID", ont_14_itemID.toString());

			}

			if (ont_15_item != null) {

				this.setProperty("ont_15_item", ont_15_item.toString());

			}

			if (MDRStartDesignation != null) {

				this.setProperty("MDRStartDesignation",
						MDRStartDesignation.toString());

			}

			if (MDRBaseURLPort != null) {

				this.setProperty("MDRBaseURLPort", MDRBaseURLPort.toString());

			}

			if (MDRInstance != null) {

				this.setProperty("MDRInstance", MDRInstance.toString());

			}

			if (MDRPassword != null) {

				this.setProperty("MDRPassword", MDRPassword.toString());

			}

			if (fileOnt != null) {

				this.setProperty("fileOnt", fileOnt.toString());

			}

			if (MDRUsername != null) {

				this.setProperty("MDRUsername", MDRUsername.toString());

			}

			if (folderTemp != null) {

				this.setProperty("folderTemp", folderTemp.toString());

			}

			if (MDRBaseURL != null) {

				this.setProperty("MDRBaseURL", MDRBaseURL.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

		}

		public Integer level;

		public Integer getLevel() {
			return this.level;
		}

		public String MDRID;

		public String getMDRID() {
			return this.MDRID;
		}

		public String path;

		public String getPath() {
			return this.path;
		}

		public String queryWorkFile;

		public String getQueryWorkFile() {
			return this.queryWorkFile;
		}

		public String queryCurrentID;

		public String getQueryCurrentID() {
			return this.queryCurrentID;
		}

		public Integer ont_01_HLEVEL;

		public Integer getOnt_01_HLEVEL() {
			return this.ont_01_HLEVEL;
		}

		public String ont_02_Name;

		public String getOnt_02_Name() {
			return this.ont_02_Name;
		}

		public String ont_03_Path;

		public String getOnt_03_Path() {
			return this.ont_03_Path;
		}

		public String ont_04_DataType;

		public String getOnt_04_DataType() {
			return this.ont_04_DataType;
		}

		public java.util.Date ont_05_Update_Date;

		public java.util.Date getOnt_05_Update_Date() {
			return this.ont_05_Update_Date;
		}

		public java.util.Date ont_06_Import_Date;

		public java.util.Date getOnt_06_Import_Date() {
			return this.ont_06_Import_Date;
		}

		public java.util.Date ont_07_Download_Date;

		public java.util.Date getOnt_07_Download_Date() {
			return this.ont_07_Download_Date;
		}

		public String ont_08_PathID;

		public String getOnt_08_PathID() {
			return this.ont_08_PathID;
		}

		public String ont_09_visual;

		public String getOnt_09_visual() {
			return this.ont_09_visual;
		}

		public String ont_10_codeList;

		public String getOnt_10_codeList() {
			return this.ont_10_codeList;
		}

		public String ont_11_source;

		public String getOnt_11_source() {
			return this.ont_11_source;
		}

		public String ont_12_xml;

		public String getOnt_12_xml() {
			return this.ont_12_xml;
		}

		public String ont_13_m_applied_path;

		public String getOnt_13_m_applied_path() {
			return this.ont_13_m_applied_path;
		}

		public String ont_14_itemID;

		public String getOnt_14_itemID() {
			return this.ont_14_itemID;
		}

		public String ont_15_item;

		public String getOnt_15_item() {
			return this.ont_15_item;
		}

		public String MDRStartDesignation;

		public String getMDRStartDesignation() {
			return this.MDRStartDesignation;
		}

		public String MDRBaseURLPort;

		public String getMDRBaseURLPort() {
			return this.MDRBaseURLPort;
		}

		public String MDRInstance;

		public String getMDRInstance() {
			return this.MDRInstance;
		}

		public java.lang.String MDRPassword;

		public java.lang.String getMDRPassword() {
			return this.MDRPassword;
		}

		public String fileOnt;

		public String getFileOnt() {
			return this.fileOnt;
		}

		public String MDRUsername;

		public String getMDRUsername() {
			return this.MDRUsername;
		}

		public String folderTemp;

		public String getFolderTemp() {
			return this.folderTemp;
		}

		public String MDRBaseURL;

		public String getMDRBaseURL() {
			return this.MDRBaseURL;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MDR_Query_DataElements";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MDR_Query_DataElements.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MDR_Query_DataElements.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputJSON_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements
			routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tMap6DE2Ont_FoldersStruct implements
			routines.system.IPersistableRow<tMap6DE2Ont_FoldersStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap6DE2Ont_FoldersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row48Struct implements
			routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row49Struct implements
			routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tMap7DataElementsToOntStruct implements
			routines.system.IPersistableRow<tMap7DataElementsToOntStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tMap7DataElementsToOntStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row47Struct implements
			routines.system.IPersistableRow<row47Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row46Struct implements
			routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements
			routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfDataElementsToOntStruct implements
			routines.system.IPersistableRow<copyOfDataElementsToOntStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.itemID = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",itemID=" + itemID);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfDataElementsToOntStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.sign = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.sign = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String sign;

		public String getSign() {
			return this.sign;
		}

		public String item;

		public String getItem() {
			return this.item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.sign = readString(dis);

					this.item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.sign, dos);

				// String

				writeString(this.item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",sign=" + sign);
			sb.append(",item=" + item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String permittedValue;

		public String getPermittedValue() {
			return this.permittedValue;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.permittedValue = readString(dis);

					this.meaning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.permittedValue, dos);

				// String

				writeString(this.meaning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",permittedValue=" + permittedValue);
			sb.append(",meaning=" + meaning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String permittedValue;

		public String getPermittedValue() {
			return this.permittedValue;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.permittedValue = readString(dis);

					this.meaning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.permittedValue, dos);

				// String

				writeString(this.meaning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",permittedValue=" + permittedValue);
			sb.append(",meaning=" + meaning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row39Struct implements
			routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String permittedValue;

		public String getPermittedValue() {
			return this.permittedValue;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.permittedValue = readString(dis);

					this.meaning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.permittedValue, dos);

				// String

				writeString(this.meaning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",permittedValue=" + permittedValue);
			sb.append(",meaning=" + meaning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String maximumCharacterQuantity;

		public String getMaximumCharacterQuantity() {
			return this.maximumCharacterQuantity;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String meaning;

		public String getMeaning() {
			return this.meaning;
		}

		public String unitOfMeasure;

		public String getUnitOfMeasure() {
			return this.unitOfMeasure;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.maximumCharacterQuantity = readString(dis);

					this.dataType = readString(dis);

					this.format = readString(dis);

					this.meaning = readString(dis);

					this.unitOfMeasure = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.maximumCharacterQuantity, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.meaning, dos);

				// String

				writeString(this.unitOfMeasure, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",maximumCharacterQuantity=" + maximumCharacterQuantity);
			sb.append(",dataType=" + dataType);
			sb.append(",format=" + format);
			sb.append(",meaning=" + meaning);
			sb.append(",unitOfMeasure=" + unitOfMeasure);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row53Struct implements
			routines.system.IPersistableRow<row53Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row53Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements.length == 0) {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_MDR_Query_DataElements,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_MDR_Query_DataElements) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.domain = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.domain, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",domain=" + domain);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();
				row22Struct row22 = new row22Struct();
				row12Struct row12 = new row12Struct();
				row37Struct row37 = new row37Struct();
				row2Struct row2 = new row2Struct();
				row53Struct row53 = new row53Struct();
				row23Struct row23 = new row23Struct();
				row3Struct row3 = new row3Struct();
				row8Struct row8 = new row8Struct();
				row39Struct row39 = new row39Struct();
				row15Struct row15 = new row15Struct();
				row38Struct row38 = new row38Struct();
				row32Struct row32 = new row32Struct();
				row10Struct row10 = new row10Struct();
				row34Struct row34 = new row34Struct();
				copyOfDataElementsToOntStruct copyOfDataElementsToOnt = new copyOfDataElementsToOntStruct();
				row16Struct row16 = new row16Struct();
				row36Struct row36 = new row36Struct();
				row35Struct row35 = new row35Struct();
				row30Struct row30 = new row30Struct();
				row9Struct row9 = new row9Struct();
				row41Struct row41 = new row41Struct();
				row31Struct row31 = new row31Struct();
				row6Struct row6 = new row6Struct();
				row4Struct row4 = new row4Struct();
				row7Struct row7 = new row7Struct();
				row5Struct row5 = new row5Struct();
				row11Struct row11 = new row11Struct();
				row45Struct row45 = new row45Struct();
				row47Struct row47 = new row47Struct();
				row46Struct row46 = new row46Struct();
				tMap7DataElementsToOntStruct tMap7DataElementsToOnt = new tMap7DataElementsToOntStruct();
				row48Struct row48 = new row48Struct();
				row49Struct row49 = new row49Struct();
				row1Struct row1 = new row1Struct();
				tMap6DE2Ont_FoldersStruct tMap6DE2Ont_Folders = new tMap6DE2Ont_FoldersStruct();
				row33Struct row33 = new row33Struct();
				row44Struct row44 = new row44Struct();
				row43Struct row43 = new row43Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());

				currentComponent = "tLogRow_8";

				int tos_count_tLogRow_8 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
				java.io.PrintStream consoleOut_tLogRow_8 = null;

				StringBuilder strBuffer_tLogRow_8 = null;
				int nb_line_tLogRow_8 = 0;
				// /////////////////////

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tFlowToIterate_3 begin ] start
				 */

				int NB_ITERATE_tFileInputJSON_4 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_3", false);
				start_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_3";

				int tos_count_tFlowToIterate_3 = 0;

				int nb_line_tFlowToIterate_3 = 0;
				int counter_tFlowToIterate_3 = 0;

				/**
				 * [tFlowToIterate_3 begin ] stop
				 */

				/**
				 * [tReplicate_10 begin ] start
				 */

				ok_Hash.put("tReplicate_10", false);
				start_Hash.put("tReplicate_10", System.currentTimeMillis());

				currentComponent = "tReplicate_10";

				int tos_count_tReplicate_10 = 0;

				/**
				 * [tReplicate_10 begin ] stop
				 */

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());

				currentComponent = "tLogRow_9";

				int tos_count_tLogRow_9 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
				java.io.PrintStream consoleOut_tLogRow_9 = null;

				StringBuilder strBuffer_tLogRow_9 = null;
				int nb_line_tLogRow_9 = 0;
				// /////////////////////

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_9";

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						context.folderMain + context.folderTemp
								+ "temp_de_error_" + context.ont_14_itemID
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
							.substring(0, fileName_tFileOutputDelimited_9
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",
						fileName_tFileOutputDelimited_9);

				String[] headColutFileOutputDelimited_9 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_9 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_9[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_9 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_9[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_9[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_9 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_9[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_9[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_9 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_9[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_9 = 0;
				int splitEvery_tFileOutputDelimited_9 = 1000;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				CSVBasicSet_tFileOutputDelimited_9 csvSettings_tFileOutputDelimited_9 = new CSVBasicSet_tFileOutputDelimited_9();
				csvSettings_tFileOutputDelimited_9.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_9.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_9.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null
						&& directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
							directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {

						dir_tFileOutputDelimited_9.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_9 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = null;

				java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				if (fileToDelete_tFileOutputDelimited_9.exists()) {
					fileToDelete_tFileOutputDelimited_9.delete();
				}

				outtFileOutputDelimited_9 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_9, false),
								"ISO-8859-15"));
				java.io.StringWriter strWritertFileOutputDelimited_9 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_9 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_9);
				CsvWritertFileOutputDelimited_9
						.setSeparator(csvSettings_tFileOutputDelimited_9
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_9
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_9.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_9.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_9.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_9.getRowDelim());
				}

				if (filetFileOutputDelimited_9.length() == 0) {

					headColutFileOutputDelimited_9[0] = "HLEVEL";

					headColutFileOutputDelimited_9[1] = "Name";

					headColutFileOutputDelimited_9[2] = "Path";

					headColutFileOutputDelimited_9[3] = "DataType";

					headColutFileOutputDelimited_9[4] = "Update_Date";

					headColutFileOutputDelimited_9[5] = "Import_Date";

					headColutFileOutputDelimited_9[6] = "Download_Date";

					headColutFileOutputDelimited_9[7] = "PathID";

					headColutFileOutputDelimited_9[8] = "visual";

					headColutFileOutputDelimited_9[9] = "codeList";

					headColutFileOutputDelimited_9[10] = "source";

					headColutFileOutputDelimited_9[11] = "xml";

					headColutFileOutputDelimited_9[12] = "m_applied_path";

					headColutFileOutputDelimited_9[13] = "itemID";

					headColutFileOutputDelimited_9[14] = "item";

					CsvWritertFileOutputDelimited_9
							.writeNext(headColutFileOutputDelimited_9);
					CsvWritertFileOutputDelimited_9.flush();

					outtFileOutputDelimited_9
							.write(strWritertFileOutputDelimited_9.getBuffer()
									.toString());
					outtFileOutputDelimited_9.flush();
					strWritertFileOutputDelimited_9.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_9.getBuffer()
									.length());

				}

				CsvWritertFileOutputDelimited_9
						.setEscapeChar(csvSettings_tFileOutputDelimited_9
								.getEscapeChar());
				CsvWritertFileOutputDelimited_9
						.setQuoteChar(csvSettings_tFileOutputDelimited_9
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_9
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_9",
						CsvWritertFileOutputDelimited_9);

				resourceMap.put("out_tFileOutputDelimited_9",
						outtFileOutputDelimited_9);

				resourceMap.put("nb_line_tFileOutputDelimited_9",
						nb_line_tFileOutputDelimited_9);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_9",
						isFileGenerated_tFileOutputDelimited_9);

				resourceMap.put("filetFileOutputDelimited_9",
						filetFileOutputDelimited_9);

				/**
				 * [tFileOutputDelimited_9 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_10", false);
				start_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_10";

				int tos_count_tFileOutputDelimited_10 = 0;

				String fileName_tFileOutputDelimited_10 = "";
				fileName_tFileOutputDelimited_10 = (new java.io.File(
						context.folderMain + context.folderTemp
								+ "ont_de_error" + context.ont_14_itemID
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_10 = null;
				String extension_tFileOutputDelimited_10 = null;
				String directory_tFileOutputDelimited_10 = null;
				if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
							.substring(0, fileName_tFileOutputDelimited_10
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					}
					directory_tFileOutputDelimited_10 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_10 = true;
				java.io.File filetFileOutputDelimited_10 = new java.io.File(
						fileName_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME",
						fileName_tFileOutputDelimited_10);

				String[] headColutFileOutputDelimited_10 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_10 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_10[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_10 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_10[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_10[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_10 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_10[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_10[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_10 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_10[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_10 = 0;
				int splitEvery_tFileOutputDelimited_10 = 1000;
				int splitedFileNo_tFileOutputDelimited_10 = 0;
				int currentRow_tFileOutputDelimited_10 = 0;

				CSVBasicSet_tFileOutputDelimited_10 csvSettings_tFileOutputDelimited_10 = new CSVBasicSet_tFileOutputDelimited_10();
				csvSettings_tFileOutputDelimited_10.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_10.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_10.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_10 != null
						&& directory_tFileOutputDelimited_10.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
							directory_tFileOutputDelimited_10);
					if (!dir_tFileOutputDelimited_10.exists()) {

						dir_tFileOutputDelimited_10.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_10 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = null;

				java.io.File fileToDelete_tFileOutputDelimited_10 = new java.io.File(
						fileName_tFileOutputDelimited_10);
				if (fileToDelete_tFileOutputDelimited_10.exists()) {
					fileToDelete_tFileOutputDelimited_10.delete();
				}

				outtFileOutputDelimited_10 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_10, false),
								"ISO-8859-15"));
				java.io.StringWriter strWritertFileOutputDelimited_10 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_10 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_10);
				CsvWritertFileOutputDelimited_10
						.setSeparator(csvSettings_tFileOutputDelimited_10
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_10
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_10.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_10.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_10
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_10
											.getRowDelim());
				}

				if (filetFileOutputDelimited_10.length() == 0) {

					headColutFileOutputDelimited_10[0] = "HLEVEL";

					headColutFileOutputDelimited_10[1] = "Name";

					headColutFileOutputDelimited_10[2] = "Path";

					headColutFileOutputDelimited_10[3] = "DataType";

					headColutFileOutputDelimited_10[4] = "Update_Date";

					headColutFileOutputDelimited_10[5] = "Import_Date";

					headColutFileOutputDelimited_10[6] = "Download_Date";

					headColutFileOutputDelimited_10[7] = "PathID";

					headColutFileOutputDelimited_10[8] = "visual";

					headColutFileOutputDelimited_10[9] = "codeList";

					headColutFileOutputDelimited_10[10] = "source";

					headColutFileOutputDelimited_10[11] = "xml";

					headColutFileOutputDelimited_10[12] = "m_applied_path";

					headColutFileOutputDelimited_10[13] = "itemID";

					headColutFileOutputDelimited_10[14] = "item";

					CsvWritertFileOutputDelimited_10
							.writeNext(headColutFileOutputDelimited_10);
					CsvWritertFileOutputDelimited_10.flush();

					outtFileOutputDelimited_10
							.write(strWritertFileOutputDelimited_10.getBuffer()
									.toString());
					outtFileOutputDelimited_10.flush();
					strWritertFileOutputDelimited_10.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_10.getBuffer()
									.length());

				}

				CsvWritertFileOutputDelimited_10
						.setEscapeChar(csvSettings_tFileOutputDelimited_10
								.getEscapeChar());
				CsvWritertFileOutputDelimited_10
						.setQuoteChar(csvSettings_tFileOutputDelimited_10
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_10
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_10",
						CsvWritertFileOutputDelimited_10);

				resourceMap.put("out_tFileOutputDelimited_10",
						outtFileOutputDelimited_10);

				resourceMap.put("nb_line_tFileOutputDelimited_10",
						nb_line_tFileOutputDelimited_10);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_10",
						isFileGenerated_tFileOutputDelimited_10);

				resourceMap.put("filetFileOutputDelimited_10",
						filetFileOutputDelimited_10);

				/**
				 * [tFileOutputDelimited_10 begin ] stop
				 */

				/**
				 * [tReplicate_12 begin ] start
				 */

				ok_Hash.put("tReplicate_12", false);
				start_Hash.put("tReplicate_12", System.currentTimeMillis());

				currentComponent = "tReplicate_12";

				int tos_count_tReplicate_12 = 0;

				/**
				 * [tReplicate_12 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
					String itemID;
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tMap7DataElementsToOntStruct tMap7DataElementsToOnt_tmp = new tMap7DataElementsToOntStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tReplicate_9 begin ] start
				 */

				ok_Hash.put("tReplicate_9", false);
				start_Hash.put("tReplicate_9", System.currentTimeMillis());

				currentComponent = "tReplicate_9";

				int tos_count_tReplicate_9 = 0;

				/**
				 * [tReplicate_9 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tLogRow_10 begin ] start
				 */

				ok_Hash.put("tLogRow_10", false);
				start_Hash.put("tLogRow_10", System.currentTimeMillis());

				currentComponent = "tLogRow_10";

				int tos_count_tLogRow_10 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
				java.io.PrintStream consoleOut_tLogRow_10 = null;

				StringBuilder strBuffer_tLogRow_10 = null;
				int nb_line_tLogRow_10 = 0;
				// /////////////////////

				/**
				 * [tLogRow_10 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						context.folderMain + context.folderTemp + "ont_de"
								+ context.ont_14_itemID + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
							.substring(0, fileName_tFileOutputDelimited_8
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);

				if (filetFileOutputDelimited_8.exists()) {
					isFileGenerated_tFileOutputDelimited_8 = false;
				}

				String[] headColutFileOutputDelimited_8 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_8 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_8[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_8 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_8[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_8[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_8 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_8[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_8[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_8 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_8[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_8 = 0;
				int splitEvery_tFileOutputDelimited_8 = 1000;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				CSVBasicSet_tFileOutputDelimited_8 csvSettings_tFileOutputDelimited_8 = new CSVBasicSet_tFileOutputDelimited_8();
				csvSettings_tFileOutputDelimited_8.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_8.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_8.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null
						&& directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
							directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {

						dir_tFileOutputDelimited_8.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_8 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = null;

				outtFileOutputDelimited_8 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_8, true),
								"ISO-8859-15"));
				java.io.StringWriter strWritertFileOutputDelimited_8 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_8 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_8);
				CsvWritertFileOutputDelimited_8
						.setSeparator(csvSettings_tFileOutputDelimited_8
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_8
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_8.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_8.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_8.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_8.getRowDelim());
				}

				if (filetFileOutputDelimited_8.length() == 0) {

					headColutFileOutputDelimited_8[0] = "HLEVEL";

					headColutFileOutputDelimited_8[1] = "Name";

					headColutFileOutputDelimited_8[2] = "Path";

					headColutFileOutputDelimited_8[3] = "DataType";

					headColutFileOutputDelimited_8[4] = "Update_Date";

					headColutFileOutputDelimited_8[5] = "Import_Date";

					headColutFileOutputDelimited_8[6] = "Download_Date";

					headColutFileOutputDelimited_8[7] = "PathID";

					headColutFileOutputDelimited_8[8] = "visual";

					headColutFileOutputDelimited_8[9] = "codeList";

					headColutFileOutputDelimited_8[10] = "source";

					headColutFileOutputDelimited_8[11] = "xml";

					headColutFileOutputDelimited_8[12] = "m_applied_path";

					headColutFileOutputDelimited_8[13] = "itemID";

					headColutFileOutputDelimited_8[14] = "item";

					CsvWritertFileOutputDelimited_8
							.writeNext(headColutFileOutputDelimited_8);
					CsvWritertFileOutputDelimited_8.flush();

					outtFileOutputDelimited_8
							.write(strWritertFileOutputDelimited_8.getBuffer()
									.toString());
					outtFileOutputDelimited_8.flush();
					strWritertFileOutputDelimited_8.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_8.getBuffer()
									.length());

				}

				CsvWritertFileOutputDelimited_8
						.setEscapeChar(csvSettings_tFileOutputDelimited_8
								.getEscapeChar());
				CsvWritertFileOutputDelimited_8
						.setQuoteChar(csvSettings_tFileOutputDelimited_8
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_8
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_8",
						CsvWritertFileOutputDelimited_8);

				resourceMap.put("out_tFileOutputDelimited_8",
						outtFileOutputDelimited_8);

				resourceMap.put("nb_line_tFileOutputDelimited_8",
						nb_line_tFileOutputDelimited_8);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_8",
						isFileGenerated_tFileOutputDelimited_8);

				resourceMap.put("filetFileOutputDelimited_8",
						filetFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						context.folderMain + context.folderTemp + "temp_de"
								+ context.ont_14_itemID + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				if (filetFileOutputDelimited_7.exists()) {
					isFileGenerated_tFileOutputDelimited_7 = false;
				}

				String[] headColutFileOutputDelimited_7 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_7 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_7[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_7 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_7[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_7 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_7[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_7[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_7 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
				csvSettings_tFileOutputDelimited_7.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_7.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_7.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {

						dir_tFileOutputDelimited_7.mkdirs();

					}
				}
				java.io.Writer outtFileOutputDelimited_7 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;

				outtFileOutputDelimited_7 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_7, true),
								"ISO-8859-15"));
				java.io.StringWriter strWritertFileOutputDelimited_7 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_7);
				CsvWritertFileOutputDelimited_7
						.setSeparator(csvSettings_tFileOutputDelimited_7
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_7
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_7.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_7.getRowDelim());
				}

				if (filetFileOutputDelimited_7.length() == 0) {

					headColutFileOutputDelimited_7[0] = "HLEVEL";

					headColutFileOutputDelimited_7[1] = "Name";

					headColutFileOutputDelimited_7[2] = "Path";

					headColutFileOutputDelimited_7[3] = "DataType";

					headColutFileOutputDelimited_7[4] = "Update_Date";

					headColutFileOutputDelimited_7[5] = "Import_Date";

					headColutFileOutputDelimited_7[6] = "Download_Date";

					headColutFileOutputDelimited_7[7] = "PathID";

					headColutFileOutputDelimited_7[8] = "visual";

					headColutFileOutputDelimited_7[9] = "codeList";

					headColutFileOutputDelimited_7[10] = "source";

					headColutFileOutputDelimited_7[11] = "xml";

					headColutFileOutputDelimited_7[12] = "m_applied_path";

					headColutFileOutputDelimited_7[13] = "itemID";

					headColutFileOutputDelimited_7[14] = "item";

					CsvWritertFileOutputDelimited_7
							.writeNext(headColutFileOutputDelimited_7);
					CsvWritertFileOutputDelimited_7.flush();

					outtFileOutputDelimited_7
							.write(strWritertFileOutputDelimited_7.getBuffer()
									.toString());
					outtFileOutputDelimited_7.flush();
					strWritertFileOutputDelimited_7.getBuffer().delete(
							0,
							strWritertFileOutputDelimited_7.getBuffer()
									.length());

				}

				CsvWritertFileOutputDelimited_7
						.setEscapeChar(csvSettings_tFileOutputDelimited_7
								.getEscapeChar());
				CsvWritertFileOutputDelimited_7
						.setQuoteChar(csvSettings_tFileOutputDelimited_7
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_7
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_7",
						CsvWritertFileOutputDelimited_7);

				resourceMap.put("out_tFileOutputDelimited_7",
						outtFileOutputDelimited_7);

				resourceMap.put("nb_line_tFileOutputDelimited_7",
						nb_line_tFileOutputDelimited_7);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_7",
						isFileGenerated_tFileOutputDelimited_7);

				resourceMap.put("filetFileOutputDelimited_7",
						filetFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tReplicate_11 begin ] start
				 */

				ok_Hash.put("tReplicate_11", false);
				start_Hash.put("tReplicate_11", System.currentTimeMillis());

				currentComponent = "tReplicate_11";

				int tos_count_tReplicate_11 = 0;

				/**
				 * [tReplicate_11 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tMap6DE2Ont_FoldersStruct tMap6DE2Ont_Folders_tmp = new tMap6DE2Ont_FoldersStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tReplicate_5 begin ] start
				 */

				ok_Hash.put("tReplicate_5", false);
				start_Hash.put("tReplicate_5", System.currentTimeMillis());

				currentComponent = "tReplicate_5";

				int tos_count_tReplicate_5 = 0;

				/**
				 * [tReplicate_5 begin ] stop
				 */

				/**
				 * [tFileInputJSON_2 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_2", false);
				start_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_2";

				int tos_count_tFileInputJSON_2 = 0;

				class JSONUtil_tFileInputJSON_2 {
					public int getData(
							String query,
							javax.script.Invocable invocableEngine,
							java.util.List<org.json.simple.JSONArray> jsonResultList,
							int recordMaxSize) {
						try {
							// only 2 types: String/Boolean
							String resultObj = invocableEngine.invokeFunction(
									"jsonPath", query).toString();
							if (!"false".equals(resultObj)) {
								org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
										.parse(resultObj);
								jsonResultList.add(resultArray);
								if (recordMaxSize != -1
										&& recordMaxSize != resultArray.size()) {
									// just give an error, don't stop

									System.err
											.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
								}
								recordMaxSize = Math.max(recordMaxSize,
										resultArray.size());
							} else {

								System.err
										.println("Can't find any data with JSONPath "
												+ query);
								// add null to take a place in List(buffer)
								jsonResultList.add(null);
							}
						} catch (java.lang.Exception e) {

							e.printStackTrace();
						}
						return recordMaxSize;
					}

					void setRowValue_0(
							row21Struct row21,
							java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_2,
							int nbResultArray_tFileInputJSON_2)
							throws java.io.UnsupportedEncodingException {
						if (JSONResultList_tFileInputJSON_2.get(0) != null
								&& nbResultArray_tFileInputJSON_2 < JSONResultList_tFileInputJSON_2
										.get(0).size()
								&& JSONResultList_tFileInputJSON_2.get(0).get(
										nbResultArray_tFileInputJSON_2) != null) {
							row21.id = JSONResultList_tFileInputJSON_2.get(0)
									.get(nbResultArray_tFileInputJSON_2)
									.toString();
						} else {

							row21.id = null;

						}
						if (JSONResultList_tFileInputJSON_2.get(1) != null
								&& nbResultArray_tFileInputJSON_2 < JSONResultList_tFileInputJSON_2
										.get(1).size()
								&& JSONResultList_tFileInputJSON_2.get(1).get(
										nbResultArray_tFileInputJSON_2) != null) {
							row21.domain = JSONResultList_tFileInputJSON_2
									.get(1).get(nbResultArray_tFileInputJSON_2)
									.toString();
						} else {

							row21.domain = null;

						}
					}
				}
				int nb_line_tFileInputJSON_2 = 0;
				java.lang.Object jsonText_tFileInputJSON_2 = null;
				JSONUtil_tFileInputJSON_2 jsonUtil_tFileInputJSON_2 = new JSONUtil_tFileInputJSON_2();
				java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_2 = new java.util.ArrayList<org.json.simple.JSONArray>();
				int recordMaxSize_tFileInputJSON_2 = -1;

				// init js json engine
				javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_2 = new javax.script.ScriptEngineManager();
				javax.script.ScriptEngine jsEngine_tFileInputJSON_2 = scriptEngineMgr_tFileInputJSON_2
						.getEngineByName("JavaScript");
				if (jsEngine_tFileInputJSON_2 == null) {

					System.err.println("No script engine found for JavaScript");
				} else {
					java.net.URL jsonjsUrl_tFileInputJSON_2 = com.jsonpath.test.ReadJar.class
							.getResource("json.js");
					if (jsonjsUrl_tFileInputJSON_2 != null) {
						jsEngine_tFileInputJSON_2
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonjsUrl_tFileInputJSON_2
														.openStream())));
					}

					java.net.URL jsonpathjsUrl_tFileInputJSON_2 = com.jsonpath.test.ReadJar.class
							.getResource("jsonpath.js");
					if (jsonpathjsUrl_tFileInputJSON_2 != null) {
						jsEngine_tFileInputJSON_2
								.eval(new java.io.BufferedReader(
										new java.io.InputStreamReader(
												jsonpathjsUrl_tFileInputJSON_2
														.openStream())));
					}

					java.io.InputStreamReader fr_tFileInputJSON_2 = null;
					try {

						java.net.URL url_tFileInputJSON_2 = new java.net.URL(
								context.MDRBaseURL + "/" + context.MDRInstance
										+ "/mdr/entities/"
										+ context.ont_15_item);
						java.net.URLConnection urlConn_tFileInputJSON_2 = url_tFileInputJSON_2
								.openConnection();
						fr_tFileInputJSON_2 = new java.io.InputStreamReader(
								urlConn_tFileInputJSON_2.getInputStream(),
								"ISO-8859-15");

						jsonText_tFileInputJSON_2 = org.json.simple.JSONValue
								.parse(fr_tFileInputJSON_2);
						if (jsonText_tFileInputJSON_2 == null) {
							throw new RuntimeException(
									"fail to parse the json file : "
											+ context.MDRBaseURL + "/"
											+ context.MDRInstance
											+ "/mdr/entities/"
											+ context.ont_15_item);
						}
					} catch (java.lang.Exception e_tFileInputJSON_2) {

						System.err.println(e_tFileInputJSON_2.getMessage());

					} finally {
						if (fr_tFileInputJSON_2 != null) {
							fr_tFileInputJSON_2.close();
						}
					}

					if (jsonText_tFileInputJSON_2 != null) {
						jsEngine_tFileInputJSON_2.eval("var obj="
								+ jsonText_tFileInputJSON_2.toString());

						javax.script.Invocable invocableEngine_tFileInputJSON_2 = (javax.script.Invocable) jsEngine_tFileInputJSON_2;

						recordMaxSize_tFileInputJSON_2 = jsonUtil_tFileInputJSON_2
								.getData("$.id",
										invocableEngine_tFileInputJSON_2,
										JSONResultList_tFileInputJSON_2,
										recordMaxSize_tFileInputJSON_2);

						recordMaxSize_tFileInputJSON_2 = jsonUtil_tFileInputJSON_2
								.getData("$.domain",
										invocableEngine_tFileInputJSON_2,
										JSONResultList_tFileInputJSON_2,
										recordMaxSize_tFileInputJSON_2);

					}
				}
				for (int nbResultArray_tFileInputJSON_2 = 0; nbResultArray_tFileInputJSON_2 < recordMaxSize_tFileInputJSON_2; nbResultArray_tFileInputJSON_2++) {

					nb_line_tFileInputJSON_2++;
					row21 = null;
					boolean whetherReject_tFileInputJSON_2 = false;
					row21 = new row21Struct();
					try {
						jsonUtil_tFileInputJSON_2.setRowValue_0(row21,
								JSONResultList_tFileInputJSON_2,
								nbResultArray_tFileInputJSON_2);
					} catch (java.lang.Exception e) {
						whetherReject_tFileInputJSON_2 = true;
						System.err.println(e.getMessage());
						row21 = null;
					}

					/**
					 * [tFileInputJSON_2 begin ] stop
					 */

					/**
					 * [tFileInputJSON_2 main ] start
					 */

					currentComponent = "tFileInputJSON_2";

					tos_count_tFileInputJSON_2++;

					/**
					 * [tFileInputJSON_2 main ] stop
					 */
					// Start of branch "row21"
					if (row21 != null) {

						/**
						 * [tReplicate_5 main ] start
						 */

						currentComponent = "tReplicate_5";

						row22 = new row22Struct();

						row22.id = row21.id;
						row22.domain = row21.domain;
						row12 = new row12Struct();

						row12.id = row21.id;
						row12.domain = row21.domain;
						row1 = new row1Struct();

						row1.id = row21.id;
						row1.domain = row21.domain;

						tos_count_tReplicate_5++;

						/**
						 * [tReplicate_5 main ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// /////////////////////

						strBuffer_tLogRow_2 = new StringBuilder();
						strBuffer_tLogRow_2.append("[tLogRow_2] ");

						if (row22.id != null) { //

							strBuffer_tLogRow_2
									.append(String.valueOf(row22.id));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row22.domain != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row22.domain));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}

						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
								.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_3 main ] start
						 */

						currentComponent = "tFilterRow_3";

						row45 = null;
						row37 = null;
						Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3(
								"&&");
						ope_tFilterRow_3.matches((// code sample : use row12 to
													// define the condition.
								// row12.columnName1.equals("foo")
								// ||!(row12.columnName2.equals("bar"))
								// replace the following expression by your own
								// filter condition
								row12.domain != null

								// row12.unitOfMeasure.startsWith("urn:mdr:UnitOfMeasure@")
								), "advanced condition failed");

						if (ope_tFilterRow_3.getMatchFlag()) {
							if (row37 == null) {
								row37 = new row37Struct();
							}
							row37.id = row12.id;
							row37.domain = row12.domain;
							nb_line_ok_tFilterRow_3++;
						} else {
							if (row45 == null) {
								row45 = new row45Struct();
							}
							row45.id = row12.id;
							row45.domain = row12.domain;
							row45.errorMessage = ope_tFilterRow_3.getErrorMsg();
							nb_line_reject_tFilterRow_3++;
						}

						nb_line_tFilterRow_3++;

						tos_count_tFilterRow_3++;

						/**
						 * [tFilterRow_3 main ] stop
						 */
						// Start of branch "row37"
						if (row37 != null) {

							/**
							 * [tReplicate_10 main ] start
							 */

							currentComponent = "tReplicate_10";

							row2 = new row2Struct();

							row2.id = row37.id;
							row2.domain = row37.domain;
							row53 = new row53Struct();

							row53.id = row37.id;
							row53.domain = row37.domain;

							tos_count_tReplicate_10++;

							/**
							 * [tReplicate_10 main ] stop
							 */

							/**
							 * [tLogRow_8 main ] start
							 */

							currentComponent = "tLogRow_8";

							// /////////////////////

							strBuffer_tLogRow_8 = new StringBuilder();
							strBuffer_tLogRow_8.append("[tLogRow_8] ");

							if (row2.id != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row2.id));

							} //

							strBuffer_tLogRow_8.append("|");

							if (row2.domain != null) { //

								strBuffer_tLogRow_8.append(String
										.valueOf(row2.domain));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_8 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_8);
							}

							consoleOut_tLogRow_8.println(strBuffer_tLogRow_8
									.toString());
							consoleOut_tLogRow_8.flush();
							nb_line_tLogRow_8++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_8++;

							/**
							 * [tLogRow_8 main ] stop
							 */

							/**
							 * [tFlowToIterate_3 main ] start
							 */

							currentComponent = "tFlowToIterate_3";

							globalMap.put("row53.id", row53.id);
							nb_line_tFlowToIterate_3++;

							globalMap.put("row53.domain", row53.domain);
							nb_line_tFlowToIterate_3++;

							counter_tFlowToIterate_3++;
							globalMap.put("tFlowToIterate_3_CURRENT_ITERATION",
									counter_tFlowToIterate_3);

							tos_count_tFlowToIterate_3++;

							/**
							 * [tFlowToIterate_3 main ] stop
							 */
							NB_ITERATE_tFileInputJSON_4++;

							/**
							 * [tLogRow_11 begin ] start
							 */

							ok_Hash.put("tLogRow_11", false);
							start_Hash.put("tLogRow_11",
									System.currentTimeMillis());

							currentComponent = "tLogRow_11";

							int tos_count_tLogRow_11 = 0;

							// /////////////////////

							final String OUTPUT_FIELD_SEPARATOR_tLogRow_11 = "|";
							java.io.PrintStream consoleOut_tLogRow_11 = null;

							StringBuilder strBuffer_tLogRow_11 = null;
							int nb_line_tLogRow_11 = 0;
							// /////////////////////

							/**
							 * [tLogRow_11 begin ] stop
							 */

							/**
							 * [tFlowToIterate_6 begin ] start
							 */

							int NB_ITERATE_tFileInputJSON_8 = 0; // for
																	// statistics

							ok_Hash.put("tFlowToIterate_6", false);
							start_Hash.put("tFlowToIterate_6",
									System.currentTimeMillis());

							currentComponent = "tFlowToIterate_6";

							int tos_count_tFlowToIterate_6 = 0;

							int nb_line_tFlowToIterate_6 = 0;
							int counter_tFlowToIterate_6 = 0;

							/**
							 * [tFlowToIterate_6 begin ] stop
							 */

							/**
							 * [tRunJob_2 begin ] start
							 */

							ok_Hash.put("tRunJob_2", false);
							start_Hash.put("tRunJob_2",
									System.currentTimeMillis());

							currentComponent = "tRunJob_2";

							int tos_count_tRunJob_2 = 0;

							/**
							 * [tRunJob_2 begin ] stop
							 */

							/**
							 * [tRunJob_1 begin ] start
							 */

							ok_Hash.put("tRunJob_1", false);
							start_Hash.put("tRunJob_1",
									System.currentTimeMillis());

							currentComponent = "tRunJob_1";

							int tos_count_tRunJob_1 = 0;

							/**
							 * [tRunJob_1 begin ] stop
							 */

							/**
							 * [tRunJob_3 begin ] start
							 */

							ok_Hash.put("tRunJob_3", false);
							start_Hash.put("tRunJob_3",
									System.currentTimeMillis());

							currentComponent = "tRunJob_3";

							int tos_count_tRunJob_3 = 0;

							/**
							 * [tRunJob_3 begin ] stop
							 */

							/**
							 * [tLogRow_17 begin ] start
							 */

							ok_Hash.put("tLogRow_17", false);
							start_Hash.put("tLogRow_17",
									System.currentTimeMillis());

							currentComponent = "tLogRow_17";

							int tos_count_tLogRow_17 = 0;

							// /////////////////////

							final String OUTPUT_FIELD_SEPARATOR_tLogRow_17 = "|";
							java.io.PrintStream consoleOut_tLogRow_17 = null;

							StringBuilder strBuffer_tLogRow_17 = null;
							int nb_line_tLogRow_17 = 0;
							// /////////////////////

							/**
							 * [tLogRow_17 begin ] stop
							 */

							/**
							 * [tFilterRow_6 begin ] start
							 */

							ok_Hash.put("tFilterRow_6", false);
							start_Hash.put("tFilterRow_6",
									System.currentTimeMillis());

							currentComponent = "tFilterRow_6";

							int tos_count_tFilterRow_6 = 0;

							int nb_line_tFilterRow_6 = 0;
							int nb_line_ok_tFilterRow_6 = 0;
							int nb_line_reject_tFilterRow_6 = 0;

							class Operator_tFilterRow_6 {
								private String sErrorMsg = "";
								private boolean bMatchFlag = true;
								private String sUnionFlag = "&&";

								public Operator_tFilterRow_6(String unionFlag) {
									sUnionFlag = unionFlag;
									bMatchFlag = "||".equals(unionFlag) ? false
											: true;
								}

								public String getErrorMsg() {
									if (sErrorMsg != null
											&& sErrorMsg.length() > 1)
										return sErrorMsg.substring(1);
									else
										return null;
								}

								public boolean getMatchFlag() {
									return bMatchFlag;
								}

								public void matches(boolean partMatched,
										String reason) {
									// no need to care about the next judgement
									if ("||".equals(sUnionFlag) && bMatchFlag) {
										return;
									}

									if (!partMatched) {
										sErrorMsg += "|" + reason;
									}

									if ("||".equals(sUnionFlag))
										bMatchFlag = bMatchFlag || partMatched;
									else
										bMatchFlag = bMatchFlag && partMatched;
								}
							}

							/**
							 * [tFilterRow_6 begin ] stop
							 */

							/**
							 * [tFilterRow_5 begin ] start
							 */

							ok_Hash.put("tFilterRow_5", false);
							start_Hash.put("tFilterRow_5",
									System.currentTimeMillis());

							currentComponent = "tFilterRow_5";

							int tos_count_tFilterRow_5 = 0;

							int nb_line_tFilterRow_5 = 0;
							int nb_line_ok_tFilterRow_5 = 0;
							int nb_line_reject_tFilterRow_5 = 0;

							class Operator_tFilterRow_5 {
								private String sErrorMsg = "";
								private boolean bMatchFlag = true;
								private String sUnionFlag = "&&";

								public Operator_tFilterRow_5(String unionFlag) {
									sUnionFlag = unionFlag;
									bMatchFlag = "||".equals(unionFlag) ? false
											: true;
								}

								public String getErrorMsg() {
									if (sErrorMsg != null
											&& sErrorMsg.length() > 1)
										return sErrorMsg.substring(1);
									else
										return null;
								}

								public boolean getMatchFlag() {
									return bMatchFlag;
								}

								public void matches(boolean partMatched,
										String reason) {
									// no need to care about the next judgement
									if ("||".equals(sUnionFlag) && bMatchFlag) {
										return;
									}

									if (!partMatched) {
										sErrorMsg += "|" + reason;
									}

									if ("||".equals(sUnionFlag))
										bMatchFlag = bMatchFlag || partMatched;
									else
										bMatchFlag = bMatchFlag && partMatched;
								}
							}

							/**
							 * [tFilterRow_5 begin ] stop
							 */

							/**
							 * [tFilterRow_4 begin ] start
							 */

							ok_Hash.put("tFilterRow_4", false);
							start_Hash.put("tFilterRow_4",
									System.currentTimeMillis());

							currentComponent = "tFilterRow_4";

							int tos_count_tFilterRow_4 = 0;

							int nb_line_tFilterRow_4 = 0;
							int nb_line_ok_tFilterRow_4 = 0;
							int nb_line_reject_tFilterRow_4 = 0;

							class Operator_tFilterRow_4 {
								private String sErrorMsg = "";
								private boolean bMatchFlag = true;
								private String sUnionFlag = "&&";

								public Operator_tFilterRow_4(String unionFlag) {
									sUnionFlag = unionFlag;
									bMatchFlag = "||".equals(unionFlag) ? false
											: true;
								}

								public String getErrorMsg() {
									if (sErrorMsg != null
											&& sErrorMsg.length() > 1)
										return sErrorMsg.substring(1);
									else
										return null;
								}

								public boolean getMatchFlag() {
									return bMatchFlag;
								}

								public void matches(boolean partMatched,
										String reason) {
									// no need to care about the next judgement
									if ("||".equals(sUnionFlag) && bMatchFlag) {
										return;
									}

									if (!partMatched) {
										sErrorMsg += "|" + reason;
									}

									if ("||".equals(sUnionFlag))
										bMatchFlag = bMatchFlag || partMatched;
									else
										bMatchFlag = bMatchFlag && partMatched;
								}
							}

							/**
							 * [tFilterRow_4 begin ] stop
							 */

							/**
							 * [tLogRow_18 begin ] start
							 */

							ok_Hash.put("tLogRow_18", false);
							start_Hash.put("tLogRow_18",
									System.currentTimeMillis());

							currentComponent = "tLogRow_18";

							int tos_count_tLogRow_18 = 0;

							// /////////////////////

							final String OUTPUT_FIELD_SEPARATOR_tLogRow_18 = "|";
							java.io.PrintStream consoleOut_tLogRow_18 = null;

							StringBuilder strBuffer_tLogRow_18 = null;
							int nb_line_tLogRow_18 = 0;
							// /////////////////////

							/**
							 * [tLogRow_18 begin ] stop
							 */

							/**
							 * [tFilterRow_7 begin ] start
							 */

							ok_Hash.put("tFilterRow_7", false);
							start_Hash.put("tFilterRow_7",
									System.currentTimeMillis());

							currentComponent = "tFilterRow_7";

							int tos_count_tFilterRow_7 = 0;

							int nb_line_tFilterRow_7 = 0;
							int nb_line_ok_tFilterRow_7 = 0;
							int nb_line_reject_tFilterRow_7 = 0;

							class Operator_tFilterRow_7 {
								private String sErrorMsg = "";
								private boolean bMatchFlag = true;
								private String sUnionFlag = "&&";

								public Operator_tFilterRow_7(String unionFlag) {
									sUnionFlag = unionFlag;
									bMatchFlag = "||".equals(unionFlag) ? false
											: true;
								}

								public String getErrorMsg() {
									if (sErrorMsg != null
											&& sErrorMsg.length() > 1)
										return sErrorMsg.substring(1);
									else
										return null;
								}

								public boolean getMatchFlag() {
									return bMatchFlag;
								}

								public void matches(boolean partMatched,
										String reason) {
									// no need to care about the next judgement
									if ("||".equals(sUnionFlag) && bMatchFlag) {
										return;
									}

									if (!partMatched) {
										sErrorMsg += "|" + reason;
									}

									if ("||".equals(sUnionFlag))
										bMatchFlag = bMatchFlag || partMatched;
									else
										bMatchFlag = bMatchFlag && partMatched;
								}
							}

							/**
							 * [tFilterRow_7 begin ] stop
							 */

							/**
							 * [tReplicate_13 begin ] start
							 */

							ok_Hash.put("tReplicate_13", false);
							start_Hash.put("tReplicate_13",
									System.currentTimeMillis());

							currentComponent = "tReplicate_13";

							int tos_count_tReplicate_13 = 0;

							/**
							 * [tReplicate_13 begin ] stop
							 */

							/**
							 * [tFileInputJSON_4 begin ] start
							 */

							ok_Hash.put("tFileInputJSON_4", false);
							start_Hash.put("tFileInputJSON_4",
									System.currentTimeMillis());

							currentComponent = "tFileInputJSON_4";

							int tos_count_tFileInputJSON_4 = 0;

							class JSONUtil_tFileInputJSON_4 {
								public int getData(
										String query,
										javax.script.Invocable invocableEngine,
										java.util.List<org.json.simple.JSONArray> jsonResultList,
										int recordMaxSize) {
									try {
										// only 2 types: String/Boolean
										String resultObj = invocableEngine
												.invokeFunction("jsonPath",
														query).toString();
										if (!"false".equals(resultObj)) {
											org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
													.parse(resultObj);
											jsonResultList.add(resultArray);
											if (recordMaxSize != -1
													&& recordMaxSize != resultArray
															.size()) {
												// just give an error, don't
												// stop

												System.err
														.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
											}
											recordMaxSize = Math.max(
													recordMaxSize,
													resultArray.size());
										} else {

											System.err
													.println("Can't find any data with JSONPath "
															+ query);
											// add null to take a place in
											// List(buffer)
											jsonResultList.add(null);
										}
									} catch (java.lang.Exception e) {

										e.printStackTrace();
									}
									return recordMaxSize;
								}

								void setRowValue_0(
										row23Struct row23,
										java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_4,
										int nbResultArray_tFileInputJSON_4)
										throws java.io.UnsupportedEncodingException {
									if (JSONResultList_tFileInputJSON_4.get(0) != null
											&& nbResultArray_tFileInputJSON_4 < JSONResultList_tFileInputJSON_4
													.get(0).size()
											&& JSONResultList_tFileInputJSON_4
													.get(0)
													.get(nbResultArray_tFileInputJSON_4) != null) {
										row23.id = JSONResultList_tFileInputJSON_4
												.get(0)
												.get(nbResultArray_tFileInputJSON_4)
												.toString();
									} else {

										row23.id = null;

									}
									if (JSONResultList_tFileInputJSON_4.get(1) != null
											&& nbResultArray_tFileInputJSON_4 < JSONResultList_tFileInputJSON_4
													.get(1).size()
											&& JSONResultList_tFileInputJSON_4
													.get(1)
													.get(nbResultArray_tFileInputJSON_4) != null) {
										row23.maximumCharacterQuantity = JSONResultList_tFileInputJSON_4
												.get(1)
												.get(nbResultArray_tFileInputJSON_4)
												.toString();
									} else {

										row23.maximumCharacterQuantity = null;

									}
									if (JSONResultList_tFileInputJSON_4.get(2) != null
											&& nbResultArray_tFileInputJSON_4 < JSONResultList_tFileInputJSON_4
													.get(2).size()
											&& JSONResultList_tFileInputJSON_4
													.get(2)
													.get(nbResultArray_tFileInputJSON_4) != null) {
										row23.dataType = JSONResultList_tFileInputJSON_4
												.get(2)
												.get(nbResultArray_tFileInputJSON_4)
												.toString();
									} else {

										row23.dataType = null;

									}
									if (JSONResultList_tFileInputJSON_4.get(3) != null
											&& nbResultArray_tFileInputJSON_4 < JSONResultList_tFileInputJSON_4
													.get(3).size()
											&& JSONResultList_tFileInputJSON_4
													.get(3)
													.get(nbResultArray_tFileInputJSON_4) != null) {
										row23.format = JSONResultList_tFileInputJSON_4
												.get(3)
												.get(nbResultArray_tFileInputJSON_4)
												.toString();
									} else {

										row23.format = null;

									}
									if (JSONResultList_tFileInputJSON_4.get(4) != null
											&& nbResultArray_tFileInputJSON_4 < JSONResultList_tFileInputJSON_4
													.get(4).size()
											&& JSONResultList_tFileInputJSON_4
													.get(4)
													.get(nbResultArray_tFileInputJSON_4) != null) {
										row23.meaning = JSONResultList_tFileInputJSON_4
												.get(4)
												.get(nbResultArray_tFileInputJSON_4)
												.toString();
									} else {

										row23.meaning = null;

									}
									if (JSONResultList_tFileInputJSON_4.get(5) != null
											&& nbResultArray_tFileInputJSON_4 < JSONResultList_tFileInputJSON_4
													.get(5).size()
											&& JSONResultList_tFileInputJSON_4
													.get(5)
													.get(nbResultArray_tFileInputJSON_4) != null) {
										row23.unitOfMeasure = JSONResultList_tFileInputJSON_4
												.get(5)
												.get(nbResultArray_tFileInputJSON_4)
												.toString();
									} else {

										row23.unitOfMeasure = null;

									}
								}
							}
							int nb_line_tFileInputJSON_4 = 0;
							java.lang.Object jsonText_tFileInputJSON_4 = null;
							JSONUtil_tFileInputJSON_4 jsonUtil_tFileInputJSON_4 = new JSONUtil_tFileInputJSON_4();
							java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_4 = new java.util.ArrayList<org.json.simple.JSONArray>();
							int recordMaxSize_tFileInputJSON_4 = -1;

							// init js json engine
							javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_4 = new javax.script.ScriptEngineManager();
							javax.script.ScriptEngine jsEngine_tFileInputJSON_4 = scriptEngineMgr_tFileInputJSON_4
									.getEngineByName("JavaScript");
							if (jsEngine_tFileInputJSON_4 == null) {

								System.err
										.println("No script engine found for JavaScript");
							} else {
								java.net.URL jsonjsUrl_tFileInputJSON_4 = com.jsonpath.test.ReadJar.class
										.getResource("json.js");
								if (jsonjsUrl_tFileInputJSON_4 != null) {
									jsEngine_tFileInputJSON_4
											.eval(new java.io.BufferedReader(
													new java.io.InputStreamReader(
															jsonjsUrl_tFileInputJSON_4
																	.openStream())));
								}

								java.net.URL jsonpathjsUrl_tFileInputJSON_4 = com.jsonpath.test.ReadJar.class
										.getResource("jsonpath.js");
								if (jsonpathjsUrl_tFileInputJSON_4 != null) {
									jsEngine_tFileInputJSON_4
											.eval(new java.io.BufferedReader(
													new java.io.InputStreamReader(
															jsonpathjsUrl_tFileInputJSON_4
																	.openStream())));
								}

								java.io.InputStreamReader fr_tFileInputJSON_4 = null;
								try {

									java.net.URL url_tFileInputJSON_4 = new java.net.URL(
											context.MDRBaseURL
													+ "/"
													+ context.MDRInstance
													+ "/mdr/entities/"
													+ ((String) globalMap
															.get("row53.domain")));
									java.net.URLConnection urlConn_tFileInputJSON_4 = url_tFileInputJSON_4
											.openConnection();
									fr_tFileInputJSON_4 = new java.io.InputStreamReader(
											urlConn_tFileInputJSON_4
													.getInputStream(),
											"ISO-8859-15");

									jsonText_tFileInputJSON_4 = org.json.simple.JSONValue
											.parse(fr_tFileInputJSON_4);
									if (jsonText_tFileInputJSON_4 == null) {
										throw new RuntimeException(
												"fail to parse the json file : "
														+ context.MDRBaseURL
														+ "/"
														+ context.MDRInstance
														+ "/mdr/entities/"
														+ ((String) globalMap
																.get("row53.domain")));
									}
								} catch (java.lang.Exception e_tFileInputJSON_4) {

									System.err.println(e_tFileInputJSON_4
											.getMessage());

								} finally {
									if (fr_tFileInputJSON_4 != null) {
										fr_tFileInputJSON_4.close();
									}
								}

								if (jsonText_tFileInputJSON_4 != null) {
									jsEngine_tFileInputJSON_4.eval("var obj="
											+ jsonText_tFileInputJSON_4
													.toString());

									javax.script.Invocable invocableEngine_tFileInputJSON_4 = (javax.script.Invocable) jsEngine_tFileInputJSON_4;

									recordMaxSize_tFileInputJSON_4 = jsonUtil_tFileInputJSON_4
											.getData(
													"$.id",
													invocableEngine_tFileInputJSON_4,
													JSONResultList_tFileInputJSON_4,
													recordMaxSize_tFileInputJSON_4);

									recordMaxSize_tFileInputJSON_4 = jsonUtil_tFileInputJSON_4
											.getData(
													"$.maximumCharacterQuantity",
													invocableEngine_tFileInputJSON_4,
													JSONResultList_tFileInputJSON_4,
													recordMaxSize_tFileInputJSON_4);

									recordMaxSize_tFileInputJSON_4 = jsonUtil_tFileInputJSON_4
											.getData(
													"$.dataType",
													invocableEngine_tFileInputJSON_4,
													JSONResultList_tFileInputJSON_4,
													recordMaxSize_tFileInputJSON_4);

									recordMaxSize_tFileInputJSON_4 = jsonUtil_tFileInputJSON_4
											.getData(
													"$.format",
													invocableEngine_tFileInputJSON_4,
													JSONResultList_tFileInputJSON_4,
													recordMaxSize_tFileInputJSON_4);

									recordMaxSize_tFileInputJSON_4 = jsonUtil_tFileInputJSON_4
											.getData(
													"$.meaning",
													invocableEngine_tFileInputJSON_4,
													JSONResultList_tFileInputJSON_4,
													recordMaxSize_tFileInputJSON_4);

									recordMaxSize_tFileInputJSON_4 = jsonUtil_tFileInputJSON_4
											.getData(
													"$.unitOfMeasure",
													invocableEngine_tFileInputJSON_4,
													JSONResultList_tFileInputJSON_4,
													recordMaxSize_tFileInputJSON_4);

								}
							}
							for (int nbResultArray_tFileInputJSON_4 = 0; nbResultArray_tFileInputJSON_4 < recordMaxSize_tFileInputJSON_4; nbResultArray_tFileInputJSON_4++) {

								nb_line_tFileInputJSON_4++;
								row23 = null;
								boolean whetherReject_tFileInputJSON_4 = false;
								row23 = new row23Struct();
								try {
									jsonUtil_tFileInputJSON_4.setRowValue_0(
											row23,
											JSONResultList_tFileInputJSON_4,
											nbResultArray_tFileInputJSON_4);
								} catch (java.lang.Exception e) {
									whetherReject_tFileInputJSON_4 = true;
									System.err.println(e.getMessage());
									row23 = null;
								}

								/**
								 * [tFileInputJSON_4 begin ] stop
								 */

								/**
								 * [tFileInputJSON_4 main ] start
								 */

								currentComponent = "tFileInputJSON_4";

								tos_count_tFileInputJSON_4++;

								/**
								 * [tFileInputJSON_4 main ] stop
								 */
								// Start of branch "row23"
								if (row23 != null) {

									/**
									 * [tReplicate_13 main ] start
									 */

									currentComponent = "tReplicate_13";

									row3 = new row3Struct();

									row3.id = row23.id;
									row3.maximumCharacterQuantity = row23.maximumCharacterQuantity;
									row3.dataType = row23.dataType;
									row3.format = row23.format;
									row3.meaning = row23.meaning;
									row3.unitOfMeasure = row23.unitOfMeasure;
									row8 = new row8Struct();

									row8.id = row23.id;
									row8.maximumCharacterQuantity = row23.maximumCharacterQuantity;
									row8.dataType = row23.dataType;
									row8.format = row23.format;
									row8.meaning = row23.meaning;
									row8.unitOfMeasure = row23.unitOfMeasure;
									row30 = new row30Struct();

									row30.id = row23.id;
									row30.maximumCharacterQuantity = row23.maximumCharacterQuantity;
									row30.dataType = row23.dataType;
									row30.format = row23.format;
									row30.meaning = row23.meaning;
									row30.unitOfMeasure = row23.unitOfMeasure;

									tos_count_tReplicate_13++;

									/**
									 * [tReplicate_13 main ] stop
									 */

									/**
									 * [tLogRow_11 main ] start
									 */

									currentComponent = "tLogRow_11";

									// /////////////////////

									strBuffer_tLogRow_11 = new StringBuilder();
									strBuffer_tLogRow_11
											.append("[tLogRow_11] ");

									if (row3.id != null) { //

										strBuffer_tLogRow_11.append(String
												.valueOf(row3.id));

									} //

									strBuffer_tLogRow_11.append("|");

									if (row3.maximumCharacterQuantity != null) { //

										strBuffer_tLogRow_11
												.append(String
														.valueOf(row3.maximumCharacterQuantity));

									} //

									strBuffer_tLogRow_11.append("|");

									if (row3.dataType != null) { //

										strBuffer_tLogRow_11.append(String
												.valueOf(row3.dataType));

									} //

									strBuffer_tLogRow_11.append("|");

									if (row3.format != null) { //

										strBuffer_tLogRow_11.append(String
												.valueOf(row3.format));

									} //

									strBuffer_tLogRow_11.append("|");

									if (row3.meaning != null) { //

										strBuffer_tLogRow_11.append(String
												.valueOf(row3.meaning));

									} //

									strBuffer_tLogRow_11.append("|");

									if (row3.unitOfMeasure != null) { //

										strBuffer_tLogRow_11.append(String
												.valueOf(row3.unitOfMeasure));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap
												.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_11 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(
														System.out));
										globalMap.put("tLogRow_CONSOLE",
												consoleOut_tLogRow_11);
									}

									consoleOut_tLogRow_11
											.println(strBuffer_tLogRow_11
													.toString());
									consoleOut_tLogRow_11.flush();
									nb_line_tLogRow_11++;
									// ////

									// ////

									// /////////////////////

									tos_count_tLogRow_11++;

									/**
									 * [tLogRow_11 main ] stop
									 */

									/**
									 * [tFlowToIterate_6 main ] start
									 */

									currentComponent = "tFlowToIterate_6";

									globalMap.put("row8.id", row8.id);
									nb_line_tFlowToIterate_6++;

									globalMap.put(
											"row8.maximumCharacterQuantity",
											row8.maximumCharacterQuantity);
									nb_line_tFlowToIterate_6++;

									globalMap.put("row8.dataType",
											row8.dataType);
									nb_line_tFlowToIterate_6++;

									globalMap.put("row8.format", row8.format);
									nb_line_tFlowToIterate_6++;

									globalMap.put("row8.meaning", row8.meaning);
									nb_line_tFlowToIterate_6++;

									globalMap.put("row8.unitOfMeasure",
											row8.unitOfMeasure);
									nb_line_tFlowToIterate_6++;

									counter_tFlowToIterate_6++;
									globalMap
											.put("tFlowToIterate_6_CURRENT_ITERATION",
													counter_tFlowToIterate_6);

									tos_count_tFlowToIterate_6++;

									/**
									 * [tFlowToIterate_6 main ] stop
									 */
									NB_ITERATE_tFileInputJSON_8++;

									/**
									 * [tLogRow_13 begin ] start
									 */

									ok_Hash.put("tLogRow_13", false);
									start_Hash.put("tLogRow_13",
											System.currentTimeMillis());

									currentComponent = "tLogRow_13";

									int tos_count_tLogRow_13 = 0;

									// /////////////////////

									final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
									java.io.PrintStream consoleOut_tLogRow_13 = null;

									StringBuilder strBuffer_tLogRow_13 = null;
									int nb_line_tLogRow_13 = 0;
									// /////////////////////

									/**
									 * [tLogRow_13 begin ] stop
									 */

									/**
									 * [tFlowToIterate_7 begin ] start
									 */

									int NB_ITERATE_tFileInputJSON_9 = 0; // for
																			// statistics

									ok_Hash.put("tFlowToIterate_7", false);
									start_Hash.put("tFlowToIterate_7",
											System.currentTimeMillis());

									currentComponent = "tFlowToIterate_7";

									int tos_count_tFlowToIterate_7 = 0;

									int nb_line_tFlowToIterate_7 = 0;
									int counter_tFlowToIterate_7 = 0;

									/**
									 * [tFlowToIterate_7 begin ] stop
									 */

									/**
									 * [tReplicate_14 begin ] start
									 */

									ok_Hash.put("tReplicate_14", false);
									start_Hash.put("tReplicate_14",
											System.currentTimeMillis());

									currentComponent = "tReplicate_14";

									int tos_count_tReplicate_14 = 0;

									/**
									 * [tReplicate_14 begin ] stop
									 */

									/**
									 * [tFileInputJSON_8 begin ] start
									 */

									ok_Hash.put("tFileInputJSON_8", false);
									start_Hash.put("tFileInputJSON_8",
											System.currentTimeMillis());

									currentComponent = "tFileInputJSON_8";

									int tos_count_tFileInputJSON_8 = 0;

									class JSONUtil_tFileInputJSON_8 {
										public int getData(
												String query,
												javax.script.Invocable invocableEngine,
												java.util.List<org.json.simple.JSONArray> jsonResultList,
												int recordMaxSize) {
											try {
												// only 2 types: String/Boolean
												String resultObj = invocableEngine
														.invokeFunction(
																"jsonPath",
																query)
														.toString();
												if (!"false".equals(resultObj)) {
													org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
															.parse(resultObj);
													jsonResultList
															.add(resultArray);
													if (recordMaxSize != -1
															&& recordMaxSize != resultArray
																	.size()) {
														// just give an error,
														// don't stop

														System.err
																.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
													}
													recordMaxSize = Math.max(
															recordMaxSize,
															resultArray.size());
												} else {

													System.err
															.println("Can't find any data with JSONPath "
																	+ query);
													// add null to take a place
													// in List(buffer)
													jsonResultList.add(null);
												}
											} catch (java.lang.Exception e) {

												e.printStackTrace();
											}
											return recordMaxSize;
										}

										void setRowValue_0(
												row39Struct row39,
												java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_8,
												int nbResultArray_tFileInputJSON_8)
												throws java.io.UnsupportedEncodingException {
											if (JSONResultList_tFileInputJSON_8
													.get(0) != null
													&& nbResultArray_tFileInputJSON_8 < JSONResultList_tFileInputJSON_8
															.get(0).size()
													&& JSONResultList_tFileInputJSON_8
															.get(0)
															.get(nbResultArray_tFileInputJSON_8) != null) {
												row39.id = JSONResultList_tFileInputJSON_8
														.get(0)
														.get(nbResultArray_tFileInputJSON_8)
														.toString();
											} else {

												row39.id = null;

											}
											if (JSONResultList_tFileInputJSON_8
													.get(1) != null
													&& nbResultArray_tFileInputJSON_8 < JSONResultList_tFileInputJSON_8
															.get(1).size()
													&& JSONResultList_tFileInputJSON_8
															.get(1)
															.get(nbResultArray_tFileInputJSON_8) != null) {
												row39.permittedValue = JSONResultList_tFileInputJSON_8
														.get(1)
														.get(nbResultArray_tFileInputJSON_8)
														.toString();
											} else {

												row39.permittedValue = null;

											}
											if (JSONResultList_tFileInputJSON_8
													.get(2) != null
													&& nbResultArray_tFileInputJSON_8 < JSONResultList_tFileInputJSON_8
															.get(2).size()
													&& JSONResultList_tFileInputJSON_8
															.get(2)
															.get(nbResultArray_tFileInputJSON_8) != null) {
												row39.meaning = JSONResultList_tFileInputJSON_8
														.get(2)
														.get(nbResultArray_tFileInputJSON_8)
														.toString();
											} else {

												row39.meaning = null;

											}
										}
									}
									int nb_line_tFileInputJSON_8 = 0;
									java.lang.Object jsonText_tFileInputJSON_8 = null;
									JSONUtil_tFileInputJSON_8 jsonUtil_tFileInputJSON_8 = new JSONUtil_tFileInputJSON_8();
									java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_8 = new java.util.ArrayList<org.json.simple.JSONArray>();
									int recordMaxSize_tFileInputJSON_8 = -1;

									// init js json engine
									javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_8 = new javax.script.ScriptEngineManager();
									javax.script.ScriptEngine jsEngine_tFileInputJSON_8 = scriptEngineMgr_tFileInputJSON_8
											.getEngineByName("JavaScript");
									if (jsEngine_tFileInputJSON_8 == null) {

										System.err
												.println("No script engine found for JavaScript");
									} else {
										java.net.URL jsonjsUrl_tFileInputJSON_8 = com.jsonpath.test.ReadJar.class
												.getResource("json.js");
										if (jsonjsUrl_tFileInputJSON_8 != null) {
											jsEngine_tFileInputJSON_8
													.eval(new java.io.BufferedReader(
															new java.io.InputStreamReader(
																	jsonjsUrl_tFileInputJSON_8
																			.openStream())));
										}

										java.net.URL jsonpathjsUrl_tFileInputJSON_8 = com.jsonpath.test.ReadJar.class
												.getResource("jsonpath.js");
										if (jsonpathjsUrl_tFileInputJSON_8 != null) {
											jsEngine_tFileInputJSON_8
													.eval(new java.io.BufferedReader(
															new java.io.InputStreamReader(
																	jsonpathjsUrl_tFileInputJSON_8
																			.openStream())));
										}

										java.io.InputStreamReader fr_tFileInputJSON_8 = null;
										try {

											java.net.URL url_tFileInputJSON_8 = new java.net.URL(
													context.MDRBaseURL
															+ "/"
															+ context.MDRInstance
															+ "/mdr/entities/"
															+ ((String) globalMap
																	.get("row53.domain"))
															+ "/members");
											java.net.URLConnection urlConn_tFileInputJSON_8 = url_tFileInputJSON_8
													.openConnection();
											fr_tFileInputJSON_8 = new java.io.InputStreamReader(
													urlConn_tFileInputJSON_8
															.getInputStream(),
													"ISO-8859-15");

											jsonText_tFileInputJSON_8 = org.json.simple.JSONValue
													.parse(fr_tFileInputJSON_8);
											if (jsonText_tFileInputJSON_8 == null) {
												throw new RuntimeException(
														"fail to parse the json file : "
																+ context.MDRBaseURL
																+ "/"
																+ context.MDRInstance
																+ "/mdr/entities/"
																+ ((String) globalMap
																		.get("row53.domain"))
																+ "/members");
											}
										} catch (java.lang.Exception e_tFileInputJSON_8) {

											System.err
													.println(e_tFileInputJSON_8
															.getMessage());

										} finally {
											if (fr_tFileInputJSON_8 != null) {
												fr_tFileInputJSON_8.close();
											}
										}

										if (jsonText_tFileInputJSON_8 != null) {
											jsEngine_tFileInputJSON_8
													.eval("var obj="
															+ jsonText_tFileInputJSON_8
																	.toString());

											javax.script.Invocable invocableEngine_tFileInputJSON_8 = (javax.script.Invocable) jsEngine_tFileInputJSON_8;

											recordMaxSize_tFileInputJSON_8 = jsonUtil_tFileInputJSON_8
													.getData(
															"$.[*].id",
															invocableEngine_tFileInputJSON_8,
															JSONResultList_tFileInputJSON_8,
															recordMaxSize_tFileInputJSON_8);

											recordMaxSize_tFileInputJSON_8 = jsonUtil_tFileInputJSON_8
													.getData(
															"$.[*].permittedValue",
															invocableEngine_tFileInputJSON_8,
															JSONResultList_tFileInputJSON_8,
															recordMaxSize_tFileInputJSON_8);

											recordMaxSize_tFileInputJSON_8 = jsonUtil_tFileInputJSON_8
													.getData(
															"$.[*].meaning",
															invocableEngine_tFileInputJSON_8,
															JSONResultList_tFileInputJSON_8,
															recordMaxSize_tFileInputJSON_8);

										}
									}
									for (int nbResultArray_tFileInputJSON_8 = 0; nbResultArray_tFileInputJSON_8 < recordMaxSize_tFileInputJSON_8; nbResultArray_tFileInputJSON_8++) {

										nb_line_tFileInputJSON_8++;
										row39 = null;
										boolean whetherReject_tFileInputJSON_8 = false;
										row39 = new row39Struct();
										try {
											jsonUtil_tFileInputJSON_8
													.setRowValue_0(
															row39,
															JSONResultList_tFileInputJSON_8,
															nbResultArray_tFileInputJSON_8);
										} catch (java.lang.Exception e) {
											whetherReject_tFileInputJSON_8 = true;
											System.err.println(e.getMessage());
											row39 = null;
										}

										/**
										 * [tFileInputJSON_8 begin ] stop
										 */

										/**
										 * [tFileInputJSON_8 main ] start
										 */

										currentComponent = "tFileInputJSON_8";

										tos_count_tFileInputJSON_8++;

										/**
										 * [tFileInputJSON_8 main ] stop
										 */
										// Start of branch "row39"
										if (row39 != null) {

											/**
											 * [tReplicate_14 main ] start
											 */

											currentComponent = "tReplicate_14";

											row15 = new row15Struct();

											row15.id = row39.id;
											row15.permittedValue = row39.permittedValue;
											row15.meaning = row39.meaning;
											row38 = new row38Struct();

											row38.id = row39.id;
											row38.permittedValue = row39.permittedValue;
											row38.meaning = row39.meaning;

											tos_count_tReplicate_14++;

											/**
											 * [tReplicate_14 main ] stop
											 */

											/**
											 * [tLogRow_13 main ] start
											 */

											currentComponent = "tLogRow_13";

											// /////////////////////

											strBuffer_tLogRow_13 = new StringBuilder();
											strBuffer_tLogRow_13
													.append("[tLogRow_13] ");

											if (row15.id != null) { //

												strBuffer_tLogRow_13
														.append(String
																.valueOf(row15.id));

											} //

											strBuffer_tLogRow_13.append("|");

											if (row15.permittedValue != null) { //

												strBuffer_tLogRow_13
														.append(String
																.valueOf(row15.permittedValue));

											} //

											strBuffer_tLogRow_13.append("|");

											if (row15.meaning != null) { //

												strBuffer_tLogRow_13
														.append(String
																.valueOf(row15.meaning));

											} //

											if (globalMap
													.get("tLogRow_CONSOLE") != null) {
												consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap
														.get("tLogRow_CONSOLE");
											} else {
												consoleOut_tLogRow_13 = new java.io.PrintStream(
														new java.io.BufferedOutputStream(
																System.out));
												globalMap.put(
														"tLogRow_CONSOLE",
														consoleOut_tLogRow_13);
											}

											consoleOut_tLogRow_13
													.println(strBuffer_tLogRow_13
															.toString());
											consoleOut_tLogRow_13.flush();
											nb_line_tLogRow_13++;
											// ////

											// ////

											// /////////////////////

											tos_count_tLogRow_13++;

											/**
											 * [tLogRow_13 main ] stop
											 */

											/**
											 * [tFlowToIterate_7 main ] start
											 */

											currentComponent = "tFlowToIterate_7";

											globalMap.put("row38.id", row38.id);
											nb_line_tFlowToIterate_7++;

											globalMap.put(
													"row38.permittedValue",
													row38.permittedValue);
											nb_line_tFlowToIterate_7++;

											globalMap.put("row38.meaning",
													row38.meaning);
											nb_line_tFlowToIterate_7++;

											counter_tFlowToIterate_7++;
											globalMap
													.put("tFlowToIterate_7_CURRENT_ITERATION",
															counter_tFlowToIterate_7);

											tos_count_tFlowToIterate_7++;

											/**
											 * [tFlowToIterate_7 main ] stop
											 */
											NB_ITERATE_tFileInputJSON_9++;

											/**
											 * [tLogRow_14 begin ] start
											 */

											ok_Hash.put("tLogRow_14", false);
											start_Hash.put("tLogRow_14",
													System.currentTimeMillis());

											currentComponent = "tLogRow_14";

											int tos_count_tLogRow_14 = 0;

											// /////////////////////

											final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
											java.io.PrintStream consoleOut_tLogRow_14 = null;

											StringBuilder strBuffer_tLogRow_14 = null;
											int nb_line_tLogRow_14 = 0;
											// /////////////////////

											/**
											 * [tLogRow_14 begin ] stop
											 */

											/**
											 * [tLogRow_15 begin ] start
											 */

											ok_Hash.put("tLogRow_15", false);
											start_Hash.put("tLogRow_15",
													System.currentTimeMillis());

											currentComponent = "tLogRow_15";

											int tos_count_tLogRow_15 = 0;

											// /////////////////////

											final String OUTPUT_FIELD_SEPARATOR_tLogRow_15 = "|";
											java.io.PrintStream consoleOut_tLogRow_15 = null;

											StringBuilder strBuffer_tLogRow_15 = null;
											int nb_line_tLogRow_15 = 0;
											// /////////////////////

											/**
											 * [tLogRow_15 begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_14 begin ]
											 * start
											 */

											ok_Hash.put(
													"tFileOutputDelimited_14",
													false);
											start_Hash.put(
													"tFileOutputDelimited_14",
													System.currentTimeMillis());

											currentComponent = "tFileOutputDelimited_14";

											int tos_count_tFileOutputDelimited_14 = 0;

											String fileName_tFileOutputDelimited_14 = "";
											fileName_tFileOutputDelimited_14 = (new java.io.File(
													context.folderMain
															+ context.folderTemp
															+ "ont_cl"
															+ ((String) globalMap
																	.get("row53.domain"))
																	.substring(((String) globalMap
																			.get("row53.domain"))
																			.lastIndexOf("@") + 1)
															+ ".csv"))
													.getAbsolutePath().replace(
															"\\", "/");
											String fullName_tFileOutputDelimited_14 = null;
											String extension_tFileOutputDelimited_14 = null;
											String directory_tFileOutputDelimited_14 = null;
											if ((fileName_tFileOutputDelimited_14
													.indexOf("/") != -1)) {
												if (fileName_tFileOutputDelimited_14
														.lastIndexOf(".") < fileName_tFileOutputDelimited_14
														.lastIndexOf("/")) {
													fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
													extension_tFileOutputDelimited_14 = "";
												} else {
													fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
															.substring(
																	0,
																	fileName_tFileOutputDelimited_14
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
															.substring(fileName_tFileOutputDelimited_14
																	.lastIndexOf("."));
												}
												directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
														.substring(
																0,
																fileName_tFileOutputDelimited_14
																		.lastIndexOf("/"));
											} else {
												if (fileName_tFileOutputDelimited_14
														.lastIndexOf(".") != -1) {
													fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
															.substring(
																	0,
																	fileName_tFileOutputDelimited_14
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
															.substring(fileName_tFileOutputDelimited_14
																	.lastIndexOf("."));
												} else {
													fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
													extension_tFileOutputDelimited_14 = "";
												}
												directory_tFileOutputDelimited_14 = "";
											}
											boolean isFileGenerated_tFileOutputDelimited_14 = true;
											java.io.File filetFileOutputDelimited_14 = new java.io.File(
													fileName_tFileOutputDelimited_14);
											globalMap
													.put("tFileOutputDelimited_14_FILE_NAME",
															fileName_tFileOutputDelimited_14);

											if (filetFileOutputDelimited_14
													.exists()) {
												isFileGenerated_tFileOutputDelimited_14 = false;
											}

											String[] headColutFileOutputDelimited_14 = new String[15];
											class CSVBasicSet_tFileOutputDelimited_14 {
												private char field_Delim;
												private char row_Delim;
												private char escape;
												private char textEnclosure;
												private boolean useCRLFRecordDelimiter;

												public boolean isUseCRLFRecordDelimiter() {
													return useCRLFRecordDelimiter;
												}

												public void setFieldSeparator(
														String fieldSep)
														throws IllegalArgumentException {
													char field_Delim_tFileOutputDelimited_14[] = null;

													// support passing value
													// (property: Field
													// Separator) by
													// 'context.fs' or
													// 'globalMap.get("fs")'.
													if (fieldSep.length() > 0) {
														field_Delim_tFileOutputDelimited_14 = fieldSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Field Separator must be assigned a char.");
													}
													this.field_Delim = field_Delim_tFileOutputDelimited_14[0];
												}

												public char getFieldDelim() {
													if (this.field_Delim == 0) {
														setFieldSeparator("\t");
													}
													return this.field_Delim;
												}

												public void setRowSeparator(
														String rowSep) {
													if ("\r\n".equals(rowSep)) {
														useCRLFRecordDelimiter = true;
														return;
													}
													char row_DelimtFileOutputDelimited_14[] = null;

													// support passing value
													// (property: Row Separator)
													// by 'context.rs' or
													// 'globalMap.get("rs")'.
													if (rowSep.length() > 0) {
														row_DelimtFileOutputDelimited_14 = rowSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Row Separator must be assigned a char.");
													}
													this.row_Delim = row_DelimtFileOutputDelimited_14[0];
												}

												public char getRowDelim() {
													if (this.row_Delim == 0) {
														setRowSeparator("\n");
													}
													return this.row_Delim;
												}

												public void setEscapeAndTextEnclosure(
														String strEscape,
														String strTextEnclosure)
														throws IllegalArgumentException {
													if (strEscape.length() <= 0) {
														throw new IllegalArgumentException(
																"Escape Char must be assigned a char.");
													}

													if ("".equals(strTextEnclosure))
														strTextEnclosure = "\0";
													char textEnclosure_tFileOutputDelimited_14[] = null;

													if (strTextEnclosure
															.length() > 0) {
														textEnclosure_tFileOutputDelimited_14 = strTextEnclosure
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Text Enclosure must be assigned a char.");
													}

													this.textEnclosure = textEnclosure_tFileOutputDelimited_14[0];

													if (("\\")
															.equals(strEscape)) {
														this.escape = '\\';
													} else if (strEscape
															.equals(strTextEnclosure)) {
														this.escape = this.textEnclosure;
													} else {
														// the default escape
														// mode is double escape
														this.escape = this.textEnclosure;
													}

												}

												public char getEscapeChar() {
													return (char) this.escape;
												}

												public char getTextEnclosure() {
													return this.textEnclosure;
												}
											}

											int nb_line_tFileOutputDelimited_14 = 0;
											int splitEvery_tFileOutputDelimited_14 = 1000;
											int splitedFileNo_tFileOutputDelimited_14 = 0;
											int currentRow_tFileOutputDelimited_14 = 0;

											CSVBasicSet_tFileOutputDelimited_14 csvSettings_tFileOutputDelimited_14 = new CSVBasicSet_tFileOutputDelimited_14();
											csvSettings_tFileOutputDelimited_14
													.setFieldSeparator("\t");
											csvSettings_tFileOutputDelimited_14
													.setRowSeparator("\n");
											csvSettings_tFileOutputDelimited_14
													.setEscapeAndTextEnclosure(
															"\"", "\"");
											// create directory only if not
											// exists
											if (directory_tFileOutputDelimited_14 != null
													&& directory_tFileOutputDelimited_14
															.trim().length() != 0) {
												java.io.File dir_tFileOutputDelimited_14 = new java.io.File(
														directory_tFileOutputDelimited_14);
												if (!dir_tFileOutputDelimited_14
														.exists()) {

													dir_tFileOutputDelimited_14
															.mkdirs();

												}
											}
											java.io.Writer outtFileOutputDelimited_14 = null;
											com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_14 = null;

											outtFileOutputDelimited_14 = new routines.system.BufferedOutput(
													new java.io.OutputStreamWriter(
															new java.io.FileOutputStream(
																	fileName_tFileOutputDelimited_14,
																	true),
															"ISO-8859-15"));
											java.io.StringWriter strWritertFileOutputDelimited_14 = new java.io.StringWriter();
											CsvWritertFileOutputDelimited_14 = new com.talend.csv.CSVWriter(
													strWritertFileOutputDelimited_14);
											CsvWritertFileOutputDelimited_14
													.setSeparator(csvSettings_tFileOutputDelimited_14
															.getFieldDelim());

											if (!csvSettings_tFileOutputDelimited_14
													.isUseCRLFRecordDelimiter()
													&& csvSettings_tFileOutputDelimited_14
															.getRowDelim() != '\r'
													&& csvSettings_tFileOutputDelimited_14
															.getRowDelim() != '\n') {
												CsvWritertFileOutputDelimited_14
														.setLineEnd(""
																+ csvSettings_tFileOutputDelimited_14
																		.getRowDelim());
											}

											if (filetFileOutputDelimited_14
													.length() == 0) {

												headColutFileOutputDelimited_14[0] = "HLEVEL";

												headColutFileOutputDelimited_14[1] = "Name";

												headColutFileOutputDelimited_14[2] = "Path";

												headColutFileOutputDelimited_14[3] = "DataType";

												headColutFileOutputDelimited_14[4] = "Update_Date";

												headColutFileOutputDelimited_14[5] = "Import_Date";

												headColutFileOutputDelimited_14[6] = "Download_Date";

												headColutFileOutputDelimited_14[7] = "PathID";

												headColutFileOutputDelimited_14[8] = "visual";

												headColutFileOutputDelimited_14[9] = "codeList";

												headColutFileOutputDelimited_14[10] = "source";

												headColutFileOutputDelimited_14[11] = "xml";

												headColutFileOutputDelimited_14[12] = "m_applied_path";

												headColutFileOutputDelimited_14[13] = "itemID";

												headColutFileOutputDelimited_14[14] = "item";

												CsvWritertFileOutputDelimited_14
														.writeNext(headColutFileOutputDelimited_14);
												CsvWritertFileOutputDelimited_14
														.flush();

												outtFileOutputDelimited_14
														.write(strWritertFileOutputDelimited_14
																.getBuffer()
																.toString());
												outtFileOutputDelimited_14
														.flush();
												strWritertFileOutputDelimited_14
														.getBuffer()
														.delete(0,
																strWritertFileOutputDelimited_14
																		.getBuffer()
																		.length());

											}

											CsvWritertFileOutputDelimited_14
													.setEscapeChar(csvSettings_tFileOutputDelimited_14
															.getEscapeChar());
											CsvWritertFileOutputDelimited_14
													.setQuoteChar(csvSettings_tFileOutputDelimited_14
															.getTextEnclosure());
											CsvWritertFileOutputDelimited_14
													.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

											resourceMap
													.put("CsvWriter_tFileOutputDelimited_14",
															CsvWritertFileOutputDelimited_14);

											resourceMap
													.put("out_tFileOutputDelimited_14",
															outtFileOutputDelimited_14);

											resourceMap
													.put("nb_line_tFileOutputDelimited_14",
															nb_line_tFileOutputDelimited_14);
											resourceMap
													.put("isFileGenerated_tFileOutputDelimited_14",
															isFileGenerated_tFileOutputDelimited_14);

											resourceMap
													.put("filetFileOutputDelimited_14",
															filetFileOutputDelimited_14);

											/**
											 * [tFileOutputDelimited_14 begin ]
											 * stop
											 */

											/**
											 * [tFileOutputDelimited_13 begin ]
											 * start
											 */

											ok_Hash.put(
													"tFileOutputDelimited_13",
													false);
											start_Hash.put(
													"tFileOutputDelimited_13",
													System.currentTimeMillis());

											currentComponent = "tFileOutputDelimited_13";

											int tos_count_tFileOutputDelimited_13 = 0;

											String fileName_tFileOutputDelimited_13 = "";
											fileName_tFileOutputDelimited_13 = (new java.io.File(
													context.folderMain
															+ context.folderTemp
															+ "temp_cl"
															+ ((String) globalMap
																	.get("row53.domain"))
																	.substring(((String) globalMap
																			.get("row53.domain"))
																			.lastIndexOf("@") + 1)
															+ ".csv"))
													.getAbsolutePath().replace(
															"\\", "/");
											String fullName_tFileOutputDelimited_13 = null;
											String extension_tFileOutputDelimited_13 = null;
											String directory_tFileOutputDelimited_13 = null;
											if ((fileName_tFileOutputDelimited_13
													.indexOf("/") != -1)) {
												if (fileName_tFileOutputDelimited_13
														.lastIndexOf(".") < fileName_tFileOutputDelimited_13
														.lastIndexOf("/")) {
													fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
													extension_tFileOutputDelimited_13 = "";
												} else {
													fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
															.substring(
																	0,
																	fileName_tFileOutputDelimited_13
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
															.substring(fileName_tFileOutputDelimited_13
																	.lastIndexOf("."));
												}
												directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
														.substring(
																0,
																fileName_tFileOutputDelimited_13
																		.lastIndexOf("/"));
											} else {
												if (fileName_tFileOutputDelimited_13
														.lastIndexOf(".") != -1) {
													fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
															.substring(
																	0,
																	fileName_tFileOutputDelimited_13
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
															.substring(fileName_tFileOutputDelimited_13
																	.lastIndexOf("."));
												} else {
													fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
													extension_tFileOutputDelimited_13 = "";
												}
												directory_tFileOutputDelimited_13 = "";
											}
											boolean isFileGenerated_tFileOutputDelimited_13 = true;
											java.io.File filetFileOutputDelimited_13 = new java.io.File(
													fileName_tFileOutputDelimited_13);
											globalMap
													.put("tFileOutputDelimited_13_FILE_NAME",
															fileName_tFileOutputDelimited_13);

											if (filetFileOutputDelimited_13
													.exists()) {
												isFileGenerated_tFileOutputDelimited_13 = false;
											}

											String[] headColutFileOutputDelimited_13 = new String[15];
											class CSVBasicSet_tFileOutputDelimited_13 {
												private char field_Delim;
												private char row_Delim;
												private char escape;
												private char textEnclosure;
												private boolean useCRLFRecordDelimiter;

												public boolean isUseCRLFRecordDelimiter() {
													return useCRLFRecordDelimiter;
												}

												public void setFieldSeparator(
														String fieldSep)
														throws IllegalArgumentException {
													char field_Delim_tFileOutputDelimited_13[] = null;

													// support passing value
													// (property: Field
													// Separator) by
													// 'context.fs' or
													// 'globalMap.get("fs")'.
													if (fieldSep.length() > 0) {
														field_Delim_tFileOutputDelimited_13 = fieldSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Field Separator must be assigned a char.");
													}
													this.field_Delim = field_Delim_tFileOutputDelimited_13[0];
												}

												public char getFieldDelim() {
													if (this.field_Delim == 0) {
														setFieldSeparator("\t");
													}
													return this.field_Delim;
												}

												public void setRowSeparator(
														String rowSep) {
													if ("\r\n".equals(rowSep)) {
														useCRLFRecordDelimiter = true;
														return;
													}
													char row_DelimtFileOutputDelimited_13[] = null;

													// support passing value
													// (property: Row Separator)
													// by 'context.rs' or
													// 'globalMap.get("rs")'.
													if (rowSep.length() > 0) {
														row_DelimtFileOutputDelimited_13 = rowSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Row Separator must be assigned a char.");
													}
													this.row_Delim = row_DelimtFileOutputDelimited_13[0];
												}

												public char getRowDelim() {
													if (this.row_Delim == 0) {
														setRowSeparator("\n");
													}
													return this.row_Delim;
												}

												public void setEscapeAndTextEnclosure(
														String strEscape,
														String strTextEnclosure)
														throws IllegalArgumentException {
													if (strEscape.length() <= 0) {
														throw new IllegalArgumentException(
																"Escape Char must be assigned a char.");
													}

													if ("".equals(strTextEnclosure))
														strTextEnclosure = "\0";
													char textEnclosure_tFileOutputDelimited_13[] = null;

													if (strTextEnclosure
															.length() > 0) {
														textEnclosure_tFileOutputDelimited_13 = strTextEnclosure
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Text Enclosure must be assigned a char.");
													}

													this.textEnclosure = textEnclosure_tFileOutputDelimited_13[0];

													if (("\\")
															.equals(strEscape)) {
														this.escape = '\\';
													} else if (strEscape
															.equals(strTextEnclosure)) {
														this.escape = this.textEnclosure;
													} else {
														// the default escape
														// mode is double escape
														this.escape = this.textEnclosure;
													}

												}

												public char getEscapeChar() {
													return (char) this.escape;
												}

												public char getTextEnclosure() {
													return this.textEnclosure;
												}
											}

											int nb_line_tFileOutputDelimited_13 = 0;
											int splitEvery_tFileOutputDelimited_13 = 1000;
											int splitedFileNo_tFileOutputDelimited_13 = 0;
											int currentRow_tFileOutputDelimited_13 = 0;

											CSVBasicSet_tFileOutputDelimited_13 csvSettings_tFileOutputDelimited_13 = new CSVBasicSet_tFileOutputDelimited_13();
											csvSettings_tFileOutputDelimited_13
													.setFieldSeparator("\t");
											csvSettings_tFileOutputDelimited_13
													.setRowSeparator("\n");
											csvSettings_tFileOutputDelimited_13
													.setEscapeAndTextEnclosure(
															"\"", "\"");
											// create directory only if not
											// exists
											if (directory_tFileOutputDelimited_13 != null
													&& directory_tFileOutputDelimited_13
															.trim().length() != 0) {
												java.io.File dir_tFileOutputDelimited_13 = new java.io.File(
														directory_tFileOutputDelimited_13);
												if (!dir_tFileOutputDelimited_13
														.exists()) {

													dir_tFileOutputDelimited_13
															.mkdirs();

												}
											}
											java.io.Writer outtFileOutputDelimited_13 = null;
											com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = null;

											outtFileOutputDelimited_13 = new routines.system.BufferedOutput(
													new java.io.OutputStreamWriter(
															new java.io.FileOutputStream(
																	fileName_tFileOutputDelimited_13,
																	true),
															"ISO-8859-15"));
											java.io.StringWriter strWritertFileOutputDelimited_13 = new java.io.StringWriter();
											CsvWritertFileOutputDelimited_13 = new com.talend.csv.CSVWriter(
													strWritertFileOutputDelimited_13);
											CsvWritertFileOutputDelimited_13
													.setSeparator(csvSettings_tFileOutputDelimited_13
															.getFieldDelim());

											if (!csvSettings_tFileOutputDelimited_13
													.isUseCRLFRecordDelimiter()
													&& csvSettings_tFileOutputDelimited_13
															.getRowDelim() != '\r'
													&& csvSettings_tFileOutputDelimited_13
															.getRowDelim() != '\n') {
												CsvWritertFileOutputDelimited_13
														.setLineEnd(""
																+ csvSettings_tFileOutputDelimited_13
																		.getRowDelim());
											}

											if (filetFileOutputDelimited_13
													.length() == 0) {

												headColutFileOutputDelimited_13[0] = "HLEVEL";

												headColutFileOutputDelimited_13[1] = "Name";

												headColutFileOutputDelimited_13[2] = "Path";

												headColutFileOutputDelimited_13[3] = "DataType";

												headColutFileOutputDelimited_13[4] = "Update_Date";

												headColutFileOutputDelimited_13[5] = "Import_Date";

												headColutFileOutputDelimited_13[6] = "Download_Date";

												headColutFileOutputDelimited_13[7] = "PathID";

												headColutFileOutputDelimited_13[8] = "visual";

												headColutFileOutputDelimited_13[9] = "codeList";

												headColutFileOutputDelimited_13[10] = "source";

												headColutFileOutputDelimited_13[11] = "xml";

												headColutFileOutputDelimited_13[12] = "m_applied_path";

												headColutFileOutputDelimited_13[13] = "itemID";

												headColutFileOutputDelimited_13[14] = "item";

												CsvWritertFileOutputDelimited_13
														.writeNext(headColutFileOutputDelimited_13);
												CsvWritertFileOutputDelimited_13
														.flush();

												outtFileOutputDelimited_13
														.write(strWritertFileOutputDelimited_13
																.getBuffer()
																.toString());
												outtFileOutputDelimited_13
														.flush();
												strWritertFileOutputDelimited_13
														.getBuffer()
														.delete(0,
																strWritertFileOutputDelimited_13
																		.getBuffer()
																		.length());

											}

											CsvWritertFileOutputDelimited_13
													.setEscapeChar(csvSettings_tFileOutputDelimited_13
															.getEscapeChar());
											CsvWritertFileOutputDelimited_13
													.setQuoteChar(csvSettings_tFileOutputDelimited_13
															.getTextEnclosure());
											CsvWritertFileOutputDelimited_13
													.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

											resourceMap
													.put("CsvWriter_tFileOutputDelimited_13",
															CsvWritertFileOutputDelimited_13);

											resourceMap
													.put("out_tFileOutputDelimited_13",
															outtFileOutputDelimited_13);

											resourceMap
													.put("nb_line_tFileOutputDelimited_13",
															nb_line_tFileOutputDelimited_13);
											resourceMap
													.put("isFileGenerated_tFileOutputDelimited_13",
															isFileGenerated_tFileOutputDelimited_13);

											resourceMap
													.put("filetFileOutputDelimited_13",
															filetFileOutputDelimited_13);

											/**
											 * [tFileOutputDelimited_13 begin ]
											 * stop
											 */

											/**
											 * [tReplicate_17 begin ] start
											 */

											ok_Hash.put("tReplicate_17", false);
											start_Hash.put("tReplicate_17",
													System.currentTimeMillis());

											currentComponent = "tReplicate_17";

											int tos_count_tReplicate_17 = 0;

											/**
											 * [tReplicate_17 begin ] stop
											 */

											/**
											 * [tMap_9 begin ] start
											 */

											ok_Hash.put("tMap_9", false);
											start_Hash.put("tMap_9",
													System.currentTimeMillis());

											currentComponent = "tMap_9";

											int tos_count_tMap_9 = 0;

											// ###############################
											// # Lookup's keys initialization
											// ###############################

											// ###############################
											// # Vars initialization
											class Var__tMap_9__Struct {
												String itemID;
											}
											Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
											// ###############################

											// ###############################
											// # Outputs initialization
											copyOfDataElementsToOntStruct copyOfDataElementsToOnt_tmp = new copyOfDataElementsToOntStruct();
											// ###############################

											/**
											 * [tMap_9 begin ] stop
											 */

											/**
											 * [tReplicate_16 begin ] start
											 */

											ok_Hash.put("tReplicate_16", false);
											start_Hash.put("tReplicate_16",
													System.currentTimeMillis());

											currentComponent = "tReplicate_16";

											int tos_count_tReplicate_16 = 0;

											/**
											 * [tReplicate_16 begin ] stop
											 */

											/**
											 * [tFileInputJSON_9 begin ] start
											 */

											ok_Hash.put("tFileInputJSON_9",
													false);
											start_Hash.put("tFileInputJSON_9",
													System.currentTimeMillis());

											currentComponent = "tFileInputJSON_9";

											int tos_count_tFileInputJSON_9 = 0;

											class JSONUtil_tFileInputJSON_9 {
												public int getData(
														String query,
														javax.script.Invocable invocableEngine,
														java.util.List<org.json.simple.JSONArray> jsonResultList,
														int recordMaxSize) {
													try {
														// only 2 types:
														// String/Boolean
														String resultObj = invocableEngine
																.invokeFunction(
																		"jsonPath",
																		query)
																.toString();
														if (!"false"
																.equals(resultObj)) {
															org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
																	.parse(resultObj);
															jsonResultList
																	.add(resultArray);
															if (recordMaxSize != -1
																	&& recordMaxSize != resultArray
																			.size()) {
																// just give an
																// error, don't
																// stop

																System.err
																		.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
															}
															recordMaxSize = Math
																	.max(recordMaxSize,
																			resultArray
																					.size());
														} else {

															System.err
																	.println("Can't find any data with JSONPath "
																			+ query);
															// add null to take
															// a place in
															// List(buffer)
															jsonResultList
																	.add(null);
														}
													} catch (java.lang.Exception e) {

														e.printStackTrace();
													}
													return recordMaxSize;
												}

												void setRowValue_0(
														row32Struct row32,
														java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_9,
														int nbResultArray_tFileInputJSON_9)
														throws java.io.UnsupportedEncodingException {
													if (JSONResultList_tFileInputJSON_9
															.get(0) != null
															&& nbResultArray_tFileInputJSON_9 < JSONResultList_tFileInputJSON_9
																	.get(0)
																	.size()
															&& JSONResultList_tFileInputJSON_9
																	.get(0)
																	.get(nbResultArray_tFileInputJSON_9) != null) {
														row32.id = JSONResultList_tFileInputJSON_9
																.get(0)
																.get(nbResultArray_tFileInputJSON_9)
																.toString();
													} else {

														row32.id = null;

													}
													if (JSONResultList_tFileInputJSON_9
															.get(1) != null
															&& nbResultArray_tFileInputJSON_9 < JSONResultList_tFileInputJSON_9
																	.get(1)
																	.size()
															&& JSONResultList_tFileInputJSON_9
																	.get(1)
																	.get(nbResultArray_tFileInputJSON_9) != null) {
														row32.sign = JSONResultList_tFileInputJSON_9
																.get(1)
																.get(nbResultArray_tFileInputJSON_9)
																.toString();
													} else {

														row32.sign = null;

													}
													if (JSONResultList_tFileInputJSON_9
															.get(2) != null
															&& nbResultArray_tFileInputJSON_9 < JSONResultList_tFileInputJSON_9
																	.get(2)
																	.size()
															&& JSONResultList_tFileInputJSON_9
																	.get(2)
																	.get(nbResultArray_tFileInputJSON_9) != null) {
														row32.item = JSONResultList_tFileInputJSON_9
																.get(2)
																.get(nbResultArray_tFileInputJSON_9)
																.toString();
													} else {

														row32.item = null;

													}
												}
											}
											int nb_line_tFileInputJSON_9 = 0;
											java.lang.Object jsonText_tFileInputJSON_9 = null;
											JSONUtil_tFileInputJSON_9 jsonUtil_tFileInputJSON_9 = new JSONUtil_tFileInputJSON_9();
											java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_9 = new java.util.ArrayList<org.json.simple.JSONArray>();
											int recordMaxSize_tFileInputJSON_9 = -1;

											// init js json engine
											javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_9 = new javax.script.ScriptEngineManager();
											javax.script.ScriptEngine jsEngine_tFileInputJSON_9 = scriptEngineMgr_tFileInputJSON_9
													.getEngineByName("JavaScript");
											if (jsEngine_tFileInputJSON_9 == null) {

												System.err
														.println("No script engine found for JavaScript");
											} else {
												java.net.URL jsonjsUrl_tFileInputJSON_9 = com.jsonpath.test.ReadJar.class
														.getResource("json.js");
												if (jsonjsUrl_tFileInputJSON_9 != null) {
													jsEngine_tFileInputJSON_9
															.eval(new java.io.BufferedReader(
																	new java.io.InputStreamReader(
																			jsonjsUrl_tFileInputJSON_9
																					.openStream())));
												}

												java.net.URL jsonpathjsUrl_tFileInputJSON_9 = com.jsonpath.test.ReadJar.class
														.getResource("jsonpath.js");
												if (jsonpathjsUrl_tFileInputJSON_9 != null) {
													jsEngine_tFileInputJSON_9
															.eval(new java.io.BufferedReader(
																	new java.io.InputStreamReader(
																			jsonpathjsUrl_tFileInputJSON_9
																					.openStream())));
												}

												java.io.InputStreamReader fr_tFileInputJSON_9 = null;
												try {

													java.net.URL url_tFileInputJSON_9 = new java.net.URL(
															context.MDRBaseURL
																	+ "/"
																	+ context.MDRInstance
																	+ "/mdr/entities/"
																	+ ((String) globalMap
																			.get("row38.meaning"))
																	+ "/designations");
													java.net.URLConnection urlConn_tFileInputJSON_9 = url_tFileInputJSON_9
															.openConnection();
													fr_tFileInputJSON_9 = new java.io.InputStreamReader(
															urlConn_tFileInputJSON_9
																	.getInputStream(),
															"ISO-8859-15");

													jsonText_tFileInputJSON_9 = org.json.simple.JSONValue
															.parse(fr_tFileInputJSON_9);
													if (jsonText_tFileInputJSON_9 == null) {
														throw new RuntimeException(
																"fail to parse the json file : "
																		+ context.MDRBaseURL
																		+ "/"
																		+ context.MDRInstance
																		+ "/mdr/entities/"
																		+ ((String) globalMap
																				.get("row38.meaning"))
																		+ "/designations");
													}
												} catch (java.lang.Exception e_tFileInputJSON_9) {

													System.err
															.println(e_tFileInputJSON_9
																	.getMessage());

												} finally {
													if (fr_tFileInputJSON_9 != null) {
														fr_tFileInputJSON_9
																.close();
													}
												}

												if (jsonText_tFileInputJSON_9 != null) {
													jsEngine_tFileInputJSON_9
															.eval("var obj="
																	+ jsonText_tFileInputJSON_9
																			.toString());

													javax.script.Invocable invocableEngine_tFileInputJSON_9 = (javax.script.Invocable) jsEngine_tFileInputJSON_9;

													recordMaxSize_tFileInputJSON_9 = jsonUtil_tFileInputJSON_9
															.getData(
																	"$.[*].id",
																	invocableEngine_tFileInputJSON_9,
																	JSONResultList_tFileInputJSON_9,
																	recordMaxSize_tFileInputJSON_9);

													recordMaxSize_tFileInputJSON_9 = jsonUtil_tFileInputJSON_9
															.getData(
																	"$.[*].sign",
																	invocableEngine_tFileInputJSON_9,
																	JSONResultList_tFileInputJSON_9,
																	recordMaxSize_tFileInputJSON_9);

													recordMaxSize_tFileInputJSON_9 = jsonUtil_tFileInputJSON_9
															.getData(
																	"$.[*].item",
																	invocableEngine_tFileInputJSON_9,
																	JSONResultList_tFileInputJSON_9,
																	recordMaxSize_tFileInputJSON_9);

												}
											}
											for (int nbResultArray_tFileInputJSON_9 = 0; nbResultArray_tFileInputJSON_9 < recordMaxSize_tFileInputJSON_9; nbResultArray_tFileInputJSON_9++) {

												nb_line_tFileInputJSON_9++;
												row32 = null;
												boolean whetherReject_tFileInputJSON_9 = false;
												row32 = new row32Struct();
												try {
													jsonUtil_tFileInputJSON_9
															.setRowValue_0(
																	row32,
																	JSONResultList_tFileInputJSON_9,
																	nbResultArray_tFileInputJSON_9);
												} catch (java.lang.Exception e) {
													whetherReject_tFileInputJSON_9 = true;
													System.err.println(e
															.getMessage());
													row32 = null;
												}

												/**
												 * [tFileInputJSON_9 begin ]
												 * stop
												 */

												/**
												 * [tFileInputJSON_9 main ]
												 * start
												 */

												currentComponent = "tFileInputJSON_9";

												tos_count_tFileInputJSON_9++;

												/**
												 * [tFileInputJSON_9 main ] stop
												 */
												// Start of branch "row32"
												if (row32 != null) {

													/**
													 * [tReplicate_16 main ]
													 * start
													 */

													currentComponent = "tReplicate_16";

													row10 = new row10Struct();

													row10.id = row32.id;
													row10.sign = row32.sign;
													row10.item = row32.item;
													row34 = new row34Struct();

													row34.id = row32.id;
													row34.sign = row32.sign;
													row34.item = row32.item;

													tos_count_tReplicate_16++;

													/**
													 * [tReplicate_16 main ]
													 * stop
													 */

													/**
													 * [tLogRow_14 main ] start
													 */

													currentComponent = "tLogRow_14";

													// /////////////////////

													strBuffer_tLogRow_14 = new StringBuilder();
													strBuffer_tLogRow_14
															.append("[tLogRow_14] ");

													if (row10.id != null) { //

														strBuffer_tLogRow_14
																.append(String
																		.valueOf(row10.id));

													} //

													strBuffer_tLogRow_14
															.append("|");

													if (row10.sign != null) { //

														strBuffer_tLogRow_14
																.append(String
																		.valueOf(row10.sign));

													} //

													strBuffer_tLogRow_14
															.append("|");

													if (row10.item != null) { //

														strBuffer_tLogRow_14
																.append(String
																		.valueOf(row10.item));

													} //

													if (globalMap
															.get("tLogRow_CONSOLE") != null) {
														consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap
																.get("tLogRow_CONSOLE");
													} else {
														consoleOut_tLogRow_14 = new java.io.PrintStream(
																new java.io.BufferedOutputStream(
																		System.out));
														globalMap
																.put("tLogRow_CONSOLE",
																		consoleOut_tLogRow_14);
													}

													consoleOut_tLogRow_14
															.println(strBuffer_tLogRow_14
																	.toString());
													consoleOut_tLogRow_14
															.flush();
													nb_line_tLogRow_14++;
													// ////

													// ////

													// /////////////////////

													tos_count_tLogRow_14++;

													/**
													 * [tLogRow_14 main ] stop
													 */

													/**
													 * [tMap_9 main ] start
													 */

													currentComponent = "tMap_9";

													boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_9 = false;
													boolean mainRowRejected_tMap_9 = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_9__Struct Var = Var__tMap_9;
														Var.itemID = row34.item
																.substring(row34.item
																		.lastIndexOf("@") + 1);// ###############################
														// ###############################
														// # Output tables

														copyOfDataElementsToOnt = null;

														// # Output table :
														// 'copyOfDataElementsToOnt'
														copyOfDataElementsToOnt_tmp.HLEVEL = context.ont_01_HLEVEL + 1;
														copyOfDataElementsToOnt_tmp.Name = "["
																+ row39.permittedValue
																+ "] "
																+ row34.sign;
														copyOfDataElementsToOnt_tmp.Path = context.ont_03_Path
																+ "\\"
																+ Var.itemID
																+ "\\";
														copyOfDataElementsToOnt_tmp.DataType = null;
														copyOfDataElementsToOnt_tmp.Update_Date = TalendDate
																.parseDate(
																		"dd-MM-yyyy",
																		TalendDate
																				.getDate("dd-MM-yyyy"));
														copyOfDataElementsToOnt_tmp.Import_Date = TalendDate
																.parseDate(
																		"dd-MM-yyyy",
																		TalendDate
																				.getDate("dd-MM-yyyy"));
														copyOfDataElementsToOnt_tmp.Download_Date = TalendDate
																.parseDate(
																		"dd-MM-yyyy",
																		TalendDate
																				.getDate("dd-MM-yyyy"));
														copyOfDataElementsToOnt_tmp.PathID = null;
														copyOfDataElementsToOnt_tmp.visual = "LAE";
														copyOfDataElementsToOnt_tmp.codeList = "yes";
														copyOfDataElementsToOnt_tmp.source = "MDR Central";
														copyOfDataElementsToOnt_tmp.xml = null;
														copyOfDataElementsToOnt_tmp.m_applied_path = "@";
														copyOfDataElementsToOnt_tmp.itemID = Var.itemID;
														copyOfDataElementsToOnt_tmp.item = row34.item;
														copyOfDataElementsToOnt = copyOfDataElementsToOnt_tmp;
														// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_9 = false;

													tos_count_tMap_9++;

													/**
													 * [tMap_9 main ] stop
													 */
													// Start of branch
													// "copyOfDataElementsToOnt"
													if (copyOfDataElementsToOnt != null) {

														/**
														 * [tReplicate_17 main ]
														 * start
														 */

														currentComponent = "tReplicate_17";

														row16 = new row16Struct();

														row16.HLEVEL = copyOfDataElementsToOnt.HLEVEL;
														row16.Name = copyOfDataElementsToOnt.Name;
														row16.Path = copyOfDataElementsToOnt.Path;
														row16.DataType = copyOfDataElementsToOnt.DataType;
														row16.Update_Date = copyOfDataElementsToOnt.Update_Date;
														row16.Import_Date = copyOfDataElementsToOnt.Import_Date;
														row16.Download_Date = copyOfDataElementsToOnt.Download_Date;
														row16.PathID = copyOfDataElementsToOnt.PathID;
														row16.visual = copyOfDataElementsToOnt.visual;
														row16.codeList = copyOfDataElementsToOnt.codeList;
														row16.source = copyOfDataElementsToOnt.source;
														row16.xml = copyOfDataElementsToOnt.xml;
														row16.m_applied_path = copyOfDataElementsToOnt.m_applied_path;
														row16.itemID = copyOfDataElementsToOnt.itemID;
														row16.item = copyOfDataElementsToOnt.item;
														row36 = new row36Struct();

														row36.HLEVEL = copyOfDataElementsToOnt.HLEVEL;
														row36.Name = copyOfDataElementsToOnt.Name;
														row36.Path = copyOfDataElementsToOnt.Path;
														row36.DataType = copyOfDataElementsToOnt.DataType;
														row36.Update_Date = copyOfDataElementsToOnt.Update_Date;
														row36.Import_Date = copyOfDataElementsToOnt.Import_Date;
														row36.Download_Date = copyOfDataElementsToOnt.Download_Date;
														row36.PathID = copyOfDataElementsToOnt.PathID;
														row36.visual = copyOfDataElementsToOnt.visual;
														row36.codeList = copyOfDataElementsToOnt.codeList;
														row36.source = copyOfDataElementsToOnt.source;
														row36.xml = copyOfDataElementsToOnt.xml;
														row36.m_applied_path = copyOfDataElementsToOnt.m_applied_path;
														row36.itemID = copyOfDataElementsToOnt.itemID;
														row36.item = copyOfDataElementsToOnt.item;
														row35 = new row35Struct();

														row35.HLEVEL = copyOfDataElementsToOnt.HLEVEL;
														row35.Name = copyOfDataElementsToOnt.Name;
														row35.Path = copyOfDataElementsToOnt.Path;
														row35.DataType = copyOfDataElementsToOnt.DataType;
														row35.Update_Date = copyOfDataElementsToOnt.Update_Date;
														row35.Import_Date = copyOfDataElementsToOnt.Import_Date;
														row35.Download_Date = copyOfDataElementsToOnt.Download_Date;
														row35.PathID = copyOfDataElementsToOnt.PathID;
														row35.visual = copyOfDataElementsToOnt.visual;
														row35.codeList = copyOfDataElementsToOnt.codeList;
														row35.source = copyOfDataElementsToOnt.source;
														row35.xml = copyOfDataElementsToOnt.xml;
														row35.m_applied_path = copyOfDataElementsToOnt.m_applied_path;
														row35.itemID = copyOfDataElementsToOnt.itemID;
														row35.item = copyOfDataElementsToOnt.item;

														tos_count_tReplicate_17++;

														/**
														 * [tReplicate_17 main ]
														 * stop
														 */

														/**
														 * [tLogRow_15 main ]
														 * start
														 */

														currentComponent = "tLogRow_15";

														// /////////////////////

														strBuffer_tLogRow_15 = new StringBuilder();
														strBuffer_tLogRow_15
																.append("[tLogRow_15] ");

														if (row16.HLEVEL != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.HLEVEL));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.Name != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.Name));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.Path != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.Path));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.DataType != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.DataType));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.Update_Date != null) { //

															strBuffer_tLogRow_15
																	.append(FormatterUtils
																			.format_Date(
																					row16.Update_Date,
																					"dd-MM-yyyy"));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.Import_Date != null) { //

															strBuffer_tLogRow_15
																	.append(FormatterUtils
																			.format_Date(
																					row16.Import_Date,
																					"dd-MM-yyyy"));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.Download_Date != null) { //

															strBuffer_tLogRow_15
																	.append(FormatterUtils
																			.format_Date(
																					row16.Download_Date,
																					"dd-MM-yyyy"));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.PathID != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.PathID));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.visual != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.visual));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.codeList != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.codeList));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.source != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.source));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.xml != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.xml));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.m_applied_path != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.m_applied_path));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.itemID != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.itemID));

														} //

														strBuffer_tLogRow_15
																.append("|");

														if (row16.item != null) { //

															strBuffer_tLogRow_15
																	.append(String
																			.valueOf(row16.item));

														} //

														if (globalMap
																.get("tLogRow_CONSOLE") != null) {
															consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap
																	.get("tLogRow_CONSOLE");
														} else {
															consoleOut_tLogRow_15 = new java.io.PrintStream(
																	new java.io.BufferedOutputStream(
																			System.out));
															globalMap
																	.put("tLogRow_CONSOLE",
																			consoleOut_tLogRow_15);
														}

														consoleOut_tLogRow_15
																.println(strBuffer_tLogRow_15
																		.toString());
														consoleOut_tLogRow_15
																.flush();
														nb_line_tLogRow_15++;
														// ////

														// ////

														// /////////////////////

														tos_count_tLogRow_15++;

														/**
														 * [tLogRow_15 main ]
														 * stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_14
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_14";

														String[] rowtFileOutputDelimited_14 = new String[15];

														rowtFileOutputDelimited_14[0] = row36.HLEVEL == null ? ""
																: String.valueOf(row36.HLEVEL);

														rowtFileOutputDelimited_14[1] = row36.Name == null ? ""
																: row36.Name;

														rowtFileOutputDelimited_14[2] = row36.Path == null ? ""
																: row36.Path;

														rowtFileOutputDelimited_14[3] = row36.DataType == null ? ""
																: row36.DataType;

														rowtFileOutputDelimited_14[4] = row36.Update_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row36.Update_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_14[5] = row36.Import_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row36.Import_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_14[6] = row36.Download_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row36.Download_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_14[7] = row36.PathID == null ? ""
																: row36.PathID;

														rowtFileOutputDelimited_14[8] = row36.visual == null ? ""
																: row36.visual;

														rowtFileOutputDelimited_14[9] = row36.codeList == null ? ""
																: row36.codeList;

														rowtFileOutputDelimited_14[10] = row36.source == null ? ""
																: row36.source;

														rowtFileOutputDelimited_14[11] = row36.xml == null ? ""
																: row36.xml;

														rowtFileOutputDelimited_14[12] = row36.m_applied_path == null ? ""
																: row36.m_applied_path;

														rowtFileOutputDelimited_14[13] = row36.itemID == null ? ""
																: row36.itemID;

														rowtFileOutputDelimited_14[14] = row36.item == null ? ""
																: row36.item;

														nb_line_tFileOutputDelimited_14++;
														resourceMap
																.put("nb_line_tFileOutputDelimited_14",
																		nb_line_tFileOutputDelimited_14);
														CsvWritertFileOutputDelimited_14
																.writeNext(rowtFileOutputDelimited_14);

														outtFileOutputDelimited_14
																.write(strWritertFileOutputDelimited_14
																		.getBuffer()
																		.toString());
														strWritertFileOutputDelimited_14
																.getBuffer()
																.delete(0,
																		strWritertFileOutputDelimited_14
																				.getBuffer()
																				.length());

														if (nb_line_tFileOutputDelimited_14 % 1 == 0) {

															outtFileOutputDelimited_14
																	.flush();

														}

														tos_count_tFileOutputDelimited_14++;

														/**
														 * [
														 * tFileOutputDelimited_14
														 * main ] stop
														 */

														/**
														 * [
														 * tFileOutputDelimited_13
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_13";

														String[] rowtFileOutputDelimited_13 = new String[15];

														rowtFileOutputDelimited_13[0] = row35.HLEVEL == null ? ""
																: String.valueOf(row35.HLEVEL);

														rowtFileOutputDelimited_13[1] = row35.Name == null ? ""
																: row35.Name;

														rowtFileOutputDelimited_13[2] = row35.Path == null ? ""
																: row35.Path;

														rowtFileOutputDelimited_13[3] = row35.DataType == null ? ""
																: row35.DataType;

														rowtFileOutputDelimited_13[4] = row35.Update_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row35.Update_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_13[5] = row35.Import_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row35.Import_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_13[6] = row35.Download_Date == null ? ""
																: FormatterUtils
																		.format_Date(
																				row35.Download_Date,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_13[7] = row35.PathID == null ? ""
																: row35.PathID;

														rowtFileOutputDelimited_13[8] = row35.visual == null ? ""
																: row35.visual;

														rowtFileOutputDelimited_13[9] = row35.codeList == null ? ""
																: row35.codeList;

														rowtFileOutputDelimited_13[10] = row35.source == null ? ""
																: row35.source;

														rowtFileOutputDelimited_13[11] = row35.xml == null ? ""
																: row35.xml;

														rowtFileOutputDelimited_13[12] = row35.m_applied_path == null ? ""
																: row35.m_applied_path;

														rowtFileOutputDelimited_13[13] = row35.itemID == null ? ""
																: row35.itemID;

														rowtFileOutputDelimited_13[14] = row35.item == null ? ""
																: row35.item;

														nb_line_tFileOutputDelimited_13++;
														resourceMap
																.put("nb_line_tFileOutputDelimited_13",
																		nb_line_tFileOutputDelimited_13);
														CsvWritertFileOutputDelimited_13
																.writeNext(rowtFileOutputDelimited_13);

														outtFileOutputDelimited_13
																.write(strWritertFileOutputDelimited_13
																		.getBuffer()
																		.toString());
														strWritertFileOutputDelimited_13
																.getBuffer()
																.delete(0,
																		strWritertFileOutputDelimited_13
																				.getBuffer()
																				.length());

														if (nb_line_tFileOutputDelimited_13 % 1 == 0) {

															outtFileOutputDelimited_13
																	.flush();

														}

														tos_count_tFileOutputDelimited_13++;

														/**
														 * [
														 * tFileOutputDelimited_13
														 * main ] stop
														 */

													} // End of branch
														// "copyOfDataElementsToOnt"

												} // End of branch "row32"

												/**
												 * [tFileInputJSON_9 end ] start
												 */

												currentComponent = "tFileInputJSON_9";

											}
											globalMap.put(
													"tFileInputJSON_9_NB_LINE",
													nb_line_tFileInputJSON_9);

											ok_Hash.put("tFileInputJSON_9",
													true);
											end_Hash.put("tFileInputJSON_9",
													System.currentTimeMillis());

											/**
											 * [tFileInputJSON_9 end ] stop
											 */

											/**
											 * [tReplicate_16 end ] start
											 */

											currentComponent = "tReplicate_16";

											ok_Hash.put("tReplicate_16", true);
											end_Hash.put("tReplicate_16",
													System.currentTimeMillis());

											/**
											 * [tReplicate_16 end ] stop
											 */

											/**
											 * [tLogRow_14 end ] start
											 */

											currentComponent = "tLogRow_14";

											// ////
											// ////
											globalMap.put("tLogRow_14_NB_LINE",
													nb_line_tLogRow_14);

											// /////////////////////

											ok_Hash.put("tLogRow_14", true);
											end_Hash.put("tLogRow_14",
													System.currentTimeMillis());

											/**
											 * [tLogRow_14 end ] stop
											 */

											/**
											 * [tMap_9 end ] start
											 */

											currentComponent = "tMap_9";

											// ###############################
											// # Lookup hashes releasing
											// ###############################

											ok_Hash.put("tMap_9", true);
											end_Hash.put("tMap_9",
													System.currentTimeMillis());

											/**
											 * [tMap_9 end ] stop
											 */

											/**
											 * [tReplicate_17 end ] start
											 */

											currentComponent = "tReplicate_17";

											ok_Hash.put("tReplicate_17", true);
											end_Hash.put("tReplicate_17",
													System.currentTimeMillis());

											/**
											 * [tReplicate_17 end ] stop
											 */

											/**
											 * [tLogRow_15 end ] start
											 */

											currentComponent = "tLogRow_15";

											// ////
											// ////
											globalMap.put("tLogRow_15_NB_LINE",
													nb_line_tLogRow_15);

											// /////////////////////

											ok_Hash.put("tLogRow_15", true);
											end_Hash.put("tLogRow_15",
													System.currentTimeMillis());

											/**
											 * [tLogRow_15 end ] stop
											 */

											/**
											 * [tFileOutputDelimited_14 end ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_14";

											if (CsvWritertFileOutputDelimited_14 != null) {
												CsvWritertFileOutputDelimited_14
														.close();
											}

											if (outtFileOutputDelimited_14 != null) {
												outtFileOutputDelimited_14
														.flush();
												outtFileOutputDelimited_14
														.close();
											}

											globalMap
													.put("tFileOutputDelimited_14_NB_LINE",
															nb_line_tFileOutputDelimited_14);

											if (isFileGenerated_tFileOutputDelimited_14
													&& nb_line_tFileOutputDelimited_14 == 0) {

												filetFileOutputDelimited_14
														.delete();

											}

											resourceMap
													.put("finish_tFileOutputDelimited_14",
															true);

											ok_Hash.put(
													"tFileOutputDelimited_14",
													true);
											end_Hash.put(
													"tFileOutputDelimited_14",
													System.currentTimeMillis());

											/**
											 * [tFileOutputDelimited_14 end ]
											 * stop
											 */

											/**
											 * [tFileOutputDelimited_13 end ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_13";

											if (CsvWritertFileOutputDelimited_13 != null) {
												CsvWritertFileOutputDelimited_13
														.close();
											}

											if (outtFileOutputDelimited_13 != null) {
												outtFileOutputDelimited_13
														.flush();
												outtFileOutputDelimited_13
														.close();
											}

											globalMap
													.put("tFileOutputDelimited_13_NB_LINE",
															nb_line_tFileOutputDelimited_13);

											if (isFileGenerated_tFileOutputDelimited_13
													&& nb_line_tFileOutputDelimited_13 == 0) {

												filetFileOutputDelimited_13
														.delete();

											}

											resourceMap
													.put("finish_tFileOutputDelimited_13",
															true);

											ok_Hash.put(
													"tFileOutputDelimited_13",
													true);
											end_Hash.put(
													"tFileOutputDelimited_13",
													System.currentTimeMillis());

											/**
											 * [tFileOutputDelimited_13 end ]
											 * stop
											 */

										} // End of branch "row39"

										/**
										 * [tFileInputJSON_8 end ] start
										 */

										currentComponent = "tFileInputJSON_8";

									}
									globalMap.put("tFileInputJSON_8_NB_LINE",
											nb_line_tFileInputJSON_8);

									ok_Hash.put("tFileInputJSON_8", true);
									end_Hash.put("tFileInputJSON_8",
											System.currentTimeMillis());

									/**
									 * [tFileInputJSON_8 end ] stop
									 */

									/**
									 * [tReplicate_14 end ] start
									 */

									currentComponent = "tReplicate_14";

									ok_Hash.put("tReplicate_14", true);
									end_Hash.put("tReplicate_14",
											System.currentTimeMillis());

									/**
									 * [tReplicate_14 end ] stop
									 */

									/**
									 * [tLogRow_13 end ] start
									 */

									currentComponent = "tLogRow_13";

									// ////
									// ////
									globalMap.put("tLogRow_13_NB_LINE",
											nb_line_tLogRow_13);

									// /////////////////////

									ok_Hash.put("tLogRow_13", true);
									end_Hash.put("tLogRow_13",
											System.currentTimeMillis());

									/**
									 * [tLogRow_13 end ] stop
									 */

									/**
									 * [tFlowToIterate_7 end ] start
									 */

									currentComponent = "tFlowToIterate_7";

									globalMap.put("tFlowToIterate_7_NB_LINE",
											nb_line_tFlowToIterate_7);

									ok_Hash.put("tFlowToIterate_7", true);
									end_Hash.put("tFlowToIterate_7",
											System.currentTimeMillis());

									/**
									 * [tFlowToIterate_7 end ] stop
									 */

									/**
									 * [tFilterRow_7 main ] start
									 */

									currentComponent = "tFilterRow_7";

									row11 = null;
									row9 = null;
									Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7(
											"&&");
									ope_tFilterRow_7
											.matches(
													(// code sample : use row30
														// to define the
														// condition.
													// row30.columnName1.equals("foo")
													// ||!(row30.columnName2.equals("bar"))
													// replace the following
													// expression by your own
													// filter condition

													// ((String)globalMap.get("tFileInputJSON_10_ERROR_MESSAGE"))
													// != null

													((Integer) globalMap
															.get("tFileInputJSON_8_NB_LINE")) == 0

													// true

													// row30.unitOfMeasure.startsWith("urn:mdr:UnitOfMeasure@")
													),
													"advanced condition failed");

									if (ope_tFilterRow_7.getMatchFlag()) {
										if (row9 == null) {
											row9 = new row9Struct();
										}
										row9.id = row30.id;
										row9.maximumCharacterQuantity = row30.maximumCharacterQuantity;
										row9.dataType = row30.dataType;
										row9.format = row30.format;
										row9.meaning = row30.meaning;
										row9.unitOfMeasure = row30.unitOfMeasure;
										nb_line_ok_tFilterRow_7++;
									} else {
										if (row11 == null) {
											row11 = new row11Struct();
										}
										row11.id = row30.id;
										row11.maximumCharacterQuantity = row30.maximumCharacterQuantity;
										row11.dataType = row30.dataType;
										row11.format = row30.format;
										row11.meaning = row30.meaning;
										row11.unitOfMeasure = row30.unitOfMeasure;
										row11.errorMessage = ope_tFilterRow_7
												.getErrorMsg();
										nb_line_reject_tFilterRow_7++;
									}

									nb_line_tFilterRow_7++;

									tos_count_tFilterRow_7++;

									/**
									 * [tFilterRow_7 main ] stop
									 */
									// Start of branch "row9"
									if (row9 != null) {
										row31 = null;
										row4 = null;
										row5 = null;

										/**
										 * [tFilterRow_4 main ] start
										 */

										currentComponent = "tFilterRow_4";

										row31 = null;
										row41 = null;
										Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4(
												"&&");
										ope_tFilterRow_4
												.matches(
														(// code sample : use
															// row9 to define
															// the condition.
														// row9.columnName1.equals("foo")
														// ||!(row9.columnName2.equals("bar"))
														// replace the following
														// expression by your
														// own filter condition
														row9.unitOfMeasure != null && row9.dataType == null

														// row9.unitOfMeasure.startsWith("urn:mdr:UnitOfMeasure@")
														),
														"advanced condition failed");

										if (ope_tFilterRow_4.getMatchFlag()) {
											if (row41 == null) {
												row41 = new row41Struct();
											}
											row41.id = row9.id;
											row41.maximumCharacterQuantity = row9.maximumCharacterQuantity;
											row41.dataType = row9.dataType;
											row41.format = row9.format;
											row41.meaning = row9.meaning;
											row41.unitOfMeasure = row9.unitOfMeasure;
											nb_line_ok_tFilterRow_4++;
										} else {
											if (row31 == null) {
												row31 = new row31Struct();
											}
											row31.id = row9.id;
											row31.maximumCharacterQuantity = row9.maximumCharacterQuantity;
											row31.dataType = row9.dataType;
											row31.format = row9.format;
											row31.meaning = row9.meaning;
											row31.unitOfMeasure = row9.unitOfMeasure;
											row31.errorMessage = ope_tFilterRow_4
													.getErrorMsg();
											nb_line_reject_tFilterRow_4++;
										}

										nb_line_tFilterRow_4++;

										tos_count_tFilterRow_4++;

										/**
										 * [tFilterRow_4 main ] stop
										 */
										// Start of branch "row41"
										if (row41 != null) {

											/**
											 * [tRunJob_2 main ] start
											 */

											currentComponent = "tRunJob_2";

											java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

											paraList_tRunJob_2
													.add("--father_pid=" + pid);

											paraList_tRunJob_2
													.add("--root_pid="
															+ rootPid);

											paraList_tRunJob_2
													.add("--father_node=tRunJob_2");

											paraList_tRunJob_2
													.add("--context=Default");

											// for feature:10589

											paraList_tRunJob_2
													.add("--stat_port="
															+ portStats);

											if (resuming_logs_dir_path != null) {
												paraList_tRunJob_2
														.add("--resuming_logs_dir_path="
																+ resuming_logs_dir_path);
											}
											String childResumePath_tRunJob_2 = ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path);
											String tRunJobName_tRunJob_2 = ResumeUtil
													.getRighttRunJob(resuming_checkpoint_path);
											if ("tRunJob_2"
													.equals(tRunJobName_tRunJob_2)
													&& childResumePath_tRunJob_2 != null) {
												paraList_tRunJob_2
														.add("--resuming_checkpoint_path="
																+ ResumeUtil
																		.getChildJobCheckPointPath(resuming_checkpoint_path));
											}
											paraList_tRunJob_2
													.add("--parent_part_launcher=JOB:"
															+ jobName
															+ "/NODE:tRunJob_2");

											java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

											context.synchronizeContext();
											java.util.Enumeration<?> propertyNames_tRunJob_2 = context
													.propertyNames();
											while (propertyNames_tRunJob_2
													.hasMoreElements()) {
												String key_tRunJob_2 = (String) propertyNames_tRunJob_2
														.nextElement();
												Object value_tRunJob_2 = (Object) context
														.get(key_tRunJob_2);
												paraList_tRunJob_2
														.add("--context_param "
																+ key_tRunJob_2
																+ "="
																+ value_tRunJob_2);
											}

											parentContextMap_tRunJob_2.put(
													"level", context.level);

											parentContextMap_tRunJob_2.put(
													"MDRID", context.MDRID);

											parentContextMap_tRunJob_2.put(
													"path", context.path);

											parentContextMap_tRunJob_2.put(
													"queryWorkFile",
													context.queryWorkFile);

											parentContextMap_tRunJob_2.put(
													"queryCurrentID",
													context.queryCurrentID);

											parentContextMap_tRunJob_2.put(
													"ont_01_HLEVEL",
													context.ont_01_HLEVEL);

											parentContextMap_tRunJob_2.put(
													"ont_02_Name",
													context.ont_02_Name);

											parentContextMap_tRunJob_2.put(
													"ont_03_Path",
													context.ont_03_Path);

											parentContextMap_tRunJob_2.put(
													"ont_04_DataType",
													context.ont_04_DataType);

											parentContextMap_tRunJob_2.put(
													"ont_05_Update_Date",
													context.ont_05_Update_Date);

											parentContextMap_tRunJob_2.put(
													"ont_06_Import_Date",
													context.ont_06_Import_Date);

											parentContextMap_tRunJob_2
													.put("ont_07_Download_Date",
															context.ont_07_Download_Date);

											parentContextMap_tRunJob_2.put(
													"ont_08_PathID",
													context.ont_08_PathID);

											parentContextMap_tRunJob_2.put(
													"ont_09_visual",
													context.ont_09_visual);

											parentContextMap_tRunJob_2.put(
													"ont_10_codeList",
													context.ont_10_codeList);

											parentContextMap_tRunJob_2.put(
													"ont_11_source",
													context.ont_11_source);

											parentContextMap_tRunJob_2.put(
													"ont_12_xml",
													context.ont_12_xml);

											parentContextMap_tRunJob_2
													.put("ont_13_m_applied_path",
															context.ont_13_m_applied_path);

											parentContextMap_tRunJob_2.put(
													"ont_14_itemID",
													context.ont_14_itemID);

											parentContextMap_tRunJob_2.put(
													"ont_15_item",
													context.ont_15_item);

											parentContextMap_tRunJob_2
													.put("MDRStartDesignation",
															context.MDRStartDesignation);

											parentContextMap_tRunJob_2.put(
													"MDRBaseURLPort",
													context.MDRBaseURLPort);

											parentContextMap_tRunJob_2.put(
													"MDRInstance",
													context.MDRInstance);

											parentContextMap_tRunJob_2.put(
													"MDRPassword",
													context.MDRPassword);

											parentContextMap_tRunJob_2.put(
													"fileOnt", context.fileOnt);

											parentContextMap_tRunJob_2.put(
													"MDRUsername",
													context.MDRUsername);

											parentContextMap_tRunJob_2.put(
													"folderTemp",
													context.folderTemp);

											parentContextMap_tRunJob_2.put(
													"MDRBaseURL",
													context.MDRBaseURL);

											parentContextMap_tRunJob_2.put(
													"folderMain",
													context.folderMain);

											Object obj_tRunJob_2 = null;

											obj_tRunJob_2 = ((String) globalMap
													.get("row53.domain"))
													.substring(((String) globalMap
															.get("row53.domain"))
															.lastIndexOf("@") + 1);
											paraList_tRunJob_2
													.add("--context_param DE_domain_ID="
															+ RuntimeUtils
																	.tRunJobConvertContext(obj_tRunJob_2));
											parentContextMap_tRunJob_2.put(
													"DE_domain_ID",
													obj_tRunJob_2);

											obj_tRunJob_2 = row41.unitOfMeasure;
											paraList_tRunJob_2
													.add("--context_param DE_unitOfMeasure="
															+ RuntimeUtils
																	.tRunJobConvertContext(obj_tRunJob_2));
											parentContextMap_tRunJob_2.put(
													"DE_unitOfMeasure",
													obj_tRunJob_2);

											i2b2_postgres2.mdr_query_dataelements_unitofmeasure_0_1.MDR_Query_DataElements_unitOfMeasure childJob_tRunJob_2 = new i2b2_postgres2.mdr_query_dataelements_unitofmeasure_0_1.MDR_Query_DataElements_unitOfMeasure();
											// pass DataSources
											java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
													.get(KEY_DB_DATASOURCES);
											if (null != talendDataSources_tRunJob_2) {
												java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
												for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
														.entrySet()) {
													dataSources_tRunJob_2
															.put(talendDataSourceEntry_tRunJob_2
																	.getKey(),
																	talendDataSourceEntry_tRunJob_2
																			.getValue()
																			.getRawDataSource());
												}
												childJob_tRunJob_2
														.setDataSources(dataSources_tRunJob_2);
											}

											childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

											String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
													.runJob((String[]) paraList_tRunJob_2
															.toArray(new String[paraList_tRunJob_2
																	.size()]));

											errorCode = childJob_tRunJob_2
													.getErrorCode();

											if (childJob_tRunJob_2
													.getErrorCode() == null) {
												globalMap
														.put("tRunJob_2_CHILD_RETURN_CODE",
																childJob_tRunJob_2
																		.getStatus() != null
																		&& ("failure")
																				.equals(childJob_tRunJob_2
																						.getStatus()) ? 1
																		: 0);
											} else {
												globalMap
														.put("tRunJob_2_CHILD_RETURN_CODE",
																childJob_tRunJob_2
																		.getErrorCode());
											}
											if (childJob_tRunJob_2
													.getExceptionStackTrace() != null) {
												globalMap
														.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
																childJob_tRunJob_2
																		.getExceptionStackTrace());
											}

											if (childJob_tRunJob_2
													.getErrorCode() != null
													|| ("failure")
															.equals(childJob_tRunJob_2
																	.getStatus())) {
												throw new RuntimeException(
														"Child job running failed");
											}

											tos_count_tRunJob_2++;

											/**
											 * [tRunJob_2 main ] stop
											 */

										} // End of branch "row41"

										// Start of branch "row31"
										if (row31 != null) {
											row4 = null;
											row5 = null;

											/**
											 * [tFilterRow_5 main ] start
											 */

											currentComponent = "tFilterRow_5";

											row4 = null;
											row6 = null;
											Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5(
													"&&");
											ope_tFilterRow_5
													.matches(
															(// code sample :
																// use row31 to
																// define the
																// condition.
															// row31.columnName1.equals("foo")
															// ||!(row31.columnName2.equals("bar"))
															// replace the
															// following
															// expression by
															// your own filter
															// condition
															row31.unitOfMeasure == null && row31.dataType != null

															// row31.unitOfMeasure.startsWith("urn:mdr:UnitOfMeasure@")
															),
															"advanced condition failed");

											if (ope_tFilterRow_5.getMatchFlag()) {
												if (row6 == null) {
													row6 = new row6Struct();
												}
												row6.id = row31.id;
												row6.maximumCharacterQuantity = row31.maximumCharacterQuantity;
												row6.dataType = row31.dataType;
												row6.format = row31.format;
												row6.meaning = row31.meaning;
												row6.unitOfMeasure = row31.unitOfMeasure;
												row6.errorMessage = row31.errorMessage;
												nb_line_ok_tFilterRow_5++;
											} else {
												if (row4 == null) {
													row4 = new row4Struct();
												}
												row4.id = row31.id;
												row4.maximumCharacterQuantity = row31.maximumCharacterQuantity;
												row4.dataType = row31.dataType;
												row4.format = row31.format;
												row4.meaning = row31.meaning;
												row4.unitOfMeasure = row31.unitOfMeasure;
												row4.errorMessage = ope_tFilterRow_5
														.getErrorMsg();
												nb_line_reject_tFilterRow_5++;
											}

											nb_line_tFilterRow_5++;

											tos_count_tFilterRow_5++;

											/**
											 * [tFilterRow_5 main ] stop
											 */
											// Start of branch "row6"
											if (row6 != null) {

												/**
												 * [tRunJob_1 main ] start
												 */

												currentComponent = "tRunJob_1";

												java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

												paraList_tRunJob_1
														.add("--father_pid="
																+ pid);

												paraList_tRunJob_1
														.add("--root_pid="
																+ rootPid);

												paraList_tRunJob_1
														.add("--father_node=tRunJob_1");

												paraList_tRunJob_1
														.add("--context=Default");

												// for feature:10589

												paraList_tRunJob_1
														.add("--stat_port="
																+ portStats);

												if (resuming_logs_dir_path != null) {
													paraList_tRunJob_1
															.add("--resuming_logs_dir_path="
																	+ resuming_logs_dir_path);
												}
												String childResumePath_tRunJob_1 = ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path);
												String tRunJobName_tRunJob_1 = ResumeUtil
														.getRighttRunJob(resuming_checkpoint_path);
												if ("tRunJob_1"
														.equals(tRunJobName_tRunJob_1)
														&& childResumePath_tRunJob_1 != null) {
													paraList_tRunJob_1
															.add("--resuming_checkpoint_path="
																	+ ResumeUtil
																			.getChildJobCheckPointPath(resuming_checkpoint_path));
												}
												paraList_tRunJob_1
														.add("--parent_part_launcher=JOB:"
																+ jobName
																+ "/NODE:tRunJob_1");

												java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

												context.synchronizeContext();
												java.util.Enumeration<?> propertyNames_tRunJob_1 = context
														.propertyNames();
												while (propertyNames_tRunJob_1
														.hasMoreElements()) {
													String key_tRunJob_1 = (String) propertyNames_tRunJob_1
															.nextElement();
													Object value_tRunJob_1 = (Object) context
															.get(key_tRunJob_1);
													paraList_tRunJob_1
															.add("--context_param "
																	+ key_tRunJob_1
																	+ "="
																	+ value_tRunJob_1);
												}

												parentContextMap_tRunJob_1.put(
														"level", context.level);

												parentContextMap_tRunJob_1.put(
														"MDRID", context.MDRID);

												parentContextMap_tRunJob_1.put(
														"path", context.path);

												parentContextMap_tRunJob_1.put(
														"queryWorkFile",
														context.queryWorkFile);

												parentContextMap_tRunJob_1.put(
														"queryCurrentID",
														context.queryCurrentID);

												parentContextMap_tRunJob_1.put(
														"ont_01_HLEVEL",
														context.ont_01_HLEVEL);

												parentContextMap_tRunJob_1.put(
														"ont_02_Name",
														context.ont_02_Name);

												parentContextMap_tRunJob_1.put(
														"ont_03_Path",
														context.ont_03_Path);

												parentContextMap_tRunJob_1
														.put("ont_04_DataType",
																context.ont_04_DataType);

												parentContextMap_tRunJob_1
														.put("ont_05_Update_Date",
																context.ont_05_Update_Date);

												parentContextMap_tRunJob_1
														.put("ont_06_Import_Date",
																context.ont_06_Import_Date);

												parentContextMap_tRunJob_1
														.put("ont_07_Download_Date",
																context.ont_07_Download_Date);

												parentContextMap_tRunJob_1.put(
														"ont_08_PathID",
														context.ont_08_PathID);

												parentContextMap_tRunJob_1.put(
														"ont_09_visual",
														context.ont_09_visual);

												parentContextMap_tRunJob_1
														.put("ont_10_codeList",
																context.ont_10_codeList);

												parentContextMap_tRunJob_1.put(
														"ont_11_source",
														context.ont_11_source);

												parentContextMap_tRunJob_1.put(
														"ont_12_xml",
														context.ont_12_xml);

												parentContextMap_tRunJob_1
														.put("ont_13_m_applied_path",
																context.ont_13_m_applied_path);

												parentContextMap_tRunJob_1.put(
														"ont_14_itemID",
														context.ont_14_itemID);

												parentContextMap_tRunJob_1.put(
														"ont_15_item",
														context.ont_15_item);

												parentContextMap_tRunJob_1
														.put("MDRStartDesignation",
																context.MDRStartDesignation);

												parentContextMap_tRunJob_1.put(
														"MDRBaseURLPort",
														context.MDRBaseURLPort);

												parentContextMap_tRunJob_1.put(
														"MDRInstance",
														context.MDRInstance);

												parentContextMap_tRunJob_1.put(
														"MDRPassword",
														context.MDRPassword);

												parentContextMap_tRunJob_1.put(
														"fileOnt",
														context.fileOnt);

												parentContextMap_tRunJob_1.put(
														"MDRUsername",
														context.MDRUsername);

												parentContextMap_tRunJob_1.put(
														"folderTemp",
														context.folderTemp);

												parentContextMap_tRunJob_1.put(
														"MDRBaseURL",
														context.MDRBaseURL);

												parentContextMap_tRunJob_1.put(
														"folderMain",
														context.folderMain);

												Object obj_tRunJob_1 = null;

												obj_tRunJob_1 = ((String) globalMap
														.get("row53.domain"))
														.substring(((String) globalMap
																.get("row53.domain"))
																.lastIndexOf("@") + 1);
												paraList_tRunJob_1
														.add("--context_param DE_domain_ID="
																+ RuntimeUtils
																		.tRunJobConvertContext(obj_tRunJob_1));
												parentContextMap_tRunJob_1.put(
														"DE_domain_ID",
														obj_tRunJob_1);

												obj_tRunJob_1 = row6.dataType;
												paraList_tRunJob_1
														.add("--context_param DE_dataType="
																+ RuntimeUtils
																		.tRunJobConvertContext(obj_tRunJob_1));
												parentContextMap_tRunJob_1.put(
														"DE_dataType",
														obj_tRunJob_1);

												i2b2_postgres2.mdr_query_dataelements_datatype_0_1.MDR_Query_DataElements_dataType childJob_tRunJob_1 = new i2b2_postgres2.mdr_query_dataelements_datatype_0_1.MDR_Query_DataElements_dataType();
												// pass DataSources
												java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
														.get(KEY_DB_DATASOURCES);
												if (null != talendDataSources_tRunJob_1) {
													java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
													for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
															.entrySet()) {
														dataSources_tRunJob_1
																.put(talendDataSourceEntry_tRunJob_1
																		.getKey(),
																		talendDataSourceEntry_tRunJob_1
																				.getValue()
																				.getRawDataSource());
													}
													childJob_tRunJob_1
															.setDataSources(dataSources_tRunJob_1);
												}

												childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

												String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
														.runJob((String[]) paraList_tRunJob_1
																.toArray(new String[paraList_tRunJob_1
																		.size()]));

												errorCode = childJob_tRunJob_1
														.getErrorCode();

												if (childJob_tRunJob_1
														.getErrorCode() == null) {
													globalMap
															.put("tRunJob_1_CHILD_RETURN_CODE",
																	childJob_tRunJob_1
																			.getStatus() != null
																			&& ("failure")
																					.equals(childJob_tRunJob_1
																							.getStatus()) ? 1
																			: 0);
												} else {
													globalMap
															.put("tRunJob_1_CHILD_RETURN_CODE",
																	childJob_tRunJob_1
																			.getErrorCode());
												}
												if (childJob_tRunJob_1
														.getExceptionStackTrace() != null) {
													globalMap
															.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
																	childJob_tRunJob_1
																			.getExceptionStackTrace());
												}

												if (childJob_tRunJob_1
														.getErrorCode() != null
														|| ("failure")
																.equals(childJob_tRunJob_1
																		.getStatus())) {
													throw new RuntimeException(
															"Child job running failed");
												}

												tos_count_tRunJob_1++;

												/**
												 * [tRunJob_1 main ] stop
												 */

											} // End of branch "row6"

											// Start of branch "row4"
											if (row4 != null) {
												row5 = null;

												/**
												 * [tFilterRow_6 main ] start
												 */

												currentComponent = "tFilterRow_6";

												row5 = null;
												row7 = null;
												Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6(
														"&&");
												ope_tFilterRow_6
														.matches(
																(// code sample
																	// : use
																	// row4 to
																	// define
																	// the
																	// condition.
																// row4.columnName1.equals("foo")
																// ||!(row4.columnName2.equals("bar"))
																// replace the
																// following
																// expression by
																// your own
																// filter
																// condition
																row4.unitOfMeasure != null && row4.dataType != null

																// row4.unitOfMeasure.startsWith("urn:mdr:UnitOfMeasure@")
																),
																"advanced condition failed");

												if (ope_tFilterRow_6
														.getMatchFlag()) {
													if (row7 == null) {
														row7 = new row7Struct();
													}
													row7.id = row4.id;
													row7.maximumCharacterQuantity = row4.maximumCharacterQuantity;
													row7.dataType = row4.dataType;
													row7.format = row4.format;
													row7.meaning = row4.meaning;
													row7.unitOfMeasure = row4.unitOfMeasure;
													row7.errorMessage = row4.errorMessage;
													nb_line_ok_tFilterRow_6++;
												} else {
													if (row5 == null) {
														row5 = new row5Struct();
													}
													row5.id = row4.id;
													row5.maximumCharacterQuantity = row4.maximumCharacterQuantity;
													row5.dataType = row4.dataType;
													row5.format = row4.format;
													row5.meaning = row4.meaning;
													row5.unitOfMeasure = row4.unitOfMeasure;
													row5.errorMessage = ope_tFilterRow_6
															.getErrorMsg();
													nb_line_reject_tFilterRow_6++;
												}

												nb_line_tFilterRow_6++;

												tos_count_tFilterRow_6++;

												/**
												 * [tFilterRow_6 main ] stop
												 */
												// Start of branch "row7"
												if (row7 != null) {

													/**
													 * [tRunJob_3 main ] start
													 */

													currentComponent = "tRunJob_3";

													java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

													paraList_tRunJob_3
															.add("--father_pid="
																	+ pid);

													paraList_tRunJob_3
															.add("--root_pid="
																	+ rootPid);

													paraList_tRunJob_3
															.add("--father_node=tRunJob_3");

													paraList_tRunJob_3
															.add("--context=Default");

													// for feature:10589

													paraList_tRunJob_3
															.add("--stat_port="
																	+ portStats);

													if (resuming_logs_dir_path != null) {
														paraList_tRunJob_3
																.add("--resuming_logs_dir_path="
																		+ resuming_logs_dir_path);
													}
													String childResumePath_tRunJob_3 = ResumeUtil
															.getChildJobCheckPointPath(resuming_checkpoint_path);
													String tRunJobName_tRunJob_3 = ResumeUtil
															.getRighttRunJob(resuming_checkpoint_path);
													if ("tRunJob_3"
															.equals(tRunJobName_tRunJob_3)
															&& childResumePath_tRunJob_3 != null) {
														paraList_tRunJob_3
																.add("--resuming_checkpoint_path="
																		+ ResumeUtil
																				.getChildJobCheckPointPath(resuming_checkpoint_path));
													}
													paraList_tRunJob_3
															.add("--parent_part_launcher=JOB:"
																	+ jobName
																	+ "/NODE:tRunJob_3");

													java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

													context.synchronizeContext();
													java.util.Enumeration<?> propertyNames_tRunJob_3 = context
															.propertyNames();
													while (propertyNames_tRunJob_3
															.hasMoreElements()) {
														String key_tRunJob_3 = (String) propertyNames_tRunJob_3
																.nextElement();
														Object value_tRunJob_3 = (Object) context
																.get(key_tRunJob_3);
														paraList_tRunJob_3
																.add("--context_param "
																		+ key_tRunJob_3
																		+ "="
																		+ value_tRunJob_3);
													}

													parentContextMap_tRunJob_3
															.put("level",
																	context.level);

													parentContextMap_tRunJob_3
															.put("MDRID",
																	context.MDRID);

													parentContextMap_tRunJob_3
															.put("path",
																	context.path);

													parentContextMap_tRunJob_3
															.put("queryWorkFile",
																	context.queryWorkFile);

													parentContextMap_tRunJob_3
															.put("queryCurrentID",
																	context.queryCurrentID);

													parentContextMap_tRunJob_3
															.put("ont_01_HLEVEL",
																	context.ont_01_HLEVEL);

													parentContextMap_tRunJob_3
															.put("ont_02_Name",
																	context.ont_02_Name);

													parentContextMap_tRunJob_3
															.put("ont_03_Path",
																	context.ont_03_Path);

													parentContextMap_tRunJob_3
															.put("ont_04_DataType",
																	context.ont_04_DataType);

													parentContextMap_tRunJob_3
															.put("ont_05_Update_Date",
																	context.ont_05_Update_Date);

													parentContextMap_tRunJob_3
															.put("ont_06_Import_Date",
																	context.ont_06_Import_Date);

													parentContextMap_tRunJob_3
															.put("ont_07_Download_Date",
																	context.ont_07_Download_Date);

													parentContextMap_tRunJob_3
															.put("ont_08_PathID",
																	context.ont_08_PathID);

													parentContextMap_tRunJob_3
															.put("ont_09_visual",
																	context.ont_09_visual);

													parentContextMap_tRunJob_3
															.put("ont_10_codeList",
																	context.ont_10_codeList);

													parentContextMap_tRunJob_3
															.put("ont_11_source",
																	context.ont_11_source);

													parentContextMap_tRunJob_3
															.put("ont_12_xml",
																	context.ont_12_xml);

													parentContextMap_tRunJob_3
															.put("ont_13_m_applied_path",
																	context.ont_13_m_applied_path);

													parentContextMap_tRunJob_3
															.put("ont_14_itemID",
																	context.ont_14_itemID);

													parentContextMap_tRunJob_3
															.put("ont_15_item",
																	context.ont_15_item);

													parentContextMap_tRunJob_3
															.put("MDRStartDesignation",
																	context.MDRStartDesignation);

													parentContextMap_tRunJob_3
															.put("MDRBaseURLPort",
																	context.MDRBaseURLPort);

													parentContextMap_tRunJob_3
															.put("MDRInstance",
																	context.MDRInstance);

													parentContextMap_tRunJob_3
															.put("MDRPassword",
																	context.MDRPassword);

													parentContextMap_tRunJob_3
															.put("fileOnt",
																	context.fileOnt);

													parentContextMap_tRunJob_3
															.put("MDRUsername",
																	context.MDRUsername);

													parentContextMap_tRunJob_3
															.put("folderTemp",
																	context.folderTemp);

													parentContextMap_tRunJob_3
															.put("MDRBaseURL",
																	context.MDRBaseURL);

													parentContextMap_tRunJob_3
															.put("folderMain",
																	context.folderMain);

													Object obj_tRunJob_3 = null;

													obj_tRunJob_3 = ((String) globalMap
															.get("row53.domain"))
															.substring(((String) globalMap
																	.get("row53.domain"))
																	.lastIndexOf("@") + 1);
													paraList_tRunJob_3
															.add("--context_param DE_domain_ID="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("DE_domain_ID",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row7.unitOfMeasure;
													paraList_tRunJob_3
															.add("--context_param DE_unitOfMeasure="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("DE_unitOfMeasure",
																	obj_tRunJob_3);

													obj_tRunJob_3 = row7.dataType;
													paraList_tRunJob_3
															.add("--context_param DE_dataType="
																	+ RuntimeUtils
																			.tRunJobConvertContext(obj_tRunJob_3));
													parentContextMap_tRunJob_3
															.put("DE_dataType",
																	obj_tRunJob_3);

													i2b2_postgres2.mdr_query_dataelements_uom_dt_0_1.MDR_Query_DataElements_uOM_dT childJob_tRunJob_3 = new i2b2_postgres2.mdr_query_dataelements_uom_dt_0_1.MDR_Query_DataElements_uOM_dT();
													// pass DataSources
													java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
															.get(KEY_DB_DATASOURCES);
													if (null != talendDataSources_tRunJob_3) {
														java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
														for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
																.entrySet()) {
															dataSources_tRunJob_3
																	.put(talendDataSourceEntry_tRunJob_3
																			.getKey(),
																			talendDataSourceEntry_tRunJob_3
																					.getValue()
																					.getRawDataSource());
														}
														childJob_tRunJob_3
																.setDataSources(dataSources_tRunJob_3);
													}

													childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

													String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
															.runJob((String[]) paraList_tRunJob_3
																	.toArray(new String[paraList_tRunJob_3
																			.size()]));

													errorCode = childJob_tRunJob_3
															.getErrorCode();

													if (childJob_tRunJob_3
															.getErrorCode() == null) {
														globalMap
																.put("tRunJob_3_CHILD_RETURN_CODE",
																		childJob_tRunJob_3
																				.getStatus() != null
																				&& ("failure")
																						.equals(childJob_tRunJob_3
																								.getStatus()) ? 1
																				: 0);
													} else {
														globalMap
																.put("tRunJob_3_CHILD_RETURN_CODE",
																		childJob_tRunJob_3
																				.getErrorCode());
													}
													if (childJob_tRunJob_3
															.getExceptionStackTrace() != null) {
														globalMap
																.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
																		childJob_tRunJob_3
																				.getExceptionStackTrace());
													}

													if (childJob_tRunJob_3
															.getErrorCode() != null
															|| ("failure")
																	.equals(childJob_tRunJob_3
																			.getStatus())) {
														throw new RuntimeException(
																"Child job running failed");
													}

													tos_count_tRunJob_3++;

													/**
													 * [tRunJob_3 main ] stop
													 */

												} // End of branch "row7"

												// Start of branch "row5"
												if (row5 != null) {

													/**
													 * [tLogRow_17 main ] start
													 */

													currentComponent = "tLogRow_17";

													// /////////////////////

													strBuffer_tLogRow_17 = new StringBuilder();
													strBuffer_tLogRow_17
															.append("[tLogRow_17] ");

													if (row5.id != null) { //

														strBuffer_tLogRow_17
																.append(String
																		.valueOf(row5.id));

													} //

													strBuffer_tLogRow_17
															.append("|");

													if (row5.maximumCharacterQuantity != null) { //

														strBuffer_tLogRow_17
																.append(String
																		.valueOf(row5.maximumCharacterQuantity));

													} //

													strBuffer_tLogRow_17
															.append("|");

													if (row5.dataType != null) { //

														strBuffer_tLogRow_17
																.append(String
																		.valueOf(row5.dataType));

													} //

													strBuffer_tLogRow_17
															.append("|");

													if (row5.format != null) { //

														strBuffer_tLogRow_17
																.append(String
																		.valueOf(row5.format));

													} //

													strBuffer_tLogRow_17
															.append("|");

													if (row5.meaning != null) { //

														strBuffer_tLogRow_17
																.append(String
																		.valueOf(row5.meaning));

													} //

													strBuffer_tLogRow_17
															.append("|");

													if (row5.unitOfMeasure != null) { //

														strBuffer_tLogRow_17
																.append(String
																		.valueOf(row5.unitOfMeasure));

													} //

													strBuffer_tLogRow_17
															.append("|");

													if (row5.errorMessage != null) { //

														strBuffer_tLogRow_17
																.append(String
																		.valueOf(row5.errorMessage));

													} //

													if (globalMap
															.get("tLogRow_CONSOLE") != null) {
														consoleOut_tLogRow_17 = (java.io.PrintStream) globalMap
																.get("tLogRow_CONSOLE");
													} else {
														consoleOut_tLogRow_17 = new java.io.PrintStream(
																new java.io.BufferedOutputStream(
																		System.out));
														globalMap
																.put("tLogRow_CONSOLE",
																		consoleOut_tLogRow_17);
													}

													consoleOut_tLogRow_17
															.println(strBuffer_tLogRow_17
																	.toString());
													consoleOut_tLogRow_17
															.flush();
													nb_line_tLogRow_17++;
													// ////

													// ////

													// /////////////////////

													tos_count_tLogRow_17++;

													/**
													 * [tLogRow_17 main ] stop
													 */

												} // End of branch "row5"

											} // End of branch "row4"

										} // End of branch "row31"

									} // End of branch "row9"

									// Start of branch "row11"
									if (row11 != null) {

										/**
										 * [tLogRow_18 main ] start
										 */

										currentComponent = "tLogRow_18";

										// /////////////////////

										strBuffer_tLogRow_18 = new StringBuilder();
										strBuffer_tLogRow_18
												.append("[tLogRow_18] ");

										if (row11.id != null) { //

											strBuffer_tLogRow_18.append(String
													.valueOf(row11.id));

										} //

										strBuffer_tLogRow_18.append("|");

										if (row11.maximumCharacterQuantity != null) { //

											strBuffer_tLogRow_18
													.append(String
															.valueOf(row11.maximumCharacterQuantity));

										} //

										strBuffer_tLogRow_18.append("|");

										if (row11.dataType != null) { //

											strBuffer_tLogRow_18.append(String
													.valueOf(row11.dataType));

										} //

										strBuffer_tLogRow_18.append("|");

										if (row11.format != null) { //

											strBuffer_tLogRow_18.append(String
													.valueOf(row11.format));

										} //

										strBuffer_tLogRow_18.append("|");

										if (row11.meaning != null) { //

											strBuffer_tLogRow_18.append(String
													.valueOf(row11.meaning));

										} //

										strBuffer_tLogRow_18.append("|");

										if (row11.unitOfMeasure != null) { //

											strBuffer_tLogRow_18
													.append(String
															.valueOf(row11.unitOfMeasure));

										} //

										strBuffer_tLogRow_18.append("|");

										if (row11.errorMessage != null) { //

											strBuffer_tLogRow_18
													.append(String
															.valueOf(row11.errorMessage));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_18 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_18 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(
															System.out));
											globalMap.put("tLogRow_CONSOLE",
													consoleOut_tLogRow_18);
										}

										consoleOut_tLogRow_18
												.println(strBuffer_tLogRow_18
														.toString());
										consoleOut_tLogRow_18.flush();
										nb_line_tLogRow_18++;
										// ////

										// ////

										// /////////////////////

										tos_count_tLogRow_18++;

										/**
										 * [tLogRow_18 main ] stop
										 */

									} // End of branch "row11"

								} // End of branch "row23"

								/**
								 * [tFileInputJSON_4 end ] start
								 */

								currentComponent = "tFileInputJSON_4";

							}
							globalMap.put("tFileInputJSON_4_NB_LINE",
									nb_line_tFileInputJSON_4);

							ok_Hash.put("tFileInputJSON_4", true);
							end_Hash.put("tFileInputJSON_4",
									System.currentTimeMillis());

							/**
							 * [tFileInputJSON_4 end ] stop
							 */

							/**
							 * [tReplicate_13 end ] start
							 */

							currentComponent = "tReplicate_13";

							ok_Hash.put("tReplicate_13", true);
							end_Hash.put("tReplicate_13",
									System.currentTimeMillis());

							/**
							 * [tReplicate_13 end ] stop
							 */

							/**
							 * [tLogRow_11 end ] start
							 */

							currentComponent = "tLogRow_11";

							// ////
							// ////
							globalMap.put("tLogRow_11_NB_LINE",
									nb_line_tLogRow_11);

							// /////////////////////

							ok_Hash.put("tLogRow_11", true);
							end_Hash.put("tLogRow_11",
									System.currentTimeMillis());

							/**
							 * [tLogRow_11 end ] stop
							 */

							/**
							 * [tFlowToIterate_6 end ] start
							 */

							currentComponent = "tFlowToIterate_6";

							globalMap.put("tFlowToIterate_6_NB_LINE",
									nb_line_tFlowToIterate_6);

							ok_Hash.put("tFlowToIterate_6", true);
							end_Hash.put("tFlowToIterate_6",
									System.currentTimeMillis());

							/**
							 * [tFlowToIterate_6 end ] stop
							 */

							/**
							 * [tFilterRow_7 end ] start
							 */

							currentComponent = "tFilterRow_7";

							globalMap.put("tFilterRow_7_NB_LINE",
									nb_line_tFilterRow_7);
							globalMap.put("tFilterRow_7_NB_LINE_OK",
									nb_line_ok_tFilterRow_7);
							globalMap.put("tFilterRow_7_NB_LINE_REJECT",
									nb_line_reject_tFilterRow_7);

							ok_Hash.put("tFilterRow_7", true);
							end_Hash.put("tFilterRow_7",
									System.currentTimeMillis());

							/**
							 * [tFilterRow_7 end ] stop
							 */

							/**
							 * [tFilterRow_4 end ] start
							 */

							currentComponent = "tFilterRow_4";

							globalMap.put("tFilterRow_4_NB_LINE",
									nb_line_tFilterRow_4);
							globalMap.put("tFilterRow_4_NB_LINE_OK",
									nb_line_ok_tFilterRow_4);
							globalMap.put("tFilterRow_4_NB_LINE_REJECT",
									nb_line_reject_tFilterRow_4);

							ok_Hash.put("tFilterRow_4", true);
							end_Hash.put("tFilterRow_4",
									System.currentTimeMillis());

							/**
							 * [tFilterRow_4 end ] stop
							 */

							/**
							 * [tRunJob_2 end ] start
							 */

							currentComponent = "tRunJob_2";

							ok_Hash.put("tRunJob_2", true);
							end_Hash.put("tRunJob_2",
									System.currentTimeMillis());

							/**
							 * [tRunJob_2 end ] stop
							 */

							/**
							 * [tFilterRow_5 end ] start
							 */

							currentComponent = "tFilterRow_5";

							globalMap.put("tFilterRow_5_NB_LINE",
									nb_line_tFilterRow_5);
							globalMap.put("tFilterRow_5_NB_LINE_OK",
									nb_line_ok_tFilterRow_5);
							globalMap.put("tFilterRow_5_NB_LINE_REJECT",
									nb_line_reject_tFilterRow_5);

							ok_Hash.put("tFilterRow_5", true);
							end_Hash.put("tFilterRow_5",
									System.currentTimeMillis());

							/**
							 * [tFilterRow_5 end ] stop
							 */

							/**
							 * [tRunJob_1 end ] start
							 */

							currentComponent = "tRunJob_1";

							ok_Hash.put("tRunJob_1", true);
							end_Hash.put("tRunJob_1",
									System.currentTimeMillis());

							/**
							 * [tRunJob_1 end ] stop
							 */

							/**
							 * [tFilterRow_6 end ] start
							 */

							currentComponent = "tFilterRow_6";

							globalMap.put("tFilterRow_6_NB_LINE",
									nb_line_tFilterRow_6);
							globalMap.put("tFilterRow_6_NB_LINE_OK",
									nb_line_ok_tFilterRow_6);
							globalMap.put("tFilterRow_6_NB_LINE_REJECT",
									nb_line_reject_tFilterRow_6);

							ok_Hash.put("tFilterRow_6", true);
							end_Hash.put("tFilterRow_6",
									System.currentTimeMillis());

							/**
							 * [tFilterRow_6 end ] stop
							 */

							/**
							 * [tRunJob_3 end ] start
							 */

							currentComponent = "tRunJob_3";

							ok_Hash.put("tRunJob_3", true);
							end_Hash.put("tRunJob_3",
									System.currentTimeMillis());

							/**
							 * [tRunJob_3 end ] stop
							 */

							/**
							 * [tLogRow_17 end ] start
							 */

							currentComponent = "tLogRow_17";

							// ////
							// ////
							globalMap.put("tLogRow_17_NB_LINE",
									nb_line_tLogRow_17);

							// /////////////////////

							ok_Hash.put("tLogRow_17", true);
							end_Hash.put("tLogRow_17",
									System.currentTimeMillis());

							/**
							 * [tLogRow_17 end ] stop
							 */

							/**
							 * [tLogRow_18 end ] start
							 */

							currentComponent = "tLogRow_18";

							// ////
							// ////
							globalMap.put("tLogRow_18_NB_LINE",
									nb_line_tLogRow_18);

							// /////////////////////

							ok_Hash.put("tLogRow_18", true);
							end_Hash.put("tLogRow_18",
									System.currentTimeMillis());

							/**
							 * [tLogRow_18 end ] stop
							 */

						} // End of branch "row37"

						// Start of branch "row45"
						if (row45 != null) {

							/**
							 * [tReplicate_9 main ] start
							 */

							currentComponent = "tReplicate_9";

							row47 = new row47Struct();

							row47.id = row45.id;
							row47.domain = row45.domain;
							row47.errorMessage = row45.errorMessage;
							row46 = new row46Struct();

							row46.id = row45.id;
							row46.domain = row45.domain;
							row46.errorMessage = row45.errorMessage;

							tos_count_tReplicate_9++;

							/**
							 * [tReplicate_9 main ] stop
							 */

							/**
							 * [tLogRow_9 main ] start
							 */

							currentComponent = "tLogRow_9";

							// /////////////////////

							strBuffer_tLogRow_9 = new StringBuilder();
							strBuffer_tLogRow_9.append("[tLogRow_9] ");

							if (row47.id != null) { //

								strBuffer_tLogRow_9.append(String
										.valueOf(row47.id));

							} //

							strBuffer_tLogRow_9.append("|");

							if (row47.domain != null) { //

								strBuffer_tLogRow_9.append(String
										.valueOf(row47.domain));

							} //

							strBuffer_tLogRow_9.append("|");

							if (row47.errorMessage != null) { //

								strBuffer_tLogRow_9.append(String
										.valueOf(row47.errorMessage));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_9 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_9);
							}

							consoleOut_tLogRow_9.println(strBuffer_tLogRow_9
									.toString());
							consoleOut_tLogRow_9.flush();
							nb_line_tLogRow_9++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_9++;

							/**
							 * [tLogRow_9 main ] stop
							 */

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;
								Var.itemID = row46.id.substring(row46.id
										.lastIndexOf("@") + 1);// ###############################
								// ###############################
								// # Output tables

								tMap7DataElementsToOnt = null;

								// # Output table : 'tMap7DataElementsToOnt'
								tMap7DataElementsToOnt_tmp.HLEVEL = context.ont_01_HLEVEL + 1;
								tMap7DataElementsToOnt_tmp.Name = context.ont_02_Name;
								tMap7DataElementsToOnt_tmp.Path = context.ont_03_Path
										+ "\\" + Var.itemID + "\\";
								tMap7DataElementsToOnt_tmp.DataType = context.ont_04_DataType;
								tMap7DataElementsToOnt_tmp.Update_Date = context.ont_05_Update_Date;
								tMap7DataElementsToOnt_tmp.Import_Date = context.ont_06_Import_Date;
								tMap7DataElementsToOnt_tmp.Download_Date = context.ont_07_Download_Date;
								tMap7DataElementsToOnt_tmp.PathID = context.ont_08_PathID;
								tMap7DataElementsToOnt_tmp.visual = "LAE";
								tMap7DataElementsToOnt_tmp.codeList = null;
								tMap7DataElementsToOnt_tmp.source = "MDR Central";
								tMap7DataElementsToOnt_tmp.xml = null;
								tMap7DataElementsToOnt_tmp.m_applied_path = "@";
								tMap7DataElementsToOnt_tmp.itemID = Var.itemID;
								tMap7DataElementsToOnt_tmp.item = null;
								tMap7DataElementsToOnt = tMap7DataElementsToOnt_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */
							// Start of branch "tMap7DataElementsToOnt"
							if (tMap7DataElementsToOnt != null) {

								/**
								 * [tReplicate_12 main ] start
								 */

								currentComponent = "tReplicate_12";

								row48 = new row48Struct();

								row48.HLEVEL = tMap7DataElementsToOnt.HLEVEL;
								row48.Name = tMap7DataElementsToOnt.Name;
								row48.Path = tMap7DataElementsToOnt.Path;
								row48.DataType = tMap7DataElementsToOnt.DataType;
								row48.Update_Date = tMap7DataElementsToOnt.Update_Date;
								row48.Import_Date = tMap7DataElementsToOnt.Import_Date;
								row48.Download_Date = tMap7DataElementsToOnt.Download_Date;
								row48.PathID = tMap7DataElementsToOnt.PathID;
								row48.visual = tMap7DataElementsToOnt.visual;
								row48.codeList = tMap7DataElementsToOnt.codeList;
								row48.source = tMap7DataElementsToOnt.source;
								row48.xml = tMap7DataElementsToOnt.xml;
								row48.m_applied_path = tMap7DataElementsToOnt.m_applied_path;
								row48.itemID = tMap7DataElementsToOnt.itemID;
								row48.item = tMap7DataElementsToOnt.item;
								row49 = new row49Struct();

								row49.HLEVEL = tMap7DataElementsToOnt.HLEVEL;
								row49.Name = tMap7DataElementsToOnt.Name;
								row49.Path = tMap7DataElementsToOnt.Path;
								row49.DataType = tMap7DataElementsToOnt.DataType;
								row49.Update_Date = tMap7DataElementsToOnt.Update_Date;
								row49.Import_Date = tMap7DataElementsToOnt.Import_Date;
								row49.Download_Date = tMap7DataElementsToOnt.Download_Date;
								row49.PathID = tMap7DataElementsToOnt.PathID;
								row49.visual = tMap7DataElementsToOnt.visual;
								row49.codeList = tMap7DataElementsToOnt.codeList;
								row49.source = tMap7DataElementsToOnt.source;
								row49.xml = tMap7DataElementsToOnt.xml;
								row49.m_applied_path = tMap7DataElementsToOnt.m_applied_path;
								row49.itemID = tMap7DataElementsToOnt.itemID;
								row49.item = tMap7DataElementsToOnt.item;

								tos_count_tReplicate_12++;

								/**
								 * [tReplicate_12 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_9 main ] start
								 */

								currentComponent = "tFileOutputDelimited_9";

								String[] rowtFileOutputDelimited_9 = new String[15];

								rowtFileOutputDelimited_9[0] = row48.HLEVEL == null ? ""
										: String.valueOf(row48.HLEVEL);

								rowtFileOutputDelimited_9[1] = row48.Name == null ? ""
										: row48.Name;

								rowtFileOutputDelimited_9[2] = row48.Path == null ? ""
										: row48.Path;

								rowtFileOutputDelimited_9[3] = row48.DataType == null ? ""
										: row48.DataType;

								rowtFileOutputDelimited_9[4] = row48.Update_Date == null ? ""
										: FormatterUtils
												.format_Date(row48.Update_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_9[5] = row48.Import_Date == null ? ""
										: FormatterUtils
												.format_Date(row48.Import_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_9[6] = row48.Download_Date == null ? ""
										: FormatterUtils.format_Date(
												row48.Download_Date,
												"dd-MM-yyyy");

								rowtFileOutputDelimited_9[7] = row48.PathID == null ? ""
										: row48.PathID;

								rowtFileOutputDelimited_9[8] = row48.visual == null ? ""
										: row48.visual;

								rowtFileOutputDelimited_9[9] = row48.codeList == null ? ""
										: row48.codeList;

								rowtFileOutputDelimited_9[10] = row48.source == null ? ""
										: row48.source;

								rowtFileOutputDelimited_9[11] = row48.xml == null ? ""
										: row48.xml;

								rowtFileOutputDelimited_9[12] = row48.m_applied_path == null ? ""
										: row48.m_applied_path;

								rowtFileOutputDelimited_9[13] = row48.itemID == null ? ""
										: row48.itemID;

								rowtFileOutputDelimited_9[14] = row48.item == null ? ""
										: row48.item;

								nb_line_tFileOutputDelimited_9++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_9",
										nb_line_tFileOutputDelimited_9);
								CsvWritertFileOutputDelimited_9
										.writeNext(rowtFileOutputDelimited_9);

								outtFileOutputDelimited_9
										.write(strWritertFileOutputDelimited_9
												.getBuffer().toString());
								strWritertFileOutputDelimited_9.getBuffer()
										.delete(0,
												strWritertFileOutputDelimited_9
														.getBuffer().length());

								if (nb_line_tFileOutputDelimited_9 % 1 == 0) {

									outtFileOutputDelimited_9.flush();

								}

								tos_count_tFileOutputDelimited_9++;

								/**
								 * [tFileOutputDelimited_9 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_10 main ] start
								 */

								currentComponent = "tFileOutputDelimited_10";

								String[] rowtFileOutputDelimited_10 = new String[15];

								rowtFileOutputDelimited_10[0] = row49.HLEVEL == null ? ""
										: String.valueOf(row49.HLEVEL);

								rowtFileOutputDelimited_10[1] = row49.Name == null ? ""
										: row49.Name;

								rowtFileOutputDelimited_10[2] = row49.Path == null ? ""
										: row49.Path;

								rowtFileOutputDelimited_10[3] = row49.DataType == null ? ""
										: row49.DataType;

								rowtFileOutputDelimited_10[4] = row49.Update_Date == null ? ""
										: FormatterUtils
												.format_Date(row49.Update_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_10[5] = row49.Import_Date == null ? ""
										: FormatterUtils
												.format_Date(row49.Import_Date,
														"dd-MM-yyyy");

								rowtFileOutputDelimited_10[6] = row49.Download_Date == null ? ""
										: FormatterUtils.format_Date(
												row49.Download_Date,
												"dd-MM-yyyy");

								rowtFileOutputDelimited_10[7] = row49.PathID == null ? ""
										: row49.PathID;

								rowtFileOutputDelimited_10[8] = row49.visual == null ? ""
										: row49.visual;

								rowtFileOutputDelimited_10[9] = row49.codeList == null ? ""
										: row49.codeList;

								rowtFileOutputDelimited_10[10] = row49.source == null ? ""
										: row49.source;

								rowtFileOutputDelimited_10[11] = row49.xml == null ? ""
										: row49.xml;

								rowtFileOutputDelimited_10[12] = row49.m_applied_path == null ? ""
										: row49.m_applied_path;

								rowtFileOutputDelimited_10[13] = row49.itemID == null ? ""
										: row49.itemID;

								rowtFileOutputDelimited_10[14] = row49.item == null ? ""
										: row49.item;

								nb_line_tFileOutputDelimited_10++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_10",
										nb_line_tFileOutputDelimited_10);
								CsvWritertFileOutputDelimited_10
										.writeNext(rowtFileOutputDelimited_10);

								outtFileOutputDelimited_10
										.write(strWritertFileOutputDelimited_10
												.getBuffer().toString());
								strWritertFileOutputDelimited_10.getBuffer()
										.delete(0,
												strWritertFileOutputDelimited_10
														.getBuffer().length());

								if (nb_line_tFileOutputDelimited_10 % 1 == 0) {

									outtFileOutputDelimited_10.flush();

								}

								tos_count_tFileOutputDelimited_10++;

								/**
								 * [tFileOutputDelimited_10 main ] stop
								 */

							} // End of branch "tMap7DataElementsToOnt"

						} // End of branch "row45"

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
							// ###############################
							// # Output tables

							tMap6DE2Ont_Folders = null;

							// # Output table : 'tMap6DE2Ont_Folders'
							tMap6DE2Ont_Folders_tmp.HLEVEL = context.ont_01_HLEVEL;
							tMap6DE2Ont_Folders_tmp.Name = context.ont_02_Name;
							tMap6DE2Ont_Folders_tmp.Path = context.ont_03_Path
									+ "\\";
							tMap6DE2Ont_Folders_tmp.DataType = context.ont_04_DataType;
							tMap6DE2Ont_Folders_tmp.Update_Date = context.ont_05_Update_Date;
							tMap6DE2Ont_Folders_tmp.Import_Date = context.ont_06_Import_Date;
							tMap6DE2Ont_Folders_tmp.Download_Date = context.ont_07_Download_Date;
							tMap6DE2Ont_Folders_tmp.PathID = context.ont_08_PathID;
							tMap6DE2Ont_Folders_tmp.visual = context.ont_09_visual;
							tMap6DE2Ont_Folders_tmp.codeList = context.ont_10_codeList;
							tMap6DE2Ont_Folders_tmp.source = context.ont_11_source;
							tMap6DE2Ont_Folders_tmp.xml = context.ont_12_xml;
							tMap6DE2Ont_Folders_tmp.m_applied_path = context.ont_13_m_applied_path;
							tMap6DE2Ont_Folders_tmp.itemID = context.ont_14_itemID;
							tMap6DE2Ont_Folders_tmp.item = context.ont_15_item;
							tMap6DE2Ont_Folders = tMap6DE2Ont_Folders_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_6 = false;

						tos_count_tMap_6++;

						/**
						 * [tMap_6 main ] stop
						 */
						// Start of branch "tMap6DE2Ont_Folders"
						if (tMap6DE2Ont_Folders != null) {

							/**
							 * [tReplicate_11 main ] start
							 */

							currentComponent = "tReplicate_11";

							row33 = new row33Struct();

							row33.HLEVEL = tMap6DE2Ont_Folders.HLEVEL;
							row33.Name = tMap6DE2Ont_Folders.Name;
							row33.Path = tMap6DE2Ont_Folders.Path;
							row33.DataType = tMap6DE2Ont_Folders.DataType;
							row33.Update_Date = tMap6DE2Ont_Folders.Update_Date;
							row33.Import_Date = tMap6DE2Ont_Folders.Import_Date;
							row33.Download_Date = tMap6DE2Ont_Folders.Download_Date;
							row33.PathID = tMap6DE2Ont_Folders.PathID;
							row33.visual = tMap6DE2Ont_Folders.visual;
							row33.codeList = tMap6DE2Ont_Folders.codeList;
							row33.source = tMap6DE2Ont_Folders.source;
							row33.xml = tMap6DE2Ont_Folders.xml;
							row33.m_applied_path = tMap6DE2Ont_Folders.m_applied_path;
							row33.itemID = tMap6DE2Ont_Folders.itemID;
							row33.item = tMap6DE2Ont_Folders.item;
							row44 = new row44Struct();

							row44.HLEVEL = tMap6DE2Ont_Folders.HLEVEL;
							row44.Name = tMap6DE2Ont_Folders.Name;
							row44.Path = tMap6DE2Ont_Folders.Path;
							row44.DataType = tMap6DE2Ont_Folders.DataType;
							row44.Update_Date = tMap6DE2Ont_Folders.Update_Date;
							row44.Import_Date = tMap6DE2Ont_Folders.Import_Date;
							row44.Download_Date = tMap6DE2Ont_Folders.Download_Date;
							row44.PathID = tMap6DE2Ont_Folders.PathID;
							row44.visual = tMap6DE2Ont_Folders.visual;
							row44.codeList = tMap6DE2Ont_Folders.codeList;
							row44.source = tMap6DE2Ont_Folders.source;
							row44.xml = tMap6DE2Ont_Folders.xml;
							row44.m_applied_path = tMap6DE2Ont_Folders.m_applied_path;
							row44.itemID = tMap6DE2Ont_Folders.itemID;
							row44.item = tMap6DE2Ont_Folders.item;
							row43 = new row43Struct();

							row43.HLEVEL = tMap6DE2Ont_Folders.HLEVEL;
							row43.Name = tMap6DE2Ont_Folders.Name;
							row43.Path = tMap6DE2Ont_Folders.Path;
							row43.DataType = tMap6DE2Ont_Folders.DataType;
							row43.Update_Date = tMap6DE2Ont_Folders.Update_Date;
							row43.Import_Date = tMap6DE2Ont_Folders.Import_Date;
							row43.Download_Date = tMap6DE2Ont_Folders.Download_Date;
							row43.PathID = tMap6DE2Ont_Folders.PathID;
							row43.visual = tMap6DE2Ont_Folders.visual;
							row43.codeList = tMap6DE2Ont_Folders.codeList;
							row43.source = tMap6DE2Ont_Folders.source;
							row43.xml = tMap6DE2Ont_Folders.xml;
							row43.m_applied_path = tMap6DE2Ont_Folders.m_applied_path;
							row43.itemID = tMap6DE2Ont_Folders.itemID;
							row43.item = tMap6DE2Ont_Folders.item;

							tos_count_tReplicate_11++;

							/**
							 * [tReplicate_11 main ] stop
							 */

							/**
							 * [tLogRow_10 main ] start
							 */

							currentComponent = "tLogRow_10";

							// /////////////////////

							strBuffer_tLogRow_10 = new StringBuilder();
							strBuffer_tLogRow_10.append("[tLogRow_10] ");

							if (row33.HLEVEL != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.HLEVEL));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.Name != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.Name));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.Path != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.Path));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.DataType != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.DataType));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.Update_Date != null) { //

								strBuffer_tLogRow_10.append(FormatterUtils
										.format_Date(row33.Update_Date,
												"dd-MM-yyyy"));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.Import_Date != null) { //

								strBuffer_tLogRow_10.append(FormatterUtils
										.format_Date(row33.Import_Date,
												"dd-MM-yyyy"));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.Download_Date != null) { //

								strBuffer_tLogRow_10.append(FormatterUtils
										.format_Date(row33.Download_Date,
												"dd-MM-yyyy"));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.PathID != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.PathID));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.visual != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.visual));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.codeList != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.codeList));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.source != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.source));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.xml != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.xml));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.m_applied_path != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.m_applied_path));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.itemID != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.itemID));

							} //

							strBuffer_tLogRow_10.append("|");

							if (row33.item != null) { //

								strBuffer_tLogRow_10.append(String
										.valueOf(row33.item));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_10 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_10);
							}

							consoleOut_tLogRow_10.println(strBuffer_tLogRow_10
									.toString());
							consoleOut_tLogRow_10.flush();
							nb_line_tLogRow_10++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_10++;

							/**
							 * [tLogRow_10 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_8 main ] start
							 */

							currentComponent = "tFileOutputDelimited_8";

							String[] rowtFileOutputDelimited_8 = new String[15];

							rowtFileOutputDelimited_8[0] = row44.HLEVEL == null ? ""
									: String.valueOf(row44.HLEVEL);

							rowtFileOutputDelimited_8[1] = row44.Name == null ? ""
									: row44.Name;

							rowtFileOutputDelimited_8[2] = row44.Path == null ? ""
									: row44.Path;

							rowtFileOutputDelimited_8[3] = row44.DataType == null ? ""
									: row44.DataType;

							rowtFileOutputDelimited_8[4] = row44.Update_Date == null ? ""
									: FormatterUtils.format_Date(
											row44.Update_Date, "dd-MM-yyyy");

							rowtFileOutputDelimited_8[5] = row44.Import_Date == null ? ""
									: FormatterUtils.format_Date(
											row44.Import_Date, "dd-MM-yyyy");

							rowtFileOutputDelimited_8[6] = row44.Download_Date == null ? ""
									: FormatterUtils.format_Date(
											row44.Download_Date, "dd-MM-yyyy");

							rowtFileOutputDelimited_8[7] = row44.PathID == null ? ""
									: row44.PathID;

							rowtFileOutputDelimited_8[8] = row44.visual == null ? ""
									: row44.visual;

							rowtFileOutputDelimited_8[9] = row44.codeList == null ? ""
									: row44.codeList;

							rowtFileOutputDelimited_8[10] = row44.source == null ? ""
									: row44.source;

							rowtFileOutputDelimited_8[11] = row44.xml == null ? ""
									: row44.xml;

							rowtFileOutputDelimited_8[12] = row44.m_applied_path == null ? ""
									: row44.m_applied_path;

							rowtFileOutputDelimited_8[13] = row44.itemID == null ? ""
									: row44.itemID;

							rowtFileOutputDelimited_8[14] = row44.item == null ? ""
									: row44.item;

							nb_line_tFileOutputDelimited_8++;
							resourceMap.put("nb_line_tFileOutputDelimited_8",
									nb_line_tFileOutputDelimited_8);
							CsvWritertFileOutputDelimited_8
									.writeNext(rowtFileOutputDelimited_8);

							outtFileOutputDelimited_8
									.write(strWritertFileOutputDelimited_8
											.getBuffer().toString());
							strWritertFileOutputDelimited_8.getBuffer().delete(
									0,
									strWritertFileOutputDelimited_8.getBuffer()
											.length());

							if (nb_line_tFileOutputDelimited_8 % 1 == 0) {

								outtFileOutputDelimited_8.flush();

							}

							tos_count_tFileOutputDelimited_8++;

							/**
							 * [tFileOutputDelimited_8 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 main ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							String[] rowtFileOutputDelimited_7 = new String[15];

							rowtFileOutputDelimited_7[0] = row43.HLEVEL == null ? ""
									: String.valueOf(row43.HLEVEL);

							rowtFileOutputDelimited_7[1] = row43.Name == null ? ""
									: row43.Name;

							rowtFileOutputDelimited_7[2] = row43.Path == null ? ""
									: row43.Path;

							rowtFileOutputDelimited_7[3] = row43.DataType == null ? ""
									: row43.DataType;

							rowtFileOutputDelimited_7[4] = row43.Update_Date == null ? ""
									: FormatterUtils.format_Date(
											row43.Update_Date, "dd-MM-yyyy");

							rowtFileOutputDelimited_7[5] = row43.Import_Date == null ? ""
									: FormatterUtils.format_Date(
											row43.Import_Date, "dd-MM-yyyy");

							rowtFileOutputDelimited_7[6] = row43.Download_Date == null ? ""
									: FormatterUtils.format_Date(
											row43.Download_Date, "dd-MM-yyyy");

							rowtFileOutputDelimited_7[7] = row43.PathID == null ? ""
									: row43.PathID;

							rowtFileOutputDelimited_7[8] = row43.visual == null ? ""
									: row43.visual;

							rowtFileOutputDelimited_7[9] = row43.codeList == null ? ""
									: row43.codeList;

							rowtFileOutputDelimited_7[10] = row43.source == null ? ""
									: row43.source;

							rowtFileOutputDelimited_7[11] = row43.xml == null ? ""
									: row43.xml;

							rowtFileOutputDelimited_7[12] = row43.m_applied_path == null ? ""
									: row43.m_applied_path;

							rowtFileOutputDelimited_7[13] = row43.itemID == null ? ""
									: row43.itemID;

							rowtFileOutputDelimited_7[14] = row43.item == null ? ""
									: row43.item;

							nb_line_tFileOutputDelimited_7++;
							resourceMap.put("nb_line_tFileOutputDelimited_7",
									nb_line_tFileOutputDelimited_7);
							CsvWritertFileOutputDelimited_7
									.writeNext(rowtFileOutputDelimited_7);

							outtFileOutputDelimited_7
									.write(strWritertFileOutputDelimited_7
											.getBuffer().toString());
							strWritertFileOutputDelimited_7.getBuffer().delete(
									0,
									strWritertFileOutputDelimited_7.getBuffer()
											.length());

							if (nb_line_tFileOutputDelimited_7 % 1 == 0) {

								outtFileOutputDelimited_7.flush();

							}

							tos_count_tFileOutputDelimited_7++;

							/**
							 * [tFileOutputDelimited_7 main ] stop
							 */

						} // End of branch "tMap6DE2Ont_Folders"

					} // End of branch "row21"

					/**
					 * [tFileInputJSON_2 end ] start
					 */

					currentComponent = "tFileInputJSON_2";

				}
				globalMap.put("tFileInputJSON_2_NB_LINE",
						nb_line_tFileInputJSON_2);

				ok_Hash.put("tFileInputJSON_2", true);
				end_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_2 end ] stop
				 */

				/**
				 * [tReplicate_5 end ] start
				 */

				currentComponent = "tReplicate_5";

				ok_Hash.put("tReplicate_5", true);
				end_Hash.put("tReplicate_5", System.currentTimeMillis());

				/**
				 * [tReplicate_5 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK",
						nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_3);

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tReplicate_10 end ] start
				 */

				currentComponent = "tReplicate_10";

				ok_Hash.put("tReplicate_10", true);
				end_Hash.put("tReplicate_10", System.currentTimeMillis());

				/**
				 * [tReplicate_10 end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

				// ////
				// ////
				globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

				// /////////////////////

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

				/**
				 * [tFlowToIterate_3 end ] start
				 */

				currentComponent = "tFlowToIterate_3";

				globalMap.put("tFlowToIterate_3_NB_LINE",
						nb_line_tFlowToIterate_3);

				ok_Hash.put("tFlowToIterate_3", true);
				end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_3 end ] stop
				 */

				/**
				 * [tReplicate_9 end ] start
				 */

				currentComponent = "tReplicate_9";

				ok_Hash.put("tReplicate_9", true);
				end_Hash.put("tReplicate_9", System.currentTimeMillis());

				/**
				 * [tReplicate_9 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

				// ////
				// ////
				globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

				// /////////////////////

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tReplicate_12 end ] start
				 */

				currentComponent = "tReplicate_12";

				ok_Hash.put("tReplicate_12", true);
				end_Hash.put("tReplicate_12", System.currentTimeMillis());

				/**
				 * [tReplicate_12 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 end ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (CsvWritertFileOutputDelimited_9 != null) {
					CsvWritertFileOutputDelimited_9.close();
				}

				if (outtFileOutputDelimited_9 != null) {
					outtFileOutputDelimited_9.flush();
					outtFileOutputDelimited_9.close();
				}

				globalMap.put("tFileOutputDelimited_9_NB_LINE",
						nb_line_tFileOutputDelimited_9);

				if (isFileGenerated_tFileOutputDelimited_9
						&& nb_line_tFileOutputDelimited_9 == 0) {

					filetFileOutputDelimited_9.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_9", true);

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 end ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (CsvWritertFileOutputDelimited_10 != null) {
					CsvWritertFileOutputDelimited_10.close();
				}

				if (outtFileOutputDelimited_10 != null) {
					outtFileOutputDelimited_10.flush();
					outtFileOutputDelimited_10.close();
				}

				globalMap.put("tFileOutputDelimited_10_NB_LINE",
						nb_line_tFileOutputDelimited_10);

				if (isFileGenerated_tFileOutputDelimited_10
						&& nb_line_tFileOutputDelimited_10 == 0) {

					filetFileOutputDelimited_10.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_10", true);

				ok_Hash.put("tFileOutputDelimited_10", true);
				end_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tReplicate_11 end ] start
				 */

				currentComponent = "tReplicate_11";

				ok_Hash.put("tReplicate_11", true);
				end_Hash.put("tReplicate_11", System.currentTimeMillis());

				/**
				 * [tReplicate_11 end ] stop
				 */

				/**
				 * [tLogRow_10 end ] start
				 */

				currentComponent = "tLogRow_10";

				// ////
				// ////
				globalMap.put("tLogRow_10_NB_LINE", nb_line_tLogRow_10);

				// /////////////////////

				ok_Hash.put("tLogRow_10", true);
				end_Hash.put("tLogRow_10", System.currentTimeMillis());

				/**
				 * [tLogRow_10 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (CsvWritertFileOutputDelimited_8 != null) {
					CsvWritertFileOutputDelimited_8.close();
				}

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE",
						nb_line_tFileOutputDelimited_8);

				if (isFileGenerated_tFileOutputDelimited_8
						&& nb_line_tFileOutputDelimited_8 == 0) {

					filetFileOutputDelimited_8.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (CsvWritertFileOutputDelimited_7 != null) {
					CsvWritertFileOutputDelimited_7.close();
				}

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE",
						nb_line_tFileOutputDelimited_7);

				if (isFileGenerated_tFileOutputDelimited_7
						&& nb_line_tFileOutputDelimited_7 == 0) {

					filetFileOutputDelimited_7.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_2 finally ] start
				 */

				currentComponent = "tFileInputJSON_2";

				/**
				 * [tFileInputJSON_2 finally ] stop
				 */

				/**
				 * [tReplicate_5 finally ] start
				 */

				currentComponent = "tReplicate_5";

				/**
				 * [tReplicate_5 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tReplicate_10 finally ] start
				 */

				currentComponent = "tReplicate_10";

				/**
				 * [tReplicate_10 finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

				/**
				 * [tFlowToIterate_3 finally ] start
				 */

				currentComponent = "tFlowToIterate_3";

				/**
				 * [tFlowToIterate_3 finally ] stop
				 */

				/**
				 * [tFileInputJSON_4 finally ] start
				 */

				currentComponent = "tFileInputJSON_4";

				/**
				 * [tFileInputJSON_4 finally ] stop
				 */

				/**
				 * [tReplicate_13 finally ] start
				 */

				currentComponent = "tReplicate_13";

				/**
				 * [tReplicate_13 finally ] stop
				 */

				/**
				 * [tLogRow_11 finally ] start
				 */

				currentComponent = "tLogRow_11";

				/**
				 * [tLogRow_11 finally ] stop
				 */

				/**
				 * [tFlowToIterate_6 finally ] start
				 */

				currentComponent = "tFlowToIterate_6";

				/**
				 * [tFlowToIterate_6 finally ] stop
				 */

				/**
				 * [tFileInputJSON_8 finally ] start
				 */

				currentComponent = "tFileInputJSON_8";

				/**
				 * [tFileInputJSON_8 finally ] stop
				 */

				/**
				 * [tReplicate_14 finally ] start
				 */

				currentComponent = "tReplicate_14";

				/**
				 * [tReplicate_14 finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

				/**
				 * [tFlowToIterate_7 finally ] start
				 */

				currentComponent = "tFlowToIterate_7";

				/**
				 * [tFlowToIterate_7 finally ] stop
				 */

				/**
				 * [tFileInputJSON_9 finally ] start
				 */

				currentComponent = "tFileInputJSON_9";

				/**
				 * [tFileInputJSON_9 finally ] stop
				 */

				/**
				 * [tReplicate_16 finally ] start
				 */

				currentComponent = "tReplicate_16";

				/**
				 * [tReplicate_16 finally ] stop
				 */

				/**
				 * [tLogRow_14 finally ] start
				 */

				currentComponent = "tLogRow_14";

				/**
				 * [tLogRow_14 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tReplicate_17 finally ] start
				 */

				currentComponent = "tReplicate_17";

				/**
				 * [tReplicate_17 finally ] stop
				 */

				/**
				 * [tLogRow_15 finally ] start
				 */

				currentComponent = "tLogRow_15";

				/**
				 * [tLogRow_15 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_14";

				if (resourceMap.get("finish_tFileOutputDelimited_14") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_14 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_14");

					if (CsvWritertFileOutputDelimited_14 != null) {
						CsvWritertFileOutputDelimited_14.close();
					}

					java.io.Writer outtFileOutputDelimited_14 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_14");
					if (outtFileOutputDelimited_14 != null) {
						outtFileOutputDelimited_14.flush();
						outtFileOutputDelimited_14.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_14")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_14"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_14")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_14 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (resourceMap.get("finish_tFileOutputDelimited_13") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_13");

					if (CsvWritertFileOutputDelimited_13 != null) {
						CsvWritertFileOutputDelimited_13.close();
					}

					java.io.Writer outtFileOutputDelimited_13 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_13");
					if (outtFileOutputDelimited_13 != null) {
						outtFileOutputDelimited_13.flush();
						outtFileOutputDelimited_13.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_13")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_13"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_13")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_13 finally ] stop
				 */

				/**
				 * [tFilterRow_7 finally ] start
				 */

				currentComponent = "tFilterRow_7";

				/**
				 * [tFilterRow_7 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */

				/**
				 * [tFilterRow_5 finally ] start
				 */

				currentComponent = "tFilterRow_5";

				/**
				 * [tFilterRow_5 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

				/**
				 * [tFilterRow_6 finally ] start
				 */

				currentComponent = "tFilterRow_6";

				/**
				 * [tFilterRow_6 finally ] stop
				 */

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

				/**
				 * [tLogRow_17 finally ] start
				 */

				currentComponent = "tLogRow_17";

				/**
				 * [tLogRow_17 finally ] stop
				 */

				/**
				 * [tLogRow_18 finally ] start
				 */

				currentComponent = "tLogRow_18";

				/**
				 * [tLogRow_18 finally ] stop
				 */

				/**
				 * [tReplicate_9 finally ] start
				 */

				currentComponent = "tReplicate_9";

				/**
				 * [tReplicate_9 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tReplicate_12 finally ] start
				 */

				currentComponent = "tReplicate_12";

				/**
				 * [tReplicate_12 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (resourceMap.get("finish_tFileOutputDelimited_9") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_9");

					if (CsvWritertFileOutputDelimited_9 != null) {
						CsvWritertFileOutputDelimited_9.close();
					}

					java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_9");
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_9")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_9"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_9")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_9 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (resourceMap.get("finish_tFileOutputDelimited_10") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_10");

					if (CsvWritertFileOutputDelimited_10 != null) {
						CsvWritertFileOutputDelimited_10.close();
					}

					java.io.Writer outtFileOutputDelimited_10 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_10");
					if (outtFileOutputDelimited_10 != null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_10")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_10"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_10")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_10 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tReplicate_11 finally ] start
				 */

				currentComponent = "tReplicate_11";

				/**
				 * [tReplicate_11 finally ] stop
				 */

				/**
				 * [tLogRow_10 finally ] start
				 */

				currentComponent = "tLogRow_10";

				/**
				 * [tLogRow_10 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_8");

					if (CsvWritertFileOutputDelimited_8 != null) {
						CsvWritertFileOutputDelimited_8.close();
					}

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_8")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_8"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_8")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_7");

					if (CsvWritertFileOutputDelimited_7 != null) {
						CsvWritertFileOutputDelimited_7.close();
					}

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_7")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_7"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_7")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MDR_Query_DataElements MDR_Query_DataElementsClass = new MDR_Query_DataElements();

		int exitCode = MDR_Query_DataElementsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MDR_Query_DataElements.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/mdr_query_dataelements_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.level = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("level"));
			} catch (NumberFormatException e) {
				context.level = null;
			}
			context.MDRID = (String) context.getProperty("MDRID");
			context.path = (String) context.getProperty("path");
			context.queryWorkFile = (String) context
					.getProperty("queryWorkFile");
			context.queryCurrentID = (String) context
					.getProperty("queryCurrentID");
			try {
				context.ont_01_HLEVEL = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ont_01_HLEVEL"));
			} catch (NumberFormatException e) {
				context.ont_01_HLEVEL = null;
			}
			context.ont_02_Name = (String) context.getProperty("ont_02_Name");
			context.ont_03_Path = (String) context.getProperty("ont_03_Path");
			context.ont_04_DataType = (String) context
					.getProperty("ont_04_DataType");
			try {
				String context_ont_05_Update_Date_value = context
						.getProperty("ont_05_Update_Date");
				if (context_ont_05_Update_Date_value == null) {
					context_ont_05_Update_Date_value = "";
				}
				int context_ont_05_Update_Date_pos = context_ont_05_Update_Date_value
						.indexOf(";");
				String context_ont_05_Update_Date_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_ont_05_Update_Date_pos > -1) {
					context_ont_05_Update_Date_pattern = context_ont_05_Update_Date_value
							.substring(0, context_ont_05_Update_Date_pos);
					context_ont_05_Update_Date_value = context_ont_05_Update_Date_value
							.substring(context_ont_05_Update_Date_pos + 1);
				}

				context.ont_05_Update_Date = (java.util.Date) (new java.text.SimpleDateFormat(
						context_ont_05_Update_Date_pattern)
						.parse(context_ont_05_Update_Date_value));

			} catch (ParseException e) {
				context.ont_05_Update_Date = null;
			}
			try {
				String context_ont_06_Import_Date_value = context
						.getProperty("ont_06_Import_Date");
				if (context_ont_06_Import_Date_value == null) {
					context_ont_06_Import_Date_value = "";
				}
				int context_ont_06_Import_Date_pos = context_ont_06_Import_Date_value
						.indexOf(";");
				String context_ont_06_Import_Date_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_ont_06_Import_Date_pos > -1) {
					context_ont_06_Import_Date_pattern = context_ont_06_Import_Date_value
							.substring(0, context_ont_06_Import_Date_pos);
					context_ont_06_Import_Date_value = context_ont_06_Import_Date_value
							.substring(context_ont_06_Import_Date_pos + 1);
				}

				context.ont_06_Import_Date = (java.util.Date) (new java.text.SimpleDateFormat(
						context_ont_06_Import_Date_pattern)
						.parse(context_ont_06_Import_Date_value));

			} catch (ParseException e) {
				context.ont_06_Import_Date = null;
			}
			try {
				String context_ont_07_Download_Date_value = context
						.getProperty("ont_07_Download_Date");
				if (context_ont_07_Download_Date_value == null) {
					context_ont_07_Download_Date_value = "";
				}
				int context_ont_07_Download_Date_pos = context_ont_07_Download_Date_value
						.indexOf(";");
				String context_ont_07_Download_Date_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_ont_07_Download_Date_pos > -1) {
					context_ont_07_Download_Date_pattern = context_ont_07_Download_Date_value
							.substring(0, context_ont_07_Download_Date_pos);
					context_ont_07_Download_Date_value = context_ont_07_Download_Date_value
							.substring(context_ont_07_Download_Date_pos + 1);
				}

				context.ont_07_Download_Date = (java.util.Date) (new java.text.SimpleDateFormat(
						context_ont_07_Download_Date_pattern)
						.parse(context_ont_07_Download_Date_value));

			} catch (ParseException e) {
				context.ont_07_Download_Date = null;
			}
			context.ont_08_PathID = (String) context
					.getProperty("ont_08_PathID");
			context.ont_09_visual = (String) context
					.getProperty("ont_09_visual");
			context.ont_10_codeList = (String) context
					.getProperty("ont_10_codeList");
			context.ont_11_source = (String) context
					.getProperty("ont_11_source");
			context.ont_12_xml = (String) context.getProperty("ont_12_xml");
			context.ont_13_m_applied_path = (String) context
					.getProperty("ont_13_m_applied_path");
			context.ont_14_itemID = (String) context
					.getProperty("ont_14_itemID");
			context.ont_15_item = (String) context.getProperty("ont_15_item");
			context.MDRStartDesignation = (String) context
					.getProperty("MDRStartDesignation");
			context.MDRBaseURLPort = (String) context
					.getProperty("MDRBaseURLPort");
			context.MDRInstance = (String) context.getProperty("MDRInstance");
			String pwd_MDRPassword_value = context.getProperty("MDRPassword");
			context.MDRPassword = null;
			if (pwd_MDRPassword_value != null) {
				if (context_param.containsKey("MDRPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.MDRPassword = pwd_MDRPassword_value;
				} else if (!pwd_MDRPassword_value.isEmpty()) {
					try {
						context.MDRPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_MDRPassword_value);
						context.put("MDRPassword", context.MDRPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.fileOnt = (String) context.getProperty("fileOnt");
			context.MDRUsername = (String) context.getProperty("MDRUsername");
			context.folderTemp = (String) context.getProperty("folderTemp");
			context.MDRBaseURL = (String) context.getProperty("MDRBaseURL");
			context.folderMain = (String) context.getProperty("folderMain");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("level")) {
				context.level = (Integer) parentContextMap.get("level");
			}
			if (parentContextMap.containsKey("MDRID")) {
				context.MDRID = (String) parentContextMap.get("MDRID");
			}
			if (parentContextMap.containsKey("path")) {
				context.path = (String) parentContextMap.get("path");
			}
			if (parentContextMap.containsKey("queryWorkFile")) {
				context.queryWorkFile = (String) parentContextMap
						.get("queryWorkFile");
			}
			if (parentContextMap.containsKey("queryCurrentID")) {
				context.queryCurrentID = (String) parentContextMap
						.get("queryCurrentID");
			}
			if (parentContextMap.containsKey("ont_01_HLEVEL")) {
				context.ont_01_HLEVEL = (Integer) parentContextMap
						.get("ont_01_HLEVEL");
			}
			if (parentContextMap.containsKey("ont_02_Name")) {
				context.ont_02_Name = (String) parentContextMap
						.get("ont_02_Name");
			}
			if (parentContextMap.containsKey("ont_03_Path")) {
				context.ont_03_Path = (String) parentContextMap
						.get("ont_03_Path");
			}
			if (parentContextMap.containsKey("ont_04_DataType")) {
				context.ont_04_DataType = (String) parentContextMap
						.get("ont_04_DataType");
			}
			if (parentContextMap.containsKey("ont_05_Update_Date")) {
				context.ont_05_Update_Date = (java.util.Date) parentContextMap
						.get("ont_05_Update_Date");
			}
			if (parentContextMap.containsKey("ont_06_Import_Date")) {
				context.ont_06_Import_Date = (java.util.Date) parentContextMap
						.get("ont_06_Import_Date");
			}
			if (parentContextMap.containsKey("ont_07_Download_Date")) {
				context.ont_07_Download_Date = (java.util.Date) parentContextMap
						.get("ont_07_Download_Date");
			}
			if (parentContextMap.containsKey("ont_08_PathID")) {
				context.ont_08_PathID = (String) parentContextMap
						.get("ont_08_PathID");
			}
			if (parentContextMap.containsKey("ont_09_visual")) {
				context.ont_09_visual = (String) parentContextMap
						.get("ont_09_visual");
			}
			if (parentContextMap.containsKey("ont_10_codeList")) {
				context.ont_10_codeList = (String) parentContextMap
						.get("ont_10_codeList");
			}
			if (parentContextMap.containsKey("ont_11_source")) {
				context.ont_11_source = (String) parentContextMap
						.get("ont_11_source");
			}
			if (parentContextMap.containsKey("ont_12_xml")) {
				context.ont_12_xml = (String) parentContextMap
						.get("ont_12_xml");
			}
			if (parentContextMap.containsKey("ont_13_m_applied_path")) {
				context.ont_13_m_applied_path = (String) parentContextMap
						.get("ont_13_m_applied_path");
			}
			if (parentContextMap.containsKey("ont_14_itemID")) {
				context.ont_14_itemID = (String) parentContextMap
						.get("ont_14_itemID");
			}
			if (parentContextMap.containsKey("ont_15_item")) {
				context.ont_15_item = (String) parentContextMap
						.get("ont_15_item");
			}
			if (parentContextMap.containsKey("MDRStartDesignation")) {
				context.MDRStartDesignation = (String) parentContextMap
						.get("MDRStartDesignation");
			}
			if (parentContextMap.containsKey("MDRBaseURLPort")) {
				context.MDRBaseURLPort = (String) parentContextMap
						.get("MDRBaseURLPort");
			}
			if (parentContextMap.containsKey("MDRInstance")) {
				context.MDRInstance = (String) parentContextMap
						.get("MDRInstance");
			}
			if (parentContextMap.containsKey("MDRPassword")) {
				context.MDRPassword = (java.lang.String) parentContextMap
						.get("MDRPassword");
			}
			if (parentContextMap.containsKey("fileOnt")) {
				context.fileOnt = (String) parentContextMap.get("fileOnt");
			}
			if (parentContextMap.containsKey("MDRUsername")) {
				context.MDRUsername = (String) parentContextMap
						.get("MDRUsername");
			}
			if (parentContextMap.containsKey("folderTemp")) {
				context.folderTemp = (String) parentContextMap
						.get("folderTemp");
			}
			if (parentContextMap.containsKey("MDRBaseURL")) {
				context.MDRBaseURL = (String) parentContextMap
						.get("MDRBaseURL");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("MDRPassword");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputJSON_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON_2) {
			globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", -1);

			e_tFileInputJSON_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : MDR_Query_DataElements");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 510637 characters generated by Talend Open Studio for Data Integration on the
 * March 16, 2015 9:30:34 AM CET
 ************************************************************************************************/
